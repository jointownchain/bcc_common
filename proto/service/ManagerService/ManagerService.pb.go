// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: ManagerService.proto

package ManagerService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Symbols defined in public import of google/protobuf/timestamp.proto.

type Timestamp = timestamppb.Timestamp

// Symbols defined in public import of google/protobuf/any.proto.

type Any = anypb.Any

type Page struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber int64 `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber"`
	PageSize   int64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize"`
}

func (x *Page) Reset() {
	*x = Page{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Page) ProtoMessage() {}

func (x *Page) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Page.ProtoReflect.Descriptor instead.
func (*Page) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{0}
}

func (x *Page) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *Page) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

//药品列表
type MedicineListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineName string `protobuf:"bytes,1,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode string `protobuf:"bytes,2,opt,name=medicineCode,proto3" json:"medicineCode"`
	TagId        int64  `protobuf:"varint,3,opt,name=tagId,proto3" json:"tagId"`
	Manufacturer string `protobuf:"bytes,4,opt,name=manufacturer,proto3" json:"manufacturer"`
	Page         *Page  `protobuf:"bytes,5,opt,name=page,proto3" json:"page"`
	ManagerId    int64  `protobuf:"varint,6,opt,name=managerId,proto3" json:"managerId"`
}

func (x *MedicineListReq) Reset() {
	*x = MedicineListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineListReq) ProtoMessage() {}

func (x *MedicineListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineListReq.ProtoReflect.Descriptor instead.
func (*MedicineListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{1}
}

func (x *MedicineListReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *MedicineListReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *MedicineListReq) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *MedicineListReq) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *MedicineListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *MedicineListReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type MedicineListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*MedicineListVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64             `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64             `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *MedicineListResp) Reset() {
	*x = MedicineListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineListResp) ProtoMessage() {}

func (x *MedicineListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineListResp.ProtoReflect.Descriptor instead.
func (*MedicineListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{2}
}

func (x *MedicineListResp) GetList() []*MedicineListVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *MedicineListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MedicineListResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *MedicineListResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type MedicineListVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineId            int64                  `protobuf:"varint,1,opt,name=medicineId,proto3" json:"medicineId"`
	MedicineName          string                 `protobuf:"bytes,2,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string                 `protobuf:"bytes,3,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineSpecification string                 `protobuf:"bytes,4,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	MedicineForm          string                 `protobuf:"bytes,5,opt,name=medicineForm,proto3" json:"medicineForm"`
	MedicinePackage       string                 `protobuf:"bytes,6,opt,name=medicinePackage,proto3" json:"medicinePackage"`
	CalculateRate         int64                  `protobuf:"varint,7,opt,name=calculateRate,proto3" json:"calculateRate"`
	Manufacturer          string                 `protobuf:"bytes,8,opt,name=manufacturer,proto3" json:"manufacturer"`
	CreatedAt             *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=createdAt,proto3" json:"createdAt"`
	MedicineUnit          string                 `protobuf:"bytes,10,opt,name=medicineUnit,proto3" json:"medicineUnit"`
	HashInfo              string                 `protobuf:"bytes,11,opt,name=hashInfo,proto3" json:"hashInfo"`
	TagName               string                 `protobuf:"bytes,12,opt,name=tagName,proto3" json:"tagName"`
	ActiveStatus          string                 `protobuf:"bytes,13,opt,name=activeStatus,proto3" json:"activeStatus"`
}

func (x *MedicineListVo) Reset() {
	*x = MedicineListVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineListVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineListVo) ProtoMessage() {}

func (x *MedicineListVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineListVo.ProtoReflect.Descriptor instead.
func (*MedicineListVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{3}
}

func (x *MedicineListVo) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *MedicineListVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *MedicineListVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *MedicineListVo) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *MedicineListVo) GetMedicineForm() string {
	if x != nil {
		return x.MedicineForm
	}
	return ""
}

func (x *MedicineListVo) GetMedicinePackage() string {
	if x != nil {
		return x.MedicinePackage
	}
	return ""
}

func (x *MedicineListVo) GetCalculateRate() int64 {
	if x != nil {
		return x.CalculateRate
	}
	return 0
}

func (x *MedicineListVo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *MedicineListVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MedicineListVo) GetMedicineUnit() string {
	if x != nil {
		return x.MedicineUnit
	}
	return ""
}

func (x *MedicineListVo) GetHashInfo() string {
	if x != nil {
		return x.HashInfo
	}
	return ""
}

func (x *MedicineListVo) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *MedicineListVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

//药品列表用于查询 通用接口
type MedicineListForQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineName string `protobuf:"bytes,1,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode string `protobuf:"bytes,2,opt,name=medicineCode,proto3" json:"medicineCode"`
	ManagerId    int64  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
	Page         *Page  `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
	ActiveStatus string `protobuf:"bytes,5,opt,name=activeStatus,proto3" json:"activeStatus"`
}

func (x *MedicineListForQueryReq) Reset() {
	*x = MedicineListForQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineListForQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineListForQueryReq) ProtoMessage() {}

func (x *MedicineListForQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineListForQueryReq.ProtoReflect.Descriptor instead.
func (*MedicineListForQueryReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{4}
}

func (x *MedicineListForQueryReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *MedicineListForQueryReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *MedicineListForQueryReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *MedicineListForQueryReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *MedicineListForQueryReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

type MedicineListForQueryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*MedicineListVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64             `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64             `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *MedicineListForQueryResp) Reset() {
	*x = MedicineListForQueryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineListForQueryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineListForQueryResp) ProtoMessage() {}

func (x *MedicineListForQueryResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineListForQueryResp.ProtoReflect.Descriptor instead.
func (*MedicineListForQueryResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{5}
}

func (x *MedicineListForQueryResp) GetList() []*MedicineListVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *MedicineListForQueryResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MedicineListForQueryResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *MedicineListForQueryResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type MedicineListForQueryVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineId   int64  `protobuf:"varint,1,opt,name=medicineId,proto3" json:"medicineId"`
	MedicineName string `protobuf:"bytes,2,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode string `protobuf:"bytes,3,opt,name=medicineCode,proto3" json:"medicineCode"`
}

func (x *MedicineListForQueryVo) Reset() {
	*x = MedicineListForQueryVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineListForQueryVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineListForQueryVo) ProtoMessage() {}

func (x *MedicineListForQueryVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineListForQueryVo.ProtoReflect.Descriptor instead.
func (*MedicineListForQueryVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{6}
}

func (x *MedicineListForQueryVo) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *MedicineListForQueryVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *MedicineListForQueryVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

//联行号查询 通用接口
type CommonListCnapsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankName  string `protobuf:"bytes,1,opt,name=bankName,proto3" json:"bankName"`
	Cnap      string `protobuf:"bytes,2,opt,name=cnap,proto3" json:"cnap"`
	ManagerId int64  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
	Page      *Page  `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
}

func (x *CommonListCnapsReq) Reset() {
	*x = CommonListCnapsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonListCnapsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonListCnapsReq) ProtoMessage() {}

func (x *CommonListCnapsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonListCnapsReq.ProtoReflect.Descriptor instead.
func (*CommonListCnapsReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{7}
}

func (x *CommonListCnapsReq) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *CommonListCnapsReq) GetCnap() string {
	if x != nil {
		return x.Cnap
	}
	return ""
}

func (x *CommonListCnapsReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CommonListCnapsReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type CnapsListVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CnapId   int64  `protobuf:"varint,1,opt,name=cnapId,proto3" json:"cnapId"`
	Cnap     string `protobuf:"bytes,2,opt,name=cnap,proto3" json:"cnap"`
	BankName string `protobuf:"bytes,3,opt,name=bankName,proto3" json:"bankName"`
	Address  string `protobuf:"bytes,4,opt,name=address,proto3" json:"address"`
}

func (x *CnapsListVo) Reset() {
	*x = CnapsListVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CnapsListVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CnapsListVo) ProtoMessage() {}

func (x *CnapsListVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CnapsListVo.ProtoReflect.Descriptor instead.
func (*CnapsListVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{8}
}

func (x *CnapsListVo) GetCnapId() int64 {
	if x != nil {
		return x.CnapId
	}
	return 0
}

func (x *CnapsListVo) GetCnap() string {
	if x != nil {
		return x.Cnap
	}
	return ""
}

func (x *CnapsListVo) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *CnapsListVo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type CommonListCnapsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*CnapsListVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64          `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64          `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *CommonListCnapsResp) Reset() {
	*x = CommonListCnapsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonListCnapsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonListCnapsResp) ProtoMessage() {}

func (x *CommonListCnapsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonListCnapsResp.ProtoReflect.Descriptor instead.
func (*CommonListCnapsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{9}
}

func (x *CommonListCnapsResp) GetList() []*CnapsListVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CommonListCnapsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CommonListCnapsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CommonListCnapsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

//标签查询 通用接口
type CommonListTagReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagType   string `protobuf:"bytes,1,opt,name=tagType,proto3" json:"tagType"`
	TagName   string `protobuf:"bytes,2,opt,name=tagName,proto3" json:"tagName"`
	ManagerId int64  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
	Page      *Page  `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
}

func (x *CommonListTagReq) Reset() {
	*x = CommonListTagReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonListTagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonListTagReq) ProtoMessage() {}

func (x *CommonListTagReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonListTagReq.ProtoReflect.Descriptor instead.
func (*CommonListTagReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{10}
}

func (x *CommonListTagReq) GetTagType() string {
	if x != nil {
		return x.TagType
	}
	return ""
}

func (x *CommonListTagReq) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *CommonListTagReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CommonListTagReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type CommonListTagResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*CommonListTagVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64              `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64              `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64              `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *CommonListTagResp) Reset() {
	*x = CommonListTagResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonListTagResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonListTagResp) ProtoMessage() {}

func (x *CommonListTagResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonListTagResp.ProtoReflect.Descriptor instead.
func (*CommonListTagResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{11}
}

func (x *CommonListTagResp) GetList() []*CommonListTagVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CommonListTagResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CommonListTagResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CommonListTagResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type CommonListTagVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId   int64  `protobuf:"varint,1,opt,name=tagId,proto3" json:"tagId"`
	TagName string `protobuf:"bytes,2,opt,name=tagName,proto3" json:"tagName"`
}

func (x *CommonListTagVo) Reset() {
	*x = CommonListTagVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonListTagVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonListTagVo) ProtoMessage() {}

func (x *CommonListTagVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonListTagVo.ProtoReflect.Descriptor instead.
func (*CommonListTagVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{12}
}

func (x *CommonListTagVo) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *CommonListTagVo) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

//创建药品
type CreateMedicineReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineName          string `protobuf:"bytes,1,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string `protobuf:"bytes,2,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineSpecification string `protobuf:"bytes,3,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	MedicineForm          string `protobuf:"bytes,4,opt,name=medicineForm,proto3" json:"medicineForm"`
	MedicinePackage       string `protobuf:"bytes,5,opt,name=medicinePackage,proto3" json:"medicinePackage"`
	CalculateRate         int64  `protobuf:"varint,6,opt,name=calculateRate,proto3" json:"calculateRate"`
	Manufacturer          string `protobuf:"bytes,7,opt,name=manufacturer,proto3" json:"manufacturer"`
	MedicineUnit          string `protobuf:"bytes,8,opt,name=medicineUnit,proto3" json:"medicineUnit"`
	ManagerId             int64  `protobuf:"varint,9,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateMedicineReq) Reset() {
	*x = CreateMedicineReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMedicineReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMedicineReq) ProtoMessage() {}

func (x *CreateMedicineReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMedicineReq.ProtoReflect.Descriptor instead.
func (*CreateMedicineReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{13}
}

func (x *CreateMedicineReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *CreateMedicineReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *CreateMedicineReq) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *CreateMedicineReq) GetMedicineForm() string {
	if x != nil {
		return x.MedicineForm
	}
	return ""
}

func (x *CreateMedicineReq) GetMedicinePackage() string {
	if x != nil {
		return x.MedicinePackage
	}
	return ""
}

func (x *CreateMedicineReq) GetCalculateRate() int64 {
	if x != nil {
		return x.CalculateRate
	}
	return 0
}

func (x *CreateMedicineReq) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *CreateMedicineReq) GetMedicineUnit() string {
	if x != nil {
		return x.MedicineUnit
	}
	return ""
}

func (x *CreateMedicineReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CreateMedicineResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateMedicineResp) Reset() {
	*x = CreateMedicineResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMedicineResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMedicineResp) ProtoMessage() {}

func (x *CreateMedicineResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMedicineResp.ProtoReflect.Descriptor instead.
func (*CreateMedicineResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{14}
}

func (x *CreateMedicineResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//批量创建药品
type CreateBatchMedicineReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List      []*CreateMedicineReq `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	ManagerId int64                `protobuf:"varint,9,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateBatchMedicineReq) Reset() {
	*x = CreateBatchMedicineReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBatchMedicineReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBatchMedicineReq) ProtoMessage() {}

func (x *CreateBatchMedicineReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBatchMedicineReq.ProtoReflect.Descriptor instead.
func (*CreateBatchMedicineReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{15}
}

func (x *CreateBatchMedicineReq) GetList() []*CreateMedicineReq {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CreateBatchMedicineReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CreateBatchMedicineResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateBatchMedicineResp) Reset() {
	*x = CreateBatchMedicineResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBatchMedicineResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBatchMedicineResp) ProtoMessage() {}

func (x *CreateBatchMedicineResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBatchMedicineResp.ProtoReflect.Descriptor instead.
func (*CreateBatchMedicineResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{16}
}

func (x *CreateBatchMedicineResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//编辑药品
type UpdateMedicineReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineId            int64  `protobuf:"varint,1,opt,name=medicineId,proto3" json:"medicineId"`
	MedicineName          string `protobuf:"bytes,2,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string `protobuf:"bytes,3,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineSpecification string `protobuf:"bytes,4,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	MedicineForm          string `protobuf:"bytes,5,opt,name=medicineForm,proto3" json:"medicineForm"`
	MedicinePackage       string `protobuf:"bytes,6,opt,name=medicinePackage,proto3" json:"medicinePackage"`
	CalculateRate         int64  `protobuf:"varint,7,opt,name=calculateRate,proto3" json:"calculateRate"`
	Manufacturer          string `protobuf:"bytes,8,opt,name=manufacturer,proto3" json:"manufacturer"`
	MedicineUnit          string `protobuf:"bytes,9,opt,name=medicineUnit,proto3" json:"medicineUnit"`
	ManagerId             int64  `protobuf:"varint,10,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UpdateMedicineReq) Reset() {
	*x = UpdateMedicineReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMedicineReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMedicineReq) ProtoMessage() {}

func (x *UpdateMedicineReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMedicineReq.ProtoReflect.Descriptor instead.
func (*UpdateMedicineReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateMedicineReq) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *UpdateMedicineReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *UpdateMedicineReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *UpdateMedicineReq) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *UpdateMedicineReq) GetMedicineForm() string {
	if x != nil {
		return x.MedicineForm
	}
	return ""
}

func (x *UpdateMedicineReq) GetMedicinePackage() string {
	if x != nil {
		return x.MedicinePackage
	}
	return ""
}

func (x *UpdateMedicineReq) GetCalculateRate() int64 {
	if x != nil {
		return x.CalculateRate
	}
	return 0
}

func (x *UpdateMedicineReq) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *UpdateMedicineReq) GetMedicineUnit() string {
	if x != nil {
		return x.MedicineUnit
	}
	return ""
}

func (x *UpdateMedicineReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UpdateMedicineResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateMedicineResp) Reset() {
	*x = UpdateMedicineResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMedicineResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMedicineResp) ProtoMessage() {}

func (x *UpdateMedicineResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMedicineResp.ProtoReflect.Descriptor instead.
func (*UpdateMedicineResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateMedicineResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//编辑药品生效状态
type UpdateMedicineActiveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineId   int64  `protobuf:"varint,1,opt,name=medicineId,proto3" json:"medicineId"`
	ActiveStatus string `protobuf:"bytes,2,opt,name=activeStatus,proto3" json:"activeStatus"`
	ManagerId    int64  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
	InfoHash     string `protobuf:"bytes,4,opt,name=infoHash,proto3" json:"infoHash"`
}

func (x *UpdateMedicineActiveReq) Reset() {
	*x = UpdateMedicineActiveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMedicineActiveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMedicineActiveReq) ProtoMessage() {}

func (x *UpdateMedicineActiveReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMedicineActiveReq.ProtoReflect.Descriptor instead.
func (*UpdateMedicineActiveReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateMedicineActiveReq) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *UpdateMedicineActiveReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *UpdateMedicineActiveReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *UpdateMedicineActiveReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

type UpdateMedicineActiveResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=Result,proto3" json:"Result"`
}

func (x *UpdateMedicineActiveResp) Reset() {
	*x = UpdateMedicineActiveResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMedicineActiveResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMedicineActiveResp) ProtoMessage() {}

func (x *UpdateMedicineActiveResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMedicineActiveResp.ProtoReflect.Descriptor instead.
func (*UpdateMedicineActiveResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateMedicineActiveResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//删除药品
type DeleteMedicineReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineCode string `protobuf:"bytes,1,opt,name=medicineCode,proto3" json:"medicineCode"`
	ManagerId    int64  `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *DeleteMedicineReq) Reset() {
	*x = DeleteMedicineReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMedicineReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMedicineReq) ProtoMessage() {}

func (x *DeleteMedicineReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMedicineReq.ProtoReflect.Descriptor instead.
func (*DeleteMedicineReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteMedicineReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *DeleteMedicineReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type DeleteMedicineResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=Result,proto3" json:"Result"`
}

func (x *DeleteMedicineResp) Reset() {
	*x = DeleteMedicineResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMedicineResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMedicineResp) ProtoMessage() {}

func (x *DeleteMedicineResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMedicineResp.ProtoReflect.Descriptor instead.
func (*DeleteMedicineResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteMedicineResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//根据药品id查询tagName字符串组
type SelectTagByMedicineIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineId int64 `protobuf:"varint,1,opt,name=medicineId,proto3" json:"medicineId"`
	ManagerId  int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *SelectTagByMedicineIdReq) Reset() {
	*x = SelectTagByMedicineIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectTagByMedicineIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectTagByMedicineIdReq) ProtoMessage() {}

func (x *SelectTagByMedicineIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectTagByMedicineIdReq.ProtoReflect.Descriptor instead.
func (*SelectTagByMedicineIdReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{23}
}

func (x *SelectTagByMedicineIdReq) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *SelectTagByMedicineIdReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type SelectTagByMedicineIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagNames string `protobuf:"bytes,1,opt,name=tagNames,proto3" json:"tagNames"`
}

func (x *SelectTagByMedicineIdResp) Reset() {
	*x = SelectTagByMedicineIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectTagByMedicineIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectTagByMedicineIdResp) ProtoMessage() {}

func (x *SelectTagByMedicineIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectTagByMedicineIdResp.ProtoReflect.Descriptor instead.
func (*SelectTagByMedicineIdResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{24}
}

func (x *SelectTagByMedicineIdResp) GetTagNames() string {
	if x != nil {
		return x.TagNames
	}
	return ""
}

//根据药品names查询药品列表信息
type SelectInfoByMedicineNamesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineNames []string `protobuf:"bytes,1,rep,name=medicineNames,proto3" json:"medicineNames"`
	ManagerId     int64    `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *SelectInfoByMedicineNamesReq) Reset() {
	*x = SelectInfoByMedicineNamesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectInfoByMedicineNamesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectInfoByMedicineNamesReq) ProtoMessage() {}

func (x *SelectInfoByMedicineNamesReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectInfoByMedicineNamesReq.ProtoReflect.Descriptor instead.
func (*SelectInfoByMedicineNamesReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{25}
}

func (x *SelectInfoByMedicineNamesReq) GetMedicineNames() []string {
	if x != nil {
		return x.MedicineNames
	}
	return nil
}

func (x *SelectInfoByMedicineNamesReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type SelectInfoByMedicineNamesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MedicineListForQueryVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
}

func (x *SelectInfoByMedicineNamesResp) Reset() {
	*x = SelectInfoByMedicineNamesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectInfoByMedicineNamesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectInfoByMedicineNamesResp) ProtoMessage() {}

func (x *SelectInfoByMedicineNamesResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectInfoByMedicineNamesResp.ProtoReflect.Descriptor instead.
func (*SelectInfoByMedicineNamesResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{26}
}

func (x *SelectInfoByMedicineNamesResp) GetList() []*MedicineListForQueryVo {
	if x != nil {
		return x.List
	}
	return nil
}

//查询标签列表
type TagListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagType   string `protobuf:"bytes,1,opt,name=tagType,proto3" json:"tagType"`
	ManagerId int64  `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
	TagName   string `protobuf:"bytes,3,opt,name=tagName,proto3" json:"tagName"`
	Page      *Page  `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
}

func (x *TagListReq) Reset() {
	*x = TagListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagListReq) ProtoMessage() {}

func (x *TagListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagListReq.ProtoReflect.Descriptor instead.
func (*TagListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{27}
}

func (x *TagListReq) GetTagType() string {
	if x != nil {
		return x.TagType
	}
	return ""
}

func (x *TagListReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *TagListReq) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *TagListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type TagListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*TagListVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64        `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64        `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64        `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *TagListResp) Reset() {
	*x = TagListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagListResp) ProtoMessage() {}

func (x *TagListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagListResp.ProtoReflect.Descriptor instead.
func (*TagListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{28}
}

func (x *TagListResp) GetList() []*TagListVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *TagListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TagListResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *TagListResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type TagListVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId   int64  `protobuf:"varint,1,opt,name=tagId,proto3" json:"tagId"`
	TagName string `protobuf:"bytes,2,opt,name=tagName,proto3" json:"tagName"`
	TagType string `protobuf:"bytes,3,opt,name=tagType,proto3" json:"tagType"`
}

func (x *TagListVo) Reset() {
	*x = TagListVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagListVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagListVo) ProtoMessage() {}

func (x *TagListVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagListVo.ProtoReflect.Descriptor instead.
func (*TagListVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{29}
}

func (x *TagListVo) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *TagListVo) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *TagListVo) GetTagType() string {
	if x != nil {
		return x.TagType
	}
	return ""
}

//创建标签
type CreateTagReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagType   string `protobuf:"bytes,1,opt,name=tagType,proto3" json:"tagType"`
	TagName   string `protobuf:"bytes,2,opt,name=tagName,proto3" json:"tagName"`
	ManagerId int64  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateTagReq) Reset() {
	*x = CreateTagReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagReq) ProtoMessage() {}

func (x *CreateTagReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagReq.ProtoReflect.Descriptor instead.
func (*CreateTagReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{30}
}

func (x *CreateTagReq) GetTagType() string {
	if x != nil {
		return x.TagType
	}
	return ""
}

func (x *CreateTagReq) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *CreateTagReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CreateTagResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateTagResp) Reset() {
	*x = CreateTagResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTagResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagResp) ProtoMessage() {}

func (x *CreateTagResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagResp.ProtoReflect.Descriptor instead.
func (*CreateTagResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{31}
}

func (x *CreateTagResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//编辑标签
type UpdateTagReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId     int64  `protobuf:"varint,1,opt,name=tagId,proto3" json:"tagId"`
	TagName   string `protobuf:"bytes,2,opt,name=tagName,proto3" json:"tagName"`
	ManagerId int64  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UpdateTagReq) Reset() {
	*x = UpdateTagReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTagReq) ProtoMessage() {}

func (x *UpdateTagReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTagReq.ProtoReflect.Descriptor instead.
func (*UpdateTagReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateTagReq) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *UpdateTagReq) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *UpdateTagReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UpdateTagResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateTagResp) Reset() {
	*x = UpdateTagResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTagResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTagResp) ProtoMessage() {}

func (x *UpdateTagResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTagResp.ProtoReflect.Descriptor instead.
func (*UpdateTagResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateTagResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//删除标签
type DeleteTagReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId     int64 `protobuf:"varint,1,opt,name=tagId,proto3" json:"tagId"`
	ManagerId int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *DeleteTagReq) Reset() {
	*x = DeleteTagReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagReq) ProtoMessage() {}

func (x *DeleteTagReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagReq.ProtoReflect.Descriptor instead.
func (*DeleteTagReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteTagReq) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *DeleteTagReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type DeleteTagResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTagResp) Reset() {
	*x = DeleteTagResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagResp) ProtoMessage() {}

func (x *DeleteTagResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagResp.ProtoReflect.Descriptor instead.
func (*DeleteTagResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{35}
}

//查询标签详情列表
type TagDetailListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId     int64 `protobuf:"varint,1,opt,name=tagId,proto3" json:"tagId"`
	ManagerId int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
	Page      *Page `protobuf:"bytes,3,opt,name=page,proto3" json:"page"`
}

func (x *TagDetailListReq) Reset() {
	*x = TagDetailListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagDetailListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagDetailListReq) ProtoMessage() {}

func (x *TagDetailListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagDetailListReq.ProtoReflect.Descriptor instead.
func (*TagDetailListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{36}
}

func (x *TagDetailListReq) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *TagDetailListReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *TagDetailListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type TagDetailListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*TagDetailVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64          `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64          `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *TagDetailListResp) Reset() {
	*x = TagDetailListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagDetailListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagDetailListResp) ProtoMessage() {}

func (x *TagDetailListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagDetailListResp.ProtoReflect.Descriptor instead.
func (*TagDetailListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{37}
}

func (x *TagDetailListResp) GetList() []*TagDetailVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *TagDetailListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TagDetailListResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *TagDetailListResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type TagDetailVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineId            int64  `protobuf:"varint,1,opt,name=medicineId,proto3" json:"medicineId"`
	MedicineName          string `protobuf:"bytes,2,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string `protobuf:"bytes,3,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineUnit          string `protobuf:"bytes,4,opt,name=medicineUnit,proto3" json:"medicineUnit"`
	MedicineForm          string `protobuf:"bytes,5,opt,name=medicineForm,proto3" json:"medicineForm"`
	MedicineSpecification string `protobuf:"bytes,6,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	Manufacturer          string `protobuf:"bytes,7,opt,name=manufacturer,proto3" json:"manufacturer"`
}

func (x *TagDetailVo) Reset() {
	*x = TagDetailVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagDetailVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagDetailVo) ProtoMessage() {}

func (x *TagDetailVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagDetailVo.ProtoReflect.Descriptor instead.
func (*TagDetailVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{38}
}

func (x *TagDetailVo) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *TagDetailVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *TagDetailVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *TagDetailVo) GetMedicineUnit() string {
	if x != nil {
		return x.MedicineUnit
	}
	return ""
}

func (x *TagDetailVo) GetMedicineForm() string {
	if x != nil {
		return x.MedicineForm
	}
	return ""
}

func (x *TagDetailVo) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *TagDetailVo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

// 删除标签药品信息
type DeleteTagMedicineReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId      int64 `protobuf:"varint,1,opt,name=tagId,proto3" json:"tagId"`
	MedicineId int64 `protobuf:"varint,2,opt,name=medicineId,proto3" json:"medicineId"`
	ManagerId  int64 `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
}

func (x *DeleteTagMedicineReq) Reset() {
	*x = DeleteTagMedicineReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagMedicineReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagMedicineReq) ProtoMessage() {}

func (x *DeleteTagMedicineReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagMedicineReq.ProtoReflect.Descriptor instead.
func (*DeleteTagMedicineReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{39}
}

func (x *DeleteTagMedicineReq) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *DeleteTagMedicineReq) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *DeleteTagMedicineReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type DeleteTagMedicineResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *DeleteTagMedicineResp) Reset() {
	*x = DeleteTagMedicineResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagMedicineResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagMedicineResp) ProtoMessage() {}

func (x *DeleteTagMedicineResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagMedicineResp.ProtoReflect.Descriptor instead.
func (*DeleteTagMedicineResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{40}
}

func (x *DeleteTagMedicineResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//创建药品标签信息
type CreateTagMedicineReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId      int64 `protobuf:"varint,1,opt,name=tagId,proto3" json:"tagId"`
	MedicineId int64 `protobuf:"varint,2,opt,name=medicineId,proto3" json:"medicineId"`
	ManagerId  int64 `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateTagMedicineReq) Reset() {
	*x = CreateTagMedicineReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTagMedicineReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagMedicineReq) ProtoMessage() {}

func (x *CreateTagMedicineReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagMedicineReq.ProtoReflect.Descriptor instead.
func (*CreateTagMedicineReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{41}
}

func (x *CreateTagMedicineReq) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *CreateTagMedicineReq) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *CreateTagMedicineReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CreateTagMedicineResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateTagMedicineResp) Reset() {
	*x = CreateTagMedicineResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTagMedicineResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagMedicineResp) ProtoMessage() {}

func (x *CreateTagMedicineResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagMedicineResp.ProtoReflect.Descriptor instead.
func (*CreateTagMedicineResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{42}
}

func (x *CreateTagMedicineResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//查询药品列表信息（标签使用）
type CommonMedicineQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineCode string `protobuf:"bytes,1,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineName string `protobuf:"bytes,2,opt,name=medicineName,proto3" json:"medicineName"`
	TagId        int64  `protobuf:"varint,3,opt,name=tagId,proto3" json:"tagId"`
	ManagerId    int64  `protobuf:"varint,4,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CommonMedicineQueryReq) Reset() {
	*x = CommonMedicineQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonMedicineQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonMedicineQueryReq) ProtoMessage() {}

func (x *CommonMedicineQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonMedicineQueryReq.ProtoReflect.Descriptor instead.
func (*CommonMedicineQueryReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{43}
}

func (x *CommonMedicineQueryReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *CommonMedicineQueryReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *CommonMedicineQueryReq) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *CommonMedicineQueryReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CommonMedicineQueryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*TagMedicineVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
}

func (x *CommonMedicineQueryResp) Reset() {
	*x = CommonMedicineQueryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonMedicineQueryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonMedicineQueryResp) ProtoMessage() {}

func (x *CommonMedicineQueryResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonMedicineQueryResp.ProtoReflect.Descriptor instead.
func (*CommonMedicineQueryResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{44}
}

func (x *CommonMedicineQueryResp) GetList() []*TagMedicineVo {
	if x != nil {
		return x.List
	}
	return nil
}

type TagMedicineVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineId   int64  `protobuf:"varint,1,opt,name=medicineId,proto3" json:"medicineId"`
	MedicineName string `protobuf:"bytes,2,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode string `protobuf:"bytes,3,opt,name=medicineCode,proto3" json:"medicineCode"`
}

func (x *TagMedicineVo) Reset() {
	*x = TagMedicineVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagMedicineVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagMedicineVo) ProtoMessage() {}

func (x *TagMedicineVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagMedicineVo.ProtoReflect.Descriptor instead.
func (*TagMedicineVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{45}
}

func (x *TagMedicineVo) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *TagMedicineVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *TagMedicineVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

//医疗机构列表
type ListMiReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiCode      string  `protobuf:"bytes,1,opt,name=miCode,proto3" json:"miCode"`
	MiName      string  `protobuf:"bytes,2,opt,name=miName,proto3" json:"miName"`
	ValidStatus string  `protobuf:"bytes,3,opt,name=validStatus,proto3" json:"validStatus"`
	Page        *Page   `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
	ManagerId   int64   `protobuf:"varint,5,opt,name=managerId,proto3" json:"managerId"`
	MiIds       []int64 `protobuf:"varint,6,rep,packed,name=miIds,proto3" json:"miIds"`
	Province    string  `protobuf:"bytes,7,opt,name=province,proto3" json:"province"`
	City        string  `protobuf:"bytes,8,opt,name=city,proto3" json:"city"`
}

func (x *ListMiReq) Reset() {
	*x = ListMiReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMiReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMiReq) ProtoMessage() {}

func (x *ListMiReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMiReq.ProtoReflect.Descriptor instead.
func (*ListMiReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{46}
}

func (x *ListMiReq) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ListMiReq) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ListMiReq) GetValidStatus() string {
	if x != nil {
		return x.ValidStatus
	}
	return ""
}

func (x *ListMiReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListMiReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListMiReq) GetMiIds() []int64 {
	if x != nil {
		return x.MiIds
	}
	return nil
}

func (x *ListMiReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ListMiReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

type ListMiResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ListMiVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64       `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64       `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64       `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListMiResp) Reset() {
	*x = ListMiResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMiResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMiResp) ProtoMessage() {}

func (x *ListMiResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMiResp.ProtoReflect.Descriptor instead.
func (*ListMiResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{47}
}

func (x *ListMiResp) GetList() []*ListMiVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListMiResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListMiResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMiResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ListMiVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiId         int64                  `protobuf:"varint,1,opt,name=miId,proto3" json:"miId"`
	MiCode       string                 `protobuf:"bytes,2,opt,name=miCode,proto3" json:"miCode"`
	MiName       string                 `protobuf:"bytes,3,opt,name=miName,proto3" json:"miName"`
	MiType       string                 `protobuf:"bytes,4,opt,name=miType,proto3" json:"miType"`
	ManagerName  string                 `protobuf:"bytes,5,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone string                 `protobuf:"bytes,6,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province     string                 `protobuf:"bytes,7,opt,name=province,proto3" json:"province"`
	City         string                 `protobuf:"bytes,8,opt,name=city,proto3" json:"city"`
	Zone         string                 `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone"`
	HashInfo     string                 `protobuf:"bytes,10,opt,name=hashInfo,proto3" json:"hashInfo"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=createdAt,proto3" json:"createdAt"`
	LogoUrl      string                 `protobuf:"bytes,12,opt,name=logoUrl,proto3" json:"logoUrl"`
}

func (x *ListMiVo) Reset() {
	*x = ListMiVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMiVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMiVo) ProtoMessage() {}

func (x *ListMiVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMiVo.ProtoReflect.Descriptor instead.
func (*ListMiVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{48}
}

func (x *ListMiVo) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *ListMiVo) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ListMiVo) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ListMiVo) GetMiType() string {
	if x != nil {
		return x.MiType
	}
	return ""
}

func (x *ListMiVo) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *ListMiVo) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *ListMiVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ListMiVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ListMiVo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ListMiVo) GetHashInfo() string {
	if x != nil {
		return x.HashInfo
	}
	return ""
}

func (x *ListMiVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListMiVo) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

//查询医疗机构 通用接口
type CommonMIReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiName       string `protobuf:"bytes,1,opt,name=miName,proto3" json:"miName"`
	MiCode       string `protobuf:"bytes,2,opt,name=miCode,proto3" json:"miCode"`
	ManagerId    int64  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
	Page         *Page  `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
	ActiveStatus string `protobuf:"bytes,5,opt,name=activeStatus,proto3" json:"activeStatus"`
}

func (x *CommonMIReq) Reset() {
	*x = CommonMIReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonMIReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonMIReq) ProtoMessage() {}

func (x *CommonMIReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonMIReq.ProtoReflect.Descriptor instead.
func (*CommonMIReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{49}
}

func (x *CommonMIReq) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *CommonMIReq) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *CommonMIReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CommonMIReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *CommonMIReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

type CommonMIInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiId      int64 `protobuf:"varint,1,opt,name=miId,proto3" json:"miId"`
	ManagerId int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
	Page      *Page `protobuf:"bytes,3,opt,name=page,proto3" json:"page"`
}

func (x *CommonMIInfoReq) Reset() {
	*x = CommonMIInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonMIInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonMIInfoReq) ProtoMessage() {}

func (x *CommonMIInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonMIInfoReq.ProtoReflect.Descriptor instead.
func (*CommonMIInfoReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{50}
}

func (x *CommonMIInfoReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *CommonMIInfoReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CommonMIInfoReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type CommonMIResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*CommonMIVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64         `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64         `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64         `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *CommonMIResp) Reset() {
	*x = CommonMIResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonMIResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonMIResp) ProtoMessage() {}

func (x *CommonMIResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonMIResp.ProtoReflect.Descriptor instead.
func (*CommonMIResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{51}
}

func (x *CommonMIResp) GetList() []*CommonMIVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CommonMIResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CommonMIResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CommonMIResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type CommonMIInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*CommonMIInfoVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64             `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64             `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *CommonMIInfoResp) Reset() {
	*x = CommonMIInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonMIInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonMIInfoResp) ProtoMessage() {}

func (x *CommonMIInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonMIInfoResp.ProtoReflect.Descriptor instead.
func (*CommonMIInfoResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{52}
}

func (x *CommonMIInfoResp) GetList() []*CommonMIInfoVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CommonMIInfoResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CommonMIInfoResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CommonMIInfoResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type CommonMIVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiId   int64  `protobuf:"varint,1,opt,name=miId,proto3" json:"miId"`
	MiName string `protobuf:"bytes,2,opt,name=miName,proto3" json:"miName"`
	MiCode string `protobuf:"bytes,3,opt,name=miCode,proto3" json:"miCode"`
}

func (x *CommonMIVo) Reset() {
	*x = CommonMIVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonMIVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonMIVo) ProtoMessage() {}

func (x *CommonMIVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonMIVo.ProtoReflect.Descriptor instead.
func (*CommonMIVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{53}
}

func (x *CommonMIVo) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *CommonMIVo) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *CommonMIVo) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

type CommonMIInfoVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiId    int64  `protobuf:"varint,1,opt,name=miId,proto3" json:"miId"`
	MiName  string `protobuf:"bytes,2,opt,name=miName,proto3" json:"miName"`
	MiCode  string `protobuf:"bytes,3,opt,name=miCode,proto3" json:"miCode"`
	LogoUrl string `protobuf:"bytes,4,opt,name=logoUrl,proto3" json:"logoUrl"`
}

func (x *CommonMIInfoVo) Reset() {
	*x = CommonMIInfoVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonMIInfoVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonMIInfoVo) ProtoMessage() {}

func (x *CommonMIInfoVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonMIInfoVo.ProtoReflect.Descriptor instead.
func (*CommonMIInfoVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{54}
}

func (x *CommonMIInfoVo) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *CommonMIInfoVo) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *CommonMIInfoVo) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *CommonMIInfoVo) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

//创建医疗机构信息(主体信息)
type CreateOneMIReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiName       string `protobuf:"bytes,1,opt,name=miName,proto3" json:"miName"`
	MiCode       string `protobuf:"bytes,2,opt,name=miCode,proto3" json:"miCode"`
	MiType       string `protobuf:"bytes,3,opt,name=miType,proto3" json:"miType"`
	ManagerName  string `protobuf:"bytes,4,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone string `protobuf:"bytes,5,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province     string `protobuf:"bytes,6,opt,name=province,proto3" json:"province"`
	City         string `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`
	Zone         string `protobuf:"bytes,8,opt,name=zone,proto3" json:"zone"`
	ManagerId    int64  `protobuf:"varint,9,opt,name=managerId,proto3" json:"managerId"`
	InfoHash     string `protobuf:"bytes,10,opt,name=infoHash,proto3" json:"infoHash"`
}

func (x *CreateOneMIReq) Reset() {
	*x = CreateOneMIReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneMIReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneMIReq) ProtoMessage() {}

func (x *CreateOneMIReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneMIReq.ProtoReflect.Descriptor instead.
func (*CreateOneMIReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{55}
}

func (x *CreateOneMIReq) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *CreateOneMIReq) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *CreateOneMIReq) GetMiType() string {
	if x != nil {
		return x.MiType
	}
	return ""
}

func (x *CreateOneMIReq) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *CreateOneMIReq) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *CreateOneMIReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *CreateOneMIReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CreateOneMIReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *CreateOneMIReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CreateOneMIReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

type CreateOneMIResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateOneMIResp) Reset() {
	*x = CreateOneMIResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneMIResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneMIResp) ProtoMessage() {}

func (x *CreateOneMIResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneMIResp.ProtoReflect.Descriptor instead.
func (*CreateOneMIResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{56}
}

func (x *CreateOneMIResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//更新医疗机构信息
type UpdateMiReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiId         int64  `protobuf:"varint,1,opt,name=miId,proto3" json:"miId"`
	MiName       string `protobuf:"bytes,2,opt,name=miName,proto3" json:"miName"`
	MiType       string `protobuf:"bytes,3,opt,name=miType,proto3" json:"miType"`
	ManagerName  string `protobuf:"bytes,4,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone string `protobuf:"bytes,5,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province     string `protobuf:"bytes,6,opt,name=province,proto3" json:"province"`
	City         string `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`
	Zone         string `protobuf:"bytes,8,opt,name=zone,proto3" json:"zone"`
	ManagerId    int64  `protobuf:"varint,9,opt,name=managerId,proto3" json:"managerId"`
	InfoHash     string `protobuf:"bytes,10,opt,name=infoHash,proto3" json:"infoHash"`
}

func (x *UpdateMiReq) Reset() {
	*x = UpdateMiReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMiReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMiReq) ProtoMessage() {}

func (x *UpdateMiReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMiReq.ProtoReflect.Descriptor instead.
func (*UpdateMiReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{57}
}

func (x *UpdateMiReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *UpdateMiReq) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *UpdateMiReq) GetMiType() string {
	if x != nil {
		return x.MiType
	}
	return ""
}

func (x *UpdateMiReq) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *UpdateMiReq) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *UpdateMiReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *UpdateMiReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UpdateMiReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *UpdateMiReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *UpdateMiReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

type UpdateMiResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateMiResp) Reset() {
	*x = UpdateMiResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMiResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMiResp) ProtoMessage() {}

func (x *UpdateMiResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMiResp.ProtoReflect.Descriptor instead.
func (*UpdateMiResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{58}
}

func (x *UpdateMiResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//配送企业通用查询
type CommonCompanyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyName  string `protobuf:"bytes,1,opt,name=companyName,proto3" json:"companyName"`
	CompanyCode  string `protobuf:"bytes,2,opt,name=companyCode,proto3" json:"companyCode"`
	CompanyId    int64  `protobuf:"varint,3,opt,name=companyId,proto3" json:"companyId"`
	ManagerId    int64  `protobuf:"varint,4,opt,name=managerId,proto3" json:"managerId"`
	Page         *Page  `protobuf:"bytes,5,opt,name=page,proto3" json:"page"`
	ActiveStatus string `protobuf:"bytes,6,opt,name=activeStatus,proto3" json:"activeStatus"`
}

func (x *CommonCompanyReq) Reset() {
	*x = CommonCompanyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonCompanyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonCompanyReq) ProtoMessage() {}

func (x *CommonCompanyReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonCompanyReq.ProtoReflect.Descriptor instead.
func (*CommonCompanyReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{59}
}

func (x *CommonCompanyReq) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *CommonCompanyReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *CommonCompanyReq) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *CommonCompanyReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CommonCompanyReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *CommonCompanyReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

type CommonCompanyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*CommonCompanyVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64              `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64              `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64              `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *CommonCompanyResp) Reset() {
	*x = CommonCompanyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonCompanyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonCompanyResp) ProtoMessage() {}

func (x *CommonCompanyResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonCompanyResp.ProtoReflect.Descriptor instead.
func (*CommonCompanyResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{60}
}

func (x *CommonCompanyResp) GetList() []*CommonCompanyVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CommonCompanyResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CommonCompanyResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CommonCompanyResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type CommonCompanyVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId   int64  `protobuf:"varint,1,opt,name=companyId,proto3" json:"companyId"`
	CompanyName string `protobuf:"bytes,2,opt,name=companyName,proto3" json:"companyName"`
	CompanyCode string `protobuf:"bytes,3,opt,name=companyCode,proto3" json:"companyCode"`
	LogoUrl     string `protobuf:"bytes,4,opt,name=logoUrl,proto3" json:"logoUrl"`
}

func (x *CommonCompanyVo) Reset() {
	*x = CommonCompanyVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonCompanyVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonCompanyVo) ProtoMessage() {}

func (x *CommonCompanyVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonCompanyVo.ProtoReflect.Descriptor instead.
func (*CommonCompanyVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{61}
}

func (x *CommonCompanyVo) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *CommonCompanyVo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *CommonCompanyVo) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *CommonCompanyVo) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

type CompanyInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*CompanyInfoVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64            `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64            `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64            `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *CompanyInfoResp) Reset() {
	*x = CompanyInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyInfoResp) ProtoMessage() {}

func (x *CompanyInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyInfoResp.ProtoReflect.Descriptor instead.
func (*CompanyInfoResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{62}
}

func (x *CompanyInfoResp) GetList() []*CompanyInfoVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CompanyInfoResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CompanyInfoResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CompanyInfoResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type CompanyInfoVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId          int64                  `protobuf:"varint,1,opt,name=companyId,proto3" json:"companyId"`
	CompanyCode        string                 `protobuf:"bytes,2,opt,name=companyCode,proto3" json:"companyCode"`
	CompanyName        string                 `protobuf:"bytes,3,opt,name=companyName,proto3" json:"companyName"`
	ManagerName        string                 `protobuf:"bytes,4,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone       string                 `protobuf:"bytes,5,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province           string                 `protobuf:"bytes,6,opt,name=province,proto3" json:"province"`
	City               string                 `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`
	Zone               string                 `protobuf:"bytes,8,opt,name=zone,proto3" json:"zone"`
	BankAccountId      string                 `protobuf:"bytes,9,opt,name=bankAccountId,proto3" json:"bankAccountId"`
	SpecialCardOwner   string                 `protobuf:"bytes,10,opt,name=specialCardOwner,proto3" json:"specialCardOwner"`
	SpecialToibkn      string                 `protobuf:"bytes,11,opt,name=specialToibkn,proto3" json:"specialToibkn"`
	SpecialBank        string                 `protobuf:"bytes,12,opt,name=specialBank,proto3" json:"specialBank"`
	SpecialCardNo      string                 `protobuf:"bytes,13,opt,name=specialCardNo,proto3" json:"specialCardNo"`
	SpecialCardStatus  string                 `protobuf:"bytes,14,opt,name=specialCardStatus,proto3" json:"specialCardStatus"`
	SpecialValidStatus string                 `protobuf:"bytes,15,opt,name=specialValidStatus,proto3" json:"specialValidStatus"`
	HashInfo           string                 `protobuf:"bytes,16,opt,name=hashInfo,proto3" json:"hashInfo"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=createdAt,proto3" json:"createdAt"`
}

func (x *CompanyInfoVo) Reset() {
	*x = CompanyInfoVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyInfoVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyInfoVo) ProtoMessage() {}

func (x *CompanyInfoVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyInfoVo.ProtoReflect.Descriptor instead.
func (*CompanyInfoVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{63}
}

func (x *CompanyInfoVo) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *CompanyInfoVo) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *CompanyInfoVo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *CompanyInfoVo) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *CompanyInfoVo) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *CompanyInfoVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *CompanyInfoVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CompanyInfoVo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *CompanyInfoVo) GetBankAccountId() string {
	if x != nil {
		return x.BankAccountId
	}
	return ""
}

func (x *CompanyInfoVo) GetSpecialCardOwner() string {
	if x != nil {
		return x.SpecialCardOwner
	}
	return ""
}

func (x *CompanyInfoVo) GetSpecialToibkn() string {
	if x != nil {
		return x.SpecialToibkn
	}
	return ""
}

func (x *CompanyInfoVo) GetSpecialBank() string {
	if x != nil {
		return x.SpecialBank
	}
	return ""
}

func (x *CompanyInfoVo) GetSpecialCardNo() string {
	if x != nil {
		return x.SpecialCardNo
	}
	return ""
}

func (x *CompanyInfoVo) GetSpecialCardStatus() string {
	if x != nil {
		return x.SpecialCardStatus
	}
	return ""
}

func (x *CompanyInfoVo) GetSpecialValidStatus() string {
	if x != nil {
		return x.SpecialValidStatus
	}
	return ""
}

func (x *CompanyInfoVo) GetHashInfo() string {
	if x != nil {
		return x.HashInfo
	}
	return ""
}

func (x *CompanyInfoVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

//配送企业列表根据name查询
type SelCompanyByNamesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyNames []string `protobuf:"bytes,1,rep,name=companyNames,proto3" json:"companyNames"`
	ManagerId    int64    `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *SelCompanyByNamesReq) Reset() {
	*x = SelCompanyByNamesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelCompanyByNamesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelCompanyByNamesReq) ProtoMessage() {}

func (x *SelCompanyByNamesReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelCompanyByNamesReq.ProtoReflect.Descriptor instead.
func (*SelCompanyByNamesReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{64}
}

func (x *SelCompanyByNamesReq) GetCompanyNames() []string {
	if x != nil {
		return x.CompanyNames
	}
	return nil
}

func (x *SelCompanyByNamesReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type SelCompanyByNamesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CommonCompanyVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
}

func (x *SelCompanyByNamesResp) Reset() {
	*x = SelCompanyByNamesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelCompanyByNamesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelCompanyByNamesResp) ProtoMessage() {}

func (x *SelCompanyByNamesResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelCompanyByNamesResp.ProtoReflect.Descriptor instead.
func (*SelCompanyByNamesResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{65}
}

func (x *SelCompanyByNamesResp) GetList() []*CommonCompanyVo {
	if x != nil {
		return x.List
	}
	return nil
}

//配送企业列表查询
type ListCompanyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyName string  `protobuf:"bytes,1,opt,name=companyName,proto3" json:"companyName"`
	CompanyCode string  `protobuf:"bytes,2,opt,name=companyCode,proto3" json:"companyCode"`
	ValidStatus string  `protobuf:"bytes,3,opt,name=validStatus,proto3" json:"validStatus"`
	Page        *Page   `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
	ManagerId   int64   `protobuf:"varint,5,opt,name=managerId,proto3" json:"managerId"`
	CompanyIds  []int64 `protobuf:"varint,6,rep,packed,name=companyIds,proto3" json:"companyIds"`
	Province    string  `protobuf:"bytes,7,opt,name=province,proto3" json:"province"`
	City        string  `protobuf:"bytes,8,opt,name=city,proto3" json:"city"`
}

func (x *ListCompanyReq) Reset() {
	*x = ListCompanyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCompanyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompanyReq) ProtoMessage() {}

func (x *ListCompanyReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompanyReq.ProtoReflect.Descriptor instead.
func (*ListCompanyReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{66}
}

func (x *ListCompanyReq) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *ListCompanyReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *ListCompanyReq) GetValidStatus() string {
	if x != nil {
		return x.ValidStatus
	}
	return ""
}

func (x *ListCompanyReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListCompanyReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListCompanyReq) GetCompanyIds() []int64 {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

func (x *ListCompanyReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ListCompanyReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

type ListCompanyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ListCompanyVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64            `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64            `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64            `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListCompanyResp) Reset() {
	*x = ListCompanyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCompanyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompanyResp) ProtoMessage() {}

func (x *ListCompanyResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompanyResp.ProtoReflect.Descriptor instead.
func (*ListCompanyResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{67}
}

func (x *ListCompanyResp) GetList() []*ListCompanyVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListCompanyResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListCompanyResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCompanyResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ListCompanyVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId    int64                  `protobuf:"varint,1,opt,name=companyId,proto3" json:"companyId"`
	CompanyName  string                 `protobuf:"bytes,2,opt,name=companyName,proto3" json:"companyName"`
	CompanyCode  string                 `protobuf:"bytes,3,opt,name=companyCode,proto3" json:"companyCode"`
	ManagerName  string                 `protobuf:"bytes,4,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone string                 `protobuf:"bytes,5,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province     string                 `protobuf:"bytes,6,opt,name=province,proto3" json:"province"`
	City         string                 `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`
	Zone         string                 `protobuf:"bytes,8,opt,name=zone,proto3" json:"zone"`
	HashInfo     string                 `protobuf:"bytes,9,opt,name=hashInfo,proto3" json:"hashInfo"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt"`
	LogoUrl      string                 `protobuf:"bytes,11,opt,name=logoUrl,proto3" json:"logoUrl"`
}

func (x *ListCompanyVo) Reset() {
	*x = ListCompanyVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCompanyVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompanyVo) ProtoMessage() {}

func (x *ListCompanyVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompanyVo.ProtoReflect.Descriptor instead.
func (*ListCompanyVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{68}
}

func (x *ListCompanyVo) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *ListCompanyVo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *ListCompanyVo) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *ListCompanyVo) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *ListCompanyVo) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *ListCompanyVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ListCompanyVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ListCompanyVo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ListCompanyVo) GetHashInfo() string {
	if x != nil {
		return x.HashInfo
	}
	return ""
}

func (x *ListCompanyVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListCompanyVo) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

//配送企业基础信息创建
type CreateOneCompanyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyName  string `protobuf:"bytes,1,opt,name=companyName,proto3" json:"companyName"`
	CompanyCode  string `protobuf:"bytes,2,opt,name=companyCode,proto3" json:"companyCode"`
	ManagerName  string `protobuf:"bytes,3,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone string `protobuf:"bytes,4,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province     string `protobuf:"bytes,5,opt,name=province,proto3" json:"province"`
	City         string `protobuf:"bytes,6,opt,name=city,proto3" json:"city"`
	Zone         string `protobuf:"bytes,7,opt,name=zone,proto3" json:"zone"`
	ManagerId    int64  `protobuf:"varint,8,opt,name=managerId,proto3" json:"managerId"`
	InfoHash     string `protobuf:"bytes,9,opt,name=infoHash,proto3" json:"infoHash"`
}

func (x *CreateOneCompanyReq) Reset() {
	*x = CreateOneCompanyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneCompanyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneCompanyReq) ProtoMessage() {}

func (x *CreateOneCompanyReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneCompanyReq.ProtoReflect.Descriptor instead.
func (*CreateOneCompanyReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{69}
}

func (x *CreateOneCompanyReq) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *CreateOneCompanyReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *CreateOneCompanyReq) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *CreateOneCompanyReq) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *CreateOneCompanyReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *CreateOneCompanyReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CreateOneCompanyReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *CreateOneCompanyReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CreateOneCompanyReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

type CreateOneCompanyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateOneCompanyResp) Reset() {
	*x = CreateOneCompanyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneCompanyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneCompanyResp) ProtoMessage() {}

func (x *CreateOneCompanyResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneCompanyResp.ProtoReflect.Descriptor instead.
func (*CreateOneCompanyResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{70}
}

func (x *CreateOneCompanyResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//配送企业基础信息更新
type UpdateOneCompanyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyName  string `protobuf:"bytes,1,opt,name=companyName,proto3" json:"companyName"`
	CompanyCode  string `protobuf:"bytes,2,opt,name=companyCode,proto3" json:"companyCode"`
	ManagerName  string `protobuf:"bytes,3,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone string `protobuf:"bytes,4,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province     string `protobuf:"bytes,5,opt,name=province,proto3" json:"province"`
	City         string `protobuf:"bytes,6,opt,name=city,proto3" json:"city"`
	Zone         string `protobuf:"bytes,7,opt,name=zone,proto3" json:"zone"`
	ManagerId    int64  `protobuf:"varint,8,opt,name=managerId,proto3" json:"managerId"`
	CompanyId    int64  `protobuf:"varint,9,opt,name=companyId,proto3" json:"companyId"`
	InfoHash     string `protobuf:"bytes,10,opt,name=infoHash,proto3" json:"infoHash"`
}

func (x *UpdateOneCompanyReq) Reset() {
	*x = UpdateOneCompanyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOneCompanyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOneCompanyReq) ProtoMessage() {}

func (x *UpdateOneCompanyReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOneCompanyReq.ProtoReflect.Descriptor instead.
func (*UpdateOneCompanyReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{71}
}

func (x *UpdateOneCompanyReq) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *UpdateOneCompanyReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *UpdateOneCompanyReq) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *UpdateOneCompanyReq) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *UpdateOneCompanyReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *UpdateOneCompanyReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UpdateOneCompanyReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *UpdateOneCompanyReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *UpdateOneCompanyReq) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *UpdateOneCompanyReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

type UpdateOneCompanyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateOneCompanyResp) Reset() {
	*x = UpdateOneCompanyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOneCompanyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOneCompanyResp) ProtoMessage() {}

func (x *UpdateOneCompanyResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOneCompanyResp.ProtoReflect.Descriptor instead.
func (*UpdateOneCompanyResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{72}
}

func (x *UpdateOneCompanyResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//招采异常订单列表
type ListTpPlanErrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TpOrderCode  string                 `protobuf:"bytes,1,opt,name=tpOrderCode,proto3" json:"tpOrderCode"`
	MedicineName string                 `protobuf:"bytes,2,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode string                 `protobuf:"bytes,3,opt,name=medicineCode,proto3" json:"medicineCode"`
	StartDate    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=startDate,proto3" json:"startDate"`
	EndDate      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=endDate,proto3" json:"endDate"`
	Page         *Page                  `protobuf:"bytes,6,opt,name=page,proto3" json:"page"`
	ManagerId    int64                  `protobuf:"varint,7,opt,name=managerId,proto3" json:"managerId"`
}

func (x *ListTpPlanErrReq) Reset() {
	*x = ListTpPlanErrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTpPlanErrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTpPlanErrReq) ProtoMessage() {}

func (x *ListTpPlanErrReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTpPlanErrReq.ProtoReflect.Descriptor instead.
func (*ListTpPlanErrReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{73}
}

func (x *ListTpPlanErrReq) GetTpOrderCode() string {
	if x != nil {
		return x.TpOrderCode
	}
	return ""
}

func (x *ListTpPlanErrReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ListTpPlanErrReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ListTpPlanErrReq) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ListTpPlanErrReq) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ListTpPlanErrReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListTpPlanErrReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ListTpPlanErrResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ListTpPlanErrVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64              `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64              `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64              `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListTpPlanErrResp) Reset() {
	*x = ListTpPlanErrResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTpPlanErrResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTpPlanErrResp) ProtoMessage() {}

func (x *ListTpPlanErrResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTpPlanErrResp.ProtoReflect.Descriptor instead.
func (*ListTpPlanErrResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{74}
}

func (x *ListTpPlanErrResp) GetList() []*ListTpPlanErrVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListTpPlanErrResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListTpPlanErrResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTpPlanErrResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ListTpPlanErrVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TpSyncShipmentPlanId  int64                  `protobuf:"varint,1,opt,name=tpSyncShipmentPlanId,proto3" json:"tpSyncShipmentPlanId"`
	TpOrderCode           string                 `protobuf:"bytes,2,opt,name=tpOrderCode,proto3" json:"tpOrderCode"`
	TenderPlatformCode    string                 `protobuf:"bytes,3,opt,name=tenderPlatformCode,proto3" json:"tenderPlatformCode"`
	MedicineName          string                 `protobuf:"bytes,4,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string                 `protobuf:"bytes,5,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineSpecification string                 `protobuf:"bytes,6,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	TpShipmentAmount      int64                  `protobuf:"varint,7,opt,name=tpShipmentAmount,proto3" json:"tpShipmentAmount"`
	TpPrice               int64                  `protobuf:"varint,8,opt,name=tpPrice,proto3" json:"tpPrice"`
	CompanyName           string                 `protobuf:"bytes,9,opt,name=companyName,proto3" json:"companyName"`
	MiName                string                 `protobuf:"bytes,10,opt,name=miName,proto3" json:"miName"`
	ErrMsg                string                 `protobuf:"bytes,11,opt,name=errMsg,proto3" json:"errMsg"`
	CreatedAt             *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=createdAt,proto3" json:"createdAt"`
}

func (x *ListTpPlanErrVo) Reset() {
	*x = ListTpPlanErrVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTpPlanErrVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTpPlanErrVo) ProtoMessage() {}

func (x *ListTpPlanErrVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTpPlanErrVo.ProtoReflect.Descriptor instead.
func (*ListTpPlanErrVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{75}
}

func (x *ListTpPlanErrVo) GetTpSyncShipmentPlanId() int64 {
	if x != nil {
		return x.TpSyncShipmentPlanId
	}
	return 0
}

func (x *ListTpPlanErrVo) GetTpOrderCode() string {
	if x != nil {
		return x.TpOrderCode
	}
	return ""
}

func (x *ListTpPlanErrVo) GetTenderPlatformCode() string {
	if x != nil {
		return x.TenderPlatformCode
	}
	return ""
}

func (x *ListTpPlanErrVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ListTpPlanErrVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ListTpPlanErrVo) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *ListTpPlanErrVo) GetTpShipmentAmount() int64 {
	if x != nil {
		return x.TpShipmentAmount
	}
	return 0
}

func (x *ListTpPlanErrVo) GetTpPrice() int64 {
	if x != nil {
		return x.TpPrice
	}
	return 0
}

func (x *ListTpPlanErrVo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *ListTpPlanErrVo) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ListTpPlanErrVo) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *ListTpPlanErrVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

//异常招采单处理
type UpdateErrShipmentPlanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TpShipmentPlanId int64 `protobuf:"varint,1,opt,name=tpShipmentPlanId,proto3" json:"tpShipmentPlanId"`
	ManagerId        int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UpdateErrShipmentPlanReq) Reset() {
	*x = UpdateErrShipmentPlanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateErrShipmentPlanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateErrShipmentPlanReq) ProtoMessage() {}

func (x *UpdateErrShipmentPlanReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateErrShipmentPlanReq.ProtoReflect.Descriptor instead.
func (*UpdateErrShipmentPlanReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{76}
}

func (x *UpdateErrShipmentPlanReq) GetTpShipmentPlanId() int64 {
	if x != nil {
		return x.TpShipmentPlanId
	}
	return 0
}

func (x *UpdateErrShipmentPlanReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UpdateErrShipmentPlanResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateErrShipmentPlanResp) Reset() {
	*x = UpdateErrShipmentPlanResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateErrShipmentPlanResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateErrShipmentPlanResp) ProtoMessage() {}

func (x *UpdateErrShipmentPlanResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateErrShipmentPlanResp.ProtoReflect.Descriptor instead.
func (*UpdateErrShipmentPlanResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{77}
}

func (x *UpdateErrShipmentPlanResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//招采单列表
type ListShipmentPlanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TpOrderNo    string                 `protobuf:"bytes,1,opt,name=tpOrderNo,proto3" json:"tpOrderNo"`
	ShipmentNo   string                 `protobuf:"bytes,2,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	MedicineName string                 `protobuf:"bytes,3,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode string                 `protobuf:"bytes,4,opt,name=medicineCode,proto3" json:"medicineCode"`
	CompanyCode  string                 `protobuf:"bytes,5,opt,name=companyCode,proto3" json:"companyCode"`
	PlanStatus   string                 `protobuf:"bytes,6,opt,name=planStatus,proto3" json:"planStatus"`
	StartDate    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=startDate,proto3" json:"startDate"`
	EndDate      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=endDate,proto3" json:"endDate"`
	Page         *Page                  `protobuf:"bytes,9,opt,name=page,proto3" json:"page"`
	ManagerId    int64                  `protobuf:"varint,10,opt,name=managerId,proto3" json:"managerId"`
	MiId         int64                  `protobuf:"varint,11,opt,name=miId,proto3" json:"miId"`
	CompanyId    int64                  `protobuf:"varint,12,opt,name=companyId,proto3" json:"companyId"`
	MiName       string                 `protobuf:"bytes,13,opt,name=miName,proto3" json:"miName"`
	TpCode       string                 `protobuf:"bytes,14,opt,name=tpCode,proto3" json:"tpCode"`
	CompanyName  string                 `protobuf:"bytes,15,opt,name=companyName,proto3" json:"companyName"`
}

func (x *ListShipmentPlanReq) Reset() {
	*x = ListShipmentPlanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShipmentPlanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShipmentPlanReq) ProtoMessage() {}

func (x *ListShipmentPlanReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShipmentPlanReq.ProtoReflect.Descriptor instead.
func (*ListShipmentPlanReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{78}
}

func (x *ListShipmentPlanReq) GetTpOrderNo() string {
	if x != nil {
		return x.TpOrderNo
	}
	return ""
}

func (x *ListShipmentPlanReq) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *ListShipmentPlanReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ListShipmentPlanReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ListShipmentPlanReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *ListShipmentPlanReq) GetPlanStatus() string {
	if x != nil {
		return x.PlanStatus
	}
	return ""
}

func (x *ListShipmentPlanReq) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ListShipmentPlanReq) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ListShipmentPlanReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListShipmentPlanReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListShipmentPlanReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *ListShipmentPlanReq) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *ListShipmentPlanReq) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ListShipmentPlanReq) GetTpCode() string {
	if x != nil {
		return x.TpCode
	}
	return ""
}

func (x *ListShipmentPlanReq) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

type ListShipmentPlanResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ListShipmentPlanrVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                  `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                  `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListShipmentPlanResp) Reset() {
	*x = ListShipmentPlanResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShipmentPlanResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShipmentPlanResp) ProtoMessage() {}

func (x *ListShipmentPlanResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShipmentPlanResp.ProtoReflect.Descriptor instead.
func (*ListShipmentPlanResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{79}
}

func (x *ListShipmentPlanResp) GetList() []*ListShipmentPlanrVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListShipmentPlanResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListShipmentPlanResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListShipmentPlanResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ListShipmentPlanrVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentPlanId        int64                  `protobuf:"varint,1,opt,name=shipmentPlanId,proto3" json:"shipmentPlanId"`
	TpOrderNo             string                 `protobuf:"bytes,2,opt,name=tpOrderNo,proto3" json:"tpOrderNo"`
	OrderNo               string                 `protobuf:"bytes,3,opt,name=orderNo,proto3" json:"orderNo"`
	InvoiceNo             string                 `protobuf:"bytes,4,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode           string                 `protobuf:"bytes,5,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	TpCode                string                 `protobuf:"bytes,6,opt,name=tpCode,proto3" json:"tpCode"`
	MedicineName          string                 `protobuf:"bytes,7,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string                 `protobuf:"bytes,8,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineSpecification string                 `protobuf:"bytes,9,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	ShipmentPrice         int64                  `protobuf:"varint,10,opt,name=shipmentPrice,proto3" json:"shipmentPrice"`
	ShipmentAmount        int64                  `protobuf:"varint,11,opt,name=shipmentAmount,proto3" json:"shipmentAmount"`
	OrderAmount           int64                  `protobuf:"varint,12,opt,name=orderAmount,proto3" json:"orderAmount"`
	CompanyName           string                 `protobuf:"bytes,13,opt,name=companyName,proto3" json:"companyName"`
	MiName                string                 `protobuf:"bytes,14,opt,name=miName,proto3" json:"miName"`
	TpCreatedAt           *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=tpCreatedAt,proto3" json:"tpCreatedAt"`
	ReceiveAt             *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=receiveAt,proto3" json:"receiveAt"`
	PlanStatus            string                 `protobuf:"bytes,17,opt,name=planStatus,proto3" json:"planStatus"`
	Manufacturer          string                 `protobuf:"bytes,18,opt,name=manufacturer,proto3" json:"manufacturer"`
	TagName               string                 `protobuf:"bytes,19,opt,name=tagName,proto3" json:"tagName"`
	MedicineForm          string                 `protobuf:"bytes,20,opt,name=medicineForm,proto3" json:"medicineForm"`
	MedicineUnit          string                 `protobuf:"bytes,21,opt,name=medicineUnit,proto3" json:"medicineUnit"`
	CalculateRate         int64                  `protobuf:"varint,22,opt,name=calculateRate,proto3" json:"calculateRate"`
	MedicineId            int64                  `protobuf:"varint,23,opt,name=medicineId,proto3" json:"medicineId"`
	ShipmentNo            string                 `protobuf:"bytes,24,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	CompanyCode           string                 `protobuf:"bytes,25,opt,name=companyCode,proto3" json:"companyCode"`
	MiCode                string                 `protobuf:"bytes,26,opt,name=miCode,proto3" json:"miCode"`
	SendDeadline          *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=sendDeadline,proto3" json:"sendDeadline"`
	StartSendAt           *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=startSendAt,proto3" json:"startSendAt"`
	ReceiveDeadline       *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=receiveDeadline,proto3" json:"receiveDeadline"`
	CreatedAt             *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=createdAt,proto3" json:"createdAt"`
	SentAmount            int64                  `protobuf:"varint,31,opt,name=sentAmount,proto3" json:"sentAmount"`
	ReceivedAmount        int64                  `protobuf:"varint,32,opt,name=receivedAmount,proto3" json:"receivedAmount"`
	ReturnAmount          int64                  `protobuf:"varint,33,opt,name=returnAmount,proto3" json:"returnAmount"`
}

func (x *ListShipmentPlanrVo) Reset() {
	*x = ListShipmentPlanrVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShipmentPlanrVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShipmentPlanrVo) ProtoMessage() {}

func (x *ListShipmentPlanrVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShipmentPlanrVo.ProtoReflect.Descriptor instead.
func (*ListShipmentPlanrVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{80}
}

func (x *ListShipmentPlanrVo) GetShipmentPlanId() int64 {
	if x != nil {
		return x.ShipmentPlanId
	}
	return 0
}

func (x *ListShipmentPlanrVo) GetTpOrderNo() string {
	if x != nil {
		return x.TpOrderNo
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetTpCode() string {
	if x != nil {
		return x.TpCode
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetShipmentPrice() int64 {
	if x != nil {
		return x.ShipmentPrice
	}
	return 0
}

func (x *ListShipmentPlanrVo) GetShipmentAmount() int64 {
	if x != nil {
		return x.ShipmentAmount
	}
	return 0
}

func (x *ListShipmentPlanrVo) GetOrderAmount() int64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *ListShipmentPlanrVo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetTpCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.TpCreatedAt
	}
	return nil
}

func (x *ListShipmentPlanrVo) GetReceiveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveAt
	}
	return nil
}

func (x *ListShipmentPlanrVo) GetPlanStatus() string {
	if x != nil {
		return x.PlanStatus
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetMedicineForm() string {
	if x != nil {
		return x.MedicineForm
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetMedicineUnit() string {
	if x != nil {
		return x.MedicineUnit
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetCalculateRate() int64 {
	if x != nil {
		return x.CalculateRate
	}
	return 0
}

func (x *ListShipmentPlanrVo) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *ListShipmentPlanrVo) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetSendDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.SendDeadline
	}
	return nil
}

func (x *ListShipmentPlanrVo) GetStartSendAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartSendAt
	}
	return nil
}

func (x *ListShipmentPlanrVo) GetReceiveDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveDeadline
	}
	return nil
}

func (x *ListShipmentPlanrVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListShipmentPlanrVo) GetSentAmount() int64 {
	if x != nil {
		return x.SentAmount
	}
	return 0
}

func (x *ListShipmentPlanrVo) GetReceivedAmount() int64 {
	if x != nil {
		return x.ReceivedAmount
	}
	return 0
}

func (x *ListShipmentPlanrVo) GetReturnAmount() int64 {
	if x != nil {
		return x.ReturnAmount
	}
	return 0
}

//根据配送单号查询配送单详情
type DetailShipmentOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentNo string `protobuf:"bytes,1,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	ManagerId  int64  `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *DetailShipmentOrderReq) Reset() {
	*x = DetailShipmentOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailShipmentOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailShipmentOrderReq) ProtoMessage() {}

func (x *DetailShipmentOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailShipmentOrderReq.ProtoReflect.Descriptor instead.
func (*DetailShipmentOrderReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{81}
}

func (x *DetailShipmentOrderReq) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *DetailShipmentOrderReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ShipmentReceiveOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentNo string `protobuf:"bytes,1,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	ManagerId  int64  `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
	MiId       int64  `protobuf:"varint,3,opt,name=miId,proto3" json:"miId"`
}

func (x *ShipmentReceiveOrderReq) Reset() {
	*x = ShipmentReceiveOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentReceiveOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentReceiveOrderReq) ProtoMessage() {}

func (x *ShipmentReceiveOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentReceiveOrderReq.ProtoReflect.Descriptor instead.
func (*ShipmentReceiveOrderReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{82}
}

func (x *ShipmentReceiveOrderReq) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *ShipmentReceiveOrderReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ShipmentReceiveOrderReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

type ShipmentReceiveOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *ShipmentReceiveOrderResp) Reset() {
	*x = ShipmentReceiveOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentReceiveOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentReceiveOrderResp) ProtoMessage() {}

func (x *ShipmentReceiveOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentReceiveOrderResp.ProtoReflect.Descriptor instead.
func (*ShipmentReceiveOrderResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{83}
}

func (x *ShipmentReceiveOrderResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//先返回部分关键字段
type DetailShipmentOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MibId           int64  `protobuf:"varint,1,opt,name=mibId,proto3" json:"mibId"`
	ShipmentOrderId int64  `protobuf:"varint,2,opt,name=shipmentOrderId,proto3" json:"shipmentOrderId"`
	CompanyCode     string `protobuf:"bytes,3,opt,name=companyCode,proto3" json:"companyCode"`
	CompanyName     string `protobuf:"bytes,4,opt,name=companyName,proto3" json:"companyName"`
	ShipmentNo      string `protobuf:"bytes,5,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	ShipmentCode    string `protobuf:"bytes,6,opt,name=shipmentCode,proto3" json:"shipmentCode"`
	ShipmentCompany string `protobuf:"bytes,7,opt,name=shipmentCompany,proto3" json:"shipmentCompany"`
	InvoiceNo       string `protobuf:"bytes,8,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode     string `protobuf:"bytes,9,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	OrderAmount     int64  `protobuf:"varint,10,opt,name=orderAmount,proto3" json:"orderAmount"`
	ShipmentStatus  string `protobuf:"bytes,11,opt,name=shipmentStatus,proto3" json:"shipmentStatus"`
	MiCode          string `protobuf:"bytes,12,opt,name=miCode,proto3" json:"miCode"`
	MiName          string `protobuf:"bytes,13,opt,name=miName,proto3" json:"miName"`
}

func (x *DetailShipmentOrderResp) Reset() {
	*x = DetailShipmentOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailShipmentOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailShipmentOrderResp) ProtoMessage() {}

func (x *DetailShipmentOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailShipmentOrderResp.ProtoReflect.Descriptor instead.
func (*DetailShipmentOrderResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{84}
}

func (x *DetailShipmentOrderResp) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *DetailShipmentOrderResp) GetShipmentOrderId() int64 {
	if x != nil {
		return x.ShipmentOrderId
	}
	return 0
}

func (x *DetailShipmentOrderResp) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *DetailShipmentOrderResp) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *DetailShipmentOrderResp) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *DetailShipmentOrderResp) GetShipmentCode() string {
	if x != nil {
		return x.ShipmentCode
	}
	return ""
}

func (x *DetailShipmentOrderResp) GetShipmentCompany() string {
	if x != nil {
		return x.ShipmentCompany
	}
	return ""
}

func (x *DetailShipmentOrderResp) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *DetailShipmentOrderResp) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *DetailShipmentOrderResp) GetOrderAmount() int64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *DetailShipmentOrderResp) GetShipmentStatus() string {
	if x != nil {
		return x.ShipmentStatus
	}
	return ""
}

func (x *DetailShipmentOrderResp) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *DetailShipmentOrderResp) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

//招采单列表(根据配送编号查询)
type ListShipmentPlanForOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//  string  tpOrderCode = 1;
	ShipmentNo string `protobuf:"bytes,1,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	//  string medicineName = 3;
	//  string medicineCode = 4;
	//  string companyCode = 5;
	//  string planStatus = 6;
	//  google.protobuf.Timestamp startDate = 7;
	//  google.protobuf.Timestamp endDate = 8;
	//  Page page = 9;
	ManagerId int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *ListShipmentPlanForOrderReq) Reset() {
	*x = ListShipmentPlanForOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShipmentPlanForOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShipmentPlanForOrderReq) ProtoMessage() {}

func (x *ListShipmentPlanForOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShipmentPlanForOrderReq.ProtoReflect.Descriptor instead.
func (*ListShipmentPlanForOrderReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{85}
}

func (x *ListShipmentPlanForOrderReq) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *ListShipmentPlanForOrderReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ListShipmentPlanForOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ListShipmentPlanForOrderVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
}

func (x *ListShipmentPlanForOrderResp) Reset() {
	*x = ListShipmentPlanForOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShipmentPlanForOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShipmentPlanForOrderResp) ProtoMessage() {}

func (x *ListShipmentPlanForOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShipmentPlanForOrderResp.ProtoReflect.Descriptor instead.
func (*ListShipmentPlanForOrderResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{86}
}

func (x *ListShipmentPlanForOrderResp) GetList() []*ListShipmentPlanForOrderVo {
	if x != nil {
		return x.List
	}
	return nil
}

type ListShipmentPlanForOrderVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo               string                 `protobuf:"bytes,1,opt,name=orderNo,proto3" json:"orderNo"`
	TpOrderNo             string                 `protobuf:"bytes,2,opt,name=tpOrderNo,proto3" json:"tpOrderNo"`
	TpCode                string                 `protobuf:"bytes,3,opt,name=tpCode,proto3" json:"tpCode"`
	MedicineName          string                 `protobuf:"bytes,4,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string                 `protobuf:"bytes,5,opt,name=medicineCode,proto3" json:"medicineCode"`
	TagName               string                 `protobuf:"bytes,6,opt,name=tagName,proto3" json:"tagName"`
	MedicineSpecification string                 `protobuf:"bytes,7,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	ShipmentAmount        int64                  `protobuf:"varint,8,opt,name=shipmentAmount,proto3" json:"shipmentAmount"`
	OrderAmount           int64                  `protobuf:"varint,9,opt,name=orderAmount,proto3" json:"orderAmount"`
	TpCreatedAt           *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=tpCreatedAt,proto3" json:"tpCreatedAt"`
	MiName                string                 `protobuf:"bytes,11,opt,name=miName,proto3" json:"miName"`
}

func (x *ListShipmentPlanForOrderVo) Reset() {
	*x = ListShipmentPlanForOrderVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShipmentPlanForOrderVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShipmentPlanForOrderVo) ProtoMessage() {}

func (x *ListShipmentPlanForOrderVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShipmentPlanForOrderVo.ProtoReflect.Descriptor instead.
func (*ListShipmentPlanForOrderVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{87}
}

func (x *ListShipmentPlanForOrderVo) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *ListShipmentPlanForOrderVo) GetTpOrderNo() string {
	if x != nil {
		return x.TpOrderNo
	}
	return ""
}

func (x *ListShipmentPlanForOrderVo) GetTpCode() string {
	if x != nil {
		return x.TpCode
	}
	return ""
}

func (x *ListShipmentPlanForOrderVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ListShipmentPlanForOrderVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ListShipmentPlanForOrderVo) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *ListShipmentPlanForOrderVo) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *ListShipmentPlanForOrderVo) GetShipmentAmount() int64 {
	if x != nil {
		return x.ShipmentAmount
	}
	return 0
}

func (x *ListShipmentPlanForOrderVo) GetOrderAmount() int64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *ListShipmentPlanForOrderVo) GetTpCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.TpCreatedAt
	}
	return nil
}

func (x *ListShipmentPlanForOrderVo) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

//招采单汇总
type CountShipmentPlanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=startDate,proto3" json:"startDate"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=endDate,proto3" json:"endDate"`
	MiId      int64                  `protobuf:"varint,3,opt,name=miId,proto3" json:"miId"`
	CompanyId int64                  `protobuf:"varint,4,opt,name=companyId,proto3" json:"companyId"`
	ManagerId int64                  `protobuf:"varint,5,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CountShipmentPlanReq) Reset() {
	*x = CountShipmentPlanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountShipmentPlanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountShipmentPlanReq) ProtoMessage() {}

func (x *CountShipmentPlanReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountShipmentPlanReq.ProtoReflect.Descriptor instead.
func (*CountShipmentPlanReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{88}
}

func (x *CountShipmentPlanReq) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *CountShipmentPlanReq) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *CountShipmentPlanReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *CountShipmentPlanReq) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *CountShipmentPlanReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CountShipmentPlanResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaitNum     int64 `protobuf:"varint,1,opt,name=waitNum,proto3" json:"waitNum"`
	FailNum     int64 `protobuf:"varint,2,opt,name=failNum,proto3" json:"failNum"`
	CompleteNum int64 `protobuf:"varint,3,opt,name=completeNum,proto3" json:"completeNum"`
}

func (x *CountShipmentPlanResp) Reset() {
	*x = CountShipmentPlanResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountShipmentPlanResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountShipmentPlanResp) ProtoMessage() {}

func (x *CountShipmentPlanResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountShipmentPlanResp.ProtoReflect.Descriptor instead.
func (*CountShipmentPlanResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{89}
}

func (x *CountShipmentPlanResp) GetWaitNum() int64 {
	if x != nil {
		return x.WaitNum
	}
	return 0
}

func (x *CountShipmentPlanResp) GetFailNum() int64 {
	if x != nil {
		return x.FailNum
	}
	return 0
}

func (x *CountShipmentPlanResp) GetCompleteNum() int64 {
	if x != nil {
		return x.CompleteNum
	}
	return 0
}

//配送单创建
type CreateShipmentOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiCode           string                 `protobuf:"bytes,1,opt,name=miCode,proto3" json:"miCode"`
	CompanyCode      string                 `protobuf:"bytes,2,opt,name=companyCode,proto3" json:"companyCode"`
	InvoiceMd5       string                 `protobuf:"bytes,3,opt,name=invoiceMd5,proto3" json:"invoiceMd5"`
	InvoiceUrl       string                 `protobuf:"bytes,4,opt,name=invoiceUrl,proto3" json:"invoiceUrl"`
	InvoiceType      string                 `protobuf:"bytes,5,opt,name=invoiceType,proto3" json:"invoiceType"`
	InvoiceTotal     int64                  `protobuf:"varint,6,opt,name=invoiceTotal,proto3" json:"invoiceTotal"`
	InvoiceTax       int64                  `protobuf:"varint,7,opt,name=invoiceTax,proto3" json:"invoiceTax"`
	InvoiceCheckCode string                 `protobuf:"bytes,8,opt,name=invoiceCheckCode,proto3" json:"invoiceCheckCode"`
	InvoiceNo        string                 `protobuf:"bytes,9,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode      string                 `protobuf:"bytes,10,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	InvoiceDate      *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=invoiceDate,proto3" json:"invoiceDate"`
	SendOutAt        *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=sendOutAt,proto3" json:"sendOutAt"`
	OrderAmount      int64                  `protobuf:"varint,13,opt,name=orderAmount,proto3" json:"orderAmount"`
	ShipmentCode     string                 `protobuf:"bytes,14,opt,name=shipmentCode,proto3" json:"shipmentCode"`
	ShipmentCompany  string                 `protobuf:"bytes,15,opt,name=shipmentCompany,proto3" json:"shipmentCompany"`
	ShipmentPlanIds  []int64                `protobuf:"varint,16,rep,packed,name=shipmentPlanIds,proto3" json:"shipmentPlanIds"`
	ManagerId        int64                  `protobuf:"varint,17,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateShipmentOrderReq) Reset() {
	*x = CreateShipmentOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateShipmentOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShipmentOrderReq) ProtoMessage() {}

func (x *CreateShipmentOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShipmentOrderReq.ProtoReflect.Descriptor instead.
func (*CreateShipmentOrderReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{90}
}

func (x *CreateShipmentOrderReq) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *CreateShipmentOrderReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *CreateShipmentOrderReq) GetInvoiceMd5() string {
	if x != nil {
		return x.InvoiceMd5
	}
	return ""
}

func (x *CreateShipmentOrderReq) GetInvoiceUrl() string {
	if x != nil {
		return x.InvoiceUrl
	}
	return ""
}

func (x *CreateShipmentOrderReq) GetInvoiceType() string {
	if x != nil {
		return x.InvoiceType
	}
	return ""
}

func (x *CreateShipmentOrderReq) GetInvoiceTotal() int64 {
	if x != nil {
		return x.InvoiceTotal
	}
	return 0
}

func (x *CreateShipmentOrderReq) GetInvoiceTax() int64 {
	if x != nil {
		return x.InvoiceTax
	}
	return 0
}

func (x *CreateShipmentOrderReq) GetInvoiceCheckCode() string {
	if x != nil {
		return x.InvoiceCheckCode
	}
	return ""
}

func (x *CreateShipmentOrderReq) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *CreateShipmentOrderReq) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *CreateShipmentOrderReq) GetInvoiceDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoiceDate
	}
	return nil
}

func (x *CreateShipmentOrderReq) GetSendOutAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SendOutAt
	}
	return nil
}

func (x *CreateShipmentOrderReq) GetOrderAmount() int64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *CreateShipmentOrderReq) GetShipmentCode() string {
	if x != nil {
		return x.ShipmentCode
	}
	return ""
}

func (x *CreateShipmentOrderReq) GetShipmentCompany() string {
	if x != nil {
		return x.ShipmentCompany
	}
	return ""
}

func (x *CreateShipmentOrderReq) GetShipmentPlanIds() []int64 {
	if x != nil {
		return x.ShipmentPlanIds
	}
	return nil
}

func (x *CreateShipmentOrderReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CreateShipmentOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentNo string `protobuf:"bytes,1,opt,name=shipmentNo,proto3" json:"shipmentNo"`
}

func (x *CreateShipmentOrderResp) Reset() {
	*x = CreateShipmentOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateShipmentOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShipmentOrderResp) ProtoMessage() {}

func (x *CreateShipmentOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShipmentOrderResp.ProtoReflect.Descriptor instead.
func (*CreateShipmentOrderResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{91}
}

func (x *CreateShipmentOrderResp) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

//配送单列表
type ListShipmentOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId       int64                  `protobuf:"varint,1,opt,name=companyId,proto3" json:"companyId"`
	MiId            int64                  `protobuf:"varint,2,opt,name=miId,proto3" json:"miId"`
	ShipmentStatus  string                 `protobuf:"bytes,3,opt,name=shipmentStatus,proto3" json:"shipmentStatus"`
	ShipmentNo      string                 `protobuf:"bytes,4,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	InvoiceNo       string                 `protobuf:"bytes,5,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode     string                 `protobuf:"bytes,6,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	ShipmentCode    string                 `protobuf:"bytes,7,opt,name=shipmentCode,proto3" json:"shipmentCode"`
	StartDate       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=startDate,proto3" json:"startDate"`
	EndDate         *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=endDate,proto3" json:"endDate"`
	Page            *Page                  `protobuf:"bytes,10,opt,name=page,proto3" json:"page"`
	ManagerId       int64                  `protobuf:"varint,11,opt,name=managerId,proto3" json:"managerId"`
	ReceiveDeadline *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=receiveDeadline,proto3" json:"receiveDeadline"`
	MiName          string                 `protobuf:"bytes,13,opt,name=miName,proto3" json:"miName"`
	ComName         string                 `protobuf:"bytes,14,opt,name=comName,proto3" json:"comName"`
}

func (x *ListShipmentOrderReq) Reset() {
	*x = ListShipmentOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShipmentOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShipmentOrderReq) ProtoMessage() {}

func (x *ListShipmentOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShipmentOrderReq.ProtoReflect.Descriptor instead.
func (*ListShipmentOrderReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{92}
}

func (x *ListShipmentOrderReq) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *ListShipmentOrderReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *ListShipmentOrderReq) GetShipmentStatus() string {
	if x != nil {
		return x.ShipmentStatus
	}
	return ""
}

func (x *ListShipmentOrderReq) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *ListShipmentOrderReq) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *ListShipmentOrderReq) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *ListShipmentOrderReq) GetShipmentCode() string {
	if x != nil {
		return x.ShipmentCode
	}
	return ""
}

func (x *ListShipmentOrderReq) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ListShipmentOrderReq) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ListShipmentOrderReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListShipmentOrderReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListShipmentOrderReq) GetReceiveDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveDeadline
	}
	return nil
}

func (x *ListShipmentOrderReq) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ListShipmentOrderReq) GetComName() string {
	if x != nil {
		return x.ComName
	}
	return ""
}

type ListShipmentOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ListShipmentOrderVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                  `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                  `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListShipmentOrderResp) Reset() {
	*x = ListShipmentOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShipmentOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShipmentOrderResp) ProtoMessage() {}

func (x *ListShipmentOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShipmentOrderResp.ProtoReflect.Descriptor instead.
func (*ListShipmentOrderResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{93}
}

func (x *ListShipmentOrderResp) GetList() []*ListShipmentOrderVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListShipmentOrderResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListShipmentOrderResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListShipmentOrderResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ListShipmentOrderVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentOrderId int64                  `protobuf:"varint,1,opt,name=shipmentOrderId,proto3" json:"shipmentOrderId"`
	ShipmentNo      string                 `protobuf:"bytes,2,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	InvoiceNo       string                 `protobuf:"bytes,3,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode     string                 `protobuf:"bytes,4,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	ShipmentCode    string                 `protobuf:"bytes,5,opt,name=shipmentCode,proto3" json:"shipmentCode"`
	MiName          string                 `protobuf:"bytes,6,opt,name=miName,proto3" json:"miName"`
	OrderAmount     int64                  `protobuf:"varint,7,opt,name=orderAmount,proto3" json:"orderAmount"`
	SendOutAt       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=sendOutAt,proto3" json:"sendOutAt"`
	ReceiveDeadline *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=receiveDeadline,proto3" json:"receiveDeadline"`
	ShipmentStatus  string                 `protobuf:"bytes,10,opt,name=shipmentStatus,proto3" json:"shipmentStatus"`
	CompanyName     string                 `protobuf:"bytes,11,opt,name=companyName,proto3" json:"companyName"`
}

func (x *ListShipmentOrderVo) Reset() {
	*x = ListShipmentOrderVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShipmentOrderVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShipmentOrderVo) ProtoMessage() {}

func (x *ListShipmentOrderVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShipmentOrderVo.ProtoReflect.Descriptor instead.
func (*ListShipmentOrderVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{94}
}

func (x *ListShipmentOrderVo) GetShipmentOrderId() int64 {
	if x != nil {
		return x.ShipmentOrderId
	}
	return 0
}

func (x *ListShipmentOrderVo) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *ListShipmentOrderVo) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *ListShipmentOrderVo) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *ListShipmentOrderVo) GetShipmentCode() string {
	if x != nil {
		return x.ShipmentCode
	}
	return ""
}

func (x *ListShipmentOrderVo) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ListShipmentOrderVo) GetOrderAmount() int64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *ListShipmentOrderVo) GetSendOutAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SendOutAt
	}
	return nil
}

func (x *ListShipmentOrderVo) GetReceiveDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveDeadline
	}
	return nil
}

func (x *ListShipmentOrderVo) GetShipmentStatus() string {
	if x != nil {
		return x.ShipmentStatus
	}
	return ""
}

func (x *ListShipmentOrderVo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

//配送单表头汇总
type CountShipmentOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyCode string                 `protobuf:"bytes,1,opt,name=companyCode,proto3" json:"companyCode"`
	StartDate   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=startDate,proto3" json:"startDate"`
	EndDate     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=endDate,proto3" json:"endDate"`
	ManagerId   int64                  `protobuf:"varint,4,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CountShipmentOrderReq) Reset() {
	*x = CountShipmentOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountShipmentOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountShipmentOrderReq) ProtoMessage() {}

func (x *CountShipmentOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountShipmentOrderReq.ProtoReflect.Descriptor instead.
func (*CountShipmentOrderReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{95}
}

func (x *CountShipmentOrderReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *CountShipmentOrderReq) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *CountShipmentOrderReq) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *CountShipmentOrderReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CountShipmentOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentOrderCount int64 `protobuf:"varint,1,opt,name=shipmentOrderCount,proto3" json:"shipmentOrderCount"`
	ShipmentPlanCount  int64 `protobuf:"varint,2,opt,name=shipmentPlanCount,proto3" json:"shipmentPlanCount"`
}

func (x *CountShipmentOrderResp) Reset() {
	*x = CountShipmentOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountShipmentOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountShipmentOrderResp) ProtoMessage() {}

func (x *CountShipmentOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountShipmentOrderResp.ProtoReflect.Descriptor instead.
func (*CountShipmentOrderResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{96}
}

func (x *CountShipmentOrderResp) GetShipmentOrderCount() int64 {
	if x != nil {
		return x.ShipmentOrderCount
	}
	return 0
}

func (x *CountShipmentOrderResp) GetShipmentPlanCount() int64 {
	if x != nil {
		return x.ShipmentPlanCount
	}
	return 0
}

type UpdateShipmentOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentNo     string `protobuf:"bytes,1,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	ShipmentStatus string `protobuf:"bytes,2,opt,name=shipmentStatus,proto3" json:"shipmentStatus"`
	ManagerId      int64  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UpdateShipmentOrderReq) Reset() {
	*x = UpdateShipmentOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateShipmentOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShipmentOrderReq) ProtoMessage() {}

func (x *UpdateShipmentOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShipmentOrderReq.ProtoReflect.Descriptor instead.
func (*UpdateShipmentOrderReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{97}
}

func (x *UpdateShipmentOrderReq) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *UpdateShipmentOrderReq) GetShipmentStatus() string {
	if x != nil {
		return x.ShipmentStatus
	}
	return ""
}

func (x *UpdateShipmentOrderReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UpdateShipmentOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateShipmentOrderResp) Reset() {
	*x = UpdateShipmentOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateShipmentOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShipmentOrderResp) ProtoMessage() {}

func (x *UpdateShipmentOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShipmentOrderResp.ProtoReflect.Descriptor instead.
func (*UpdateShipmentOrderResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{98}
}

type ReceiveShipmentOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentNo string `protobuf:"bytes,1,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	MiId       int64  `protobuf:"varint,2,opt,name=miId,proto3" json:"miId"`
	ManagerId  int64  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
}

func (x *ReceiveShipmentOrderReq) Reset() {
	*x = ReceiveShipmentOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveShipmentOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveShipmentOrderReq) ProtoMessage() {}

func (x *ReceiveShipmentOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveShipmentOrderReq.ProtoReflect.Descriptor instead.
func (*ReceiveShipmentOrderReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{99}
}

func (x *ReceiveShipmentOrderReq) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *ReceiveShipmentOrderReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *ReceiveShipmentOrderReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ReceiveShipmentOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
}

func (x *ReceiveShipmentOrderResp) Reset() {
	*x = ReceiveShipmentOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveShipmentOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveShipmentOrderResp) ProtoMessage() {}

func (x *ReceiveShipmentOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveShipmentOrderResp.ProtoReflect.Descriptor instead.
func (*ReceiveShipmentOrderResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{100}
}

func (x *ReceiveShipmentOrderResp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ReceiveShipmentOrderResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

//根据招采单(配送计划)id查询合同编号
type GetContractByShipmentPlanIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentId int64 `protobuf:"varint,1,opt,name=shipmentId,proto3" json:"shipmentId"`
	ManagerId  int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *GetContractByShipmentPlanIdReq) Reset() {
	*x = GetContractByShipmentPlanIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractByShipmentPlanIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractByShipmentPlanIdReq) ProtoMessage() {}

func (x *GetContractByShipmentPlanIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractByShipmentPlanIdReq.ProtoReflect.Descriptor instead.
func (*GetContractByShipmentPlanIdReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{101}
}

func (x *GetContractByShipmentPlanIdReq) GetShipmentId() int64 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

func (x *GetContractByShipmentPlanIdReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type GetContractByShipmentPlanIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId int64  `protobuf:"varint,1,opt,name=contractId,proto3" json:"contractId"`
	ContractNo string `protobuf:"bytes,2,opt,name=contractNo,proto3" json:"contractNo"`
}

func (x *GetContractByShipmentPlanIdResp) Reset() {
	*x = GetContractByShipmentPlanIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractByShipmentPlanIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractByShipmentPlanIdResp) ProtoMessage() {}

func (x *GetContractByShipmentPlanIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractByShipmentPlanIdResp.ProtoReflect.Descriptor instead.
func (*GetContractByShipmentPlanIdResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{102}
}

func (x *GetContractByShipmentPlanIdResp) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *GetContractByShipmentPlanIdResp) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

type InsertConfigsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64           `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	Configs   []*CommonConfig `protobuf:"bytes,2,rep,name=configs,proto3" json:"configs"`
}

func (x *InsertConfigsReq) Reset() {
	*x = InsertConfigsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertConfigsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertConfigsReq) ProtoMessage() {}

func (x *InsertConfigsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertConfigsReq.ProtoReflect.Descriptor instead.
func (*InsertConfigsReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{103}
}

func (x *InsertConfigsReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *InsertConfigsReq) GetConfigs() []*CommonConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

type UpdateConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//条件生效顺序 id>key> type 1,2,3
	ConfigId  int64                  `protobuf:"varint,2,opt,name=configId,proto3" json:"configId"`
	Key       string                 `protobuf:"bytes,3,opt,name=key,proto3" json:"key"`
	TypeOne   string                 `protobuf:"bytes,4,opt,name=typeOne,proto3" json:"typeOne"`
	TypeTwo   string                 `protobuf:"bytes,5,opt,name=typeTwo,proto3" json:"typeTwo"`
	TypeThree string                 `protobuf:"bytes,6,opt,name=typeThree,proto3" json:"typeThree"`
	OldValue  string                 `protobuf:"bytes,7,opt,name=oldValue,proto3" json:"oldValue"`
	Value     string                 `protobuf:"bytes,8,opt,name=value,proto3" json:"value"`
	StartAt   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=startAt,proto3" json:"startAt"`
	EndAt     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=endAt,proto3" json:"endAt"`
}

func (x *UpdateConfigReq) Reset() {
	*x = UpdateConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigReq) ProtoMessage() {}

func (x *UpdateConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigReq.ProtoReflect.Descriptor instead.
func (*UpdateConfigReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{104}
}

func (x *UpdateConfigReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *UpdateConfigReq) GetConfigId() int64 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *UpdateConfigReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UpdateConfigReq) GetTypeOne() string {
	if x != nil {
		return x.TypeOne
	}
	return ""
}

func (x *UpdateConfigReq) GetTypeTwo() string {
	if x != nil {
		return x.TypeTwo
	}
	return ""
}

func (x *UpdateConfigReq) GetTypeThree() string {
	if x != nil {
		return x.TypeThree
	}
	return ""
}

func (x *UpdateConfigReq) GetOldValue() string {
	if x != nil {
		return x.OldValue
	}
	return ""
}

func (x *UpdateConfigReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *UpdateConfigReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *UpdateConfigReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

type DeleteConfigsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定要删除的id，id必填
	ConfigIds []int64 `protobuf:"varint,2,rep,packed,name=configIds,proto3" json:"configIds"`
	//以下为限制项目，
	Key       string `protobuf:"bytes,3,opt,name=key,proto3" json:"key"`
	TypeOne   string `protobuf:"bytes,4,opt,name=typeOne,proto3" json:"typeOne"`
	TypeTwo   string `protobuf:"bytes,5,opt,name=typeTwo,proto3" json:"typeTwo"`
	TypeThree string `protobuf:"bytes,6,opt,name=typeThree,proto3" json:"typeThree"`
}

func (x *DeleteConfigsReq) Reset() {
	*x = DeleteConfigsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConfigsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConfigsReq) ProtoMessage() {}

func (x *DeleteConfigsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConfigsReq.ProtoReflect.Descriptor instead.
func (*DeleteConfigsReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{105}
}

func (x *DeleteConfigsReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *DeleteConfigsReq) GetConfigIds() []int64 {
	if x != nil {
		return x.ConfigIds
	}
	return nil
}

func (x *DeleteConfigsReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DeleteConfigsReq) GetTypeOne() string {
	if x != nil {
		return x.TypeOne
	}
	return ""
}

func (x *DeleteConfigsReq) GetTypeTwo() string {
	if x != nil {
		return x.TypeTwo
	}
	return ""
}

func (x *DeleteConfigsReq) GetTypeThree() string {
	if x != nil {
		return x.TypeThree
	}
	return ""
}

type GetConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//不指定page默认为20个
	Page      *Page    `protobuf:"bytes,2,opt,name=page,proto3" json:"page"`
	Keys      []string `protobuf:"bytes,3,rep,name=keys,proto3" json:"keys"`
	TypeOne   string   `protobuf:"bytes,4,opt,name=typeOne,proto3" json:"typeOne"`
	TypeTwo   string   `protobuf:"bytes,5,opt,name=typeTwo,proto3" json:"typeTwo"`
	TypeThree string   `protobuf:"bytes,6,opt,name=typeThree,proto3" json:"typeThree"`
	//可以获取该区间正在生效的所有配置
	StartAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=startAt,proto3" json:"startAt"`
	EndAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=endAt,proto3" json:"endAt"`
	//获取在此时间节点生效的配置
	ValidateTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=validateTime,proto3" json:"validateTime"`
}

func (x *GetConfigReq) Reset() {
	*x = GetConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigReq) ProtoMessage() {}

func (x *GetConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigReq.ProtoReflect.Descriptor instead.
func (*GetConfigReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{106}
}

func (x *GetConfigReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetConfigReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GetConfigReq) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *GetConfigReq) GetTypeOne() string {
	if x != nil {
		return x.TypeOne
	}
	return ""
}

func (x *GetConfigReq) GetTypeTwo() string {
	if x != nil {
		return x.TypeTwo
	}
	return ""
}

func (x *GetConfigReq) GetTypeThree() string {
	if x != nil {
		return x.TypeThree
	}
	return ""
}

func (x *GetConfigReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *GetConfigReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *GetConfigReq) GetValidateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidateTime
	}
	return nil
}

type CommonConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId  int64                  `protobuf:"varint,1,opt,name=configId,proto3" json:"configId"`
	Key       string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key"`
	TypeOne   string                 `protobuf:"bytes,3,opt,name=typeOne,proto3" json:"typeOne"`
	TypeTwo   string                 `protobuf:"bytes,4,opt,name=typeTwo,proto3" json:"typeTwo"`
	TypeThree string                 `protobuf:"bytes,5,opt,name=typeThree,proto3" json:"typeThree"`
	Value     string                 `protobuf:"bytes,6,opt,name=value,proto3" json:"value"`
	StartAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=startAt,proto3" json:"startAt"`
	EndAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=endAt,proto3" json:"endAt"`
	Explain   string                 `protobuf:"bytes,9,opt,name=explain,proto3" json:"explain"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created,proto3" json:"created"`
}

func (x *CommonConfig) Reset() {
	*x = CommonConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonConfig) ProtoMessage() {}

func (x *CommonConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonConfig.ProtoReflect.Descriptor instead.
func (*CommonConfig) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{107}
}

func (x *CommonConfig) GetConfigId() int64 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *CommonConfig) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CommonConfig) GetTypeOne() string {
	if x != nil {
		return x.TypeOne
	}
	return ""
}

func (x *CommonConfig) GetTypeTwo() string {
	if x != nil {
		return x.TypeTwo
	}
	return ""
}

func (x *CommonConfig) GetTypeThree() string {
	if x != nil {
		return x.TypeThree
	}
	return ""
}

func (x *CommonConfig) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CommonConfig) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *CommonConfig) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *CommonConfig) GetExplain() string {
	if x != nil {
		return x.Explain
	}
	return ""
}

func (x *CommonConfig) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type UpdateConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateConfigResp) Reset() {
	*x = UpdateConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigResp) ProtoMessage() {}

func (x *UpdateConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigResp.ProtoReflect.Descriptor instead.
func (*UpdateConfigResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{108}
}

func (x *UpdateConfigResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type InsertConfigsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *InsertConfigsResp) Reset() {
	*x = InsertConfigsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertConfigsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertConfigsResp) ProtoMessage() {}

func (x *InsertConfigsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertConfigsResp.ProtoReflect.Descriptor instead.
func (*InsertConfigsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{109}
}

func (x *InsertConfigsResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type DeleteConfigsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *DeleteConfigsResp) Reset() {
	*x = DeleteConfigsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConfigsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConfigsResp) ProtoMessage() {}

func (x *DeleteConfigsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConfigsResp.ProtoReflect.Descriptor instead.
func (*DeleteConfigsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{110}
}

func (x *DeleteConfigsResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type GetConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*CommonConfig `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64           `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64           `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetConfigResp) Reset() {
	*x = GetConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigResp) ProtoMessage() {}

func (x *GetConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigResp.ProtoReflect.Descriptor instead.
func (*GetConfigResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{111}
}

func (x *GetConfigResp) GetList() []*CommonConfig {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetConfigResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetConfigResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetConfigResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetMiInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	MiId      int64 `protobuf:"varint,2,opt,name=miId,proto3" json:"miId"`
	Page      *Page `protobuf:"bytes,3,opt,name=page,proto3" json:"page"`
}

func (x *GetMiInfoReq) Reset() {
	*x = GetMiInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMiInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMiInfoReq) ProtoMessage() {}

func (x *GetMiInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMiInfoReq.ProtoReflect.Descriptor instead.
func (*GetMiInfoReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{112}
}

func (x *GetMiInfoReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetMiInfoReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *GetMiInfoReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type MiInfoVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiId               int64                  `protobuf:"varint,1,opt,name=miId,proto3" json:"miId"`
	MiCode             string                 `protobuf:"bytes,2,opt,name=miCode,proto3" json:"miCode"`
	MiName             string                 `protobuf:"bytes,3,opt,name=miName,proto3" json:"miName"`
	MiType             string                 `protobuf:"bytes,4,opt,name=miType,proto3" json:"miType"`
	ManagerName        string                 `protobuf:"bytes,5,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone       string                 `protobuf:"bytes,6,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province           string                 `protobuf:"bytes,7,opt,name=province,proto3" json:"province"`
	City               string                 `protobuf:"bytes,8,opt,name=city,proto3" json:"city"`
	Zone               string                 `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone"`
	NormalId           string                 `protobuf:"bytes,10,opt,name=normalId,proto3" json:"normalId"`
	NormalCardOwner    string                 `protobuf:"bytes,11,opt,name=normalCardOwner,proto3" json:"normalCardOwner"`
	NormalToibkn       string                 `protobuf:"bytes,12,opt,name=normalToibkn,proto3" json:"normalToibkn"`
	NormalBank         string                 `protobuf:"bytes,13,opt,name=normalBank,proto3" json:"normalBank"`
	NormalCardNo       string                 `protobuf:"bytes,14,opt,name=normalCardNo,proto3" json:"normalCardNo"`
	NormalCardStatus   string                 `protobuf:"bytes,15,opt,name=normalCardStatus,proto3" json:"normalCardStatus"`
	SpecialId          string                 `protobuf:"bytes,16,opt,name=specialId,proto3" json:"specialId"`
	SpecialCardOwner   string                 `protobuf:"bytes,17,opt,name=specialCardOwner,proto3" json:"specialCardOwner"`
	SpecialToibkn      string                 `protobuf:"bytes,18,opt,name=specialToibkn,proto3" json:"specialToibkn"`
	SpecialBank        string                 `protobuf:"bytes,19,opt,name=specialBank,proto3" json:"specialBank"`
	SpecialCardNo      string                 `protobuf:"bytes,20,opt,name=specialCardNo,proto3" json:"specialCardNo"`
	SpecialCardStatus  string                 `protobuf:"bytes,21,opt,name=specialCardStatus,proto3" json:"specialCardStatus"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=createdAt,proto3" json:"createdAt"`
	HashInfo           string                 `protobuf:"bytes,23,opt,name=hashInfo,proto3" json:"hashInfo"`
	NormalValidStatus  string                 `protobuf:"bytes,24,opt,name=normalValidStatus,proto3" json:"normalValidStatus"`
	SpecialValidStatus string                 `protobuf:"bytes,25,opt,name=specialValidStatus,proto3" json:"specialValidStatus"`
}

func (x *MiInfoVo) Reset() {
	*x = MiInfoVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiInfoVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiInfoVo) ProtoMessage() {}

func (x *MiInfoVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiInfoVo.ProtoReflect.Descriptor instead.
func (*MiInfoVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{113}
}

func (x *MiInfoVo) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *MiInfoVo) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *MiInfoVo) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *MiInfoVo) GetMiType() string {
	if x != nil {
		return x.MiType
	}
	return ""
}

func (x *MiInfoVo) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *MiInfoVo) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *MiInfoVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *MiInfoVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *MiInfoVo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *MiInfoVo) GetNormalId() string {
	if x != nil {
		return x.NormalId
	}
	return ""
}

func (x *MiInfoVo) GetNormalCardOwner() string {
	if x != nil {
		return x.NormalCardOwner
	}
	return ""
}

func (x *MiInfoVo) GetNormalToibkn() string {
	if x != nil {
		return x.NormalToibkn
	}
	return ""
}

func (x *MiInfoVo) GetNormalBank() string {
	if x != nil {
		return x.NormalBank
	}
	return ""
}

func (x *MiInfoVo) GetNormalCardNo() string {
	if x != nil {
		return x.NormalCardNo
	}
	return ""
}

func (x *MiInfoVo) GetNormalCardStatus() string {
	if x != nil {
		return x.NormalCardStatus
	}
	return ""
}

func (x *MiInfoVo) GetSpecialId() string {
	if x != nil {
		return x.SpecialId
	}
	return ""
}

func (x *MiInfoVo) GetSpecialCardOwner() string {
	if x != nil {
		return x.SpecialCardOwner
	}
	return ""
}

func (x *MiInfoVo) GetSpecialToibkn() string {
	if x != nil {
		return x.SpecialToibkn
	}
	return ""
}

func (x *MiInfoVo) GetSpecialBank() string {
	if x != nil {
		return x.SpecialBank
	}
	return ""
}

func (x *MiInfoVo) GetSpecialCardNo() string {
	if x != nil {
		return x.SpecialCardNo
	}
	return ""
}

func (x *MiInfoVo) GetSpecialCardStatus() string {
	if x != nil {
		return x.SpecialCardStatus
	}
	return ""
}

func (x *MiInfoVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MiInfoVo) GetHashInfo() string {
	if x != nil {
		return x.HashInfo
	}
	return ""
}

func (x *MiInfoVo) GetNormalValidStatus() string {
	if x != nil {
		return x.NormalValidStatus
	}
	return ""
}

func (x *MiInfoVo) GetSpecialValidStatus() string {
	if x != nil {
		return x.SpecialValidStatus
	}
	return ""
}

type GetMiInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*MiInfoVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64       `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64       `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64       `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetMiInfoResp) Reset() {
	*x = GetMiInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMiInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMiInfoResp) ProtoMessage() {}

func (x *GetMiInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMiInfoResp.ProtoReflect.Descriptor instead.
func (*GetMiInfoResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{114}
}

func (x *GetMiInfoResp) GetList() []*MiInfoVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetMiInfoResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetMiInfoResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetMiInfoResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetMiSpecialConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	MiCode    string `protobuf:"bytes,2,opt,name=miCode,proto3" json:"miCode"`
	MiId      int64  `protobuf:"varint,3,opt,name=miId,proto3" json:"miId"`
	MiName    string `protobuf:"bytes,4,opt,name=miName,proto3" json:"miName"`
	Page      *Page  `protobuf:"bytes,5,opt,name=page,proto3" json:"page"`
}

func (x *GetMiSpecialConfigReq) Reset() {
	*x = GetMiSpecialConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMiSpecialConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMiSpecialConfigReq) ProtoMessage() {}

func (x *GetMiSpecialConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMiSpecialConfigReq.ProtoReflect.Descriptor instead.
func (*GetMiSpecialConfigReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{115}
}

func (x *GetMiSpecialConfigReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetMiSpecialConfigReq) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *GetMiSpecialConfigReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *GetMiSpecialConfigReq) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *GetMiSpecialConfigReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type MiSpecialConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiId         int64                  `protobuf:"varint,1,opt,name=miId,proto3" json:"miId"`
	MiName       string                 `protobuf:"bytes,2,opt,name=miName,proto3" json:"miName"`
	MiCode       string                 `protobuf:"bytes,3,opt,name=miCode,proto3" json:"miCode"`
	LimitBalance int64                  `protobuf:"varint,4,opt,name=limitBalance,proto3" json:"limitBalance"`
	CardNo       string                 `protobuf:"bytes,5,opt,name=cardNo,proto3" json:"cardNo"`
	AccountType  string                 `protobuf:"bytes,6,opt,name=accountType,proto3" json:"accountType"`
	Bank         string                 `protobuf:"bytes,7,opt,name=bank,proto3" json:"bank"`
	Toibkn       string                 `protobuf:"bytes,8,opt,name=toibkn,proto3" json:"toibkn"`
	FrozenAmount int64                  `protobuf:"varint,9,opt,name=frozenAmount,proto3" json:"frozenAmount"`
	CardOwner    string                 `protobuf:"bytes,10,opt,name=cardOwner,proto3" json:"cardOwner"`
	CardStatus   string                 `protobuf:"bytes,11,opt,name=cardStatus,proto3" json:"cardStatus"`
	ValidStatus  string                 `protobuf:"bytes,12,opt,name=validStatus,proto3" json:"validStatus"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=createdAt,proto3" json:"createdAt"`
}

func (x *MiSpecialConfig) Reset() {
	*x = MiSpecialConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiSpecialConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiSpecialConfig) ProtoMessage() {}

func (x *MiSpecialConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiSpecialConfig.ProtoReflect.Descriptor instead.
func (*MiSpecialConfig) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{116}
}

func (x *MiSpecialConfig) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *MiSpecialConfig) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *MiSpecialConfig) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *MiSpecialConfig) GetLimitBalance() int64 {
	if x != nil {
		return x.LimitBalance
	}
	return 0
}

func (x *MiSpecialConfig) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *MiSpecialConfig) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *MiSpecialConfig) GetBank() string {
	if x != nil {
		return x.Bank
	}
	return ""
}

func (x *MiSpecialConfig) GetToibkn() string {
	if x != nil {
		return x.Toibkn
	}
	return ""
}

func (x *MiSpecialConfig) GetFrozenAmount() int64 {
	if x != nil {
		return x.FrozenAmount
	}
	return 0
}

func (x *MiSpecialConfig) GetCardOwner() string {
	if x != nil {
		return x.CardOwner
	}
	return ""
}

func (x *MiSpecialConfig) GetCardStatus() string {
	if x != nil {
		return x.CardStatus
	}
	return ""
}

func (x *MiSpecialConfig) GetValidStatus() string {
	if x != nil {
		return x.ValidStatus
	}
	return ""
}

func (x *MiSpecialConfig) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type GetMiSpecialConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*MiSpecialConfig `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64              `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64              `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64              `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetMiSpecialConfigResp) Reset() {
	*x = GetMiSpecialConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMiSpecialConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMiSpecialConfigResp) ProtoMessage() {}

func (x *GetMiSpecialConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMiSpecialConfigResp.ProtoReflect.Descriptor instead.
func (*GetMiSpecialConfigResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{117}
}

func (x *GetMiSpecialConfigResp) GetList() []*MiSpecialConfig {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetMiSpecialConfigResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetMiSpecialConfigResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetMiSpecialConfigResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type UpdateMiSpecialConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId       int64  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	MiCode          string `protobuf:"bytes,2,opt,name=miCode,proto3" json:"miCode"`
	LimitBalance    int64  `protobuf:"varint,3,opt,name=limitBalance,proto3" json:"limitBalance"`
	OldLimitBalance int64  `protobuf:"varint,4,opt,name=oldLimitBalance,proto3" json:"oldLimitBalance"`
}

func (x *UpdateMiSpecialConfigReq) Reset() {
	*x = UpdateMiSpecialConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMiSpecialConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMiSpecialConfigReq) ProtoMessage() {}

func (x *UpdateMiSpecialConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMiSpecialConfigReq.ProtoReflect.Descriptor instead.
func (*UpdateMiSpecialConfigReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{118}
}

func (x *UpdateMiSpecialConfigReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *UpdateMiSpecialConfigReq) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *UpdateMiSpecialConfigReq) GetLimitBalance() int64 {
	if x != nil {
		return x.LimitBalance
	}
	return 0
}

func (x *UpdateMiSpecialConfigReq) GetOldLimitBalance() int64 {
	if x != nil {
		return x.OldLimitBalance
	}
	return 0
}

//招采单报表可选聚合维度
type PlanReportGroupCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//直接聚合为单行，使用此项则其他聚合条件不生效
	ByAll bool `protobuf:"varint,1,opt,name=byAll,proto3" json:"byAll"`
	//时间维度聚合,注意对于月报，按日聚合无效，年报类推
	ByMonth bool `protobuf:"varint,2,opt,name=byMonth,proto3" json:"byMonth"`
	ByYear  bool `protobuf:"varint,3,opt,name=byYear,proto3" json:"byYear"`
	ByDay   bool `protobuf:"varint,4,opt,name=byDay,proto3" json:"byDay"`
	//业务维度
	ByMi       bool `protobuf:"varint,5,opt,name=byMi,proto3" json:"byMi"`
	ByCom      bool `protobuf:"varint,6,opt,name=byCom,proto3" json:"byCom"`
	ByMedicine bool `protobuf:"varint,7,opt,name=byMedicine,proto3" json:"byMedicine"`
}

func (x *PlanReportGroupCondition) Reset() {
	*x = PlanReportGroupCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanReportGroupCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanReportGroupCondition) ProtoMessage() {}

func (x *PlanReportGroupCondition) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanReportGroupCondition.ProtoReflect.Descriptor instead.
func (*PlanReportGroupCondition) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{119}
}

func (x *PlanReportGroupCondition) GetByAll() bool {
	if x != nil {
		return x.ByAll
	}
	return false
}

func (x *PlanReportGroupCondition) GetByMonth() bool {
	if x != nil {
		return x.ByMonth
	}
	return false
}

func (x *PlanReportGroupCondition) GetByYear() bool {
	if x != nil {
		return x.ByYear
	}
	return false
}

func (x *PlanReportGroupCondition) GetByDay() bool {
	if x != nil {
		return x.ByDay
	}
	return false
}

func (x *PlanReportGroupCondition) GetByMi() bool {
	if x != nil {
		return x.ByMi
	}
	return false
}

func (x *PlanReportGroupCondition) GetByCom() bool {
	if x != nil {
		return x.ByCom
	}
	return false
}

func (x *PlanReportGroupCondition) GetByMedicine() bool {
	if x != nil {
		return x.ByMedicine
	}
	return false
}

//招采单报表可选数据筛选维度
type PlanReportGetCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//指定获取哪家医院的数据
	MiIds []int64 `protobuf:"varint,1,rep,packed,name=miIds,proto3" json:"miIds"`
	//指定获取哪家配送企业的数据
	ComIds        []int64  `protobuf:"varint,2,rep,packed,name=comIds,proto3" json:"comIds"`
	MedicineCodes []string `protobuf:"bytes,3,rep,name=medicineCodes,proto3" json:"medicineCodes"`
	//用于药品名模糊搜索，只显示5个候选药品
	MedicineName string `protobuf:"bytes,4,opt,name=medicineName,proto3" json:"medicineName"`
	//用于医院名模糊搜索，只显示5个候选医院
	MiName string `protobuf:"bytes,5,opt,name=miName,proto3" json:"miName"`
	//用于企业名模糊搜索，只显示5个候选医院
	ComName string `protobuf:"bytes,6,opt,name=comName,proto3" json:"comName"`
	//按某个标签显示
	TagId int64 `protobuf:"varint,7,opt,name=tagId,proto3" json:"tagId"`
}

func (x *PlanReportGetCondition) Reset() {
	*x = PlanReportGetCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanReportGetCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanReportGetCondition) ProtoMessage() {}

func (x *PlanReportGetCondition) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanReportGetCondition.ProtoReflect.Descriptor instead.
func (*PlanReportGetCondition) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{120}
}

func (x *PlanReportGetCondition) GetMiIds() []int64 {
	if x != nil {
		return x.MiIds
	}
	return nil
}

func (x *PlanReportGetCondition) GetComIds() []int64 {
	if x != nil {
		return x.ComIds
	}
	return nil
}

func (x *PlanReportGetCondition) GetMedicineCodes() []string {
	if x != nil {
		return x.MedicineCodes
	}
	return nil
}

func (x *PlanReportGetCondition) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *PlanReportGetCondition) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *PlanReportGetCondition) GetComName() string {
	if x != nil {
		return x.ComName
	}
	return ""
}

func (x *PlanReportGetCondition) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

type GetShipmentPlanReportsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪个医保局的订单报表数据，目前不支持不同医保局混合统计
	MibId int64 `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	//报表的起止日期必填
	StartAt            *timestamppb.Timestamp    `protobuf:"bytes,3,opt,name=startAt,proto3" json:"startAt"`
	EndAt              *timestamppb.Timestamp    `protobuf:"bytes,4,opt,name=endAt,proto3" json:"endAt"`
	OptionalFilterCond *PlanReportGetCondition   `protobuf:"bytes,5,opt,name=optionalFilterCond,proto3" json:"optionalFilterCond"`
	OptionalGroupCond  *PlanReportGroupCondition `protobuf:"bytes,6,opt,name=optionalGroupCond,proto3" json:"optionalGroupCond"`
	Page               *Page                     `protobuf:"bytes,7,opt,name=page,proto3" json:"page"`
}

func (x *GetShipmentPlanReportsReq) Reset() {
	*x = GetShipmentPlanReportsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentPlanReportsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentPlanReportsReq) ProtoMessage() {}

func (x *GetShipmentPlanReportsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentPlanReportsReq.ProtoReflect.Descriptor instead.
func (*GetShipmentPlanReportsReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{121}
}

func (x *GetShipmentPlanReportsReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetShipmentPlanReportsReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *GetShipmentPlanReportsReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *GetShipmentPlanReportsReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *GetShipmentPlanReportsReq) GetOptionalFilterCond() *PlanReportGetCondition {
	if x != nil {
		return x.OptionalFilterCond
	}
	return nil
}

func (x *GetShipmentPlanReportsReq) GetOptionalGroupCond() *PlanReportGroupCondition {
	if x != nil {
		return x.OptionalGroupCond
	}
	return nil
}

func (x *GetShipmentPlanReportsReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type CompanyReportVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId    int64  `protobuf:"varint,1,opt,name=companyId,proto3" json:"companyId"`
	CompanyName  string `protobuf:"bytes,2,opt,name=companyName,proto3" json:"companyName"`
	CompanyCode  string `protobuf:"bytes,3,opt,name=companyCode,proto3" json:"companyCode"`
	ManagerName  string `protobuf:"bytes,4,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone string `protobuf:"bytes,5,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province     string `protobuf:"bytes,6,opt,name=province,proto3" json:"province"`
	City         string `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`
	Zone         string `protobuf:"bytes,8,opt,name=zone,proto3" json:"zone"`
}

func (x *CompanyReportVo) Reset() {
	*x = CompanyReportVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyReportVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyReportVo) ProtoMessage() {}

func (x *CompanyReportVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyReportVo.ProtoReflect.Descriptor instead.
func (*CompanyReportVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{122}
}

func (x *CompanyReportVo) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *CompanyReportVo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *CompanyReportVo) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *CompanyReportVo) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *CompanyReportVo) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *CompanyReportVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *CompanyReportVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CompanyReportVo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

type MiReportVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiId         int64  `protobuf:"varint,1,opt,name=miId,proto3" json:"miId"`
	MiCode       string `protobuf:"bytes,2,opt,name=miCode,proto3" json:"miCode"`
	MiName       string `protobuf:"bytes,3,opt,name=miName,proto3" json:"miName"`
	MiType       string `protobuf:"bytes,4,opt,name=miType,proto3" json:"miType"`
	ManagerName  string `protobuf:"bytes,5,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone string `protobuf:"bytes,6,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province     string `protobuf:"bytes,7,opt,name=province,proto3" json:"province"`
	City         string `protobuf:"bytes,8,opt,name=city,proto3" json:"city"`
	Zone         string `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone"`
}

func (x *MiReportVo) Reset() {
	*x = MiReportVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiReportVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiReportVo) ProtoMessage() {}

func (x *MiReportVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiReportVo.ProtoReflect.Descriptor instead.
func (*MiReportVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{123}
}

func (x *MiReportVo) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *MiReportVo) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *MiReportVo) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *MiReportVo) GetMiType() string {
	if x != nil {
		return x.MiType
	}
	return ""
}

func (x *MiReportVo) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *MiReportVo) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *MiReportVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *MiReportVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *MiReportVo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

type MedicineReportVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineId            int64  `protobuf:"varint,1,opt,name=medicineId,proto3" json:"medicineId"`
	MedicineName          string `protobuf:"bytes,2,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string `protobuf:"bytes,3,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineSpecification string `protobuf:"bytes,4,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	MedicineForm          string `protobuf:"bytes,5,opt,name=medicineForm,proto3" json:"medicineForm"`
	MedicinePackage       string `protobuf:"bytes,6,opt,name=medicinePackage,proto3" json:"medicinePackage"`
	CalculateRate         int64  `protobuf:"varint,7,opt,name=calculateRate,proto3" json:"calculateRate"`
	Manufacturer          string `protobuf:"bytes,8,opt,name=manufacturer,proto3" json:"manufacturer"`
	MedicineUnit          string `protobuf:"bytes,9,opt,name=medicineUnit,proto3" json:"medicineUnit"`
	TagName               string `protobuf:"bytes,10,opt,name=tagName,proto3" json:"tagName"`
}

func (x *MedicineReportVo) Reset() {
	*x = MedicineReportVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineReportVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineReportVo) ProtoMessage() {}

func (x *MedicineReportVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineReportVo.ProtoReflect.Descriptor instead.
func (*MedicineReportVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{124}
}

func (x *MedicineReportVo) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *MedicineReportVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *MedicineReportVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *MedicineReportVo) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *MedicineReportVo) GetMedicineForm() string {
	if x != nil {
		return x.MedicineForm
	}
	return ""
}

func (x *MedicineReportVo) GetMedicinePackage() string {
	if x != nil {
		return x.MedicinePackage
	}
	return ""
}

func (x *MedicineReportVo) GetCalculateRate() int64 {
	if x != nil {
		return x.CalculateRate
	}
	return 0
}

func (x *MedicineReportVo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *MedicineReportVo) GetMedicineUnit() string {
	if x != nil {
		return x.MedicineUnit
	}
	return ""
}

func (x *MedicineReportVo) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

type ShipmentPlanDayReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	Year  int64 `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month int64 `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	Day   int64 `protobuf:"varint,3,opt,name=day,proto3" json:"day"`
	MibId int64 `protobuf:"varint,4,opt,name=mibId,proto3" json:"mibId"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo  *CompanyReportVo  `protobuf:"bytes,5,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo       *MiReportVo       `protobuf:"bytes,6,opt,name=miInfo,proto3" json:"miInfo"`
	MedicineInfo *MedicineReportVo `protobuf:"bytes,7,opt,name=medicineInfo,proto3" json:"medicineInfo"`
	//本日配送计划同步金额
	ShipmentPlanAmount           int64                  `protobuf:"varint,8,opt,name=shipmentPlanAmount,proto3" json:"shipmentPlanAmount"`
	ShipmentPlanCount            int64                  `protobuf:"varint,9,opt,name=shipmentPlanCount,proto3" json:"shipmentPlanCount"`
	ShipmentPlanUnitCount        int64                  `protobuf:"varint,10,opt,name=shipmentPlanUnitCount,proto3" json:"shipmentPlanUnitCount"`
	ShipmentPlanReceiveAmount    int64                  `protobuf:"varint,11,opt,name=shipmentPlanReceiveAmount,proto3" json:"shipmentPlanReceiveAmount"`
	ShipmentPlanReceiveCount     int64                  `protobuf:"varint,12,opt,name=shipmentPlanReceiveCount,proto3" json:"shipmentPlanReceiveCount"`
	ShipmentPlanReceiveUnitCount int64                  `protobuf:"varint,13,opt,name=shipmentPlanReceiveUnitCount,proto3" json:"shipmentPlanReceiveUnitCount"`
	ShipmentPlanNotSentAmount    int64                  `protobuf:"varint,14,opt,name=shipmentPlanNotSentAmount,proto3" json:"shipmentPlanNotSentAmount"`
	ShipmentPlanNotSentCount     int64                  `protobuf:"varint,15,opt,name=shipmentPlanNotSentCount,proto3" json:"shipmentPlanNotSentCount"`
	ShipmentPlanNotSentUnitCount int64                  `protobuf:"varint,16,opt,name=shipmentPlanNotSentUnitCount,proto3" json:"shipmentPlanNotSentUnitCount"`
	ReportDate                   *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=reportDate,proto3" json:"reportDate"`
}

func (x *ShipmentPlanDayReport) Reset() {
	*x = ShipmentPlanDayReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentPlanDayReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentPlanDayReport) ProtoMessage() {}

func (x *ShipmentPlanDayReport) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentPlanDayReport.ProtoReflect.Descriptor instead.
func (*ShipmentPlanDayReport) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{125}
}

func (x *ShipmentPlanDayReport) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetDay() int64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *ShipmentPlanDayReport) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *ShipmentPlanDayReport) GetMedicineInfo() *MedicineReportVo {
	if x != nil {
		return x.MedicineInfo
	}
	return nil
}

func (x *ShipmentPlanDayReport) GetShipmentPlanAmount() int64 {
	if x != nil {
		return x.ShipmentPlanAmount
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetShipmentPlanCount() int64 {
	if x != nil {
		return x.ShipmentPlanCount
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetShipmentPlanUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanUnitCount
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetShipmentPlanReceiveAmount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveAmount
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetShipmentPlanReceiveCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveCount
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetShipmentPlanReceiveUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveUnitCount
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetShipmentPlanNotSentAmount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentAmount
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetShipmentPlanNotSentCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentCount
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetShipmentPlanNotSentUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentUnitCount
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

type ShipmentPlanMonthReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	Year  int64 `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month int64 `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	MibId int64 `protobuf:"varint,3,opt,name=mibId,proto3" json:"mibId"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo  *CompanyReportVo  `protobuf:"bytes,4,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo       *MiReportVo       `protobuf:"bytes,5,opt,name=miInfo,proto3" json:"miInfo"`
	MedicineInfo *MedicineReportVo `protobuf:"bytes,6,opt,name=medicineInfo,proto3" json:"medicineInfo"`
	//本日配送计划同步金额
	ShipmentPlanAmount           int64                  `protobuf:"varint,7,opt,name=shipmentPlanAmount,proto3" json:"shipmentPlanAmount"`
	ShipmentPlanCount            int64                  `protobuf:"varint,8,opt,name=shipmentPlanCount,proto3" json:"shipmentPlanCount"`
	ShipmentPlanUnitCount        int64                  `protobuf:"varint,9,opt,name=shipmentPlanUnitCount,proto3" json:"shipmentPlanUnitCount"`
	ShipmentPlanReceiveAmount    int64                  `protobuf:"varint,10,opt,name=shipmentPlanReceiveAmount,proto3" json:"shipmentPlanReceiveAmount"`
	ShipmentPlanReceiveCount     int64                  `protobuf:"varint,11,opt,name=shipmentPlanReceiveCount,proto3" json:"shipmentPlanReceiveCount"`
	ShipmentPlanReceiveUnitCount int64                  `protobuf:"varint,12,opt,name=shipmentPlanReceiveUnitCount,proto3" json:"shipmentPlanReceiveUnitCount"`
	ShipmentPlanNotSentAmount    int64                  `protobuf:"varint,13,opt,name=shipmentPlanNotSentAmount,proto3" json:"shipmentPlanNotSentAmount"`
	ShipmentPlanNotSentCount     int64                  `protobuf:"varint,14,opt,name=shipmentPlanNotSentCount,proto3" json:"shipmentPlanNotSentCount"`
	ShipmentPlanNotSentUnitCount int64                  `protobuf:"varint,15,opt,name=shipmentPlanNotSentUnitCount,proto3" json:"shipmentPlanNotSentUnitCount"`
	ReportDate                   *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=reportDate,proto3" json:"reportDate"`
}

func (x *ShipmentPlanMonthReport) Reset() {
	*x = ShipmentPlanMonthReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentPlanMonthReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentPlanMonthReport) ProtoMessage() {}

func (x *ShipmentPlanMonthReport) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentPlanMonthReport.ProtoReflect.Descriptor instead.
func (*ShipmentPlanMonthReport) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{126}
}

func (x *ShipmentPlanMonthReport) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ShipmentPlanMonthReport) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ShipmentPlanMonthReport) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *ShipmentPlanMonthReport) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *ShipmentPlanMonthReport) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *ShipmentPlanMonthReport) GetMedicineInfo() *MedicineReportVo {
	if x != nil {
		return x.MedicineInfo
	}
	return nil
}

func (x *ShipmentPlanMonthReport) GetShipmentPlanAmount() int64 {
	if x != nil {
		return x.ShipmentPlanAmount
	}
	return 0
}

func (x *ShipmentPlanMonthReport) GetShipmentPlanCount() int64 {
	if x != nil {
		return x.ShipmentPlanCount
	}
	return 0
}

func (x *ShipmentPlanMonthReport) GetShipmentPlanUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanUnitCount
	}
	return 0
}

func (x *ShipmentPlanMonthReport) GetShipmentPlanReceiveAmount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveAmount
	}
	return 0
}

func (x *ShipmentPlanMonthReport) GetShipmentPlanReceiveCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveCount
	}
	return 0
}

func (x *ShipmentPlanMonthReport) GetShipmentPlanReceiveUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveUnitCount
	}
	return 0
}

func (x *ShipmentPlanMonthReport) GetShipmentPlanNotSentAmount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentAmount
	}
	return 0
}

func (x *ShipmentPlanMonthReport) GetShipmentPlanNotSentCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentCount
	}
	return 0
}

func (x *ShipmentPlanMonthReport) GetShipmentPlanNotSentUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentUnitCount
	}
	return 0
}

func (x *ShipmentPlanMonthReport) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

type ShipmentPlanYearReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	Year  int64 `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	MibId int64 `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo  *CompanyReportVo  `protobuf:"bytes,3,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo       *MiReportVo       `protobuf:"bytes,4,opt,name=miInfo,proto3" json:"miInfo"`
	MedicineInfo *MedicineReportVo `protobuf:"bytes,5,opt,name=medicineInfo,proto3" json:"medicineInfo"`
	//本日配送计划同步金额
	ShipmentPlanAmount           int64                  `protobuf:"varint,6,opt,name=shipmentPlanAmount,proto3" json:"shipmentPlanAmount"`
	ShipmentPlanCount            int64                  `protobuf:"varint,7,opt,name=shipmentPlanCount,proto3" json:"shipmentPlanCount"`
	ShipmentPlanUnitCount        int64                  `protobuf:"varint,8,opt,name=shipmentPlanUnitCount,proto3" json:"shipmentPlanUnitCount"`
	ShipmentPlanReceiveAmount    int64                  `protobuf:"varint,9,opt,name=shipmentPlanReceiveAmount,proto3" json:"shipmentPlanReceiveAmount"`
	ShipmentPlanReceiveCount     int64                  `protobuf:"varint,10,opt,name=shipmentPlanReceiveCount,proto3" json:"shipmentPlanReceiveCount"`
	ShipmentPlanReceiveUnitCount int64                  `protobuf:"varint,11,opt,name=shipmentPlanReceiveUnitCount,proto3" json:"shipmentPlanReceiveUnitCount"`
	ShipmentPlanNotSentAmount    int64                  `protobuf:"varint,12,opt,name=shipmentPlanNotSentAmount,proto3" json:"shipmentPlanNotSentAmount"`
	ShipmentPlanNotSentCount     int64                  `protobuf:"varint,13,opt,name=shipmentPlanNotSentCount,proto3" json:"shipmentPlanNotSentCount"`
	ShipmentPlanNotSentUnitCount int64                  `protobuf:"varint,14,opt,name=shipmentPlanNotSentUnitCount,proto3" json:"shipmentPlanNotSentUnitCount"`
	ReportDate                   *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=reportDate,proto3" json:"reportDate"`
}

func (x *ShipmentPlanYearReport) Reset() {
	*x = ShipmentPlanYearReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentPlanYearReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentPlanYearReport) ProtoMessage() {}

func (x *ShipmentPlanYearReport) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentPlanYearReport.ProtoReflect.Descriptor instead.
func (*ShipmentPlanYearReport) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{127}
}

func (x *ShipmentPlanYearReport) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ShipmentPlanYearReport) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *ShipmentPlanYearReport) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *ShipmentPlanYearReport) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *ShipmentPlanYearReport) GetMedicineInfo() *MedicineReportVo {
	if x != nil {
		return x.MedicineInfo
	}
	return nil
}

func (x *ShipmentPlanYearReport) GetShipmentPlanAmount() int64 {
	if x != nil {
		return x.ShipmentPlanAmount
	}
	return 0
}

func (x *ShipmentPlanYearReport) GetShipmentPlanCount() int64 {
	if x != nil {
		return x.ShipmentPlanCount
	}
	return 0
}

func (x *ShipmentPlanYearReport) GetShipmentPlanUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanUnitCount
	}
	return 0
}

func (x *ShipmentPlanYearReport) GetShipmentPlanReceiveAmount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveAmount
	}
	return 0
}

func (x *ShipmentPlanYearReport) GetShipmentPlanReceiveCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveCount
	}
	return 0
}

func (x *ShipmentPlanYearReport) GetShipmentPlanReceiveUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveUnitCount
	}
	return 0
}

func (x *ShipmentPlanYearReport) GetShipmentPlanNotSentAmount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentAmount
	}
	return 0
}

func (x *ShipmentPlanYearReport) GetShipmentPlanNotSentCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentCount
	}
	return 0
}

func (x *ShipmentPlanYearReport) GetShipmentPlanNotSentUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentUnitCount
	}
	return 0
}

func (x *ShipmentPlanYearReport) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

type GetShipmentPlanDayReportsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ShipmentPlanDayReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                    `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                    `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                    `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetShipmentPlanDayReportsResp) Reset() {
	*x = GetShipmentPlanDayReportsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentPlanDayReportsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentPlanDayReportsResp) ProtoMessage() {}

func (x *GetShipmentPlanDayReportsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentPlanDayReportsResp.ProtoReflect.Descriptor instead.
func (*GetShipmentPlanDayReportsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{128}
}

func (x *GetShipmentPlanDayReportsResp) GetList() []*ShipmentPlanDayReport {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShipmentPlanDayReportsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetShipmentPlanDayReportsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShipmentPlanDayReportsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetShipmentPlanMonthReportsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ShipmentPlanMonthReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                      `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                      `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                      `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetShipmentPlanMonthReportsResp) Reset() {
	*x = GetShipmentPlanMonthReportsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentPlanMonthReportsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentPlanMonthReportsResp) ProtoMessage() {}

func (x *GetShipmentPlanMonthReportsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentPlanMonthReportsResp.ProtoReflect.Descriptor instead.
func (*GetShipmentPlanMonthReportsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{129}
}

func (x *GetShipmentPlanMonthReportsResp) GetList() []*ShipmentPlanMonthReport {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShipmentPlanMonthReportsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetShipmentPlanMonthReportsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShipmentPlanMonthReportsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetShipmentPlanYearReportsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ShipmentPlanYearReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                     `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                     `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                     `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetShipmentPlanYearReportsResp) Reset() {
	*x = GetShipmentPlanYearReportsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentPlanYearReportsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentPlanYearReportsResp) ProtoMessage() {}

func (x *GetShipmentPlanYearReportsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentPlanYearReportsResp.ProtoReflect.Descriptor instead.
func (*GetShipmentPlanYearReportsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{130}
}

func (x *GetShipmentPlanYearReportsResp) GetList() []*ShipmentPlanYearReport {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShipmentPlanYearReportsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetShipmentPlanYearReportsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShipmentPlanYearReportsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

//配送单报表可选聚合维度
type OrderReportGroupCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//直接聚合为单行，使用此项则其他聚合条件不生效
	ByAll bool `protobuf:"varint,1,opt,name=byAll,proto3" json:"byAll"`
	//时间维度聚合,注意对于月报，按日聚合无效，年报类推
	ByMonth bool `protobuf:"varint,2,opt,name=byMonth,proto3" json:"byMonth"`
	ByYear  bool `protobuf:"varint,3,opt,name=byYear,proto3" json:"byYear"`
	ByDay   bool `protobuf:"varint,4,opt,name=byDay,proto3" json:"byDay"`
	//业务维度
	ByMi  bool `protobuf:"varint,5,opt,name=byMi,proto3" json:"byMi"`
	ByCom bool `protobuf:"varint,6,opt,name=byCom,proto3" json:"byCom"`
}

func (x *OrderReportGroupCondition) Reset() {
	*x = OrderReportGroupCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderReportGroupCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderReportGroupCondition) ProtoMessage() {}

func (x *OrderReportGroupCondition) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderReportGroupCondition.ProtoReflect.Descriptor instead.
func (*OrderReportGroupCondition) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{131}
}

func (x *OrderReportGroupCondition) GetByAll() bool {
	if x != nil {
		return x.ByAll
	}
	return false
}

func (x *OrderReportGroupCondition) GetByMonth() bool {
	if x != nil {
		return x.ByMonth
	}
	return false
}

func (x *OrderReportGroupCondition) GetByYear() bool {
	if x != nil {
		return x.ByYear
	}
	return false
}

func (x *OrderReportGroupCondition) GetByDay() bool {
	if x != nil {
		return x.ByDay
	}
	return false
}

func (x *OrderReportGroupCondition) GetByMi() bool {
	if x != nil {
		return x.ByMi
	}
	return false
}

func (x *OrderReportGroupCondition) GetByCom() bool {
	if x != nil {
		return x.ByCom
	}
	return false
}

//配送单报表可选数据筛选维度
type OrderReportGetCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//指定获取哪家医院的数据
	MiIds []int64 `protobuf:"varint,1,rep,packed,name=miIds,proto3" json:"miIds"`
	//指定获取哪家配送企业的数据
	ComIds []int64 `protobuf:"varint,2,rep,packed,name=comIds,proto3" json:"comIds"`
	//用于医院名模糊搜索，只显示5个候选医院
	MiName string `protobuf:"bytes,3,opt,name=miName,proto3" json:"miName"`
	//用于配送企业名模糊搜索，只显示5个候选
	ComName string `protobuf:"bytes,4,opt,name=comName,proto3" json:"comName"`
}

func (x *OrderReportGetCondition) Reset() {
	*x = OrderReportGetCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderReportGetCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderReportGetCondition) ProtoMessage() {}

func (x *OrderReportGetCondition) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderReportGetCondition.ProtoReflect.Descriptor instead.
func (*OrderReportGetCondition) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{132}
}

func (x *OrderReportGetCondition) GetMiIds() []int64 {
	if x != nil {
		return x.MiIds
	}
	return nil
}

func (x *OrderReportGetCondition) GetComIds() []int64 {
	if x != nil {
		return x.ComIds
	}
	return nil
}

func (x *OrderReportGetCondition) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *OrderReportGetCondition) GetComName() string {
	if x != nil {
		return x.ComName
	}
	return ""
}

type GetShipmentOrderReportsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪个医保局的订单报表数据，目前不支持不同医保局混合统计
	MibId  int64  `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	Year   int64  `protobuf:"varint,3,opt,name=year,proto3" json:"year"`
	MiCode string `protobuf:"bytes,4,opt,name=miCode,proto3" json:"miCode"`
	//报表的起止日期必填
	StartAt            *timestamppb.Timestamp     `protobuf:"bytes,5,opt,name=startAt,proto3" json:"startAt"`
	EndAt              *timestamppb.Timestamp     `protobuf:"bytes,6,opt,name=endAt,proto3" json:"endAt"`
	OptionalFilterCond *OrderReportGetCondition   `protobuf:"bytes,7,opt,name=optionalFilterCond,proto3" json:"optionalFilterCond"`
	OptionalGroupCond  *OrderReportGroupCondition `protobuf:"bytes,8,opt,name=optionalGroupCond,proto3" json:"optionalGroupCond"`
	Page               *Page                      `protobuf:"bytes,9,opt,name=page,proto3" json:"page"`
}

func (x *GetShipmentOrderReportsReq) Reset() {
	*x = GetShipmentOrderReportsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentOrderReportsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentOrderReportsReq) ProtoMessage() {}

func (x *GetShipmentOrderReportsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentOrderReportsReq.ProtoReflect.Descriptor instead.
func (*GetShipmentOrderReportsReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{133}
}

func (x *GetShipmentOrderReportsReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetShipmentOrderReportsReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *GetShipmentOrderReportsReq) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *GetShipmentOrderReportsReq) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *GetShipmentOrderReportsReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *GetShipmentOrderReportsReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *GetShipmentOrderReportsReq) GetOptionalFilterCond() *OrderReportGetCondition {
	if x != nil {
		return x.OptionalFilterCond
	}
	return nil
}

func (x *GetShipmentOrderReportsReq) GetOptionalGroupCond() *OrderReportGroupCondition {
	if x != nil {
		return x.OptionalGroupCond
	}
	return nil
}

func (x *GetShipmentOrderReportsReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ShipmentOrderDayReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	Year  int64 `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month int64 `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	Day   int64 `protobuf:"varint,3,opt,name=day,proto3" json:"day"`
	MibId int64 `protobuf:"varint,4,opt,name=mibId,proto3" json:"mibId"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo                   *CompanyReportVo       `protobuf:"bytes,5,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo                        *MiReportVo            `protobuf:"bytes,6,opt,name=miInfo,proto3" json:"miInfo"`
	ShipmentOrderPaidAmount       int64                  `protobuf:"varint,7,opt,name=shipmentOrderPaidAmount,proto3" json:"shipmentOrderPaidAmount"`
	ShipmentOrderPaidCount        int64                  `protobuf:"varint,8,opt,name=shipmentOrderPaidCount,proto3" json:"shipmentOrderPaidCount"`
	ShipmentOrderSpecialPayAmount int64                  `protobuf:"varint,9,opt,name=shipmentOrderSpecialPayAmount,proto3" json:"shipmentOrderSpecialPayAmount"`
	ShipmentOrderSpecialPayCount  int64                  `protobuf:"varint,10,opt,name=shipmentOrderSpecialPayCount,proto3" json:"shipmentOrderSpecialPayCount"`
	ShipmentOrderNormalPayAmount  int64                  `protobuf:"varint,11,opt,name=shipmentOrderNormalPayAmount,proto3" json:"shipmentOrderNormalPayAmount"`
	ShipmentOrderNormalPayCount   int64                  `protobuf:"varint,12,opt,name=shipmentOrderNormalPayCount,proto3" json:"shipmentOrderNormalPayCount"`
	ShipmentOrderReceiveAmount    int64                  `protobuf:"varint,13,opt,name=shipmentOrderReceiveAmount,proto3" json:"shipmentOrderReceiveAmount"`
	ShipmentOrderReceiveCount     int64                  `protobuf:"varint,14,opt,name=shipmentOrderReceiveCount,proto3" json:"shipmentOrderReceiveCount"`
	ShipmentOrderTimeoutAmount    int64                  `protobuf:"varint,15,opt,name=shipmentOrderTimeoutAmount,proto3" json:"shipmentOrderTimeoutAmount"`
	ShipmentOrderTimeoutCount     int64                  `protobuf:"varint,16,opt,name=shipmentOrderTimeoutCount,proto3" json:"shipmentOrderTimeoutCount"`
	ReportDate                    *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=reportDate,proto3" json:"reportDate"`
}

func (x *ShipmentOrderDayReport) Reset() {
	*x = ShipmentOrderDayReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentOrderDayReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentOrderDayReport) ProtoMessage() {}

func (x *ShipmentOrderDayReport) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentOrderDayReport.ProtoReflect.Descriptor instead.
func (*ShipmentOrderDayReport) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{134}
}

func (x *ShipmentOrderDayReport) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetDay() int64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *ShipmentOrderDayReport) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *ShipmentOrderDayReport) GetShipmentOrderPaidAmount() int64 {
	if x != nil {
		return x.ShipmentOrderPaidAmount
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetShipmentOrderPaidCount() int64 {
	if x != nil {
		return x.ShipmentOrderPaidCount
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetShipmentOrderSpecialPayAmount() int64 {
	if x != nil {
		return x.ShipmentOrderSpecialPayAmount
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetShipmentOrderSpecialPayCount() int64 {
	if x != nil {
		return x.ShipmentOrderSpecialPayCount
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetShipmentOrderNormalPayAmount() int64 {
	if x != nil {
		return x.ShipmentOrderNormalPayAmount
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetShipmentOrderNormalPayCount() int64 {
	if x != nil {
		return x.ShipmentOrderNormalPayCount
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetShipmentOrderReceiveAmount() int64 {
	if x != nil {
		return x.ShipmentOrderReceiveAmount
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetShipmentOrderReceiveCount() int64 {
	if x != nil {
		return x.ShipmentOrderReceiveCount
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetShipmentOrderTimeoutAmount() int64 {
	if x != nil {
		return x.ShipmentOrderTimeoutAmount
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetShipmentOrderTimeoutCount() int64 {
	if x != nil {
		return x.ShipmentOrderTimeoutCount
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

type ShipmentOrderMonthReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	Year       int64                  `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month      int64                  `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	ReportDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=reportDate,proto3" json:"reportDate"`
	MibId      int64                  `protobuf:"varint,4,opt,name=mibId,proto3" json:"mibId"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo                   *CompanyReportVo `protobuf:"bytes,5,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo                        *MiReportVo      `protobuf:"bytes,6,opt,name=miInfo,proto3" json:"miInfo"`
	ShipmentOrderPaidAmount       int64            `protobuf:"varint,7,opt,name=shipmentOrderPaidAmount,proto3" json:"shipmentOrderPaidAmount"`
	ShipmentOrderPaidCount        int64            `protobuf:"varint,8,opt,name=shipmentOrderPaidCount,proto3" json:"shipmentOrderPaidCount"`
	ShipmentOrderSpecialPayAmount int64            `protobuf:"varint,9,opt,name=shipmentOrderSpecialPayAmount,proto3" json:"shipmentOrderSpecialPayAmount"`
	ShipmentOrderSpecialPayCount  int64            `protobuf:"varint,10,opt,name=shipmentOrderSpecialPayCount,proto3" json:"shipmentOrderSpecialPayCount"`
	ShipmentOrderNormalPayAmount  int64            `protobuf:"varint,11,opt,name=shipmentOrderNormalPayAmount,proto3" json:"shipmentOrderNormalPayAmount"`
	ShipmentOrderNormalPayCount   int64            `protobuf:"varint,12,opt,name=shipmentOrderNormalPayCount,proto3" json:"shipmentOrderNormalPayCount"`
	ShipmentOrderReceiveAmount    int64            `protobuf:"varint,13,opt,name=shipmentOrderReceiveAmount,proto3" json:"shipmentOrderReceiveAmount"`
	ShipmentOrderReceiveCount     int64            `protobuf:"varint,14,opt,name=shipmentOrderReceiveCount,proto3" json:"shipmentOrderReceiveCount"`
	ShipmentOrderTimeoutAmount    int64            `protobuf:"varint,15,opt,name=shipmentOrderTimeoutAmount,proto3" json:"shipmentOrderTimeoutAmount"`
	ShipmentOrderTimeoutCount     int64            `protobuf:"varint,16,opt,name=shipmentOrderTimeoutCount,proto3" json:"shipmentOrderTimeoutCount"`
}

func (x *ShipmentOrderMonthReport) Reset() {
	*x = ShipmentOrderMonthReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentOrderMonthReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentOrderMonthReport) ProtoMessage() {}

func (x *ShipmentOrderMonthReport) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentOrderMonthReport.ProtoReflect.Descriptor instead.
func (*ShipmentOrderMonthReport) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{135}
}

func (x *ShipmentOrderMonthReport) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ShipmentOrderMonthReport) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ShipmentOrderMonthReport) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

func (x *ShipmentOrderMonthReport) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *ShipmentOrderMonthReport) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *ShipmentOrderMonthReport) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *ShipmentOrderMonthReport) GetShipmentOrderPaidAmount() int64 {
	if x != nil {
		return x.ShipmentOrderPaidAmount
	}
	return 0
}

func (x *ShipmentOrderMonthReport) GetShipmentOrderPaidCount() int64 {
	if x != nil {
		return x.ShipmentOrderPaidCount
	}
	return 0
}

func (x *ShipmentOrderMonthReport) GetShipmentOrderSpecialPayAmount() int64 {
	if x != nil {
		return x.ShipmentOrderSpecialPayAmount
	}
	return 0
}

func (x *ShipmentOrderMonthReport) GetShipmentOrderSpecialPayCount() int64 {
	if x != nil {
		return x.ShipmentOrderSpecialPayCount
	}
	return 0
}

func (x *ShipmentOrderMonthReport) GetShipmentOrderNormalPayAmount() int64 {
	if x != nil {
		return x.ShipmentOrderNormalPayAmount
	}
	return 0
}

func (x *ShipmentOrderMonthReport) GetShipmentOrderNormalPayCount() int64 {
	if x != nil {
		return x.ShipmentOrderNormalPayCount
	}
	return 0
}

func (x *ShipmentOrderMonthReport) GetShipmentOrderReceiveAmount() int64 {
	if x != nil {
		return x.ShipmentOrderReceiveAmount
	}
	return 0
}

func (x *ShipmentOrderMonthReport) GetShipmentOrderReceiveCount() int64 {
	if x != nil {
		return x.ShipmentOrderReceiveCount
	}
	return 0
}

func (x *ShipmentOrderMonthReport) GetShipmentOrderTimeoutAmount() int64 {
	if x != nil {
		return x.ShipmentOrderTimeoutAmount
	}
	return 0
}

func (x *ShipmentOrderMonthReport) GetShipmentOrderTimeoutCount() int64 {
	if x != nil {
		return x.ShipmentOrderTimeoutCount
	}
	return 0
}

type ShipmentOrderYearReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	Year       int64                  `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	ReportDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=reportDate,proto3" json:"reportDate"`
	MibId      int64                  `protobuf:"varint,3,opt,name=mibId,proto3" json:"mibId"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo                   *CompanyReportVo `protobuf:"bytes,4,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo                        *MiReportVo      `protobuf:"bytes,5,opt,name=miInfo,proto3" json:"miInfo"`
	ShipmentOrderPaidAmount       int64            `protobuf:"varint,6,opt,name=shipmentOrderPaidAmount,proto3" json:"shipmentOrderPaidAmount"`
	ShipmentOrderPaidCount        int64            `protobuf:"varint,7,opt,name=shipmentOrderPaidCount,proto3" json:"shipmentOrderPaidCount"`
	ShipmentOrderSpecialPayAmount int64            `protobuf:"varint,8,opt,name=shipmentOrderSpecialPayAmount,proto3" json:"shipmentOrderSpecialPayAmount"`
	ShipmentOrderSpecialPayCount  int64            `protobuf:"varint,9,opt,name=shipmentOrderSpecialPayCount,proto3" json:"shipmentOrderSpecialPayCount"`
	ShipmentOrderNormalPayAmount  int64            `protobuf:"varint,10,opt,name=shipmentOrderNormalPayAmount,proto3" json:"shipmentOrderNormalPayAmount"`
	ShipmentOrderNormalPayCount   int64            `protobuf:"varint,11,opt,name=shipmentOrderNormalPayCount,proto3" json:"shipmentOrderNormalPayCount"`
	ShipmentOrderReceiveAmount    int64            `protobuf:"varint,12,opt,name=shipmentOrderReceiveAmount,proto3" json:"shipmentOrderReceiveAmount"`
	ShipmentOrderReceiveCount     int64            `protobuf:"varint,13,opt,name=shipmentOrderReceiveCount,proto3" json:"shipmentOrderReceiveCount"`
	ShipmentOrderTimeoutAmount    int64            `protobuf:"varint,14,opt,name=shipmentOrderTimeoutAmount,proto3" json:"shipmentOrderTimeoutAmount"`
	ShipmentOrderTimeoutCount     int64            `protobuf:"varint,15,opt,name=shipmentOrderTimeoutCount,proto3" json:"shipmentOrderTimeoutCount"`
}

func (x *ShipmentOrderYearReport) Reset() {
	*x = ShipmentOrderYearReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentOrderYearReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentOrderYearReport) ProtoMessage() {}

func (x *ShipmentOrderYearReport) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentOrderYearReport.ProtoReflect.Descriptor instead.
func (*ShipmentOrderYearReport) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{136}
}

func (x *ShipmentOrderYearReport) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ShipmentOrderYearReport) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

func (x *ShipmentOrderYearReport) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *ShipmentOrderYearReport) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *ShipmentOrderYearReport) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *ShipmentOrderYearReport) GetShipmentOrderPaidAmount() int64 {
	if x != nil {
		return x.ShipmentOrderPaidAmount
	}
	return 0
}

func (x *ShipmentOrderYearReport) GetShipmentOrderPaidCount() int64 {
	if x != nil {
		return x.ShipmentOrderPaidCount
	}
	return 0
}

func (x *ShipmentOrderYearReport) GetShipmentOrderSpecialPayAmount() int64 {
	if x != nil {
		return x.ShipmentOrderSpecialPayAmount
	}
	return 0
}

func (x *ShipmentOrderYearReport) GetShipmentOrderSpecialPayCount() int64 {
	if x != nil {
		return x.ShipmentOrderSpecialPayCount
	}
	return 0
}

func (x *ShipmentOrderYearReport) GetShipmentOrderNormalPayAmount() int64 {
	if x != nil {
		return x.ShipmentOrderNormalPayAmount
	}
	return 0
}

func (x *ShipmentOrderYearReport) GetShipmentOrderNormalPayCount() int64 {
	if x != nil {
		return x.ShipmentOrderNormalPayCount
	}
	return 0
}

func (x *ShipmentOrderYearReport) GetShipmentOrderReceiveAmount() int64 {
	if x != nil {
		return x.ShipmentOrderReceiveAmount
	}
	return 0
}

func (x *ShipmentOrderYearReport) GetShipmentOrderReceiveCount() int64 {
	if x != nil {
		return x.ShipmentOrderReceiveCount
	}
	return 0
}

func (x *ShipmentOrderYearReport) GetShipmentOrderTimeoutAmount() int64 {
	if x != nil {
		return x.ShipmentOrderTimeoutAmount
	}
	return 0
}

func (x *ShipmentOrderYearReport) GetShipmentOrderTimeoutCount() int64 {
	if x != nil {
		return x.ShipmentOrderTimeoutCount
	}
	return 0
}

type GetShipmentOrderDayReportsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ShipmentOrderDayReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                     `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                     `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                     `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetShipmentOrderDayReportsResp) Reset() {
	*x = GetShipmentOrderDayReportsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentOrderDayReportsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentOrderDayReportsResp) ProtoMessage() {}

func (x *GetShipmentOrderDayReportsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentOrderDayReportsResp.ProtoReflect.Descriptor instead.
func (*GetShipmentOrderDayReportsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{137}
}

func (x *GetShipmentOrderDayReportsResp) GetList() []*ShipmentOrderDayReport {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShipmentOrderDayReportsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetShipmentOrderDayReportsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShipmentOrderDayReportsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetShipmentOrderMonthReportsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ShipmentOrderMonthReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                       `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                       `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                       `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetShipmentOrderMonthReportsResp) Reset() {
	*x = GetShipmentOrderMonthReportsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentOrderMonthReportsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentOrderMonthReportsResp) ProtoMessage() {}

func (x *GetShipmentOrderMonthReportsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentOrderMonthReportsResp.ProtoReflect.Descriptor instead.
func (*GetShipmentOrderMonthReportsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{138}
}

func (x *GetShipmentOrderMonthReportsResp) GetList() []*ShipmentOrderMonthReport {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShipmentOrderMonthReportsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetShipmentOrderMonthReportsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShipmentOrderMonthReportsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetShipmentOrderYearReportsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ShipmentOrderYearReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                      `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                      `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                      `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetShipmentOrderYearReportsResp) Reset() {
	*x = GetShipmentOrderYearReportsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentOrderYearReportsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentOrderYearReportsResp) ProtoMessage() {}

func (x *GetShipmentOrderYearReportsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentOrderYearReportsResp.ProtoReflect.Descriptor instead.
func (*GetShipmentOrderYearReportsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{139}
}

func (x *GetShipmentOrderYearReportsResp) GetList() []*ShipmentOrderYearReport {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShipmentOrderYearReportsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetShipmentOrderYearReportsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShipmentOrderYearReportsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

//配送单报表可选聚合维度
type FactoringReportGroupCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//直接聚合为单行，使用此项则其他聚合条件不生效
	ByAll bool `protobuf:"varint,1,opt,name=byAll,proto3" json:"byAll"`
	//时间维度聚合,注意对于月报，按日聚合无效，年报类推
	ByMonth bool `protobuf:"varint,2,opt,name=byMonth,proto3" json:"byMonth"`
	ByYear  bool `protobuf:"varint,3,opt,name=byYear,proto3" json:"byYear"`
	ByDay   bool `protobuf:"varint,4,opt,name=byDay,proto3" json:"byDay"`
	//业务维度
	ByMi  bool `protobuf:"varint,5,opt,name=byMi,proto3" json:"byMi"`
	ByCom bool `protobuf:"varint,6,opt,name=byCom,proto3" json:"byCom"`
}

func (x *FactoringReportGroupCondition) Reset() {
	*x = FactoringReportGroupCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactoringReportGroupCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactoringReportGroupCondition) ProtoMessage() {}

func (x *FactoringReportGroupCondition) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactoringReportGroupCondition.ProtoReflect.Descriptor instead.
func (*FactoringReportGroupCondition) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{140}
}

func (x *FactoringReportGroupCondition) GetByAll() bool {
	if x != nil {
		return x.ByAll
	}
	return false
}

func (x *FactoringReportGroupCondition) GetByMonth() bool {
	if x != nil {
		return x.ByMonth
	}
	return false
}

func (x *FactoringReportGroupCondition) GetByYear() bool {
	if x != nil {
		return x.ByYear
	}
	return false
}

func (x *FactoringReportGroupCondition) GetByDay() bool {
	if x != nil {
		return x.ByDay
	}
	return false
}

func (x *FactoringReportGroupCondition) GetByMi() bool {
	if x != nil {
		return x.ByMi
	}
	return false
}

func (x *FactoringReportGroupCondition) GetByCom() bool {
	if x != nil {
		return x.ByCom
	}
	return false
}

//配送单报表可选数据筛选维度
type FactoringReportGetCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//指定获取哪家医院的数据
	MiIds []int64 `protobuf:"varint,1,rep,packed,name=miIds,proto3" json:"miIds"`
	//指定获取哪家配送企业的数据
	ComIds []int64 `protobuf:"varint,2,rep,packed,name=comIds,proto3" json:"comIds"`
	//用于医院名模糊搜索，只显示5个候选医院
	MiName string `protobuf:"bytes,3,opt,name=miName,proto3" json:"miName"`
	//用于配送企业名模糊搜索，只显示5个候选
	ComName string `protobuf:"bytes,4,opt,name=comName,proto3" json:"comName"`
}

func (x *FactoringReportGetCondition) Reset() {
	*x = FactoringReportGetCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactoringReportGetCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactoringReportGetCondition) ProtoMessage() {}

func (x *FactoringReportGetCondition) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactoringReportGetCondition.ProtoReflect.Descriptor instead.
func (*FactoringReportGetCondition) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{141}
}

func (x *FactoringReportGetCondition) GetMiIds() []int64 {
	if x != nil {
		return x.MiIds
	}
	return nil
}

func (x *FactoringReportGetCondition) GetComIds() []int64 {
	if x != nil {
		return x.ComIds
	}
	return nil
}

func (x *FactoringReportGetCondition) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *FactoringReportGetCondition) GetComName() string {
	if x != nil {
		return x.ComName
	}
	return ""
}

type GetFactoringOrderReportsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪个医保局的订单报表数据，目前不支持不同医保局混合统计
	MibId int64 `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	//报表的起止日期必填
	StartAt            *timestamppb.Timestamp         `protobuf:"bytes,3,opt,name=startAt,proto3" json:"startAt"`
	EndAt              *timestamppb.Timestamp         `protobuf:"bytes,4,opt,name=endAt,proto3" json:"endAt"`
	OptionalFilterCond *FactoringReportGetCondition   `protobuf:"bytes,5,opt,name=optionalFilterCond,proto3" json:"optionalFilterCond"`
	OptionalGroupCond  *FactoringReportGroupCondition `protobuf:"bytes,6,opt,name=optionalGroupCond,proto3" json:"optionalGroupCond"`
	Page               *Page                          `protobuf:"bytes,7,opt,name=page,proto3" json:"page"`
}

func (x *GetFactoringOrderReportsReq) Reset() {
	*x = GetFactoringOrderReportsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFactoringOrderReportsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFactoringOrderReportsReq) ProtoMessage() {}

func (x *GetFactoringOrderReportsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFactoringOrderReportsReq.ProtoReflect.Descriptor instead.
func (*GetFactoringOrderReportsReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{142}
}

func (x *GetFactoringOrderReportsReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetFactoringOrderReportsReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *GetFactoringOrderReportsReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *GetFactoringOrderReportsReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *GetFactoringOrderReportsReq) GetOptionalFilterCond() *FactoringReportGetCondition {
	if x != nil {
		return x.OptionalFilterCond
	}
	return nil
}

func (x *GetFactoringOrderReportsReq) GetOptionalGroupCond() *FactoringReportGroupCondition {
	if x != nil {
		return x.OptionalGroupCond
	}
	return nil
}

func (x *GetFactoringOrderReportsReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type FactoringOrderDayReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	Year  int64 `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month int64 `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	Day   int64 `protobuf:"varint,3,opt,name=day,proto3" json:"day"`
	MibId int64 `protobuf:"varint,4,opt,name=mibId,proto3" json:"mibId"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo                          *CompanyReportVo       `protobuf:"bytes,5,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo                               *MiReportVo            `protobuf:"bytes,6,opt,name=miInfo,proto3" json:"miInfo"`
	FactoringAmount                      int64                  `protobuf:"varint,7,opt,name=factoringAmount,proto3" json:"factoringAmount"`
	FactoringCount                       int64                  `protobuf:"varint,8,opt,name=factoringCount,proto3" json:"factoringCount"`
	FactoringFailAmount                  int64                  `protobuf:"varint,9,opt,name=factoringFailAmount,proto3" json:"factoringFailAmount"`
	FactoringFailCount                   int64                  `protobuf:"varint,10,opt,name=factoringFailCount,proto3" json:"factoringFailCount"`
	FactoringApplyAmount                 int64                  `protobuf:"varint,11,opt,name=factoringApplyAmount,proto3" json:"factoringApplyAmount"`
	FactoringApplyCount                  int64                  `protobuf:"varint,12,opt,name=factoringApplyCount,proto3" json:"factoringApplyCount"`
	ShipmentOrderFactoringNotApplyAmount int64                  `protobuf:"varint,13,opt,name=shipmentOrderFactoringNotApplyAmount,proto3" json:"shipmentOrderFactoringNotApplyAmount"`
	ShipmentOrderFactoringNotApplyCount  int64                  `protobuf:"varint,14,opt,name=shipmentOrderFactoringNotApplyCount,proto3" json:"shipmentOrderFactoringNotApplyCount"`
	ReportDate                           *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=reportDate,proto3" json:"reportDate"`
}

func (x *FactoringOrderDayReport) Reset() {
	*x = FactoringOrderDayReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactoringOrderDayReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactoringOrderDayReport) ProtoMessage() {}

func (x *FactoringOrderDayReport) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactoringOrderDayReport.ProtoReflect.Descriptor instead.
func (*FactoringOrderDayReport) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{143}
}

func (x *FactoringOrderDayReport) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *FactoringOrderDayReport) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *FactoringOrderDayReport) GetDay() int64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *FactoringOrderDayReport) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *FactoringOrderDayReport) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *FactoringOrderDayReport) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *FactoringOrderDayReport) GetFactoringAmount() int64 {
	if x != nil {
		return x.FactoringAmount
	}
	return 0
}

func (x *FactoringOrderDayReport) GetFactoringCount() int64 {
	if x != nil {
		return x.FactoringCount
	}
	return 0
}

func (x *FactoringOrderDayReport) GetFactoringFailAmount() int64 {
	if x != nil {
		return x.FactoringFailAmount
	}
	return 0
}

func (x *FactoringOrderDayReport) GetFactoringFailCount() int64 {
	if x != nil {
		return x.FactoringFailCount
	}
	return 0
}

func (x *FactoringOrderDayReport) GetFactoringApplyAmount() int64 {
	if x != nil {
		return x.FactoringApplyAmount
	}
	return 0
}

func (x *FactoringOrderDayReport) GetFactoringApplyCount() int64 {
	if x != nil {
		return x.FactoringApplyCount
	}
	return 0
}

func (x *FactoringOrderDayReport) GetShipmentOrderFactoringNotApplyAmount() int64 {
	if x != nil {
		return x.ShipmentOrderFactoringNotApplyAmount
	}
	return 0
}

func (x *FactoringOrderDayReport) GetShipmentOrderFactoringNotApplyCount() int64 {
	if x != nil {
		return x.ShipmentOrderFactoringNotApplyCount
	}
	return 0
}

func (x *FactoringOrderDayReport) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

type GetFactoringOrderDayReportsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*FactoringOrderDayReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                      `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                      `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                      `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetFactoringOrderDayReportsResp) Reset() {
	*x = GetFactoringOrderDayReportsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFactoringOrderDayReportsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFactoringOrderDayReportsResp) ProtoMessage() {}

func (x *GetFactoringOrderDayReportsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFactoringOrderDayReportsResp.ProtoReflect.Descriptor instead.
func (*GetFactoringOrderDayReportsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{144}
}

func (x *GetFactoringOrderDayReportsResp) GetList() []*FactoringOrderDayReport {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetFactoringOrderDayReportsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetFactoringOrderDayReportsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetFactoringOrderDayReportsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type FactoringOrderMonthReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	Year  int64 `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month int64 `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	MibId int64 `protobuf:"varint,3,opt,name=mibId,proto3" json:"mibId"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo                          *CompanyReportVo       `protobuf:"bytes,4,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo                               *MiReportVo            `protobuf:"bytes,5,opt,name=miInfo,proto3" json:"miInfo"`
	FactoringAmount                      int64                  `protobuf:"varint,6,opt,name=factoringAmount,proto3" json:"factoringAmount"`
	FactoringCount                       int64                  `protobuf:"varint,7,opt,name=factoringCount,proto3" json:"factoringCount"`
	FactoringFailAmount                  int64                  `protobuf:"varint,8,opt,name=factoringFailAmount,proto3" json:"factoringFailAmount"`
	FactoringFailCount                   int64                  `protobuf:"varint,9,opt,name=factoringFailCount,proto3" json:"factoringFailCount"`
	FactoringApplyAmount                 int64                  `protobuf:"varint,10,opt,name=factoringApplyAmount,proto3" json:"factoringApplyAmount"`
	FactoringApplyCount                  int64                  `protobuf:"varint,11,opt,name=factoringApplyCount,proto3" json:"factoringApplyCount"`
	ShipmentOrderFactoringNotApplyAmount int64                  `protobuf:"varint,12,opt,name=shipmentOrderFactoringNotApplyAmount,proto3" json:"shipmentOrderFactoringNotApplyAmount"`
	ShipmentOrderFactoringNotApplyCount  int64                  `protobuf:"varint,13,opt,name=shipmentOrderFactoringNotApplyCount,proto3" json:"shipmentOrderFactoringNotApplyCount"`
	ReportDate                           *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=reportDate,proto3" json:"reportDate"`
}

func (x *FactoringOrderMonthReport) Reset() {
	*x = FactoringOrderMonthReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactoringOrderMonthReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactoringOrderMonthReport) ProtoMessage() {}

func (x *FactoringOrderMonthReport) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactoringOrderMonthReport.ProtoReflect.Descriptor instead.
func (*FactoringOrderMonthReport) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{145}
}

func (x *FactoringOrderMonthReport) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *FactoringOrderMonthReport) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *FactoringOrderMonthReport) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *FactoringOrderMonthReport) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *FactoringOrderMonthReport) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *FactoringOrderMonthReport) GetFactoringAmount() int64 {
	if x != nil {
		return x.FactoringAmount
	}
	return 0
}

func (x *FactoringOrderMonthReport) GetFactoringCount() int64 {
	if x != nil {
		return x.FactoringCount
	}
	return 0
}

func (x *FactoringOrderMonthReport) GetFactoringFailAmount() int64 {
	if x != nil {
		return x.FactoringFailAmount
	}
	return 0
}

func (x *FactoringOrderMonthReport) GetFactoringFailCount() int64 {
	if x != nil {
		return x.FactoringFailCount
	}
	return 0
}

func (x *FactoringOrderMonthReport) GetFactoringApplyAmount() int64 {
	if x != nil {
		return x.FactoringApplyAmount
	}
	return 0
}

func (x *FactoringOrderMonthReport) GetFactoringApplyCount() int64 {
	if x != nil {
		return x.FactoringApplyCount
	}
	return 0
}

func (x *FactoringOrderMonthReport) GetShipmentOrderFactoringNotApplyAmount() int64 {
	if x != nil {
		return x.ShipmentOrderFactoringNotApplyAmount
	}
	return 0
}

func (x *FactoringOrderMonthReport) GetShipmentOrderFactoringNotApplyCount() int64 {
	if x != nil {
		return x.ShipmentOrderFactoringNotApplyCount
	}
	return 0
}

func (x *FactoringOrderMonthReport) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

type GetFactoringOrderMonthReportsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*FactoringOrderMonthReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                        `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                        `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                        `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetFactoringOrderMonthReportsResp) Reset() {
	*x = GetFactoringOrderMonthReportsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFactoringOrderMonthReportsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFactoringOrderMonthReportsResp) ProtoMessage() {}

func (x *GetFactoringOrderMonthReportsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFactoringOrderMonthReportsResp.ProtoReflect.Descriptor instead.
func (*GetFactoringOrderMonthReportsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{146}
}

func (x *GetFactoringOrderMonthReportsResp) GetList() []*FactoringOrderMonthReport {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetFactoringOrderMonthReportsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetFactoringOrderMonthReportsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetFactoringOrderMonthReportsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type FactoringOrderYearReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	Year       int64                  `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	ReportDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=reportDate,proto3" json:"reportDate"`
	MibId      int64                  `protobuf:"varint,3,opt,name=mibId,proto3" json:"mibId"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo                          *CompanyReportVo `protobuf:"bytes,4,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo                               *MiReportVo      `protobuf:"bytes,5,opt,name=miInfo,proto3" json:"miInfo"`
	FactoringAmount                      int64            `protobuf:"varint,6,opt,name=factoringAmount,proto3" json:"factoringAmount"`
	FactoringCount                       int64            `protobuf:"varint,7,opt,name=factoringCount,proto3" json:"factoringCount"`
	FactoringFailAmount                  int64            `protobuf:"varint,8,opt,name=factoringFailAmount,proto3" json:"factoringFailAmount"`
	FactoringFailCount                   int64            `protobuf:"varint,9,opt,name=factoringFailCount,proto3" json:"factoringFailCount"`
	FactoringApplyAmount                 int64            `protobuf:"varint,10,opt,name=factoringApplyAmount,proto3" json:"factoringApplyAmount"`
	FactoringApplyCount                  int64            `protobuf:"varint,11,opt,name=factoringApplyCount,proto3" json:"factoringApplyCount"`
	ShipmentOrderFactoringNotApplyAmount int64            `protobuf:"varint,12,opt,name=shipmentOrderFactoringNotApplyAmount,proto3" json:"shipmentOrderFactoringNotApplyAmount"`
	ShipmentOrderFactoringNotApplyCount  int64            `protobuf:"varint,13,opt,name=shipmentOrderFactoringNotApplyCount,proto3" json:"shipmentOrderFactoringNotApplyCount"`
}

func (x *FactoringOrderYearReport) Reset() {
	*x = FactoringOrderYearReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactoringOrderYearReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactoringOrderYearReport) ProtoMessage() {}

func (x *FactoringOrderYearReport) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactoringOrderYearReport.ProtoReflect.Descriptor instead.
func (*FactoringOrderYearReport) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{147}
}

func (x *FactoringOrderYearReport) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *FactoringOrderYearReport) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

func (x *FactoringOrderYearReport) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *FactoringOrderYearReport) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *FactoringOrderYearReport) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *FactoringOrderYearReport) GetFactoringAmount() int64 {
	if x != nil {
		return x.FactoringAmount
	}
	return 0
}

func (x *FactoringOrderYearReport) GetFactoringCount() int64 {
	if x != nil {
		return x.FactoringCount
	}
	return 0
}

func (x *FactoringOrderYearReport) GetFactoringFailAmount() int64 {
	if x != nil {
		return x.FactoringFailAmount
	}
	return 0
}

func (x *FactoringOrderYearReport) GetFactoringFailCount() int64 {
	if x != nil {
		return x.FactoringFailCount
	}
	return 0
}

func (x *FactoringOrderYearReport) GetFactoringApplyAmount() int64 {
	if x != nil {
		return x.FactoringApplyAmount
	}
	return 0
}

func (x *FactoringOrderYearReport) GetFactoringApplyCount() int64 {
	if x != nil {
		return x.FactoringApplyCount
	}
	return 0
}

func (x *FactoringOrderYearReport) GetShipmentOrderFactoringNotApplyAmount() int64 {
	if x != nil {
		return x.ShipmentOrderFactoringNotApplyAmount
	}
	return 0
}

func (x *FactoringOrderYearReport) GetShipmentOrderFactoringNotApplyCount() int64 {
	if x != nil {
		return x.ShipmentOrderFactoringNotApplyCount
	}
	return 0
}

type GetFactoringOrderYearReportsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*FactoringOrderYearReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                       `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                       `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                       `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetFactoringOrderYearReportsResp) Reset() {
	*x = GetFactoringOrderYearReportsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFactoringOrderYearReportsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFactoringOrderYearReportsResp) ProtoMessage() {}

func (x *GetFactoringOrderYearReportsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFactoringOrderYearReportsResp.ProtoReflect.Descriptor instead.
func (*GetFactoringOrderYearReportsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{148}
}

func (x *GetFactoringOrderYearReportsResp) GetList() []*FactoringOrderYearReport {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetFactoringOrderYearReportsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetFactoringOrderYearReportsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetFactoringOrderYearReportsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

//合同报表可选数据筛选维度
type ContractPlanReportGetCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//指定获取哪家医院的数据
	MiIds []int64 `protobuf:"varint,1,rep,packed,name=miIds,proto3" json:"miIds"`
	//指定获取哪家配送企业的数据
	ComIds        []int64  `protobuf:"varint,2,rep,packed,name=comIds,proto3" json:"comIds"`
	MedicineCodes []string `protobuf:"bytes,3,rep,name=medicineCodes,proto3" json:"medicineCodes"`
	//用于药品名模糊搜索，只显示5个候选药品
	MedicineName string `protobuf:"bytes,4,opt,name=medicineName,proto3" json:"medicineName"`
	//用于医院名模糊搜索，只显示5个候选医院
	MiName string `protobuf:"bytes,5,opt,name=miName,proto3" json:"miName"`
	//用于企业名模糊搜索，只显示5个候选医院
	ComName string `protobuf:"bytes,6,opt,name=comName,proto3" json:"comName"`
	//按某个标签显示
	TagId int64 `protobuf:"varint,7,opt,name=tagId,proto3" json:"tagId"`
	//按某份合同聚合
	ContractNo string `protobuf:"bytes,8,opt,name=contractNo,proto3" json:"contractNo"`
	//按子合同聚合等效于 按照 com,mi,medicine,contract聚合
	ContractId int64 `protobuf:"varint,9,opt,name=contractId,proto3" json:"contractId"`
	//合同起止时间过滤
	ContractStartBegin *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=contractStartBegin,proto3" json:"contractStartBegin"`
	ContractStartEnd   *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=contractStartEnd,proto3" json:"contractStartEnd"`
}

func (x *ContractPlanReportGetCondition) Reset() {
	*x = ContractPlanReportGetCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractPlanReportGetCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractPlanReportGetCondition) ProtoMessage() {}

func (x *ContractPlanReportGetCondition) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractPlanReportGetCondition.ProtoReflect.Descriptor instead.
func (*ContractPlanReportGetCondition) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{149}
}

func (x *ContractPlanReportGetCondition) GetMiIds() []int64 {
	if x != nil {
		return x.MiIds
	}
	return nil
}

func (x *ContractPlanReportGetCondition) GetComIds() []int64 {
	if x != nil {
		return x.ComIds
	}
	return nil
}

func (x *ContractPlanReportGetCondition) GetMedicineCodes() []string {
	if x != nil {
		return x.MedicineCodes
	}
	return nil
}

func (x *ContractPlanReportGetCondition) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ContractPlanReportGetCondition) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ContractPlanReportGetCondition) GetComName() string {
	if x != nil {
		return x.ComName
	}
	return ""
}

func (x *ContractPlanReportGetCondition) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *ContractPlanReportGetCondition) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

func (x *ContractPlanReportGetCondition) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *ContractPlanReportGetCondition) GetContractStartBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.ContractStartBegin
	}
	return nil
}

func (x *ContractPlanReportGetCondition) GetContractStartEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.ContractStartEnd
	}
	return nil
}

//合同报表可选聚合维度
type ContractPlanReportGroupCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//直接聚合为单行，使用此项则其他聚合条件不生效
	ByAll bool `protobuf:"varint,1,opt,name=byAll,proto3" json:"byAll"`
	//时间维度聚合,注意对于月报，按日聚合无效，年报类推
	ByMonth bool `protobuf:"varint,2,opt,name=byMonth,proto3" json:"byMonth"`
	ByYear  bool `protobuf:"varint,3,opt,name=byYear,proto3" json:"byYear"`
	ByDay   bool `protobuf:"varint,4,opt,name=byDay,proto3" json:"byDay"`
	//业务维度
	ByMi       bool `protobuf:"varint,5,opt,name=byMi,proto3" json:"byMi"`
	ByCom      bool `protobuf:"varint,6,opt,name=byCom,proto3" json:"byCom"`
	ByMedicine bool `protobuf:"varint,7,opt,name=byMedicine,proto3" json:"byMedicine"`
	ByContract bool `protobuf:"varint,8,opt,name=byContract,proto3" json:"byContract"`
	//按照子合同聚合
	ByContractMi bool `protobuf:"varint,9,opt,name=byContractMi,proto3" json:"byContractMi"`
}

func (x *ContractPlanReportGroupCondition) Reset() {
	*x = ContractPlanReportGroupCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractPlanReportGroupCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractPlanReportGroupCondition) ProtoMessage() {}

func (x *ContractPlanReportGroupCondition) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractPlanReportGroupCondition.ProtoReflect.Descriptor instead.
func (*ContractPlanReportGroupCondition) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{150}
}

func (x *ContractPlanReportGroupCondition) GetByAll() bool {
	if x != nil {
		return x.ByAll
	}
	return false
}

func (x *ContractPlanReportGroupCondition) GetByMonth() bool {
	if x != nil {
		return x.ByMonth
	}
	return false
}

func (x *ContractPlanReportGroupCondition) GetByYear() bool {
	if x != nil {
		return x.ByYear
	}
	return false
}

func (x *ContractPlanReportGroupCondition) GetByDay() bool {
	if x != nil {
		return x.ByDay
	}
	return false
}

func (x *ContractPlanReportGroupCondition) GetByMi() bool {
	if x != nil {
		return x.ByMi
	}
	return false
}

func (x *ContractPlanReportGroupCondition) GetByCom() bool {
	if x != nil {
		return x.ByCom
	}
	return false
}

func (x *ContractPlanReportGroupCondition) GetByMedicine() bool {
	if x != nil {
		return x.ByMedicine
	}
	return false
}

func (x *ContractPlanReportGroupCondition) GetByContract() bool {
	if x != nil {
		return x.ByContract
	}
	return false
}

func (x *ContractPlanReportGroupCondition) GetByContractMi() bool {
	if x != nil {
		return x.ByContractMi
	}
	return false
}

//此操作或合并合同的当前状态参数，而不是数据报表的
type GetContractPlanReportsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪个医保局的订单报表数据，目前不支持不同医保局混合统计
	MibId int64 `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	//报表的起止日期必填
	StartAt            *timestamppb.Timestamp            `protobuf:"bytes,3,opt,name=startAt,proto3" json:"startAt"`
	EndAt              *timestamppb.Timestamp            `protobuf:"bytes,4,opt,name=endAt,proto3" json:"endAt"`
	OptionalFilterCond *ContractPlanReportGetCondition   `protobuf:"bytes,5,opt,name=optionalFilterCond,proto3" json:"optionalFilterCond"`
	OptionalGroupCond  *ContractPlanReportGroupCondition `protobuf:"bytes,6,opt,name=optionalGroupCond,proto3" json:"optionalGroupCond"`
	Page               *Page                             `protobuf:"bytes,7,opt,name=page,proto3" json:"page"`
}

func (x *GetContractPlanReportsReq) Reset() {
	*x = GetContractPlanReportsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractPlanReportsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractPlanReportsReq) ProtoMessage() {}

func (x *GetContractPlanReportsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractPlanReportsReq.ProtoReflect.Descriptor instead.
func (*GetContractPlanReportsReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{151}
}

func (x *GetContractPlanReportsReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetContractPlanReportsReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *GetContractPlanReportsReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *GetContractPlanReportsReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *GetContractPlanReportsReq) GetOptionalFilterCond() *ContractPlanReportGetCondition {
	if x != nil {
		return x.OptionalFilterCond
	}
	return nil
}

func (x *GetContractPlanReportsReq) GetOptionalGroupCond() *ContractPlanReportGroupCondition {
	if x != nil {
		return x.OptionalGroupCond
	}
	return nil
}

func (x *GetContractPlanReportsReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ContractReportVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractNo string `protobuf:"bytes,1,opt,name=contractNo,proto3" json:"contractNo"`
	//投标企业名
	TenderCompany string `protobuf:"bytes,2,opt,name=tenderCompany,proto3" json:"tenderCompany"`
	//中标价格 单位分/包装
	MedicinePrice int64 `protobuf:"varint,3,opt,name=medicinePrice,proto3" json:"medicinePrice"`
	//已确认收货的数量
	MedicineReceive int64 `protobuf:"varint,4,opt,name=medicineReceive,proto3" json:"medicineReceive"`
	//预计采购量
	TotalAmount int64                  `protobuf:"varint,5,opt,name=totalAmount,proto3" json:"totalAmount"`
	StartAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=startAt,proto3" json:"startAt"`
	EndAt       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=endAt,proto3" json:"endAt"`
}

func (x *ContractReportVo) Reset() {
	*x = ContractReportVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractReportVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractReportVo) ProtoMessage() {}

func (x *ContractReportVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractReportVo.ProtoReflect.Descriptor instead.
func (*ContractReportVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{152}
}

func (x *ContractReportVo) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

func (x *ContractReportVo) GetTenderCompany() string {
	if x != nil {
		return x.TenderCompany
	}
	return ""
}

func (x *ContractReportVo) GetMedicinePrice() int64 {
	if x != nil {
		return x.MedicinePrice
	}
	return 0
}

func (x *ContractReportVo) GetMedicineReceive() int64 {
	if x != nil {
		return x.MedicineReceive
	}
	return 0
}

func (x *ContractReportVo) GetTotalAmount() int64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *ContractReportVo) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *ContractReportVo) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

type ContractMiReportVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiContractId    int64 `protobuf:"varint,1,opt,name=miContractId,proto3" json:"miContractId"`
	MedicinePrice   int64 `protobuf:"varint,2,opt,name=medicinePrice,proto3" json:"medicinePrice"`
	MedicineAmount  int64 `protobuf:"varint,3,opt,name=medicineAmount,proto3" json:"medicineAmount"`
	MedicineSent    int64 `protobuf:"varint,4,opt,name=medicineSent,proto3" json:"medicineSent"`
	MedicineReceive int64 `protobuf:"varint,5,opt,name=medicineReceive,proto3" json:"medicineReceive"`
}

func (x *ContractMiReportVo) Reset() {
	*x = ContractMiReportVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractMiReportVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractMiReportVo) ProtoMessage() {}

func (x *ContractMiReportVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractMiReportVo.ProtoReflect.Descriptor instead.
func (*ContractMiReportVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{153}
}

func (x *ContractMiReportVo) GetMiContractId() int64 {
	if x != nil {
		return x.MiContractId
	}
	return 0
}

func (x *ContractMiReportVo) GetMedicinePrice() int64 {
	if x != nil {
		return x.MedicinePrice
	}
	return 0
}

func (x *ContractMiReportVo) GetMedicineAmount() int64 {
	if x != nil {
		return x.MedicineAmount
	}
	return 0
}

func (x *ContractMiReportVo) GetMedicineSent() int64 {
	if x != nil {
		return x.MedicineSent
	}
	return 0
}

func (x *ContractMiReportVo) GetMedicineReceive() int64 {
	if x != nil {
		return x.MedicineReceive
	}
	return 0
}

type ContractPlanDayReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	Year  int64 `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month int64 `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	Day   int64 `protobuf:"varint,3,opt,name=day,proto3" json:"day"`
	MibId int64 `protobuf:"varint,4,opt,name=mibId,proto3" json:"mibId"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo  *CompanyReportVo  `protobuf:"bytes,5,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo       *MiReportVo       `protobuf:"bytes,6,opt,name=miInfo,proto3" json:"miInfo"`
	MedicineInfo *MedicineReportVo `protobuf:"bytes,7,opt,name=medicineInfo,proto3" json:"medicineInfo"`
	//本日配送计划同步金额
	ShipmentPlanAmount           int64                  `protobuf:"varint,8,opt,name=shipmentPlanAmount,proto3" json:"shipmentPlanAmount"`
	ShipmentPlanCount            int64                  `protobuf:"varint,9,opt,name=shipmentPlanCount,proto3" json:"shipmentPlanCount"`
	ShipmentPlanUnitCount        int64                  `protobuf:"varint,10,opt,name=shipmentPlanUnitCount,proto3" json:"shipmentPlanUnitCount"`
	ShipmentPlanReceiveAmount    int64                  `protobuf:"varint,11,opt,name=shipmentPlanReceiveAmount,proto3" json:"shipmentPlanReceiveAmount"`
	ShipmentPlanReceiveCount     int64                  `protobuf:"varint,12,opt,name=shipmentPlanReceiveCount,proto3" json:"shipmentPlanReceiveCount"`
	ShipmentPlanReceiveUnitCount int64                  `protobuf:"varint,13,opt,name=shipmentPlanReceiveUnitCount,proto3" json:"shipmentPlanReceiveUnitCount"`
	ShipmentPlanNotSentAmount    int64                  `protobuf:"varint,14,opt,name=shipmentPlanNotSentAmount,proto3" json:"shipmentPlanNotSentAmount"`
	ShipmentPlanNotSentCount     int64                  `protobuf:"varint,15,opt,name=shipmentPlanNotSentCount,proto3" json:"shipmentPlanNotSentCount"`
	ShipmentPlanNotSentUnitCount int64                  `protobuf:"varint,16,opt,name=shipmentPlanNotSentUnitCount,proto3" json:"shipmentPlanNotSentUnitCount"`
	FactoringAmount              int64                  `protobuf:"varint,17,opt,name=factoringAmount,proto3" json:"factoringAmount"`
	ReportDate                   *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=reportDate,proto3" json:"reportDate"`
	ContractInfo                 *ContractReportVo      `protobuf:"bytes,19,opt,name=contractInfo,proto3" json:"contractInfo"`
	ContractMiInfo               *ContractMiReportVo    `protobuf:"bytes,20,opt,name=contractMiInfo,proto3" json:"contractMiInfo"`
}

func (x *ContractPlanDayReport) Reset() {
	*x = ContractPlanDayReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractPlanDayReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractPlanDayReport) ProtoMessage() {}

func (x *ContractPlanDayReport) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractPlanDayReport.ProtoReflect.Descriptor instead.
func (*ContractPlanDayReport) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{154}
}

func (x *ContractPlanDayReport) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ContractPlanDayReport) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ContractPlanDayReport) GetDay() int64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *ContractPlanDayReport) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *ContractPlanDayReport) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *ContractPlanDayReport) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *ContractPlanDayReport) GetMedicineInfo() *MedicineReportVo {
	if x != nil {
		return x.MedicineInfo
	}
	return nil
}

func (x *ContractPlanDayReport) GetShipmentPlanAmount() int64 {
	if x != nil {
		return x.ShipmentPlanAmount
	}
	return 0
}

func (x *ContractPlanDayReport) GetShipmentPlanCount() int64 {
	if x != nil {
		return x.ShipmentPlanCount
	}
	return 0
}

func (x *ContractPlanDayReport) GetShipmentPlanUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanUnitCount
	}
	return 0
}

func (x *ContractPlanDayReport) GetShipmentPlanReceiveAmount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveAmount
	}
	return 0
}

func (x *ContractPlanDayReport) GetShipmentPlanReceiveCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveCount
	}
	return 0
}

func (x *ContractPlanDayReport) GetShipmentPlanReceiveUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveUnitCount
	}
	return 0
}

func (x *ContractPlanDayReport) GetShipmentPlanNotSentAmount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentAmount
	}
	return 0
}

func (x *ContractPlanDayReport) GetShipmentPlanNotSentCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentCount
	}
	return 0
}

func (x *ContractPlanDayReport) GetShipmentPlanNotSentUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentUnitCount
	}
	return 0
}

func (x *ContractPlanDayReport) GetFactoringAmount() int64 {
	if x != nil {
		return x.FactoringAmount
	}
	return 0
}

func (x *ContractPlanDayReport) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

func (x *ContractPlanDayReport) GetContractInfo() *ContractReportVo {
	if x != nil {
		return x.ContractInfo
	}
	return nil
}

func (x *ContractPlanDayReport) GetContractMiInfo() *ContractMiReportVo {
	if x != nil {
		return x.ContractMiInfo
	}
	return nil
}

type GetContractPlanDayReportsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ContractPlanDayReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                    `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                    `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                    `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetContractPlanDayReportsResp) Reset() {
	*x = GetContractPlanDayReportsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractPlanDayReportsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractPlanDayReportsResp) ProtoMessage() {}

func (x *GetContractPlanDayReportsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractPlanDayReportsResp.ProtoReflect.Descriptor instead.
func (*GetContractPlanDayReportsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{155}
}

func (x *GetContractPlanDayReportsResp) GetList() []*ContractPlanDayReport {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetContractPlanDayReportsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetContractPlanDayReportsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetContractPlanDayReportsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ContractPlanMonthReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	Year           int64               `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month          int64               `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	ContractMiInfo *ContractMiReportVo `protobuf:"bytes,3,opt,name=contractMiInfo,proto3" json:"contractMiInfo"`
	MibId          int64               `protobuf:"varint,4,opt,name=mibId,proto3" json:"mibId"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo  *CompanyReportVo  `protobuf:"bytes,5,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo       *MiReportVo       `protobuf:"bytes,6,opt,name=miInfo,proto3" json:"miInfo"`
	MedicineInfo *MedicineReportVo `protobuf:"bytes,7,opt,name=medicineInfo,proto3" json:"medicineInfo"`
	//本日配送计划同步金额
	ShipmentPlanAmount           int64                  `protobuf:"varint,8,opt,name=shipmentPlanAmount,proto3" json:"shipmentPlanAmount"`
	ShipmentPlanCount            int64                  `protobuf:"varint,9,opt,name=shipmentPlanCount,proto3" json:"shipmentPlanCount"`
	ShipmentPlanUnitCount        int64                  `protobuf:"varint,10,opt,name=shipmentPlanUnitCount,proto3" json:"shipmentPlanUnitCount"`
	ShipmentPlanReceiveAmount    int64                  `protobuf:"varint,11,opt,name=shipmentPlanReceiveAmount,proto3" json:"shipmentPlanReceiveAmount"`
	ShipmentPlanReceiveCount     int64                  `protobuf:"varint,12,opt,name=shipmentPlanReceiveCount,proto3" json:"shipmentPlanReceiveCount"`
	ShipmentPlanReceiveUnitCount int64                  `protobuf:"varint,13,opt,name=shipmentPlanReceiveUnitCount,proto3" json:"shipmentPlanReceiveUnitCount"`
	ShipmentPlanNotSentAmount    int64                  `protobuf:"varint,14,opt,name=shipmentPlanNotSentAmount,proto3" json:"shipmentPlanNotSentAmount"`
	ShipmentPlanNotSentCount     int64                  `protobuf:"varint,15,opt,name=shipmentPlanNotSentCount,proto3" json:"shipmentPlanNotSentCount"`
	ShipmentPlanNotSentUnitCount int64                  `protobuf:"varint,16,opt,name=shipmentPlanNotSentUnitCount,proto3" json:"shipmentPlanNotSentUnitCount"`
	FactoringAmount              int64                  `protobuf:"varint,17,opt,name=factoringAmount,proto3" json:"factoringAmount"`
	ReportDate                   *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=reportDate,proto3" json:"reportDate"`
	ContractInfo                 *ContractReportVo      `protobuf:"bytes,19,opt,name=contractInfo,proto3" json:"contractInfo"`
}

func (x *ContractPlanMonthReport) Reset() {
	*x = ContractPlanMonthReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractPlanMonthReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractPlanMonthReport) ProtoMessage() {}

func (x *ContractPlanMonthReport) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractPlanMonthReport.ProtoReflect.Descriptor instead.
func (*ContractPlanMonthReport) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{156}
}

func (x *ContractPlanMonthReport) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ContractPlanMonthReport) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ContractPlanMonthReport) GetContractMiInfo() *ContractMiReportVo {
	if x != nil {
		return x.ContractMiInfo
	}
	return nil
}

func (x *ContractPlanMonthReport) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *ContractPlanMonthReport) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *ContractPlanMonthReport) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *ContractPlanMonthReport) GetMedicineInfo() *MedicineReportVo {
	if x != nil {
		return x.MedicineInfo
	}
	return nil
}

func (x *ContractPlanMonthReport) GetShipmentPlanAmount() int64 {
	if x != nil {
		return x.ShipmentPlanAmount
	}
	return 0
}

func (x *ContractPlanMonthReport) GetShipmentPlanCount() int64 {
	if x != nil {
		return x.ShipmentPlanCount
	}
	return 0
}

func (x *ContractPlanMonthReport) GetShipmentPlanUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanUnitCount
	}
	return 0
}

func (x *ContractPlanMonthReport) GetShipmentPlanReceiveAmount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveAmount
	}
	return 0
}

func (x *ContractPlanMonthReport) GetShipmentPlanReceiveCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveCount
	}
	return 0
}

func (x *ContractPlanMonthReport) GetShipmentPlanReceiveUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveUnitCount
	}
	return 0
}

func (x *ContractPlanMonthReport) GetShipmentPlanNotSentAmount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentAmount
	}
	return 0
}

func (x *ContractPlanMonthReport) GetShipmentPlanNotSentCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentCount
	}
	return 0
}

func (x *ContractPlanMonthReport) GetShipmentPlanNotSentUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentUnitCount
	}
	return 0
}

func (x *ContractPlanMonthReport) GetFactoringAmount() int64 {
	if x != nil {
		return x.FactoringAmount
	}
	return 0
}

func (x *ContractPlanMonthReport) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

func (x *ContractPlanMonthReport) GetContractInfo() *ContractReportVo {
	if x != nil {
		return x.ContractInfo
	}
	return nil
}

type GetContractPlanMonthReportsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ContractPlanMonthReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                      `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                      `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                      `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetContractPlanMonthReportsResp) Reset() {
	*x = GetContractPlanMonthReportsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractPlanMonthReportsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractPlanMonthReportsResp) ProtoMessage() {}

func (x *GetContractPlanMonthReportsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractPlanMonthReportsResp.ProtoReflect.Descriptor instead.
func (*GetContractPlanMonthReportsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{157}
}

func (x *GetContractPlanMonthReportsResp) GetList() []*ContractPlanMonthReport {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetContractPlanMonthReportsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetContractPlanMonthReportsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetContractPlanMonthReportsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ContractPlanYearReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	Year           int64               `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	ContractInfo   *ContractReportVo   `protobuf:"bytes,2,opt,name=contractInfo,proto3" json:"contractInfo"`
	ContractMiInfo *ContractMiReportVo `protobuf:"bytes,3,opt,name=contractMiInfo,proto3" json:"contractMiInfo"`
	MibId          int64               `protobuf:"varint,4,opt,name=mibId,proto3" json:"mibId"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo  *CompanyReportVo  `protobuf:"bytes,5,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo       *MiReportVo       `protobuf:"bytes,6,opt,name=miInfo,proto3" json:"miInfo"`
	MedicineInfo *MedicineReportVo `protobuf:"bytes,7,opt,name=medicineInfo,proto3" json:"medicineInfo"`
	//本日配送计划同步金额
	ShipmentPlanAmount           int64                  `protobuf:"varint,8,opt,name=shipmentPlanAmount,proto3" json:"shipmentPlanAmount"`
	ShipmentPlanCount            int64                  `protobuf:"varint,9,opt,name=shipmentPlanCount,proto3" json:"shipmentPlanCount"`
	ShipmentPlanUnitCount        int64                  `protobuf:"varint,10,opt,name=shipmentPlanUnitCount,proto3" json:"shipmentPlanUnitCount"`
	ShipmentPlanReceiveAmount    int64                  `protobuf:"varint,11,opt,name=shipmentPlanReceiveAmount,proto3" json:"shipmentPlanReceiveAmount"`
	ShipmentPlanReceiveCount     int64                  `protobuf:"varint,12,opt,name=shipmentPlanReceiveCount,proto3" json:"shipmentPlanReceiveCount"`
	ShipmentPlanReceiveUnitCount int64                  `protobuf:"varint,13,opt,name=shipmentPlanReceiveUnitCount,proto3" json:"shipmentPlanReceiveUnitCount"`
	ShipmentPlanNotSentAmount    int64                  `protobuf:"varint,14,opt,name=shipmentPlanNotSentAmount,proto3" json:"shipmentPlanNotSentAmount"`
	ShipmentPlanNotSentCount     int64                  `protobuf:"varint,15,opt,name=shipmentPlanNotSentCount,proto3" json:"shipmentPlanNotSentCount"`
	ShipmentPlanNotSentUnitCount int64                  `protobuf:"varint,16,opt,name=shipmentPlanNotSentUnitCount,proto3" json:"shipmentPlanNotSentUnitCount"`
	FactoringAmount              int64                  `protobuf:"varint,17,opt,name=factoringAmount,proto3" json:"factoringAmount"`
	ReportDate                   *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=reportDate,proto3" json:"reportDate"`
}

func (x *ContractPlanYearReport) Reset() {
	*x = ContractPlanYearReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractPlanYearReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractPlanYearReport) ProtoMessage() {}

func (x *ContractPlanYearReport) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractPlanYearReport.ProtoReflect.Descriptor instead.
func (*ContractPlanYearReport) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{158}
}

func (x *ContractPlanYearReport) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ContractPlanYearReport) GetContractInfo() *ContractReportVo {
	if x != nil {
		return x.ContractInfo
	}
	return nil
}

func (x *ContractPlanYearReport) GetContractMiInfo() *ContractMiReportVo {
	if x != nil {
		return x.ContractMiInfo
	}
	return nil
}

func (x *ContractPlanYearReport) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *ContractPlanYearReport) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *ContractPlanYearReport) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *ContractPlanYearReport) GetMedicineInfo() *MedicineReportVo {
	if x != nil {
		return x.MedicineInfo
	}
	return nil
}

func (x *ContractPlanYearReport) GetShipmentPlanAmount() int64 {
	if x != nil {
		return x.ShipmentPlanAmount
	}
	return 0
}

func (x *ContractPlanYearReport) GetShipmentPlanCount() int64 {
	if x != nil {
		return x.ShipmentPlanCount
	}
	return 0
}

func (x *ContractPlanYearReport) GetShipmentPlanUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanUnitCount
	}
	return 0
}

func (x *ContractPlanYearReport) GetShipmentPlanReceiveAmount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveAmount
	}
	return 0
}

func (x *ContractPlanYearReport) GetShipmentPlanReceiveCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveCount
	}
	return 0
}

func (x *ContractPlanYearReport) GetShipmentPlanReceiveUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveUnitCount
	}
	return 0
}

func (x *ContractPlanYearReport) GetShipmentPlanNotSentAmount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentAmount
	}
	return 0
}

func (x *ContractPlanYearReport) GetShipmentPlanNotSentCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentCount
	}
	return 0
}

func (x *ContractPlanYearReport) GetShipmentPlanNotSentUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentUnitCount
	}
	return 0
}

func (x *ContractPlanYearReport) GetFactoringAmount() int64 {
	if x != nil {
		return x.FactoringAmount
	}
	return 0
}

func (x *ContractPlanYearReport) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

type GetContractPlanYearReportsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ContractPlanYearReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                     `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                     `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                     `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetContractPlanYearReportsResp) Reset() {
	*x = GetContractPlanYearReportsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractPlanYearReportsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractPlanYearReportsResp) ProtoMessage() {}

func (x *GetContractPlanYearReportsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractPlanYearReportsResp.ProtoReflect.Descriptor instead.
func (*GetContractPlanYearReportsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{159}
}

func (x *GetContractPlanYearReportsResp) GetList() []*ContractPlanYearReport {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetContractPlanYearReportsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetContractPlanYearReportsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetContractPlanYearReportsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ContractSum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//预计总金额
	MedicineMoney int64 `protobuf:"varint,1,opt,name=medicineMoney,proto3" json:"medicineMoney"`
	//预计总量
	MedicineAmount  int64 `protobuf:"varint,2,opt,name=medicineAmount,proto3" json:"medicineAmount"`
	MedicineSent    int64 `protobuf:"varint,4,opt,name=medicineSent,proto3" json:"medicineSent"`
	MedicineReceive int64 `protobuf:"varint,5,opt,name=medicineReceive,proto3" json:"medicineReceive"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo    *CompanyReportVo    `protobuf:"bytes,6,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo         *MiReportVo         `protobuf:"bytes,7,opt,name=miInfo,proto3" json:"miInfo"`
	MedicineInfo   *MedicineReportVo   `protobuf:"bytes,8,opt,name=medicineInfo,proto3" json:"medicineInfo"`
	ContractInfo   *ContractReportVo   `protobuf:"bytes,9,opt,name=contractInfo,proto3" json:"contractInfo"`
	ContractMiInfo *ContractMiReportVo `protobuf:"bytes,10,opt,name=contractMiInfo,proto3" json:"contractMiInfo"`
}

func (x *ContractSum) Reset() {
	*x = ContractSum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractSum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractSum) ProtoMessage() {}

func (x *ContractSum) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractSum.ProtoReflect.Descriptor instead.
func (*ContractSum) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{160}
}

func (x *ContractSum) GetMedicineMoney() int64 {
	if x != nil {
		return x.MedicineMoney
	}
	return 0
}

func (x *ContractSum) GetMedicineAmount() int64 {
	if x != nil {
		return x.MedicineAmount
	}
	return 0
}

func (x *ContractSum) GetMedicineSent() int64 {
	if x != nil {
		return x.MedicineSent
	}
	return 0
}

func (x *ContractSum) GetMedicineReceive() int64 {
	if x != nil {
		return x.MedicineReceive
	}
	return 0
}

func (x *ContractSum) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *ContractSum) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *ContractSum) GetMedicineInfo() *MedicineReportVo {
	if x != nil {
		return x.MedicineInfo
	}
	return nil
}

func (x *ContractSum) GetContractInfo() *ContractReportVo {
	if x != nil {
		return x.ContractInfo
	}
	return nil
}

func (x *ContractSum) GetContractMiInfo() *ContractMiReportVo {
	if x != nil {
		return x.ContractMiInfo
	}
	return nil
}

type GetContractSumResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ContractSum `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64          `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64          `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetContractSumResp) Reset() {
	*x = GetContractSumResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractSumResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractSumResp) ProtoMessage() {}

func (x *GetContractSumResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractSumResp.ProtoReflect.Descriptor instead.
func (*GetContractSumResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{161}
}

func (x *GetContractSumResp) GetList() []*ContractSum {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetContractSumResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetContractSumResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetContractSumResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

//查询当前时间点生效的合同信息
type GetValidContractInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪家医院的聚合数据
	MiId int64 `protobuf:"varint,2,opt,name=miId,proto3" json:"miId"`
	//指定获取哪家配送企业的聚合数据 不可同时指定
	ComId int64 `protobuf:"varint,3,opt,name=comId,proto3" json:"comId"`
}

func (x *GetValidContractInfoReq) Reset() {
	*x = GetValidContractInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidContractInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidContractInfoReq) ProtoMessage() {}

func (x *GetValidContractInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidContractInfoReq.ProtoReflect.Descriptor instead.
func (*GetValidContractInfoReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{162}
}

func (x *GetValidContractInfoReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetValidContractInfoReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *GetValidContractInfoReq) GetComId() int64 {
	if x != nil {
		return x.ComId
	}
	return 0
}

//查询当前时间点需要支付的金额
type GetCurrentNeedPayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪家医院的聚合数据
	MiId int64 `protobuf:"varint,2,opt,name=miId,proto3" json:"miId"`
	//指定获取哪家配送企业的聚合数据 不可同时指定
	ComId int64 `protobuf:"varint,3,opt,name=comId,proto3" json:"comId"`
}

func (x *GetCurrentNeedPayReq) Reset() {
	*x = GetCurrentNeedPayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentNeedPayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentNeedPayReq) ProtoMessage() {}

func (x *GetCurrentNeedPayReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentNeedPayReq.ProtoReflect.Descriptor instead.
func (*GetCurrentNeedPayReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{163}
}

func (x *GetCurrentNeedPayReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetCurrentNeedPayReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *GetCurrentNeedPayReq) GetComId() int64 {
	if x != nil {
		return x.ComId
	}
	return 0
}

type GetValidContractInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//有效合同金额
	ValidContractAmount int64 `protobuf:"varint,1,opt,name=validContractAmount,proto3" json:"validContractAmount"`
	//有效合同数量
	ValidContractCount int64 `protobuf:"varint,2,opt,name=validContractCount,proto3" json:"validContractCount"`
}

func (x *GetValidContractInfoResp) Reset() {
	*x = GetValidContractInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidContractInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidContractInfoResp) ProtoMessage() {}

func (x *GetValidContractInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidContractInfoResp.ProtoReflect.Descriptor instead.
func (*GetValidContractInfoResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{164}
}

func (x *GetValidContractInfoResp) GetValidContractAmount() int64 {
	if x != nil {
		return x.ValidContractAmount
	}
	return 0
}

func (x *GetValidContractInfoResp) GetValidContractCount() int64 {
	if x != nil {
		return x.ValidContractCount
	}
	return 0
}

type GetCurrentNeedPayResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//待支付金额
	NeedPayAmount int64 `protobuf:"varint,1,opt,name=needPayAmount,proto3" json:"needPayAmount"`
}

func (x *GetCurrentNeedPayResp) Reset() {
	*x = GetCurrentNeedPayResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentNeedPayResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentNeedPayResp) ProtoMessage() {}

func (x *GetCurrentNeedPayResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentNeedPayResp.ProtoReflect.Descriptor instead.
func (*GetCurrentNeedPayResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{165}
}

func (x *GetCurrentNeedPayResp) GetNeedPayAmount() int64 {
	if x != nil {
		return x.NeedPayAmount
	}
	return 0
}

type GetMiDashboardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪家医院的聚合数据
	MiId int64 `protobuf:"varint,2,opt,name=miId,proto3" json:"miId"`
	//指定获取哪家配送企业的聚合数据 不可同时指定
	ComId int64 `protobuf:"varint,3,opt,name=comId,proto3" json:"comId"`
}

func (x *GetMiDashboardReq) Reset() {
	*x = GetMiDashboardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMiDashboardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMiDashboardReq) ProtoMessage() {}

func (x *GetMiDashboardReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMiDashboardReq.ProtoReflect.Descriptor instead.
func (*GetMiDashboardReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{166}
}

func (x *GetMiDashboardReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetMiDashboardReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *GetMiDashboardReq) GetComId() int64 {
	if x != nil {
		return x.ComId
	}
	return 0
}

type BankAccounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountType string `protobuf:"bytes,1,opt,name=accountType,proto3" json:"accountType"`
	CardNo      string `protobuf:"bytes,2,opt,name=cardNo,proto3" json:"cardNo"`
	CardStatus  string `protobuf:"bytes,3,opt,name=cardStatus,proto3" json:"cardStatus"`
	ValidStatus string `protobuf:"bytes,4,opt,name=validStatus,proto3" json:"validStatus"`
}

func (x *BankAccounts) Reset() {
	*x = BankAccounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankAccounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankAccounts) ProtoMessage() {}

func (x *BankAccounts) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankAccounts.ProtoReflect.Descriptor instead.
func (*BankAccounts) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{167}
}

func (x *BankAccounts) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *BankAccounts) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *BankAccounts) GetCardStatus() string {
	if x != nil {
		return x.CardStatus
	}
	return ""
}

func (x *BankAccounts) GetValidStatus() string {
	if x != nil {
		return x.ValidStatus
	}
	return ""
}

type GetMiDashboardBaseInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiName       string          `protobuf:"bytes,1,opt,name=miName,proto3" json:"miName"`
	MiLogo       string          `protobuf:"bytes,2,opt,name=miLogo,proto3" json:"miLogo"`
	Province     string          `protobuf:"bytes,3,opt,name=province,proto3" json:"province"`
	City         string          `protobuf:"bytes,4,opt,name=city,proto3" json:"city"`
	Zone         string          `protobuf:"bytes,5,opt,name=zone,proto3" json:"zone"`
	BankAccounts []*BankAccounts `protobuf:"bytes,6,rep,name=bankAccounts,proto3" json:"bankAccounts"`
}

func (x *GetMiDashboardBaseInfoResp) Reset() {
	*x = GetMiDashboardBaseInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMiDashboardBaseInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMiDashboardBaseInfoResp) ProtoMessage() {}

func (x *GetMiDashboardBaseInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMiDashboardBaseInfoResp.ProtoReflect.Descriptor instead.
func (*GetMiDashboardBaseInfoResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{168}
}

func (x *GetMiDashboardBaseInfoResp) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *GetMiDashboardBaseInfoResp) GetMiLogo() string {
	if x != nil {
		return x.MiLogo
	}
	return ""
}

func (x *GetMiDashboardBaseInfoResp) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *GetMiDashboardBaseInfoResp) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *GetMiDashboardBaseInfoResp) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *GetMiDashboardBaseInfoResp) GetBankAccounts() []*BankAccounts {
	if x != nil {
		return x.BankAccounts
	}
	return nil
}

type GetDashboardShipmentRankCompanyDataYearReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartAt       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=startAt,proto3" json:"startAt"`
	EndAt         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=endAt,proto3" json:"endAt"`
	MedicineCount int64                  `protobuf:"varint,3,opt,name=medicineCount,proto3" json:"medicineCount"`
	RankCount     int64                  `protobuf:"varint,4,opt,name=rankCount,proto3" json:"rankCount"`
	ManagerId     int64                  `protobuf:"varint,5,opt,name=managerId,proto3" json:"managerId"`
	MiId          int64                  `protobuf:"varint,6,opt,name=miId,proto3" json:"miId"`
	ComId         int64                  `protobuf:"varint,7,opt,name=comId,proto3" json:"comId"`
}

func (x *GetDashboardShipmentRankCompanyDataYearReq) Reset() {
	*x = GetDashboardShipmentRankCompanyDataYearReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardShipmentRankCompanyDataYearReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardShipmentRankCompanyDataYearReq) ProtoMessage() {}

func (x *GetDashboardShipmentRankCompanyDataYearReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardShipmentRankCompanyDataYearReq.ProtoReflect.Descriptor instead.
func (*GetDashboardShipmentRankCompanyDataYearReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{169}
}

func (x *GetDashboardShipmentRankCompanyDataYearReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *GetDashboardShipmentRankCompanyDataYearReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *GetDashboardShipmentRankCompanyDataYearReq) GetMedicineCount() int64 {
	if x != nil {
		return x.MedicineCount
	}
	return 0
}

func (x *GetDashboardShipmentRankCompanyDataYearReq) GetRankCount() int64 {
	if x != nil {
		return x.RankCount
	}
	return 0
}

func (x *GetDashboardShipmentRankCompanyDataYearReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetDashboardShipmentRankCompanyDataYearReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *GetDashboardShipmentRankCompanyDataYearReq) GetComId() int64 {
	if x != nil {
		return x.ComId
	}
	return 0
}

type DashboardShipmentRankCompanyDataYearVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank               string   `protobuf:"bytes,1,opt,name=rank,proto3" json:"rank"`
	ComName            string   `protobuf:"bytes,2,opt,name=comName,proto3" json:"comName"`
	ComCode            string   `protobuf:"bytes,3,opt,name=comCode,proto3" json:"comCode"`
	ShipmentPlanAmount string   `protobuf:"bytes,4,opt,name=shipmentPlanAmount,proto3" json:"shipmentPlanAmount"`
	Province           string   `protobuf:"bytes,5,opt,name=province,proto3" json:"province"`
	City               string   `protobuf:"bytes,6,opt,name=city,proto3" json:"city"`
	Zone               string   `protobuf:"bytes,7,opt,name=zone,proto3" json:"zone"`
	MedicineName       []string `protobuf:"bytes,8,rep,name=medicineName,proto3" json:"medicineName"`
}

func (x *DashboardShipmentRankCompanyDataYearVo) Reset() {
	*x = DashboardShipmentRankCompanyDataYearVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardShipmentRankCompanyDataYearVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardShipmentRankCompanyDataYearVo) ProtoMessage() {}

func (x *DashboardShipmentRankCompanyDataYearVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardShipmentRankCompanyDataYearVo.ProtoReflect.Descriptor instead.
func (*DashboardShipmentRankCompanyDataYearVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{170}
}

func (x *DashboardShipmentRankCompanyDataYearVo) GetRank() string {
	if x != nil {
		return x.Rank
	}
	return ""
}

func (x *DashboardShipmentRankCompanyDataYearVo) GetComName() string {
	if x != nil {
		return x.ComName
	}
	return ""
}

func (x *DashboardShipmentRankCompanyDataYearVo) GetComCode() string {
	if x != nil {
		return x.ComCode
	}
	return ""
}

func (x *DashboardShipmentRankCompanyDataYearVo) GetShipmentPlanAmount() string {
	if x != nil {
		return x.ShipmentPlanAmount
	}
	return ""
}

func (x *DashboardShipmentRankCompanyDataYearVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *DashboardShipmentRankCompanyDataYearVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *DashboardShipmentRankCompanyDataYearVo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *DashboardShipmentRankCompanyDataYearVo) GetMedicineName() []string {
	if x != nil {
		return x.MedicineName
	}
	return nil
}

type GetDashboardShipmentRankCompanyDataYearResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*DashboardShipmentRankCompanyDataYearVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
}

func (x *GetDashboardShipmentRankCompanyDataYearResp) Reset() {
	*x = GetDashboardShipmentRankCompanyDataYearResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardShipmentRankCompanyDataYearResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardShipmentRankCompanyDataYearResp) ProtoMessage() {}

func (x *GetDashboardShipmentRankCompanyDataYearResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardShipmentRankCompanyDataYearResp.ProtoReflect.Descriptor instead.
func (*GetDashboardShipmentRankCompanyDataYearResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{171}
}

func (x *GetDashboardShipmentRankCompanyDataYearResp) GetList() []*DashboardShipmentRankCompanyDataYearVo {
	if x != nil {
		return x.List
	}
	return nil
}

type GetDashboardShipmentRankMedicineDataYearReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int64                  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	MibId     int64                  `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	MiId      int64                  `protobuf:"varint,3,opt,name=miId,proto3" json:"miId"`
	StartAt   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=startAt,proto3" json:"startAt"`
	EndAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=endAt,proto3" json:"endAt"`
}

func (x *GetDashboardShipmentRankMedicineDataYearReq) Reset() {
	*x = GetDashboardShipmentRankMedicineDataYearReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardShipmentRankMedicineDataYearReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardShipmentRankMedicineDataYearReq) ProtoMessage() {}

func (x *GetDashboardShipmentRankMedicineDataYearReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardShipmentRankMedicineDataYearReq.ProtoReflect.Descriptor instead.
func (*GetDashboardShipmentRankMedicineDataYearReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{172}
}

func (x *GetDashboardShipmentRankMedicineDataYearReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetDashboardShipmentRankMedicineDataYearReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *GetDashboardShipmentRankMedicineDataYearReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *GetDashboardShipmentRankMedicineDataYearReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *GetDashboardShipmentRankMedicineDataYearReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

type DashboardShipmentRankMedicineDataYear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank               string `protobuf:"bytes,1,opt,name=rank,proto3" json:"rank"`
	MedicineName       string `protobuf:"bytes,2,opt,name=medicineName,proto3" json:"medicineName"`
	ShipmentPlanAmount string `protobuf:"bytes,3,opt,name=shipmentPlanAmount,proto3" json:"shipmentPlanAmount"`
}

func (x *DashboardShipmentRankMedicineDataYear) Reset() {
	*x = DashboardShipmentRankMedicineDataYear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardShipmentRankMedicineDataYear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardShipmentRankMedicineDataYear) ProtoMessage() {}

func (x *DashboardShipmentRankMedicineDataYear) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardShipmentRankMedicineDataYear.ProtoReflect.Descriptor instead.
func (*DashboardShipmentRankMedicineDataYear) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{173}
}

func (x *DashboardShipmentRankMedicineDataYear) GetRank() string {
	if x != nil {
		return x.Rank
	}
	return ""
}

func (x *DashboardShipmentRankMedicineDataYear) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *DashboardShipmentRankMedicineDataYear) GetShipmentPlanAmount() string {
	if x != nil {
		return x.ShipmentPlanAmount
	}
	return ""
}

type GetDashboardShipmentRankMedicineDataYearResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*DashboardShipmentRankMedicineDataYear `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
}

func (x *GetDashboardShipmentRankMedicineDataYearResp) Reset() {
	*x = GetDashboardShipmentRankMedicineDataYearResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardShipmentRankMedicineDataYearResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardShipmentRankMedicineDataYearResp) ProtoMessage() {}

func (x *GetDashboardShipmentRankMedicineDataYearResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardShipmentRankMedicineDataYearResp.ProtoReflect.Descriptor instead.
func (*GetDashboardShipmentRankMedicineDataYearResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{174}
}

func (x *GetDashboardShipmentRankMedicineDataYearResp) GetList() []*DashboardShipmentRankMedicineDataYear {
	if x != nil {
		return x.List
	}
	return nil
}

type GetDashboardCompanyRankReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	MiId      int64 `protobuf:"varint,2,opt,name=miId,proto3" json:"miId"`
	ComId     int64 `protobuf:"varint,3,opt,name=comId,proto3" json:"comId"`
	Page      *Page `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
}

func (x *GetDashboardCompanyRankReq) Reset() {
	*x = GetDashboardCompanyRankReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardCompanyRankReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardCompanyRankReq) ProtoMessage() {}

func (x *GetDashboardCompanyRankReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardCompanyRankReq.ProtoReflect.Descriptor instead.
func (*GetDashboardCompanyRankReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{175}
}

func (x *GetDashboardCompanyRankReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetDashboardCompanyRankReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *GetDashboardCompanyRankReq) GetComId() int64 {
	if x != nil {
		return x.ComId
	}
	return 0
}

func (x *GetDashboardCompanyRankReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type DashboardCompanyRankVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyName string `protobuf:"bytes,1,opt,name=companyName,proto3" json:"companyName"`
	Amount      string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (x *DashboardCompanyRankVo) Reset() {
	*x = DashboardCompanyRankVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardCompanyRankVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardCompanyRankVo) ProtoMessage() {}

func (x *DashboardCompanyRankVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardCompanyRankVo.ProtoReflect.Descriptor instead.
func (*DashboardCompanyRankVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{176}
}

func (x *DashboardCompanyRankVo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *DashboardCompanyRankVo) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type GetDashboardCompanyRankResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vo         []*DashboardCompanyRankVo `protobuf:"bytes,1,rep,name=vo,proto3" json:"vo"`
	Total      int64                     `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                     `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                     `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetDashboardCompanyRankResp) Reset() {
	*x = GetDashboardCompanyRankResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardCompanyRankResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardCompanyRankResp) ProtoMessage() {}

func (x *GetDashboardCompanyRankResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardCompanyRankResp.ProtoReflect.Descriptor instead.
func (*GetDashboardCompanyRankResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{177}
}

func (x *GetDashboardCompanyRankResp) GetVo() []*DashboardCompanyRankVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

func (x *GetDashboardCompanyRankResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetDashboardCompanyRankResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetDashboardCompanyRankResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetDashboardShipmentListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	MiId      int64 `protobuf:"varint,2,opt,name=miId,proto3" json:"miId"`
	ComId     int64 `protobuf:"varint,3,opt,name=comId,proto3" json:"comId"`
	Page      *Page `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
}

func (x *GetDashboardShipmentListReq) Reset() {
	*x = GetDashboardShipmentListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardShipmentListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardShipmentListReq) ProtoMessage() {}

func (x *GetDashboardShipmentListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardShipmentListReq.ProtoReflect.Descriptor instead.
func (*GetDashboardShipmentListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{178}
}

func (x *GetDashboardShipmentListReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetDashboardShipmentListReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *GetDashboardShipmentListReq) GetComId() int64 {
	if x != nil {
		return x.ComId
	}
	return 0
}

func (x *GetDashboardShipmentListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type DashboardShipmentVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineName    string                 `protobuf:"bytes,1,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode    string                 `protobuf:"bytes,2,opt,name=medicineCode,proto3" json:"medicineCode"`
	ShipmentStatus  string                 `protobuf:"bytes,3,opt,name=shipmentStatus,proto3" json:"shipmentStatus"`
	ReceiveDeadline *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=receiveDeadline,proto3" json:"receiveDeadline"`
}

func (x *DashboardShipmentVo) Reset() {
	*x = DashboardShipmentVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardShipmentVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardShipmentVo) ProtoMessage() {}

func (x *DashboardShipmentVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardShipmentVo.ProtoReflect.Descriptor instead.
func (*DashboardShipmentVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{179}
}

func (x *DashboardShipmentVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *DashboardShipmentVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *DashboardShipmentVo) GetShipmentStatus() string {
	if x != nil {
		return x.ShipmentStatus
	}
	return ""
}

func (x *DashboardShipmentVo) GetReceiveDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveDeadline
	}
	return nil
}

type GetDashboardShipmentListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*DashboardShipmentVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                  `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                  `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetDashboardShipmentListResp) Reset() {
	*x = GetDashboardShipmentListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardShipmentListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardShipmentListResp) ProtoMessage() {}

func (x *GetDashboardShipmentListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardShipmentListResp.ProtoReflect.Descriptor instead.
func (*GetDashboardShipmentListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{180}
}

func (x *GetDashboardShipmentListResp) GetList() []*DashboardShipmentVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetDashboardShipmentListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetDashboardShipmentListResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetDashboardShipmentListResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetDashboardMedicineRankReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	MiId      int64 `protobuf:"varint,2,opt,name=miId,proto3" json:"miId"`
	Page      *Page `protobuf:"bytes,3,opt,name=page,proto3" json:"page"`
}

func (x *GetDashboardMedicineRankReq) Reset() {
	*x = GetDashboardMedicineRankReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardMedicineRankReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardMedicineRankReq) ProtoMessage() {}

func (x *GetDashboardMedicineRankReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardMedicineRankReq.ProtoReflect.Descriptor instead.
func (*GetDashboardMedicineRankReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{181}
}

func (x *GetDashboardMedicineRankReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetDashboardMedicineRankReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *GetDashboardMedicineRankReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type DashboardMedicineRankVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineName string `protobuf:"bytes,1,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineNum  string `protobuf:"bytes,2,opt,name=medicineNum,proto3" json:"medicineNum"`
}

func (x *DashboardMedicineRankVo) Reset() {
	*x = DashboardMedicineRankVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardMedicineRankVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardMedicineRankVo) ProtoMessage() {}

func (x *DashboardMedicineRankVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardMedicineRankVo.ProtoReflect.Descriptor instead.
func (*DashboardMedicineRankVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{182}
}

func (x *DashboardMedicineRankVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *DashboardMedicineRankVo) GetMedicineNum() string {
	if x != nil {
		return x.MedicineNum
	}
	return ""
}

type GetDashboardMedicineRankResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vo         []*DashboardMedicineRankVo `protobuf:"bytes,1,rep,name=vo,proto3" json:"vo"`
	Total      int64                      `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                      `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                      `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetDashboardMedicineRankResp) Reset() {
	*x = GetDashboardMedicineRankResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardMedicineRankResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardMedicineRankResp) ProtoMessage() {}

func (x *GetDashboardMedicineRankResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardMedicineRankResp.ProtoReflect.Descriptor instead.
func (*GetDashboardMedicineRankResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{183}
}

func (x *GetDashboardMedicineRankResp) GetVo() []*DashboardMedicineRankVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

func (x *GetDashboardMedicineRankResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetDashboardMedicineRankResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetDashboardMedicineRankResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetDashboardStockListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	MiId      int64 `protobuf:"varint,2,opt,name=miId,proto3" json:"miId"`
	ComId     int64 `protobuf:"varint,3,opt,name=comId,proto3" json:"comId"`
	Page      *Page `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
}

func (x *GetDashboardStockListReq) Reset() {
	*x = GetDashboardStockListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardStockListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardStockListReq) ProtoMessage() {}

func (x *GetDashboardStockListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardStockListReq.ProtoReflect.Descriptor instead.
func (*GetDashboardStockListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{184}
}

func (x *GetDashboardStockListReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetDashboardStockListReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *GetDashboardStockListReq) GetComId() int64 {
	if x != nil {
		return x.ComId
	}
	return 0
}

func (x *GetDashboardStockListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type DashboardStockVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineName          string `protobuf:"bytes,1,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string `protobuf:"bytes,2,opt,name=medicineCode,proto3" json:"medicineCode"`
	ContractNo            string `protobuf:"bytes,3,opt,name=contractNo,proto3" json:"contractNo"`
	TenderCompany         string `protobuf:"bytes,4,opt,name=tenderCompany,proto3" json:"tenderCompany"`
	CompanyName           string `protobuf:"bytes,5,opt,name=companyName,proto3" json:"companyName"`
	ComStockNum           int64  `protobuf:"varint,6,opt,name=comStockNum,proto3" json:"comStockNum"`
	MiName                string `protobuf:"bytes,7,opt,name=miName,proto3" json:"miName"`
	MiStockNum            int64  `protobuf:"varint,8,opt,name=miStockNum,proto3" json:"miStockNum"`
	MedicineSpecification string `protobuf:"bytes,9,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
}

func (x *DashboardStockVo) Reset() {
	*x = DashboardStockVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardStockVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardStockVo) ProtoMessage() {}

func (x *DashboardStockVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardStockVo.ProtoReflect.Descriptor instead.
func (*DashboardStockVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{185}
}

func (x *DashboardStockVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *DashboardStockVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *DashboardStockVo) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

func (x *DashboardStockVo) GetTenderCompany() string {
	if x != nil {
		return x.TenderCompany
	}
	return ""
}

func (x *DashboardStockVo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *DashboardStockVo) GetComStockNum() int64 {
	if x != nil {
		return x.ComStockNum
	}
	return 0
}

func (x *DashboardStockVo) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *DashboardStockVo) GetMiStockNum() int64 {
	if x != nil {
		return x.MiStockNum
	}
	return 0
}

func (x *DashboardStockVo) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

type GetDashboardStockListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*DashboardStockVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64               `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64               `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64               `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetDashboardStockListResp) Reset() {
	*x = GetDashboardStockListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardStockListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardStockListResp) ProtoMessage() {}

func (x *GetDashboardStockListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardStockListResp.ProtoReflect.Descriptor instead.
func (*GetDashboardStockListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{186}
}

func (x *GetDashboardStockListResp) GetList() []*DashboardStockVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetDashboardStockListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetDashboardStockListResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetDashboardStockListResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetCompanyBankAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyCode string `protobuf:"bytes,1,opt,name=companyCode,proto3" json:"companyCode"`
}

func (x *GetCompanyBankAccountReq) Reset() {
	*x = GetCompanyBankAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyBankAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyBankAccountReq) ProtoMessage() {}

func (x *GetCompanyBankAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyBankAccountReq.ProtoReflect.Descriptor instead.
func (*GetCompanyBankAccountReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{187}
}

func (x *GetCompanyBankAccountReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

type GetCompanyBankAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardNo    string `protobuf:"bytes,1,opt,name=cardNo,proto3" json:"cardNo"`
	Bank      string `protobuf:"bytes,2,opt,name=bank,proto3" json:"bank"`
	CardOwner string `protobuf:"bytes,3,opt,name=cardOwner,proto3" json:"cardOwner"`
	ComName   string `protobuf:"bytes,4,opt,name=comName,proto3" json:"comName"`
	ComId     string `protobuf:"bytes,5,opt,name=comId,proto3" json:"comId"`
}

func (x *GetCompanyBankAccountResp) Reset() {
	*x = GetCompanyBankAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyBankAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyBankAccountResp) ProtoMessage() {}

func (x *GetCompanyBankAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyBankAccountResp.ProtoReflect.Descriptor instead.
func (*GetCompanyBankAccountResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{188}
}

func (x *GetCompanyBankAccountResp) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *GetCompanyBankAccountResp) GetBank() string {
	if x != nil {
		return x.Bank
	}
	return ""
}

func (x *GetCompanyBankAccountResp) GetCardOwner() string {
	if x != nil {
		return x.CardOwner
	}
	return ""
}

func (x *GetCompanyBankAccountResp) GetComName() string {
	if x != nil {
		return x.ComName
	}
	return ""
}

func (x *GetCompanyBankAccountResp) GetComId() string {
	if x != nil {
		return x.ComId
	}
	return ""
}

type GetPayOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	MiId      int64 `protobuf:"varint,2,opt,name=miId,proto3" json:"miId"`
}

func (x *GetPayOrderReq) Reset() {
	*x = GetPayOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPayOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPayOrderReq) ProtoMessage() {}

func (x *GetPayOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPayOrderReq.ProtoReflect.Descriptor instead.
func (*GetPayOrderReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{189}
}

func (x *GetPayOrderReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetPayOrderReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

type GetPayOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayOrderAmount string `protobuf:"bytes,1,opt,name=payOrderAmount,proto3" json:"payOrderAmount"`
	PayOrderNum    string `protobuf:"bytes,2,opt,name=payOrderNum,proto3" json:"payOrderNum"`
	WaitNum        string `protobuf:"bytes,3,opt,name=waitNum,proto3" json:"waitNum"`
}

func (x *GetPayOrderResp) Reset() {
	*x = GetPayOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPayOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPayOrderResp) ProtoMessage() {}

func (x *GetPayOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPayOrderResp.ProtoReflect.Descriptor instead.
func (*GetPayOrderResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{190}
}

func (x *GetPayOrderResp) GetPayOrderAmount() string {
	if x != nil {
		return x.PayOrderAmount
	}
	return ""
}

func (x *GetPayOrderResp) GetPayOrderNum() string {
	if x != nil {
		return x.PayOrderNum
	}
	return ""
}

func (x *GetPayOrderResp) GetWaitNum() string {
	if x != nil {
		return x.WaitNum
	}
	return ""
}

type GetCompanyHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId    int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	CompanyIds   []int64  `protobuf:"varint,2,rep,packed,name=companyIds,proto3" json:"companyIds"`
	CompanyCodes []string `protobuf:"bytes,3,rep,name=companyCodes,proto3" json:"companyCodes"`
}

func (x *GetCompanyHashReq) Reset() {
	*x = GetCompanyHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyHashReq) ProtoMessage() {}

func (x *GetCompanyHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyHashReq.ProtoReflect.Descriptor instead.
func (*GetCompanyHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{191}
}

func (x *GetCompanyHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetCompanyHashReq) GetCompanyIds() []int64 {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

func (x *GetCompanyHashReq) GetCompanyCodes() []string {
	if x != nil {
		return x.CompanyCodes
	}
	return nil
}

type GetCompanyHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*CompanyHash `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64          `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64          `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetCompanyHashResp) Reset() {
	*x = GetCompanyHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyHashResp) ProtoMessage() {}

func (x *GetCompanyHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyHashResp.ProtoReflect.Descriptor instead.
func (*GetCompanyHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{192}
}

func (x *GetCompanyHashResp) GetList() []*CompanyHash {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetCompanyHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetCompanyHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetCompanyHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type CompanyHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId    int64                  `protobuf:"varint,1,opt,name=companyId,proto3" json:"companyId"`
	CompanyCode  string                 `protobuf:"bytes,2,opt,name=companyCode,proto3" json:"companyCode"`
	InfoHash     string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
}

func (x *CompanyHash) Reset() {
	*x = CompanyHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyHash) ProtoMessage() {}

func (x *CompanyHash) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyHash.ProtoReflect.Descriptor instead.
func (*CompanyHash) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{193}
}

func (x *CompanyHash) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *CompanyHash) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *CompanyHash) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *CompanyHash) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

type GetMiHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	MiIds     []int64  `protobuf:"varint,2,rep,packed,name=miIds,proto3" json:"miIds"`
	MiCodes   []string `protobuf:"bytes,3,rep,name=miCodes,proto3" json:"miCodes"`
}

func (x *GetMiHashReq) Reset() {
	*x = GetMiHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMiHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMiHashReq) ProtoMessage() {}

func (x *GetMiHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMiHashReq.ProtoReflect.Descriptor instead.
func (*GetMiHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{194}
}

func (x *GetMiHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetMiHashReq) GetMiIds() []int64 {
	if x != nil {
		return x.MiIds
	}
	return nil
}

func (x *GetMiHashReq) GetMiCodes() []string {
	if x != nil {
		return x.MiCodes
	}
	return nil
}

type MiHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiId         int64                  `protobuf:"varint,1,opt,name=miId,proto3" json:"miId"`
	MiCode       string                 `protobuf:"bytes,2,opt,name=miCode,proto3" json:"miCode"`
	InfoHash     string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
}

func (x *MiHash) Reset() {
	*x = MiHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiHash) ProtoMessage() {}

func (x *MiHash) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiHash.ProtoReflect.Descriptor instead.
func (*MiHash) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{195}
}

func (x *MiHash) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *MiHash) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *MiHash) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *MiHash) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

type GetMiHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*MiHash `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64     `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64     `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64     `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetMiHashResp) Reset() {
	*x = GetMiHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMiHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMiHashResp) ProtoMessage() {}

func (x *GetMiHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMiHashResp.ProtoReflect.Descriptor instead.
func (*GetMiHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{196}
}

func (x *GetMiHashResp) GetList() []*MiHash {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetMiHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetMiHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetMiHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetMedicineReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId     int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	MedicineIds   []int64  `protobuf:"varint,2,rep,packed,name=medicineIds,proto3" json:"medicineIds"`
	MedicineCodes []string `protobuf:"bytes,3,rep,name=medicineCodes,proto3" json:"medicineCodes"`
}

func (x *GetMedicineReq) Reset() {
	*x = GetMedicineReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMedicineReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMedicineReq) ProtoMessage() {}

func (x *GetMedicineReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMedicineReq.ProtoReflect.Descriptor instead.
func (*GetMedicineReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{197}
}

func (x *GetMedicineReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetMedicineReq) GetMedicineIds() []int64 {
	if x != nil {
		return x.MedicineIds
	}
	return nil
}

func (x *GetMedicineReq) GetMedicineCodes() []string {
	if x != nil {
		return x.MedicineCodes
	}
	return nil
}

type MedicineHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineId   int64                  `protobuf:"varint,1,opt,name=medicineId,proto3" json:"medicineId"`
	MedicineCode string                 `protobuf:"bytes,2,opt,name=medicineCode,proto3" json:"medicineCode"`
	InfoHash     string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
}

func (x *MedicineHash) Reset() {
	*x = MedicineHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineHash) ProtoMessage() {}

func (x *MedicineHash) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineHash.ProtoReflect.Descriptor instead.
func (*MedicineHash) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{198}
}

func (x *MedicineHash) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *MedicineHash) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *MedicineHash) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *MedicineHash) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

type GetMedicineResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*MedicineHash `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64           `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64           `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetMedicineResp) Reset() {
	*x = GetMedicineResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMedicineResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMedicineResp) ProtoMessage() {}

func (x *GetMedicineResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMedicineResp.ProtoReflect.Descriptor instead.
func (*GetMedicineResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{199}
}

func (x *GetMedicineResp) GetList() []*MedicineHash {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetMedicineResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetMedicineResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetMedicineResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetContractHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId     int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ContractIds   []int64  `protobuf:"varint,2,rep,packed,name=contractIds,proto3" json:"contractIds"`
	ContractCodes []string `protobuf:"bytes,3,rep,name=contractCodes,proto3" json:"contractCodes"`
}

func (x *GetContractHashReq) Reset() {
	*x = GetContractHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractHashReq) ProtoMessage() {}

func (x *GetContractHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractHashReq.ProtoReflect.Descriptor instead.
func (*GetContractHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{200}
}

func (x *GetContractHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetContractHashReq) GetContractIds() []int64 {
	if x != nil {
		return x.ContractIds
	}
	return nil
}

func (x *GetContractHashReq) GetContractCodes() []string {
	if x != nil {
		return x.ContractCodes
	}
	return nil
}

type ContractHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId   int64                  `protobuf:"varint,1,opt,name=contractId,proto3" json:"contractId"`
	ContractCode string                 `protobuf:"bytes,2,opt,name=contractCode,proto3" json:"contractCode"`
	InfoHash     string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
}

func (x *ContractHash) Reset() {
	*x = ContractHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractHash) ProtoMessage() {}

func (x *ContractHash) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractHash.ProtoReflect.Descriptor instead.
func (*ContractHash) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{201}
}

func (x *ContractHash) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *ContractHash) GetContractCode() string {
	if x != nil {
		return x.ContractCode
	}
	return ""
}

func (x *ContractHash) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *ContractHash) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

type GetContractHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ContractHash `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64           `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64           `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetContractHashResp) Reset() {
	*x = GetContractHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractHashResp) ProtoMessage() {}

func (x *GetContractHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractHashResp.ProtoReflect.Descriptor instead.
func (*GetContractHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{202}
}

func (x *GetContractHashResp) GetList() []*ContractHash {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetContractHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetContractHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetContractHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetContractMiHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId     int64   `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ContractMiIds []int64 `protobuf:"varint,2,rep,packed,name=contractMiIds,proto3" json:"contractMiIds"`
	ContractId    int64   `protobuf:"varint,3,opt,name=contractId,proto3" json:"contractId"`
	ContractCode  string  `protobuf:"bytes,4,opt,name=contractCode,proto3" json:"contractCode"`
}

func (x *GetContractMiHashReq) Reset() {
	*x = GetContractMiHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractMiHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractMiHashReq) ProtoMessage() {}

func (x *GetContractMiHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractMiHashReq.ProtoReflect.Descriptor instead.
func (*GetContractMiHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{203}
}

func (x *GetContractMiHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetContractMiHashReq) GetContractMiIds() []int64 {
	if x != nil {
		return x.ContractMiIds
	}
	return nil
}

func (x *GetContractMiHashReq) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *GetContractMiHashReq) GetContractCode() string {
	if x != nil {
		return x.ContractCode
	}
	return ""
}

type ContractMiHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractMiId int64                  `protobuf:"varint,1,opt,name=contractMiId,proto3" json:"contractMiId"`
	MiId         int64                  `protobuf:"varint,2,opt,name=miId,proto3" json:"miId"`
	MiCode       string                 `protobuf:"bytes,3,opt,name=miCode,proto3" json:"miCode"`
	InfoHash     string                 `protobuf:"bytes,4,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
}

func (x *ContractMiHash) Reset() {
	*x = ContractMiHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractMiHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractMiHash) ProtoMessage() {}

func (x *ContractMiHash) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractMiHash.ProtoReflect.Descriptor instead.
func (*ContractMiHash) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{204}
}

func (x *ContractMiHash) GetContractMiId() int64 {
	if x != nil {
		return x.ContractMiId
	}
	return 0
}

func (x *ContractMiHash) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *ContractMiHash) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ContractMiHash) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *ContractMiHash) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

type GetContractMiHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ContractMiHash `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64             `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64             `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetContractMiHashResp) Reset() {
	*x = GetContractMiHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractMiHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractMiHashResp) ProtoMessage() {}

func (x *GetContractMiHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractMiHashResp.ProtoReflect.Descriptor instead.
func (*GetContractMiHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{205}
}

func (x *GetContractMiHashResp) GetList() []*ContractMiHash {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetContractMiHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetContractMiHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetContractMiHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetConfigHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId  int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ConfigIds  []int64  `protobuf:"varint,2,rep,packed,name=configIds,proto3" json:"configIds"`
	ConfigKeys []string `protobuf:"bytes,3,rep,name=configKeys,proto3" json:"configKeys"`
	ConfigType string   `protobuf:"bytes,4,opt,name=configType,proto3" json:"configType"`
}

func (x *GetConfigHashReq) Reset() {
	*x = GetConfigHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigHashReq) ProtoMessage() {}

func (x *GetConfigHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigHashReq.ProtoReflect.Descriptor instead.
func (*GetConfigHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{206}
}

func (x *GetConfigHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetConfigHashReq) GetConfigIds() []int64 {
	if x != nil {
		return x.ConfigIds
	}
	return nil
}

func (x *GetConfigHashReq) GetConfigKeys() []string {
	if x != nil {
		return x.ConfigKeys
	}
	return nil
}

func (x *GetConfigHashReq) GetConfigType() string {
	if x != nil {
		return x.ConfigType
	}
	return ""
}

type ConfigHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId     int64                  `protobuf:"varint,1,opt,name=configId,proto3" json:"configId"`
	ConfigKey    string                 `protobuf:"bytes,2,opt,name=configKey,proto3" json:"configKey"`
	InfoHash     string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
}

func (x *ConfigHash) Reset() {
	*x = ConfigHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigHash) ProtoMessage() {}

func (x *ConfigHash) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigHash.ProtoReflect.Descriptor instead.
func (*ConfigHash) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{207}
}

func (x *ConfigHash) GetConfigId() int64 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *ConfigHash) GetConfigKey() string {
	if x != nil {
		return x.ConfigKey
	}
	return ""
}

func (x *ConfigHash) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *ConfigHash) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

type GetConfigHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ConfigHash `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64         `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64         `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64         `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetConfigHashResp) Reset() {
	*x = GetConfigHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigHashResp) ProtoMessage() {}

func (x *GetConfigHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigHashResp.ProtoReflect.Descriptor instead.
func (*GetConfigHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{208}
}

func (x *GetConfigHashResp) GetList() []*ConfigHash {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetConfigHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetConfigHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetConfigHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetShipmentPlanHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId       int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ShipmentPlanIds []int64  `protobuf:"varint,2,rep,packed,name=shipmentPlanIds,proto3" json:"shipmentPlanIds"`
	OrderNos        []string `protobuf:"bytes,3,rep,name=orderNos,proto3" json:"orderNos"`
	ShipmentNo      string   `protobuf:"bytes,4,opt,name=shipmentNo,proto3" json:"shipmentNo"`
}

func (x *GetShipmentPlanHashReq) Reset() {
	*x = GetShipmentPlanHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentPlanHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentPlanHashReq) ProtoMessage() {}

func (x *GetShipmentPlanHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentPlanHashReq.ProtoReflect.Descriptor instead.
func (*GetShipmentPlanHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{209}
}

func (x *GetShipmentPlanHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetShipmentPlanHashReq) GetShipmentPlanIds() []int64 {
	if x != nil {
		return x.ShipmentPlanIds
	}
	return nil
}

func (x *GetShipmentPlanHashReq) GetOrderNos() []string {
	if x != nil {
		return x.OrderNos
	}
	return nil
}

func (x *GetShipmentPlanHashReq) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

type ShipmentPlanHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentPlanId          int64                  `protobuf:"varint,1,opt,name=shipmentPlanId,proto3" json:"shipmentPlanId"`
	OrderNo                 string                 `protobuf:"bytes,2,opt,name=orderNo,proto3" json:"orderNo"`
	InfoHash                string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt            *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
	QrCodeHash              string                 `protobuf:"bytes,5,opt,name=qrCodeHash,proto3" json:"qrCodeHash"`
	QrCodeUploadAt          *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=qrCodeUploadAt,proto3" json:"qrCodeUploadAt"`
	ShipmentStartHash       string                 `protobuf:"bytes,7,opt,name=shipmentStartHash,proto3" json:"shipmentStartHash"`
	ShipmentStartUploadAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=shipmentStartUploadAt,proto3" json:"shipmentStartUploadAt"`
	ShipmentReceiveHash     string                 `protobuf:"bytes,9,opt,name=shipmentReceiveHash,proto3" json:"shipmentReceiveHash"`
	ShipmentReceiveUploadAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=shipmentReceiveUploadAt,proto3" json:"shipmentReceiveUploadAt"`
	ShipmentEnterHash       string                 `protobuf:"bytes,11,opt,name=shipmentEnterHash,proto3" json:"shipmentEnterHash"`
	ShipmentEnterUploadAt   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=shipmentEnterUploadAt,proto3" json:"shipmentEnterUploadAt"`
}

func (x *ShipmentPlanHash) Reset() {
	*x = ShipmentPlanHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentPlanHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentPlanHash) ProtoMessage() {}

func (x *ShipmentPlanHash) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentPlanHash.ProtoReflect.Descriptor instead.
func (*ShipmentPlanHash) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{210}
}

func (x *ShipmentPlanHash) GetShipmentPlanId() int64 {
	if x != nil {
		return x.ShipmentPlanId
	}
	return 0
}

func (x *ShipmentPlanHash) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *ShipmentPlanHash) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *ShipmentPlanHash) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

func (x *ShipmentPlanHash) GetQrCodeHash() string {
	if x != nil {
		return x.QrCodeHash
	}
	return ""
}

func (x *ShipmentPlanHash) GetQrCodeUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.QrCodeUploadAt
	}
	return nil
}

func (x *ShipmentPlanHash) GetShipmentStartHash() string {
	if x != nil {
		return x.ShipmentStartHash
	}
	return ""
}

func (x *ShipmentPlanHash) GetShipmentStartUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ShipmentStartUploadAt
	}
	return nil
}

func (x *ShipmentPlanHash) GetShipmentReceiveHash() string {
	if x != nil {
		return x.ShipmentReceiveHash
	}
	return ""
}

func (x *ShipmentPlanHash) GetShipmentReceiveUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ShipmentReceiveUploadAt
	}
	return nil
}

func (x *ShipmentPlanHash) GetShipmentEnterHash() string {
	if x != nil {
		return x.ShipmentEnterHash
	}
	return ""
}

func (x *ShipmentPlanHash) GetShipmentEnterUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ShipmentEnterUploadAt
	}
	return nil
}

type GetShipmentPlanHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ShipmentPlanHash `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64               `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64               `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64               `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetShipmentPlanHashResp) Reset() {
	*x = GetShipmentPlanHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentPlanHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentPlanHashResp) ProtoMessage() {}

func (x *GetShipmentPlanHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentPlanHashResp.ProtoReflect.Descriptor instead.
func (*GetShipmentPlanHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{211}
}

func (x *GetShipmentPlanHashResp) GetList() []*ShipmentPlanHash {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShipmentPlanHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetShipmentPlanHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShipmentPlanHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetShipmentOrderHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId        int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ShipmentOrderIds []int64  `protobuf:"varint,2,rep,packed,name=shipmentOrderIds,proto3" json:"shipmentOrderIds"`
	ShipmentNos      []string `protobuf:"bytes,3,rep,name=shipmentNos,proto3" json:"shipmentNos"`
}

func (x *GetShipmentOrderHashReq) Reset() {
	*x = GetShipmentOrderHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentOrderHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentOrderHashReq) ProtoMessage() {}

func (x *GetShipmentOrderHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentOrderHashReq.ProtoReflect.Descriptor instead.
func (*GetShipmentOrderHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{212}
}

func (x *GetShipmentOrderHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetShipmentOrderHashReq) GetShipmentOrderIds() []int64 {
	if x != nil {
		return x.ShipmentOrderIds
	}
	return nil
}

func (x *GetShipmentOrderHashReq) GetShipmentNos() []string {
	if x != nil {
		return x.ShipmentNos
	}
	return nil
}

type ShipmentOrderHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentOrderId         int64                  `protobuf:"varint,1,opt,name=shipmentOrderId,proto3" json:"shipmentOrderId"`
	ShipmentNo              string                 `protobuf:"bytes,2,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	QrCodeHash              string                 `protobuf:"bytes,3,opt,name=qrCodeHash,proto3" json:"qrCodeHash"`
	QrCodeUploadAt          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=qrCodeUploadAt,proto3" json:"qrCodeUploadAt"`
	ShipmentStartHash       string                 `protobuf:"bytes,5,opt,name=shipmentStartHash,proto3" json:"shipmentStartHash"`
	ShipmentStartUploadAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=shipmentStartUploadAt,proto3" json:"shipmentStartUploadAt"`
	ShipmentReceiveHash     string                 `protobuf:"bytes,7,opt,name=shipmentReceiveHash,proto3" json:"shipmentReceiveHash"`
	ShipmentReceiveUploadAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=shipmentReceiveUploadAt,proto3" json:"shipmentReceiveUploadAt"`
	ShipmentEnterHash       string                 `protobuf:"bytes,9,opt,name=shipmentEnterHash,proto3" json:"shipmentEnterHash"`
	ShipmentEnterUploadAt   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=shipmentEnterUploadAt,proto3" json:"shipmentEnterUploadAt"`
}

func (x *ShipmentOrderHash) Reset() {
	*x = ShipmentOrderHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentOrderHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentOrderHash) ProtoMessage() {}

func (x *ShipmentOrderHash) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentOrderHash.ProtoReflect.Descriptor instead.
func (*ShipmentOrderHash) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{213}
}

func (x *ShipmentOrderHash) GetShipmentOrderId() int64 {
	if x != nil {
		return x.ShipmentOrderId
	}
	return 0
}

func (x *ShipmentOrderHash) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *ShipmentOrderHash) GetQrCodeHash() string {
	if x != nil {
		return x.QrCodeHash
	}
	return ""
}

func (x *ShipmentOrderHash) GetQrCodeUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.QrCodeUploadAt
	}
	return nil
}

func (x *ShipmentOrderHash) GetShipmentStartHash() string {
	if x != nil {
		return x.ShipmentStartHash
	}
	return ""
}

func (x *ShipmentOrderHash) GetShipmentStartUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ShipmentStartUploadAt
	}
	return nil
}

func (x *ShipmentOrderHash) GetShipmentReceiveHash() string {
	if x != nil {
		return x.ShipmentReceiveHash
	}
	return ""
}

func (x *ShipmentOrderHash) GetShipmentReceiveUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ShipmentReceiveUploadAt
	}
	return nil
}

func (x *ShipmentOrderHash) GetShipmentEnterHash() string {
	if x != nil {
		return x.ShipmentEnterHash
	}
	return ""
}

func (x *ShipmentOrderHash) GetShipmentEnterUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ShipmentEnterUploadAt
	}
	return nil
}

type GetShipmentOrderHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ShipmentOrderHash `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetShipmentOrderHashResp) Reset() {
	*x = GetShipmentOrderHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentOrderHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentOrderHashResp) ProtoMessage() {}

func (x *GetShipmentOrderHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentOrderHashResp.ProtoReflect.Descriptor instead.
func (*GetShipmentOrderHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{214}
}

func (x *GetShipmentOrderHashResp) GetList() []*ShipmentOrderHash {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShipmentOrderHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetShipmentOrderHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShipmentOrderHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetShipmentPayHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId           int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ShipmentOrderIds    []int64  `protobuf:"varint,2,rep,packed,name=shipmentOrderIds,proto3" json:"shipmentOrderIds"`
	ShipmentPayOrderIds []int64  `protobuf:"varint,3,rep,packed,name=shipmentPayOrderIds,proto3" json:"shipmentPayOrderIds"`
	ShipmentNos         []string `protobuf:"bytes,4,rep,name=shipmentNos,proto3" json:"shipmentNos"`
}

func (x *GetShipmentPayHashReq) Reset() {
	*x = GetShipmentPayHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentPayHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentPayHashReq) ProtoMessage() {}

func (x *GetShipmentPayHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentPayHashReq.ProtoReflect.Descriptor instead.
func (*GetShipmentPayHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{215}
}

func (x *GetShipmentPayHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetShipmentPayHashReq) GetShipmentOrderIds() []int64 {
	if x != nil {
		return x.ShipmentOrderIds
	}
	return nil
}

func (x *GetShipmentPayHashReq) GetShipmentPayOrderIds() []int64 {
	if x != nil {
		return x.ShipmentPayOrderIds
	}
	return nil
}

func (x *GetShipmentPayHashReq) GetShipmentNos() []string {
	if x != nil {
		return x.ShipmentNos
	}
	return nil
}

type ShipmentPayHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentOrderId int64                  `protobuf:"varint,1,opt,name=shipmentOrderId,proto3" json:"shipmentOrderId"`
	ShipmentNo      string                 `protobuf:"bytes,2,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	InfoHash        string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
	ResultHash      string                 `protobuf:"bytes,5,opt,name=resultHash,proto3" json:"resultHash"`
	ResultUploadAt  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=resultUploadAt,proto3" json:"resultUploadAt"`
}

func (x *ShipmentPayHash) Reset() {
	*x = ShipmentPayHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentPayHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentPayHash) ProtoMessage() {}

func (x *ShipmentPayHash) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentPayHash.ProtoReflect.Descriptor instead.
func (*ShipmentPayHash) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{216}
}

func (x *ShipmentPayHash) GetShipmentOrderId() int64 {
	if x != nil {
		return x.ShipmentOrderId
	}
	return 0
}

func (x *ShipmentPayHash) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *ShipmentPayHash) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *ShipmentPayHash) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

func (x *ShipmentPayHash) GetResultHash() string {
	if x != nil {
		return x.ResultHash
	}
	return ""
}

func (x *ShipmentPayHash) GetResultUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ResultUploadAt
	}
	return nil
}

type GetShipmentPayHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ShipmentPayHash `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64              `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64              `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64              `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetShipmentPayHashResp) Reset() {
	*x = GetShipmentPayHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentPayHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentPayHashResp) ProtoMessage() {}

func (x *GetShipmentPayHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentPayHashResp.ProtoReflect.Descriptor instead.
func (*GetShipmentPayHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{217}
}

func (x *GetShipmentPayHashResp) GetList() []*ShipmentPayHash {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShipmentPayHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetShipmentPayHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShipmentPayHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetShipmentFactoringHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId         int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	FactoringOrderIds []int64  `protobuf:"varint,2,rep,packed,name=factoringOrderIds,proto3" json:"factoringOrderIds"`
	FactoringOrderNos []string `protobuf:"bytes,3,rep,name=factoringOrderNos,proto3" json:"factoringOrderNos"`
}

func (x *GetShipmentFactoringHashReq) Reset() {
	*x = GetShipmentFactoringHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentFactoringHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentFactoringHashReq) ProtoMessage() {}

func (x *GetShipmentFactoringHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentFactoringHashReq.ProtoReflect.Descriptor instead.
func (*GetShipmentFactoringHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{218}
}

func (x *GetShipmentFactoringHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetShipmentFactoringHashReq) GetFactoringOrderIds() []int64 {
	if x != nil {
		return x.FactoringOrderIds
	}
	return nil
}

func (x *GetShipmentFactoringHashReq) GetFactoringOrderNos() []string {
	if x != nil {
		return x.FactoringOrderNos
	}
	return nil
}

type ShipmentFactoringHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FactoringOrderId int64                  `protobuf:"varint,1,opt,name=factoringOrderId,proto3" json:"factoringOrderId"`
	FactoringOrderNo string                 `protobuf:"bytes,2,opt,name=factoringOrderNo,proto3" json:"factoringOrderNo"`
	ApplyHash        string                 `protobuf:"bytes,3,opt,name=applyHash,proto3" json:"applyHash"`
	ApplyUploadAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=applyUploadAt,proto3" json:"applyUploadAt"`
	ResultHash       string                 `protobuf:"bytes,5,opt,name=resultHash,proto3" json:"resultHash"`
	ResultUploadAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=resultUploadAt,proto3" json:"resultUploadAt"`
	PayBackHash      string                 `protobuf:"bytes,7,opt,name=payBackHash,proto3" json:"payBackHash"`
	PayBackUploadAt  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=payBackUploadAt,proto3" json:"payBackUploadAt"`
}

func (x *ShipmentFactoringHash) Reset() {
	*x = ShipmentFactoringHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentFactoringHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentFactoringHash) ProtoMessage() {}

func (x *ShipmentFactoringHash) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentFactoringHash.ProtoReflect.Descriptor instead.
func (*ShipmentFactoringHash) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{219}
}

func (x *ShipmentFactoringHash) GetFactoringOrderId() int64 {
	if x != nil {
		return x.FactoringOrderId
	}
	return 0
}

func (x *ShipmentFactoringHash) GetFactoringOrderNo() string {
	if x != nil {
		return x.FactoringOrderNo
	}
	return ""
}

func (x *ShipmentFactoringHash) GetApplyHash() string {
	if x != nil {
		return x.ApplyHash
	}
	return ""
}

func (x *ShipmentFactoringHash) GetApplyUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyUploadAt
	}
	return nil
}

func (x *ShipmentFactoringHash) GetResultHash() string {
	if x != nil {
		return x.ResultHash
	}
	return ""
}

func (x *ShipmentFactoringHash) GetResultUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ResultUploadAt
	}
	return nil
}

func (x *ShipmentFactoringHash) GetPayBackHash() string {
	if x != nil {
		return x.PayBackHash
	}
	return ""
}

func (x *ShipmentFactoringHash) GetPayBackUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PayBackUploadAt
	}
	return nil
}

type GetShipmentFactoringHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ShipmentFactoringHash `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                    `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                    `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                    `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetShipmentFactoringHashResp) Reset() {
	*x = GetShipmentFactoringHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentFactoringHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentFactoringHashResp) ProtoMessage() {}

func (x *GetShipmentFactoringHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentFactoringHashResp.ProtoReflect.Descriptor instead.
func (*GetShipmentFactoringHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{220}
}

func (x *GetShipmentFactoringHashResp) GetList() []*ShipmentFactoringHash {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShipmentFactoringHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetShipmentFactoringHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShipmentFactoringHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetShipmentRankMedicineDataYearReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪个医保局的订单报表数据，目前不支持不同医保局混合统计
	MibId int64 `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	//报表的起止日期必填
	StartAt   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=startAt,proto3" json:"startAt"`
	EndAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=endAt,proto3" json:"endAt"`
	RankCount int64                  `protobuf:"varint,5,opt,name=rankCount,proto3" json:"rankCount"`
	//显示哪家医疗机构的排名数据
	MiId int64 `protobuf:"varint,6,opt,name=miId,proto3" json:"miId"`
}

func (x *GetShipmentRankMedicineDataYearReq) Reset() {
	*x = GetShipmentRankMedicineDataYearReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentRankMedicineDataYearReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentRankMedicineDataYearReq) ProtoMessage() {}

func (x *GetShipmentRankMedicineDataYearReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentRankMedicineDataYearReq.ProtoReflect.Descriptor instead.
func (*GetShipmentRankMedicineDataYearReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{221}
}

func (x *GetShipmentRankMedicineDataYearReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetShipmentRankMedicineDataYearReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *GetShipmentRankMedicineDataYearReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *GetShipmentRankMedicineDataYearReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *GetShipmentRankMedicineDataYearReq) GetRankCount() int64 {
	if x != nil {
		return x.RankCount
	}
	return 0
}

func (x *GetShipmentRankMedicineDataYearReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

type ShipmentRankMedicineDataYear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank int64 `protobuf:"varint,1,opt,name=rank,proto3" json:"rank"`
	//本年配送计划同步金额 分
	ShipmentPlanAmount int64  `protobuf:"varint,2,opt,name=shipmentPlanAmount,proto3" json:"shipmentPlanAmount"`
	MedicineName       string `protobuf:"bytes,3,opt,name=medicineName,proto3" json:"medicineName"`
}

func (x *ShipmentRankMedicineDataYear) Reset() {
	*x = ShipmentRankMedicineDataYear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentRankMedicineDataYear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentRankMedicineDataYear) ProtoMessage() {}

func (x *ShipmentRankMedicineDataYear) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentRankMedicineDataYear.ProtoReflect.Descriptor instead.
func (*ShipmentRankMedicineDataYear) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{222}
}

func (x *ShipmentRankMedicineDataYear) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ShipmentRankMedicineDataYear) GetShipmentPlanAmount() int64 {
	if x != nil {
		return x.ShipmentPlanAmount
	}
	return 0
}

func (x *ShipmentRankMedicineDataYear) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

type GetShipmentRankMedicineDataYearResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ShipmentRankMedicineDataYear `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                           `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                           `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                           `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetShipmentRankMedicineDataYearResp) Reset() {
	*x = GetShipmentRankMedicineDataYearResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentRankMedicineDataYearResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentRankMedicineDataYearResp) ProtoMessage() {}

func (x *GetShipmentRankMedicineDataYearResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentRankMedicineDataYearResp.ProtoReflect.Descriptor instead.
func (*GetShipmentRankMedicineDataYearResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{223}
}

func (x *GetShipmentRankMedicineDataYearResp) GetList() []*ShipmentRankMedicineDataYear {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShipmentRankMedicineDataYearResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetShipmentRankMedicineDataYearResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShipmentRankMedicineDataYearResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetShipmentRankCompanyDataYearReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪个医保局的订单报表数据，目前不支持不同医保局混合统计
	MibId int64 `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	//报表的起止日期必填
	StartAt   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=startAt,proto3" json:"startAt"`
	EndAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=endAt,proto3" json:"endAt"`
	RankCount int64                  `protobuf:"varint,5,opt,name=rankCount,proto3" json:"rankCount"`
	//需要展示的药品数量
	MedicineCount int64 `protobuf:"varint,6,opt,name=medicineCount,proto3" json:"medicineCount"`
	//显示哪家医疗机构的排名数据
	MiId int64 `protobuf:"varint,7,opt,name=miId,proto3" json:"miId"`
}

func (x *GetShipmentRankCompanyDataYearReq) Reset() {
	*x = GetShipmentRankCompanyDataYearReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentRankCompanyDataYearReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentRankCompanyDataYearReq) ProtoMessage() {}

func (x *GetShipmentRankCompanyDataYearReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentRankCompanyDataYearReq.ProtoReflect.Descriptor instead.
func (*GetShipmentRankCompanyDataYearReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{224}
}

func (x *GetShipmentRankCompanyDataYearReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetShipmentRankCompanyDataYearReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *GetShipmentRankCompanyDataYearReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *GetShipmentRankCompanyDataYearReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *GetShipmentRankCompanyDataYearReq) GetRankCount() int64 {
	if x != nil {
		return x.RankCount
	}
	return 0
}

func (x *GetShipmentRankCompanyDataYearReq) GetMedicineCount() int64 {
	if x != nil {
		return x.MedicineCount
	}
	return 0
}

func (x *GetShipmentRankCompanyDataYearReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

type ShipmentRankCompanyMedicine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineName string `protobuf:"bytes,1,opt,name=medicineName,proto3" json:"medicineName"`
}

func (x *ShipmentRankCompanyMedicine) Reset() {
	*x = ShipmentRankCompanyMedicine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentRankCompanyMedicine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentRankCompanyMedicine) ProtoMessage() {}

func (x *ShipmentRankCompanyMedicine) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentRankCompanyMedicine.ProtoReflect.Descriptor instead.
func (*ShipmentRankCompanyMedicine) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{225}
}

func (x *ShipmentRankCompanyMedicine) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

type ShipmentRankCompanyDataYear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank               int64                          `protobuf:"varint,1,opt,name=rank,proto3" json:"rank"`
	ComName            string                         `protobuf:"bytes,2,opt,name=comName,proto3" json:"comName"`
	ComCode            string                         `protobuf:"bytes,3,opt,name=comCode,proto3" json:"comCode"`
	ShipmentPlanAmount int64                          `protobuf:"varint,4,opt,name=shipmentPlanAmount,proto3" json:"shipmentPlanAmount"`
	Province           string                         `protobuf:"bytes,5,opt,name=province,proto3" json:"province"`
	City               string                         `protobuf:"bytes,6,opt,name=city,proto3" json:"city"`
	Zone               string                         `protobuf:"bytes,7,opt,name=zone,proto3" json:"zone"`
	Medicines          []*ShipmentRankCompanyMedicine `protobuf:"bytes,8,rep,name=medicines,proto3" json:"medicines"`
}

func (x *ShipmentRankCompanyDataYear) Reset() {
	*x = ShipmentRankCompanyDataYear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentRankCompanyDataYear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentRankCompanyDataYear) ProtoMessage() {}

func (x *ShipmentRankCompanyDataYear) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentRankCompanyDataYear.ProtoReflect.Descriptor instead.
func (*ShipmentRankCompanyDataYear) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{226}
}

func (x *ShipmentRankCompanyDataYear) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ShipmentRankCompanyDataYear) GetComName() string {
	if x != nil {
		return x.ComName
	}
	return ""
}

func (x *ShipmentRankCompanyDataYear) GetComCode() string {
	if x != nil {
		return x.ComCode
	}
	return ""
}

func (x *ShipmentRankCompanyDataYear) GetShipmentPlanAmount() int64 {
	if x != nil {
		return x.ShipmentPlanAmount
	}
	return 0
}

func (x *ShipmentRankCompanyDataYear) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ShipmentRankCompanyDataYear) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ShipmentRankCompanyDataYear) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ShipmentRankCompanyDataYear) GetMedicines() []*ShipmentRankCompanyMedicine {
	if x != nil {
		return x.Medicines
	}
	return nil
}

type GetShipmentRankCompanyDataYearResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ShipmentRankCompanyDataYear `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                          `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                          `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                          `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetShipmentRankCompanyDataYearResp) Reset() {
	*x = GetShipmentRankCompanyDataYearResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentRankCompanyDataYearResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentRankCompanyDataYearResp) ProtoMessage() {}

func (x *GetShipmentRankCompanyDataYearResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentRankCompanyDataYearResp.ProtoReflect.Descriptor instead.
func (*GetShipmentRankCompanyDataYearResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{227}
}

func (x *GetShipmentRankCompanyDataYearResp) GetList() []*ShipmentRankCompanyDataYear {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShipmentRankCompanyDataYearResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetShipmentRankCompanyDataYearResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShipmentRankCompanyDataYearResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetRankMiReceiveYearReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪个医保局的订单报表数据，目前不支持不同医保局混合统计
	MibId int64 `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	//0表示当前前年 -1为去年
	YearOffset int64 `protobuf:"varint,3,opt,name=yearOffset,proto3" json:"yearOffset"`
	//报表的起止日期必填
	RankCount int64 `protobuf:"varint,4,opt,name=rankCount,proto3" json:"rankCount"`
}

func (x *GetRankMiReceiveYearReq) Reset() {
	*x = GetRankMiReceiveYearReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankMiReceiveYearReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankMiReceiveYearReq) ProtoMessage() {}

func (x *GetRankMiReceiveYearReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankMiReceiveYearReq.ProtoReflect.Descriptor instead.
func (*GetRankMiReceiveYearReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{228}
}

func (x *GetRankMiReceiveYearReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetRankMiReceiveYearReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *GetRankMiReceiveYearReq) GetYearOffset() int64 {
	if x != nil {
		return x.YearOffset
	}
	return 0
}

func (x *GetRankMiReceiveYearReq) GetRankCount() int64 {
	if x != nil {
		return x.RankCount
	}
	return 0
}

type RankMiReceiveYear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank                       int64                       `protobuf:"varint,1,opt,name=rank,proto3" json:"rank"`
	MiName                     string                      `protobuf:"bytes,2,opt,name=miName,proto3" json:"miName"`
	ShipmentOrderReceiveAmount int64                       `protobuf:"varint,3,opt,name=shipmentOrderReceiveAmount,proto3" json:"shipmentOrderReceiveAmount"`
	ShipmentOrderMonthReports  []*ShipmentOrderMonthReport `protobuf:"bytes,4,rep,name=shipmentOrderMonthReports,proto3" json:"shipmentOrderMonthReports"`
}

func (x *RankMiReceiveYear) Reset() {
	*x = RankMiReceiveYear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankMiReceiveYear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankMiReceiveYear) ProtoMessage() {}

func (x *RankMiReceiveYear) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankMiReceiveYear.ProtoReflect.Descriptor instead.
func (*RankMiReceiveYear) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{229}
}

func (x *RankMiReceiveYear) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *RankMiReceiveYear) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *RankMiReceiveYear) GetShipmentOrderReceiveAmount() int64 {
	if x != nil {
		return x.ShipmentOrderReceiveAmount
	}
	return 0
}

func (x *RankMiReceiveYear) GetShipmentOrderMonthReports() []*ShipmentOrderMonthReport {
	if x != nil {
		return x.ShipmentOrderMonthReports
	}
	return nil
}

type GetRankMiReceiveYearResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*RankMiReceiveYear `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetRankMiReceiveYearResp) Reset() {
	*x = GetRankMiReceiveYearResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankMiReceiveYearResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankMiReceiveYearResp) ProtoMessage() {}

func (x *GetRankMiReceiveYearResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankMiReceiveYearResp.ProtoReflect.Descriptor instead.
func (*GetRankMiReceiveYearResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{230}
}

func (x *GetRankMiReceiveYearResp) GetList() []*RankMiReceiveYear {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetRankMiReceiveYearResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetRankMiReceiveYearResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetRankMiReceiveYearResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetRankComReceiveYearReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪个医保局的订单报表数据，目前不支持不同医保局混合统计
	MibId int64 `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	//0表示当前前年 -1为去年
	YearOffset int64 `protobuf:"varint,3,opt,name=yearOffset,proto3" json:"yearOffset"`
	//报表的起止日期必填
	RankCount int64 `protobuf:"varint,4,opt,name=rankCount,proto3" json:"rankCount"`
}

func (x *GetRankComReceiveYearReq) Reset() {
	*x = GetRankComReceiveYearReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankComReceiveYearReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankComReceiveYearReq) ProtoMessage() {}

func (x *GetRankComReceiveYearReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankComReceiveYearReq.ProtoReflect.Descriptor instead.
func (*GetRankComReceiveYearReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{231}
}

func (x *GetRankComReceiveYearReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetRankComReceiveYearReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *GetRankComReceiveYearReq) GetYearOffset() int64 {
	if x != nil {
		return x.YearOffset
	}
	return 0
}

func (x *GetRankComReceiveYearReq) GetRankCount() int64 {
	if x != nil {
		return x.RankCount
	}
	return 0
}

type RankComReceiveYear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank                     int64  `protobuf:"varint,1,opt,name=rank,proto3" json:"rank"`
	CompanyName              string `protobuf:"bytes,2,opt,name=companyName,proto3" json:"companyName"`
	ShipmentPlanReceiveCount int64  `protobuf:"varint,3,opt,name=shipmentPlanReceiveCount,proto3" json:"shipmentPlanReceiveCount"`
	ShipmentPlanNotSentCount int64  `protobuf:"varint,4,opt,name=shipmentPlanNotSentCount,proto3" json:"shipmentPlanNotSentCount"`
}

func (x *RankComReceiveYear) Reset() {
	*x = RankComReceiveYear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankComReceiveYear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankComReceiveYear) ProtoMessage() {}

func (x *RankComReceiveYear) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankComReceiveYear.ProtoReflect.Descriptor instead.
func (*RankComReceiveYear) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{232}
}

func (x *RankComReceiveYear) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *RankComReceiveYear) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *RankComReceiveYear) GetShipmentPlanReceiveCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveCount
	}
	return 0
}

func (x *RankComReceiveYear) GetShipmentPlanNotSentCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentCount
	}
	return 0
}

type GetRankComReceiveYearResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*RankComReceiveYear `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                 `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                 `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetRankComReceiveYearResp) Reset() {
	*x = GetRankComReceiveYearResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankComReceiveYearResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankComReceiveYearResp) ProtoMessage() {}

func (x *GetRankComReceiveYearResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankComReceiveYearResp.ProtoReflect.Descriptor instead.
func (*GetRankComReceiveYearResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{233}
}

func (x *GetRankComReceiveYearResp) GetList() []*RankComReceiveYear {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetRankComReceiveYearResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetRankComReceiveYearResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetRankComReceiveYearResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetRankMiPaidYearReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪个医保局的订单报表数据，目前不支持不同医保局混合统计
	MibId int64 `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	//0表示当前前年 -1为去年
	YearOffset int64 `protobuf:"varint,3,opt,name=yearOffset,proto3" json:"yearOffset"`
	//报表的起止日期必填
	RankCount int64 `protobuf:"varint,4,opt,name=rankCount,proto3" json:"rankCount"`
}

func (x *GetRankMiPaidYearReq) Reset() {
	*x = GetRankMiPaidYearReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankMiPaidYearReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankMiPaidYearReq) ProtoMessage() {}

func (x *GetRankMiPaidYearReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankMiPaidYearReq.ProtoReflect.Descriptor instead.
func (*GetRankMiPaidYearReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{234}
}

func (x *GetRankMiPaidYearReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetRankMiPaidYearReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *GetRankMiPaidYearReq) GetYearOffset() int64 {
	if x != nil {
		return x.YearOffset
	}
	return 0
}

func (x *GetRankMiPaidYearReq) GetRankCount() int64 {
	if x != nil {
		return x.RankCount
	}
	return 0
}

type RankMiPaidYear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank                          int64  `protobuf:"varint,1,opt,name=rank,proto3" json:"rank"`
	MiName                        string `protobuf:"bytes,2,opt,name=miName,proto3" json:"miName"`
	ShipmentOrderPaidAmount       int64  `protobuf:"varint,3,opt,name=shipmentOrderPaidAmount,proto3" json:"shipmentOrderPaidAmount"`
	ShipmentOrderNormalPayAmount  int64  `protobuf:"varint,4,opt,name=shipmentOrderNormalPayAmount,proto3" json:"shipmentOrderNormalPayAmount"`
	ShipmentOrderSpecialPayAmount int64  `protobuf:"varint,5,opt,name=shipmentOrderSpecialPayAmount,proto3" json:"shipmentOrderSpecialPayAmount"`
}

func (x *RankMiPaidYear) Reset() {
	*x = RankMiPaidYear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankMiPaidYear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankMiPaidYear) ProtoMessage() {}

func (x *RankMiPaidYear) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankMiPaidYear.ProtoReflect.Descriptor instead.
func (*RankMiPaidYear) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{235}
}

func (x *RankMiPaidYear) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *RankMiPaidYear) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *RankMiPaidYear) GetShipmentOrderPaidAmount() int64 {
	if x != nil {
		return x.ShipmentOrderPaidAmount
	}
	return 0
}

func (x *RankMiPaidYear) GetShipmentOrderNormalPayAmount() int64 {
	if x != nil {
		return x.ShipmentOrderNormalPayAmount
	}
	return 0
}

func (x *RankMiPaidYear) GetShipmentOrderSpecialPayAmount() int64 {
	if x != nil {
		return x.ShipmentOrderSpecialPayAmount
	}
	return 0
}

type GetRankMiPaidYearResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*RankMiPaidYear `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64             `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64             `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetRankMiPaidYearResp) Reset() {
	*x = GetRankMiPaidYearResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankMiPaidYearResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankMiPaidYearResp) ProtoMessage() {}

func (x *GetRankMiPaidYearResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankMiPaidYearResp.ProtoReflect.Descriptor instead.
func (*GetRankMiPaidYearResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{236}
}

func (x *GetRankMiPaidYearResp) GetList() []*RankMiPaidYear {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetRankMiPaidYearResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetRankMiPaidYearResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetRankMiPaidYearResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetRankMedicineYearReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪个医保局的订单报表数据，目前不支持不同医保局混合统计
	MibId int64 `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	//0表示当前前年 -1为去年
	YearOffset int64 `protobuf:"varint,3,opt,name=yearOffset,proto3" json:"yearOffset"`
	//报表的起止日期必填
	RankCount int64 `protobuf:"varint,4,opt,name=rankCount,proto3" json:"rankCount"`
}

func (x *GetRankMedicineYearReq) Reset() {
	*x = GetRankMedicineYearReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankMedicineYearReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankMedicineYearReq) ProtoMessage() {}

func (x *GetRankMedicineYearReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankMedicineYearReq.ProtoReflect.Descriptor instead.
func (*GetRankMedicineYearReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{237}
}

func (x *GetRankMedicineYearReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetRankMedicineYearReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *GetRankMedicineYearReq) GetYearOffset() int64 {
	if x != nil {
		return x.YearOffset
	}
	return 0
}

func (x *GetRankMedicineYearReq) GetRankCount() int64 {
	if x != nil {
		return x.RankCount
	}
	return 0
}

type RankMedicineYear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank                         int64  `protobuf:"varint,1,opt,name=rank,proto3" json:"rank"`
	MedicineName                 string `protobuf:"bytes,2,opt,name=medicineName,proto3" json:"medicineName"`
	ShipmentPlanReceiveUnitCount int64  `protobuf:"varint,3,opt,name=shipmentPlanReceiveUnitCount,proto3" json:"shipmentPlanReceiveUnitCount"`
}

func (x *RankMedicineYear) Reset() {
	*x = RankMedicineYear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankMedicineYear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankMedicineYear) ProtoMessage() {}

func (x *RankMedicineYear) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankMedicineYear.ProtoReflect.Descriptor instead.
func (*RankMedicineYear) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{238}
}

func (x *RankMedicineYear) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *RankMedicineYear) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *RankMedicineYear) GetShipmentPlanReceiveUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveUnitCount
	}
	return 0
}

type GetRankMedicineYearResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*RankMedicineYear `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64               `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64               `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64               `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetRankMedicineYearResp) Reset() {
	*x = GetRankMedicineYearResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankMedicineYearResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankMedicineYearResp) ProtoMessage() {}

func (x *GetRankMedicineYearResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankMedicineYearResp.ProtoReflect.Descriptor instead.
func (*GetRankMedicineYearResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{239}
}

func (x *GetRankMedicineYearResp) GetList() []*RankMedicineYear {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetRankMedicineYearResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetRankMedicineYearResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetRankMedicineYearResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetMIBDashboardBaseInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪个医保局的订单报表数据，目前不支持不同医保局混合统计
	MibId    int64  `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	Province string `protobuf:"bytes,3,opt,name=province,proto3" json:"province"`
	City     string `protobuf:"bytes,4,opt,name=city,proto3" json:"city"`
}

func (x *GetMIBDashboardBaseInfoReq) Reset() {
	*x = GetMIBDashboardBaseInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMIBDashboardBaseInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMIBDashboardBaseInfoReq) ProtoMessage() {}

func (x *GetMIBDashboardBaseInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMIBDashboardBaseInfoReq.ProtoReflect.Descriptor instead.
func (*GetMIBDashboardBaseInfoReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{240}
}

func (x *GetMIBDashboardBaseInfoReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetMIBDashboardBaseInfoReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *GetMIBDashboardBaseInfoReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *GetMIBDashboardBaseInfoReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

type GetMIBDashboardBaseInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mis       []*ListMiVo      `protobuf:"bytes,1,rep,name=mis,proto3" json:"mis"`
	Companies []*ListCompanyVo `protobuf:"bytes,2,rep,name=companies,proto3" json:"companies"`
}

func (x *GetMIBDashboardBaseInfoResp) Reset() {
	*x = GetMIBDashboardBaseInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMIBDashboardBaseInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMIBDashboardBaseInfoResp) ProtoMessage() {}

func (x *GetMIBDashboardBaseInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMIBDashboardBaseInfoResp.ProtoReflect.Descriptor instead.
func (*GetMIBDashboardBaseInfoResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{241}
}

func (x *GetMIBDashboardBaseInfoResp) GetMis() []*ListMiVo {
	if x != nil {
		return x.Mis
	}
	return nil
}

func (x *GetMIBDashboardBaseInfoResp) GetCompanies() []*ListCompanyVo {
	if x != nil {
		return x.Companies
	}
	return nil
}

type ListBindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	Name      string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Code      string   `protobuf:"bytes,3,opt,name=code,proto3" json:"code"`
	LinkTypes []string `protobuf:"bytes,4,rep,name=linkTypes,proto3" json:"linkTypes"`
	Page      *Page    `protobuf:"bytes,5,opt,name=page,proto3" json:"page"`
}

func (x *ListBindReq) Reset() {
	*x = ListBindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBindReq) ProtoMessage() {}

func (x *ListBindReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBindReq.ProtoReflect.Descriptor instead.
func (*ListBindReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{242}
}

func (x *ListBindReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListBindReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListBindReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ListBindReq) GetLinkTypes() []string {
	if x != nil {
		return x.LinkTypes
	}
	return nil
}

func (x *ListBindReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ListBindResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ListBindVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64         `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64         `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64         `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListBindResp) Reset() {
	*x = ListBindResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBindResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBindResp) ProtoMessage() {}

func (x *ListBindResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBindResp.ProtoReflect.Descriptor instead.
func (*ListBindResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{243}
}

func (x *ListBindResp) GetList() []*ListBindVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListBindResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBindResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListBindResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ListBindVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	Code     string        `protobuf:"bytes,2,opt,name=code,proto3" json:"code"`
	BindJson []*BindJsonVo `protobuf:"bytes,3,rep,name=bindJson,proto3" json:"bindJson"`
}

func (x *ListBindVo) Reset() {
	*x = ListBindVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBindVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBindVo) ProtoMessage() {}

func (x *ListBindVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBindVo.ProtoReflect.Descriptor instead.
func (*ListBindVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{244}
}

func (x *ListBindVo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListBindVo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ListBindVo) GetBindJson() []*BindJsonVo {
	if x != nil {
		return x.BindJson
	}
	return nil
}

type BindJsonVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindId   int64  `protobuf:"varint,1,opt,name=bindId,proto3" json:"bindId"`
	LinkCode string `protobuf:"bytes,2,opt,name=linkCode,proto3" json:"linkCode"`
	LinkType string `protobuf:"bytes,3,opt,name=linkType,proto3" json:"linkType"`
}

func (x *BindJsonVo) Reset() {
	*x = BindJsonVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindJsonVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindJsonVo) ProtoMessage() {}

func (x *BindJsonVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindJsonVo.ProtoReflect.Descriptor instead.
func (*BindJsonVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{245}
}

func (x *BindJsonVo) GetBindId() int64 {
	if x != nil {
		return x.BindId
	}
	return 0
}

func (x *BindJsonVo) GetLinkCode() string {
	if x != nil {
		return x.LinkCode
	}
	return ""
}

func (x *BindJsonVo) GetLinkType() string {
	if x != nil {
		return x.LinkType
	}
	return ""
}

type BindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int64        `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	Param     []*BindParam `protobuf:"bytes,2,rep,name=param,proto3" json:"param"`
}

func (x *BindReq) Reset() {
	*x = BindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindReq) ProtoMessage() {}

func (x *BindReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindReq.ProtoReflect.Descriptor instead.
func (*BindReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{246}
}

func (x *BindReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *BindReq) GetParam() []*BindParam {
	if x != nil {
		return x.Param
	}
	return nil
}

type BindParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindId   int64  `protobuf:"varint,2,opt,name=bindId,proto3" json:"bindId"`
	Code     string `protobuf:"bytes,3,opt,name=code,proto3" json:"code"`
	LinkCode string `protobuf:"bytes,4,opt,name=linkCode,proto3" json:"linkCode"`
	LinkType string `protobuf:"bytes,5,opt,name=linkType,proto3" json:"linkType"`
}

func (x *BindParam) Reset() {
	*x = BindParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindParam) ProtoMessage() {}

func (x *BindParam) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindParam.ProtoReflect.Descriptor instead.
func (*BindParam) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{247}
}

func (x *BindParam) GetBindId() int64 {
	if x != nil {
		return x.BindId
	}
	return 0
}

func (x *BindParam) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *BindParam) GetLinkCode() string {
	if x != nil {
		return x.LinkCode
	}
	return ""
}

func (x *BindParam) GetLinkType() string {
	if x != nil {
		return x.LinkType
	}
	return ""
}

type BindResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *BindResp) Reset() {
	*x = BindResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindResp) ProtoMessage() {}

func (x *BindResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindResp.ProtoReflect.Descriptor instead.
func (*BindResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{248}
}

func (x *BindResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type ResetContractReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId       int64                  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	Param           []*ResetContractParam  `protobuf:"bytes,2,rep,name=param,proto3" json:"param"`
	OldContractId   int64                  `protobuf:"varint,3,opt,name=oldContractId,proto3" json:"oldContractId"`
	ContractNo      string                 `protobuf:"bytes,4,opt,name=contractNo,proto3" json:"contractNo"`
	TenderCompany   string                 `protobuf:"bytes,5,opt,name=tenderCompany,proto3" json:"tenderCompany"`
	MedicineId      int64                  `protobuf:"varint,6,opt,name=medicineId,proto3" json:"medicineId"`
	CompanyId       int64                  `protobuf:"varint,7,opt,name=companyId,proto3" json:"companyId"`
	MibId           int64                  `protobuf:"varint,8,opt,name=mibId,proto3" json:"mibId"`
	MedicinePrice   int64                  `protobuf:"varint,9,opt,name=medicinePrice,proto3" json:"medicinePrice"`
	MedicineReceive int64                  `protobuf:"varint,10,opt,name=medicineReceive,proto3" json:"medicineReceive"`
	TotalAmount     int64                  `protobuf:"varint,11,opt,name=totalAmount,proto3" json:"totalAmount"`
	StartAt         *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=startAt,proto3" json:"startAt"`
	EndAt           *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=endAt,proto3" json:"endAt"`
	Creator         int64                  `protobuf:"varint,14,opt,name=creator,proto3" json:"creator"`
}

func (x *ResetContractReq) Reset() {
	*x = ResetContractReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetContractReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetContractReq) ProtoMessage() {}

func (x *ResetContractReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetContractReq.ProtoReflect.Descriptor instead.
func (*ResetContractReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{249}
}

func (x *ResetContractReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ResetContractReq) GetParam() []*ResetContractParam {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *ResetContractReq) GetOldContractId() int64 {
	if x != nil {
		return x.OldContractId
	}
	return 0
}

func (x *ResetContractReq) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

func (x *ResetContractReq) GetTenderCompany() string {
	if x != nil {
		return x.TenderCompany
	}
	return ""
}

func (x *ResetContractReq) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *ResetContractReq) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *ResetContractReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *ResetContractReq) GetMedicinePrice() int64 {
	if x != nil {
		return x.MedicinePrice
	}
	return 0
}

func (x *ResetContractReq) GetMedicineReceive() int64 {
	if x != nil {
		return x.MedicineReceive
	}
	return 0
}

func (x *ResetContractReq) GetTotalAmount() int64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *ResetContractReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *ResetContractReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *ResetContractReq) GetCreator() int64 {
	if x != nil {
		return x.Creator
	}
	return 0
}

type ResetContractParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiId            int64 `protobuf:"varint,1,opt,name=miId,proto3" json:"miId"`
	MedicineAmount  int64 `protobuf:"varint,2,opt,name=medicineAmount,proto3" json:"medicineAmount"`
	MedicineSent    int64 `protobuf:"varint,3,opt,name=medicineSent,proto3" json:"medicineSent"`
	MedicineReceive int64 `protobuf:"varint,4,opt,name=medicineReceive,proto3" json:"medicineReceive"`
}

func (x *ResetContractParam) Reset() {
	*x = ResetContractParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetContractParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetContractParam) ProtoMessage() {}

func (x *ResetContractParam) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetContractParam.ProtoReflect.Descriptor instead.
func (*ResetContractParam) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{250}
}

func (x *ResetContractParam) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *ResetContractParam) GetMedicineAmount() int64 {
	if x != nil {
		return x.MedicineAmount
	}
	return 0
}

func (x *ResetContractParam) GetMedicineSent() int64 {
	if x != nil {
		return x.MedicineSent
	}
	return 0
}

func (x *ResetContractParam) GetMedicineReceive() int64 {
	if x != nil {
		return x.MedicineReceive
	}
	return 0
}

type ResetContractResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *ResetContractResp) Reset() {
	*x = ResetContractResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetContractResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetContractResp) ProtoMessage() {}

func (x *ResetContractResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetContractResp.ProtoReflect.Descriptor instead.
func (*ResetContractResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{251}
}

func (x *ResetContractResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type ListReimbReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           string `protobuf:"bytes,1,opt,name=type,proto3" json:"type"`
	Year           int64  `protobuf:"varint,2,opt,name=year,proto3" json:"year"`
	Month          int64  `protobuf:"varint,3,opt,name=month,proto3" json:"month"`
	MiCode         string `protobuf:"bytes,4,opt,name=miCode,proto3" json:"miCode"`
	ApplyReport    int64  `protobuf:"varint,5,opt,name=applyReport,proto3" json:"applyReport"`
	ApprovalReport int64  `protobuf:"varint,6,opt,name=approvalReport,proto3" json:"approvalReport"`
	PayStatus      string `protobuf:"bytes,7,opt,name=payStatus,proto3" json:"payStatus"`
	ManagerId      int64  `protobuf:"varint,8,opt,name=managerId,proto3" json:"managerId"`
	Page           *Page  `protobuf:"bytes,9,opt,name=page,proto3" json:"page"`
}

func (x *ListReimbReq) Reset() {
	*x = ListReimbReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReimbReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReimbReq) ProtoMessage() {}

func (x *ListReimbReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReimbReq.ProtoReflect.Descriptor instead.
func (*ListReimbReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{252}
}

func (x *ListReimbReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListReimbReq) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ListReimbReq) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ListReimbReq) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ListReimbReq) GetApplyReport() int64 {
	if x != nil {
		return x.ApplyReport
	}
	return 0
}

func (x *ListReimbReq) GetApprovalReport() int64 {
	if x != nil {
		return x.ApprovalReport
	}
	return 0
}

func (x *ListReimbReq) GetPayStatus() string {
	if x != nil {
		return x.PayStatus
	}
	return ""
}

func (x *ListReimbReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListReimbReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ListReimbResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ReimbListVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64          `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64          `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListReimbResp) Reset() {
	*x = ListReimbResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReimbResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReimbResp) ProtoMessage() {}

func (x *ListReimbResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReimbResp.ProtoReflect.Descriptor instead.
func (*ListReimbResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{253}
}

func (x *ListReimbResp) GetList() []*ReimbListVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListReimbResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListReimbResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListReimbResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ReimbListVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year           int64                  `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month          int64                  `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	Mi             string                 `protobuf:"bytes,3,opt,name=mi,proto3" json:"mi"`
	FixedAmount    int64                  `protobuf:"varint,4,opt,name=fixedAmount,proto3" json:"fixedAmount"`
	FloatAmount    int64                  `protobuf:"varint,5,opt,name=floatAmount,proto3" json:"floatAmount"`
	ApplyAmount    int64                  `protobuf:"varint,6,opt,name=applyAmount,proto3" json:"applyAmount"`
	ApprovalAmount int64                  `protobuf:"varint,7,opt,name=approvalAmount,proto3" json:"approvalAmount"`
	PayStatus      string                 `protobuf:"bytes,8,opt,name=payStatus,proto3" json:"payStatus"`
	PaySuccessTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=paySuccessTime,proto3" json:"paySuccessTime"`
	PayErrMsg      string                 `protobuf:"bytes,10,opt,name=payErrMsg,proto3" json:"payErrMsg"`
	BankAccount    string                 `protobuf:"bytes,11,opt,name=bankAccount,proto3" json:"bankAccount"`
	BankName       string                 `protobuf:"bytes,12,opt,name=bankName,proto3" json:"bankName"`
	BankOrgName    string                 `protobuf:"bytes,13,opt,name=bankOrgName,proto3" json:"bankOrgName"`
	ApprovalStatus string                 `protobuf:"bytes,14,opt,name=approvalStatus,proto3" json:"approvalStatus"`
	InsuranceType  string                 `protobuf:"bytes,15,opt,name=insuranceType,proto3" json:"insuranceType"`
	ApprovalFile   string                 `protobuf:"bytes,16,opt,name=approvalFile,proto3" json:"approvalFile"`
	ApplyFile      string                 `protobuf:"bytes,17,opt,name=applyFile,proto3" json:"applyFile"`
}

func (x *ReimbListVo) Reset() {
	*x = ReimbListVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReimbListVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReimbListVo) ProtoMessage() {}

func (x *ReimbListVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReimbListVo.ProtoReflect.Descriptor instead.
func (*ReimbListVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{254}
}

func (x *ReimbListVo) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ReimbListVo) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ReimbListVo) GetMi() string {
	if x != nil {
		return x.Mi
	}
	return ""
}

func (x *ReimbListVo) GetFixedAmount() int64 {
	if x != nil {
		return x.FixedAmount
	}
	return 0
}

func (x *ReimbListVo) GetFloatAmount() int64 {
	if x != nil {
		return x.FloatAmount
	}
	return 0
}

func (x *ReimbListVo) GetApplyAmount() int64 {
	if x != nil {
		return x.ApplyAmount
	}
	return 0
}

func (x *ReimbListVo) GetApprovalAmount() int64 {
	if x != nil {
		return x.ApprovalAmount
	}
	return 0
}

func (x *ReimbListVo) GetPayStatus() string {
	if x != nil {
		return x.PayStatus
	}
	return ""
}

func (x *ReimbListVo) GetPaySuccessTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PaySuccessTime
	}
	return nil
}

func (x *ReimbListVo) GetPayErrMsg() string {
	if x != nil {
		return x.PayErrMsg
	}
	return ""
}

func (x *ReimbListVo) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *ReimbListVo) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *ReimbListVo) GetBankOrgName() string {
	if x != nil {
		return x.BankOrgName
	}
	return ""
}

func (x *ReimbListVo) GetApprovalStatus() string {
	if x != nil {
		return x.ApprovalStatus
	}
	return ""
}

func (x *ReimbListVo) GetInsuranceType() string {
	if x != nil {
		return x.InsuranceType
	}
	return ""
}

func (x *ReimbListVo) GetApprovalFile() string {
	if x != nil {
		return x.ApprovalFile
	}
	return ""
}

func (x *ReimbListVo) GetApplyFile() string {
	if x != nil {
		return x.ApplyFile
	}
	return ""
}

type PayReimbReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=type,proto3" json:"type"`
	Year        int64  `protobuf:"varint,2,opt,name=year,proto3" json:"year"`
	Month       int64  `protobuf:"varint,3,opt,name=month,proto3" json:"month"`
	MiCode      string `protobuf:"bytes,4,opt,name=miCode,proto3" json:"miCode"`
	Token       string `protobuf:"bytes,5,opt,name=token,proto3" json:"token"`
	RequestHash string `protobuf:"bytes,6,opt,name=requestHash,proto3" json:"requestHash"`
	ManagerId   int64  `protobuf:"varint,7,opt,name=managerId,proto3" json:"managerId"`
}

func (x *PayReimbReq) Reset() {
	*x = PayReimbReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayReimbReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayReimbReq) ProtoMessage() {}

func (x *PayReimbReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayReimbReq.ProtoReflect.Descriptor instead.
func (*PayReimbReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{255}
}

func (x *PayReimbReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PayReimbReq) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *PayReimbReq) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *PayReimbReq) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *PayReimbReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *PayReimbReq) GetRequestHash() string {
	if x != nil {
		return x.RequestHash
	}
	return ""
}

func (x *PayReimbReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ApplyReimbQuotaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=type,proto3" json:"type"`
	Year        int64  `protobuf:"varint,2,opt,name=year,proto3" json:"year"`
	Month       int64  `protobuf:"varint,3,opt,name=month,proto3" json:"month"`
	MiCode      string `protobuf:"bytes,4,opt,name=miCode,proto3" json:"miCode"`
	FixedAmount int64  `protobuf:"varint,5,opt,name=fixedAmount,proto3" json:"fixedAmount"`
	FloatAmount int64  `protobuf:"varint,6,opt,name=floatAmount,proto3" json:"floatAmount"`
	ManagerId   int64  `protobuf:"varint,7,opt,name=managerId,proto3" json:"managerId"`
}

func (x *ApplyReimbQuotaReq) Reset() {
	*x = ApplyReimbQuotaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyReimbQuotaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyReimbQuotaReq) ProtoMessage() {}

func (x *ApplyReimbQuotaReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyReimbQuotaReq.ProtoReflect.Descriptor instead.
func (*ApplyReimbQuotaReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{256}
}

func (x *ApplyReimbQuotaReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ApplyReimbQuotaReq) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ApplyReimbQuotaReq) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ApplyReimbQuotaReq) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ApplyReimbQuotaReq) GetFixedAmount() int64 {
	if x != nil {
		return x.FixedAmount
	}
	return 0
}

func (x *ApplyReimbQuotaReq) GetFloatAmount() int64 {
	if x != nil {
		return x.FloatAmount
	}
	return 0
}

func (x *ApplyReimbQuotaReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ApproveReimbQuotaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string `protobuf:"bytes,1,opt,name=type,proto3" json:"type"`
	Year      int64  `protobuf:"varint,2,opt,name=year,proto3" json:"year"`
	Month     int64  `protobuf:"varint,3,opt,name=month,proto3" json:"month"`
	MiCode    string `protobuf:"bytes,4,opt,name=miCode,proto3" json:"miCode"`
	Amount    int64  `protobuf:"varint,5,opt,name=amount,proto3" json:"amount"`
	ManagerId int64  `protobuf:"varint,6,opt,name=managerId,proto3" json:"managerId"`
}

func (x *ApproveReimbQuotaReq) Reset() {
	*x = ApproveReimbQuotaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveReimbQuotaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveReimbQuotaReq) ProtoMessage() {}

func (x *ApproveReimbQuotaReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveReimbQuotaReq.ProtoReflect.Descriptor instead.
func (*ApproveReimbQuotaReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{257}
}

func (x *ApproveReimbQuotaReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ApproveReimbQuotaReq) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ApproveReimbQuotaReq) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ApproveReimbQuotaReq) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ApproveReimbQuotaReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ApproveReimbQuotaReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UpdateReimbReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string `protobuf:"bytes,1,opt,name=type,proto3" json:"type"`
	Year      int64  `protobuf:"varint,2,opt,name=year,proto3" json:"year"`
	Month     int64  `protobuf:"varint,3,opt,name=month,proto3" json:"month"`
	MiCode    string `protobuf:"bytes,4,opt,name=miCode,proto3" json:"miCode"`
	File      string `protobuf:"bytes,5,opt,name=file,proto3" json:"file"`
	ManagerId int64  `protobuf:"varint,6,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UpdateReimbReportReq) Reset() {
	*x = UpdateReimbReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReimbReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReimbReportReq) ProtoMessage() {}

func (x *UpdateReimbReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReimbReportReq.ProtoReflect.Descriptor instead.
func (*UpdateReimbReportReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{258}
}

func (x *UpdateReimbReportReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UpdateReimbReportReq) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *UpdateReimbReportReq) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *UpdateReimbReportReq) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *UpdateReimbReportReq) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *UpdateReimbReportReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type OpReimbResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result"`
}

func (x *OpReimbResp) Reset() {
	*x = OpReimbResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpReimbResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpReimbResp) ProtoMessage() {}

func (x *OpReimbResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpReimbResp.ProtoReflect.Descriptor instead.
func (*OpReimbResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{259}
}

func (x *OpReimbResp) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type UpdateMiSpecialConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateMiSpecialConfigResp) Reset() {
	*x = UpdateMiSpecialConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMiSpecialConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMiSpecialConfigResp) ProtoMessage() {}

func (x *UpdateMiSpecialConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMiSpecialConfigResp.ProtoReflect.Descriptor instead.
func (*UpdateMiSpecialConfigResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{260}
}

//创建银行账号部分
type CreateBankAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List      []*AccountInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	ManagerId int64          `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateBankAccountReq) Reset() {
	*x = CreateBankAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBankAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBankAccountReq) ProtoMessage() {}

func (x *CreateBankAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBankAccountReq.ProtoReflect.Descriptor instead.
func (*CreateBankAccountReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{261}
}

func (x *CreateBankAccountReq) GetList() []*AccountInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CreateBankAccountReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type AccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MibId             int64  `protobuf:"varint,1,opt,name=mibId,proto3" json:"mibId"`
	CardNo            string `protobuf:"bytes,2,opt,name=cardNo,proto3" json:"cardNo"`
	AccountType       string `protobuf:"bytes,3,opt,name=accountType,proto3" json:"accountType"`
	Bank              string `protobuf:"bytes,4,opt,name=bank,proto3" json:"bank"`
	OrganizationId    int64  `protobuf:"varint,5,opt,name=organizationId,proto3" json:"organizationId"`
	Toibkn            string `protobuf:"bytes,6,opt,name=toibkn,proto3" json:"toibkn"`
	CardOwner         string `protobuf:"bytes,7,opt,name=cardOwner,proto3" json:"cardOwner"`
	FrozenAmount      int64  `protobuf:"varint,8,opt,name=frozenAmount,proto3" json:"frozenAmount"`
	CardStatus        string `protobuf:"bytes,9,opt,name=cardStatus,proto3" json:"cardStatus"`
	BankAccountInfoId int64  `protobuf:"varint,10,opt,name=bankAccountInfoId,proto3" json:"bankAccountInfoId"`
}

func (x *AccountInfo) Reset() {
	*x = AccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInfo) ProtoMessage() {}

func (x *AccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInfo.ProtoReflect.Descriptor instead.
func (*AccountInfo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{262}
}

func (x *AccountInfo) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *AccountInfo) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *AccountInfo) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *AccountInfo) GetBank() string {
	if x != nil {
		return x.Bank
	}
	return ""
}

func (x *AccountInfo) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *AccountInfo) GetToibkn() string {
	if x != nil {
		return x.Toibkn
	}
	return ""
}

func (x *AccountInfo) GetCardOwner() string {
	if x != nil {
		return x.CardOwner
	}
	return ""
}

func (x *AccountInfo) GetFrozenAmount() int64 {
	if x != nil {
		return x.FrozenAmount
	}
	return 0
}

func (x *AccountInfo) GetCardStatus() string {
	if x != nil {
		return x.CardStatus
	}
	return ""
}

func (x *AccountInfo) GetBankAccountInfoId() int64 {
	if x != nil {
		return x.BankAccountInfoId
	}
	return 0
}

type CreateBankAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateBankAccountResp) Reset() {
	*x = CreateBankAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBankAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBankAccountResp) ProtoMessage() {}

func (x *CreateBankAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBankAccountResp.ProtoReflect.Descriptor instead.
func (*CreateBankAccountResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{263}
}

func (x *CreateBankAccountResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type StockSyncReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param        []*StockSyncParam `protobuf:"bytes,1,rep,name=param,proto3" json:"param"`
	ManagerId    int64             `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
	OrgId        int64             `protobuf:"varint,3,opt,name=orgId,proto3" json:"orgId"`
	PlatFormType string            `protobuf:"bytes,4,opt,name=platFormType,proto3" json:"platFormType"`
}

func (x *StockSyncReq) Reset() {
	*x = StockSyncReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockSyncReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockSyncReq) ProtoMessage() {}

func (x *StockSyncReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockSyncReq.ProtoReflect.Descriptor instead.
func (*StockSyncReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{264}
}

func (x *StockSyncReq) GetParam() []*StockSyncParam {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *StockSyncReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *StockSyncReq) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *StockSyncReq) GetPlatFormType() string {
	if x != nil {
		return x.PlatFormType
	}
	return ""
}

type StockSyncParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineLinkCode string                 `protobuf:"bytes,1,opt,name=medicineLinkCode,proto3" json:"medicineLinkCode"`
	MedicineLinkName string                 `protobuf:"bytes,2,opt,name=medicineLinkName,proto3" json:"medicineLinkName"`
	WarehouseCode    string                 `protobuf:"bytes,3,opt,name=warehouseCode,proto3" json:"warehouseCode"`
	ChangeType       string                 `protobuf:"bytes,4,opt,name=changeType,proto3" json:"changeType"`
	StockNum         int32                  `protobuf:"varint,5,opt,name=stockNum,proto3" json:"stockNum"`
	Num              int32                  `protobuf:"zigzag32,6,opt,name=num,proto3" json:"num"`
	ChangeTime       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=changeTime,proto3" json:"changeTime"`
}

func (x *StockSyncParam) Reset() {
	*x = StockSyncParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockSyncParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockSyncParam) ProtoMessage() {}

func (x *StockSyncParam) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockSyncParam.ProtoReflect.Descriptor instead.
func (*StockSyncParam) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{265}
}

func (x *StockSyncParam) GetMedicineLinkCode() string {
	if x != nil {
		return x.MedicineLinkCode
	}
	return ""
}

func (x *StockSyncParam) GetMedicineLinkName() string {
	if x != nil {
		return x.MedicineLinkName
	}
	return ""
}

func (x *StockSyncParam) GetWarehouseCode() string {
	if x != nil {
		return x.WarehouseCode
	}
	return ""
}

func (x *StockSyncParam) GetChangeType() string {
	if x != nil {
		return x.ChangeType
	}
	return ""
}

func (x *StockSyncParam) GetStockNum() int32 {
	if x != nil {
		return x.StockNum
	}
	return 0
}

func (x *StockSyncParam) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *StockSyncParam) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

type StockSyncResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *StockSyncResp) Reset() {
	*x = StockSyncResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockSyncResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockSyncResp) ProtoMessage() {}

func (x *StockSyncResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockSyncResp.ProtoReflect.Descriptor instead.
func (*StockSyncResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{266}
}

func (x *StockSyncResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type ComStockMedicineBindListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         *Page  `protobuf:"bytes,1,opt,name=page,proto3" json:"page"`
	ManagerId    int64  `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
	MedicineCode string `protobuf:"bytes,3,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineName string `protobuf:"bytes,4,opt,name=medicineName,proto3" json:"medicineName"`
	CompanyId    int64  `protobuf:"varint,5,opt,name=companyId,proto3" json:"companyId"`
}

func (x *ComStockMedicineBindListReq) Reset() {
	*x = ComStockMedicineBindListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComStockMedicineBindListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComStockMedicineBindListReq) ProtoMessage() {}

func (x *ComStockMedicineBindListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComStockMedicineBindListReq.ProtoReflect.Descriptor instead.
func (*ComStockMedicineBindListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{267}
}

func (x *ComStockMedicineBindListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ComStockMedicineBindListReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ComStockMedicineBindListReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ComStockMedicineBindListReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ComStockMedicineBindListReq) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

type ComStockMedicineBindListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ComStockMedicineBindListVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                         `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                         `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                         `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ComStockMedicineBindListResp) Reset() {
	*x = ComStockMedicineBindListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComStockMedicineBindListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComStockMedicineBindListResp) ProtoMessage() {}

func (x *ComStockMedicineBindListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComStockMedicineBindListResp.ProtoReflect.Descriptor instead.
func (*ComStockMedicineBindListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{268}
}

func (x *ComStockMedicineBindListResp) GetList() []*ComStockMedicineBindListVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ComStockMedicineBindListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ComStockMedicineBindListResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ComStockMedicineBindListResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ComStockMedicineBindListVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineName     string `protobuf:"bytes,1,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode     string `protobuf:"bytes,2,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineLinkName string `protobuf:"bytes,3,opt,name=medicineLinkName,proto3" json:"medicineLinkName"`
	BingId           int64  `protobuf:"varint,4,opt,name=bingId,proto3" json:"bingId"`
	CompanyCode      string `protobuf:"bytes,5,opt,name=companyCode,proto3" json:"companyCode"`
}

func (x *ComStockMedicineBindListVo) Reset() {
	*x = ComStockMedicineBindListVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComStockMedicineBindListVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComStockMedicineBindListVo) ProtoMessage() {}

func (x *ComStockMedicineBindListVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComStockMedicineBindListVo.ProtoReflect.Descriptor instead.
func (*ComStockMedicineBindListVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{269}
}

func (x *ComStockMedicineBindListVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ComStockMedicineBindListVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ComStockMedicineBindListVo) GetMedicineLinkName() string {
	if x != nil {
		return x.MedicineLinkName
	}
	return ""
}

func (x *ComStockMedicineBindListVo) GetBingId() int64 {
	if x != nil {
		return x.BingId
	}
	return 0
}

func (x *ComStockMedicineBindListVo) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

type MiStockMedicineBindListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         *Page  `protobuf:"bytes,1,opt,name=page,proto3" json:"page"`
	ManagerId    int64  `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
	MedicineCode string `protobuf:"bytes,3,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineName string `protobuf:"bytes,4,opt,name=medicineName,proto3" json:"medicineName"`
	MiId         int64  `protobuf:"varint,5,opt,name=miId,proto3" json:"miId"`
}

func (x *MiStockMedicineBindListReq) Reset() {
	*x = MiStockMedicineBindListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiStockMedicineBindListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiStockMedicineBindListReq) ProtoMessage() {}

func (x *MiStockMedicineBindListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiStockMedicineBindListReq.ProtoReflect.Descriptor instead.
func (*MiStockMedicineBindListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{270}
}

func (x *MiStockMedicineBindListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *MiStockMedicineBindListReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *MiStockMedicineBindListReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *MiStockMedicineBindListReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *MiStockMedicineBindListReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

type MiStockMedicineBindListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*MiStockMedicineBindListVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                        `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                        `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                        `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *MiStockMedicineBindListResp) Reset() {
	*x = MiStockMedicineBindListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiStockMedicineBindListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiStockMedicineBindListResp) ProtoMessage() {}

func (x *MiStockMedicineBindListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiStockMedicineBindListResp.ProtoReflect.Descriptor instead.
func (*MiStockMedicineBindListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{271}
}

func (x *MiStockMedicineBindListResp) GetList() []*MiStockMedicineBindListVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *MiStockMedicineBindListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MiStockMedicineBindListResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *MiStockMedicineBindListResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type MiStockMedicineBindListVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineName     string `protobuf:"bytes,1,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode     string `protobuf:"bytes,2,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineLinkName string `protobuf:"bytes,3,opt,name=medicineLinkName,proto3" json:"medicineLinkName"`
	BingId           int64  `protobuf:"varint,4,opt,name=bingId,proto3" json:"bingId"`
	MiCode           string `protobuf:"bytes,5,opt,name=miCode,proto3" json:"miCode"`
}

func (x *MiStockMedicineBindListVo) Reset() {
	*x = MiStockMedicineBindListVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiStockMedicineBindListVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiStockMedicineBindListVo) ProtoMessage() {}

func (x *MiStockMedicineBindListVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiStockMedicineBindListVo.ProtoReflect.Descriptor instead.
func (*MiStockMedicineBindListVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{272}
}

func (x *MiStockMedicineBindListVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *MiStockMedicineBindListVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *MiStockMedicineBindListVo) GetMedicineLinkName() string {
	if x != nil {
		return x.MedicineLinkName
	}
	return ""
}

func (x *MiStockMedicineBindListVo) GetBingId() int64 {
	if x != nil {
		return x.BingId
	}
	return 0
}

func (x *MiStockMedicineBindListVo) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

type ComStockMedicineBindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId        int64  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	MedicineCode     string `protobuf:"bytes,2,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineName     string `protobuf:"bytes,3,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineLinkCode string `protobuf:"bytes,4,opt,name=medicineLinkCode,proto3" json:"medicineLinkCode"`
	CompanyId        int64  `protobuf:"varint,5,opt,name=companyId,proto3" json:"companyId"`
	BindId           int64  `protobuf:"varint,6,opt,name=bindId,proto3" json:"bindId"`
}

func (x *ComStockMedicineBindReq) Reset() {
	*x = ComStockMedicineBindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComStockMedicineBindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComStockMedicineBindReq) ProtoMessage() {}

func (x *ComStockMedicineBindReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComStockMedicineBindReq.ProtoReflect.Descriptor instead.
func (*ComStockMedicineBindReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{273}
}

func (x *ComStockMedicineBindReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ComStockMedicineBindReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ComStockMedicineBindReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ComStockMedicineBindReq) GetMedicineLinkCode() string {
	if x != nil {
		return x.MedicineLinkCode
	}
	return ""
}

func (x *ComStockMedicineBindReq) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *ComStockMedicineBindReq) GetBindId() int64 {
	if x != nil {
		return x.BindId
	}
	return 0
}

type ComStockMedicineBindResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *ComStockMedicineBindResp) Reset() {
	*x = ComStockMedicineBindResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComStockMedicineBindResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComStockMedicineBindResp) ProtoMessage() {}

func (x *ComStockMedicineBindResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComStockMedicineBindResp.ProtoReflect.Descriptor instead.
func (*ComStockMedicineBindResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{274}
}

func (x *ComStockMedicineBindResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type MiStockMedicineBindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId        int64  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	MedicineCode     string `protobuf:"bytes,2,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineName     string `protobuf:"bytes,3,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineLinkCode string `protobuf:"bytes,4,opt,name=medicineLinkCode,proto3" json:"medicineLinkCode"`
	MiId             int64  `protobuf:"varint,5,opt,name=miId,proto3" json:"miId"`
	BindId           int64  `protobuf:"varint,6,opt,name=bindId,proto3" json:"bindId"`
}

func (x *MiStockMedicineBindReq) Reset() {
	*x = MiStockMedicineBindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiStockMedicineBindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiStockMedicineBindReq) ProtoMessage() {}

func (x *MiStockMedicineBindReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiStockMedicineBindReq.ProtoReflect.Descriptor instead.
func (*MiStockMedicineBindReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{275}
}

func (x *MiStockMedicineBindReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *MiStockMedicineBindReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *MiStockMedicineBindReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *MiStockMedicineBindReq) GetMedicineLinkCode() string {
	if x != nil {
		return x.MedicineLinkCode
	}
	return ""
}

func (x *MiStockMedicineBindReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *MiStockMedicineBindReq) GetBindId() int64 {
	if x != nil {
		return x.BindId
	}
	return 0
}

type MiStockMedicineBindResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *MiStockMedicineBindResp) Reset() {
	*x = MiStockMedicineBindResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiStockMedicineBindResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiStockMedicineBindResp) ProtoMessage() {}

func (x *MiStockMedicineBindResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiStockMedicineBindResp.ProtoReflect.Descriptor instead.
func (*MiStockMedicineBindResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{276}
}

func (x *MiStockMedicineBindResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//=======开发者管理========================
//创建客户端开发者
type CreateMiDevelopUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationCode string `protobuf:"bytes,1,opt,name=organizationCode,proto3" json:"organizationCode"`
	OrganizationId   int64  `protobuf:"varint,2,opt,name=organizationId,proto3" json:"organizationId"`
	OrganizationType string `protobuf:"bytes,3,opt,name=organizationType,proto3" json:"organizationType"`
	ClientId         string `protobuf:"bytes,4,opt,name=clientId,proto3" json:"clientId"`
	ClientSecret     string `protobuf:"bytes,5,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret"`
	ManagerId        int64  `protobuf:"varint,6,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateMiDevelopUserReq) Reset() {
	*x = CreateMiDevelopUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMiDevelopUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMiDevelopUserReq) ProtoMessage() {}

func (x *CreateMiDevelopUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMiDevelopUserReq.ProtoReflect.Descriptor instead.
func (*CreateMiDevelopUserReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{277}
}

func (x *CreateMiDevelopUserReq) GetOrganizationCode() string {
	if x != nil {
		return x.OrganizationCode
	}
	return ""
}

func (x *CreateMiDevelopUserReq) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *CreateMiDevelopUserReq) GetOrganizationType() string {
	if x != nil {
		return x.OrganizationType
	}
	return ""
}

func (x *CreateMiDevelopUserReq) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CreateMiDevelopUserReq) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *CreateMiDevelopUserReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CreateMiDevelopUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result       int64  `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
	ClientId     string `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId"`
	ClientSecret string `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret"`
}

func (x *CreateMiDevelopUserResp) Reset() {
	*x = CreateMiDevelopUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMiDevelopUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMiDevelopUserResp) ProtoMessage() {}

func (x *CreateMiDevelopUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMiDevelopUserResp.ProtoReflect.Descriptor instead.
func (*CreateMiDevelopUserResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{278}
}

func (x *CreateMiDevelopUserResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *CreateMiDevelopUserResp) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CreateMiDevelopUserResp) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

//关联关系clientdevlop_permission
type ClientPermissionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId  string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId"`
	ManagerId int64  `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *ClientPermissionReq) Reset() {
	*x = ClientPermissionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientPermissionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientPermissionReq) ProtoMessage() {}

func (x *ClientPermissionReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientPermissionReq.ProtoReflect.Descriptor instead.
func (*ClientPermissionReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{279}
}

func (x *ClientPermissionReq) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientPermissionReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ClientPermissionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId         string              `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId"`
	ClientSecret     string              `protobuf:"bytes,3,opt,name=clientSecret,proto3" json:"clientSecret"`
	OrganizationCode string              `protobuf:"bytes,4,opt,name=organizationCode,proto3" json:"organizationCode"`
	OrganizationId   int64               `protobuf:"varint,5,opt,name=organizationId,proto3" json:"organizationId"`
	OrganizationType string              `protobuf:"bytes,6,opt,name=organizationType,proto3" json:"organizationType"`
	List             []*ClientPermission `protobuf:"bytes,7,rep,name=list,proto3" json:"list"`
}

func (x *ClientPermissionResp) Reset() {
	*x = ClientPermissionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientPermissionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientPermissionResp) ProtoMessage() {}

func (x *ClientPermissionResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientPermissionResp.ProtoReflect.Descriptor instead.
func (*ClientPermissionResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{280}
}

func (x *ClientPermissionResp) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientPermissionResp) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *ClientPermissionResp) GetOrganizationCode() string {
	if x != nil {
		return x.OrganizationCode
	}
	return ""
}

func (x *ClientPermissionResp) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *ClientPermissionResp) GetOrganizationType() string {
	if x != nil {
		return x.OrganizationType
	}
	return ""
}

func (x *ClientPermissionResp) GetList() []*ClientPermission {
	if x != nil {
		return x.List
	}
	return nil
}

type ClientPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permission    string `protobuf:"bytes,1,opt,name=permission,proto3" json:"permission"`
	PermissionUrl string `protobuf:"bytes,2,opt,name=permissionUrl,proto3" json:"permissionUrl"`
	ClientId      string `protobuf:"bytes,3,opt,name=clientId,proto3" json:"clientId"`
}

func (x *ClientPermission) Reset() {
	*x = ClientPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientPermission) ProtoMessage() {}

func (x *ClientPermission) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientPermission.ProtoReflect.Descriptor instead.
func (*ClientPermission) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{281}
}

func (x *ClientPermission) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

func (x *ClientPermission) GetPermissionUrl() string {
	if x != nil {
		return x.PermissionUrl
	}
	return ""
}

func (x *ClientPermission) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

//重置秘钥
type SetClientDevelopReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId         string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId"`
	ClientSecret     string `protobuf:"bytes,2,opt,name=clientSecret,proto3" json:"clientSecret"`
	OrganizationCode string `protobuf:"bytes,3,opt,name=organizationCode,proto3" json:"organizationCode"`
	OrganizationId   int64  `protobuf:"varint,4,opt,name=organizationId,proto3" json:"organizationId"`
	OrganizationType string `protobuf:"bytes,5,opt,name=organizationType,proto3" json:"organizationType"`
}

func (x *SetClientDevelopReq) Reset() {
	*x = SetClientDevelopReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetClientDevelopReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetClientDevelopReq) ProtoMessage() {}

func (x *SetClientDevelopReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetClientDevelopReq.ProtoReflect.Descriptor instead.
func (*SetClientDevelopReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{282}
}

func (x *SetClientDevelopReq) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SetClientDevelopReq) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *SetClientDevelopReq) GetOrganizationCode() string {
	if x != nil {
		return x.OrganizationCode
	}
	return ""
}

func (x *SetClientDevelopReq) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *SetClientDevelopReq) GetOrganizationType() string {
	if x != nil {
		return x.OrganizationType
	}
	return ""
}

type SetClientDevelopResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result       int64  `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
	ClientId     string `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId"`
	ClientSecret string `protobuf:"bytes,3,opt,name=clientSecret,proto3" json:"clientSecret"`
}

func (x *SetClientDevelopResp) Reset() {
	*x = SetClientDevelopResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetClientDevelopResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetClientDevelopResp) ProtoMessage() {}

func (x *SetClientDevelopResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetClientDevelopResp.ProtoReflect.Descriptor instead.
func (*SetClientDevelopResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{283}
}

func (x *SetClientDevelopResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *SetClientDevelopResp) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SetClientDevelopResp) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

//保存关系
type SaveClientPermissionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string              `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId"`
	Reqs     []*ClientPermission `protobuf:"bytes,2,rep,name=reqs,proto3" json:"reqs"`
}

func (x *SaveClientPermissionReq) Reset() {
	*x = SaveClientPermissionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveClientPermissionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveClientPermissionReq) ProtoMessage() {}

func (x *SaveClientPermissionReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveClientPermissionReq.ProtoReflect.Descriptor instead.
func (*SaveClientPermissionReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{284}
}

func (x *SaveClientPermissionReq) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SaveClientPermissionReq) GetReqs() []*ClientPermission {
	if x != nil {
		return x.Reqs
	}
	return nil
}

type SaveClientPermissionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result   int64               `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
	ClientId string              `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId"`
	Reps     []*ClientPermission `protobuf:"bytes,3,rep,name=reps,proto3" json:"reps"`
}

func (x *SaveClientPermissionResp) Reset() {
	*x = SaveClientPermissionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveClientPermissionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveClientPermissionResp) ProtoMessage() {}

func (x *SaveClientPermissionResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveClientPermissionResp.ProtoReflect.Descriptor instead.
func (*SaveClientPermissionResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{285}
}

func (x *SaveClientPermissionResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *SaveClientPermissionResp) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SaveClientPermissionResp) GetReps() []*ClientPermission {
	if x != nil {
		return x.Reps
	}
	return nil
}

//his 药品码绑定查询
type ListMedicineBindListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineCode     string `protobuf:"bytes,1,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineName     string `protobuf:"bytes,2,opt,name=medicineName,proto3" json:"medicineName"`
	OrganizationCode string `protobuf:"bytes,3,opt,name=organizationCode,proto3" json:"organizationCode"`
	OrganizationId   int64  `protobuf:"varint,4,opt,name=organizationId,proto3" json:"organizationId"`
	LinkType         string `protobuf:"bytes,5,opt,name=linkType,proto3" json:"linkType"`
	Page             *Page  `protobuf:"bytes,6,opt,name=page,proto3" json:"page"`
	ManagerId        int64  `protobuf:"varint,7,opt,name=managerId,proto3" json:"managerId"`
}

func (x *ListMedicineBindListReq) Reset() {
	*x = ListMedicineBindListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMedicineBindListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMedicineBindListReq) ProtoMessage() {}

func (x *ListMedicineBindListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMedicineBindListReq.ProtoReflect.Descriptor instead.
func (*ListMedicineBindListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{286}
}

func (x *ListMedicineBindListReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ListMedicineBindListReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ListMedicineBindListReq) GetOrganizationCode() string {
	if x != nil {
		return x.OrganizationCode
	}
	return ""
}

func (x *ListMedicineBindListReq) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *ListMedicineBindListReq) GetLinkType() string {
	if x != nil {
		return x.LinkType
	}
	return ""
}

func (x *ListMedicineBindListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListMedicineBindListReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ListMedicineBindListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ListMedicineBindListVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                     `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                     `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                     `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListMedicineBindListResp) Reset() {
	*x = ListMedicineBindListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMedicineBindListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMedicineBindListResp) ProtoMessage() {}

func (x *ListMedicineBindListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMedicineBindListResp.ProtoReflect.Descriptor instead.
func (*ListMedicineBindListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{287}
}

func (x *ListMedicineBindListResp) GetList() []*ListMedicineBindListVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListMedicineBindListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListMedicineBindListResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMedicineBindListResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ListMedicineBindListVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineName     string `protobuf:"bytes,1,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode     string `protobuf:"bytes,2,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineLinkName string `protobuf:"bytes,3,opt,name=medicineLinkName,proto3" json:"medicineLinkName"`
	BindId           int64  `protobuf:"varint,4,opt,name=bindId,proto3" json:"bindId"`
	MiCode           string `protobuf:"bytes,5,opt,name=miCode,proto3" json:"miCode"`
}

func (x *ListMedicineBindListVo) Reset() {
	*x = ListMedicineBindListVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMedicineBindListVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMedicineBindListVo) ProtoMessage() {}

func (x *ListMedicineBindListVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMedicineBindListVo.ProtoReflect.Descriptor instead.
func (*ListMedicineBindListVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{288}
}

func (x *ListMedicineBindListVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ListMedicineBindListVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ListMedicineBindListVo) GetMedicineLinkName() string {
	if x != nil {
		return x.MedicineLinkName
	}
	return ""
}

func (x *ListMedicineBindListVo) GetBindId() int64 {
	if x != nil {
		return x.BindId
	}
	return 0
}

func (x *ListMedicineBindListVo) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

//stock_medcine_code_bind
type CreateStockMedcineCodeBindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineCode     string `protobuf:"bytes,1,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineLinkCode string `protobuf:"bytes,2,opt,name=medicineLinkCode,proto3" json:"medicineLinkCode"`
	MedicineName     string `protobuf:"bytes,3,opt,name=medicineName,proto3" json:"medicineName"`
	OrganizationCode string `protobuf:"bytes,4,opt,name=organization_code,json=organizationCode,proto3" json:"organization_code"`
	OrganizationId   int64  `protobuf:"varint,5,opt,name=organization_id,json=organizationId,proto3" json:"organization_id"`
	LinkType         string `protobuf:"bytes,6,opt,name=link_type,json=linkType,proto3" json:"link_type"`
	ManagerId        int64  `protobuf:"varint,7,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateStockMedcineCodeBindReq) Reset() {
	*x = CreateStockMedcineCodeBindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStockMedcineCodeBindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStockMedcineCodeBindReq) ProtoMessage() {}

func (x *CreateStockMedcineCodeBindReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStockMedcineCodeBindReq.ProtoReflect.Descriptor instead.
func (*CreateStockMedcineCodeBindReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{289}
}

func (x *CreateStockMedcineCodeBindReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *CreateStockMedcineCodeBindReq) GetMedicineLinkCode() string {
	if x != nil {
		return x.MedicineLinkCode
	}
	return ""
}

func (x *CreateStockMedcineCodeBindReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *CreateStockMedcineCodeBindReq) GetOrganizationCode() string {
	if x != nil {
		return x.OrganizationCode
	}
	return ""
}

func (x *CreateStockMedcineCodeBindReq) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *CreateStockMedcineCodeBindReq) GetLinkType() string {
	if x != nil {
		return x.LinkType
	}
	return ""
}

func (x *CreateStockMedcineCodeBindReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CreateStockMedcineCodeBindResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateStockMedcineCodeBindResp) Reset() {
	*x = CreateStockMedcineCodeBindResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStockMedcineCodeBindResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStockMedcineCodeBindResp) ProtoMessage() {}

func (x *CreateStockMedcineCodeBindResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStockMedcineCodeBindResp.ProtoReflect.Descriptor instead.
func (*CreateStockMedcineCodeBindResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{290}
}

func (x *CreateStockMedcineCodeBindResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//医疗库存同步 medicine_mi_stock
type MedicineMiStockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId         string             `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId"`
	ManagerId        int64              `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
	OrganizationCode string             `protobuf:"bytes,3,opt,name=organizationCode,proto3" json:"organizationCode"`
	OrganizationId   int64              `protobuf:"varint,4,opt,name=organizationId,proto3" json:"organizationId"`
	List             []*MedicineMiStock `protobuf:"bytes,7,rep,name=list,proto3" json:"list"`
}

func (x *MedicineMiStockReq) Reset() {
	*x = MedicineMiStockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineMiStockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineMiStockReq) ProtoMessage() {}

func (x *MedicineMiStockReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineMiStockReq.ProtoReflect.Descriptor instead.
func (*MedicineMiStockReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{291}
}

func (x *MedicineMiStockReq) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *MedicineMiStockReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *MedicineMiStockReq) GetOrganizationCode() string {
	if x != nil {
		return x.OrganizationCode
	}
	return ""
}

func (x *MedicineMiStockReq) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *MedicineMiStockReq) GetList() []*MedicineMiStock {
	if x != nil {
		return x.List
	}
	return nil
}

type MedicineMiStockResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *MedicineMiStockResp) Reset() {
	*x = MedicineMiStockResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineMiStockResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineMiStockResp) ProtoMessage() {}

func (x *MedicineMiStockResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineMiStockResp.ProtoReflect.Descriptor instead.
func (*MedicineMiStockResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{292}
}

func (x *MedicineMiStockResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type MedicineMiStock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineLinkCode string                 `protobuf:"bytes,1,opt,name=medicineLinkCode,proto3" json:"medicineLinkCode"`
	MedicineLinkName string                 `protobuf:"bytes,2,opt,name=medicineLinkName,proto3" json:"medicineLinkName"`
	Num              int64                  `protobuf:"varint,3,opt,name=num,proto3" json:"num"`
	StockNum         int64                  `protobuf:"varint,4,opt,name=stockNum,proto3" json:"stockNum"`
	WarehouseCode    string                 `protobuf:"bytes,5,opt,name=warehouseCode,proto3" json:"warehouseCode"`
	ChangeTime       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=changeTime,proto3" json:"changeTime"`
}

func (x *MedicineMiStock) Reset() {
	*x = MedicineMiStock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineMiStock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineMiStock) ProtoMessage() {}

func (x *MedicineMiStock) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineMiStock.ProtoReflect.Descriptor instead.
func (*MedicineMiStock) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{293}
}

func (x *MedicineMiStock) GetMedicineLinkCode() string {
	if x != nil {
		return x.MedicineLinkCode
	}
	return ""
}

func (x *MedicineMiStock) GetMedicineLinkName() string {
	if x != nil {
		return x.MedicineLinkName
	}
	return ""
}

func (x *MedicineMiStock) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *MedicineMiStock) GetStockNum() int64 {
	if x != nil {
		return x.StockNum
	}
	return 0
}

func (x *MedicineMiStock) GetWarehouseCode() string {
	if x != nil {
		return x.WarehouseCode
	}
	return ""
}

func (x *MedicineMiStock) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

//医要企业疗库存同步 medicine_company_stock
type MedicineCompanyStockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId         string                  `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId"`
	ManagerId        int64                   `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
	OrganizationCode string                  `protobuf:"bytes,3,opt,name=organizationCode,proto3" json:"organizationCode"`
	OrganizationId   int64                   `protobuf:"varint,4,opt,name=organizationId,proto3" json:"organizationId"`
	List             []*MedicineCompanyStock `protobuf:"bytes,7,rep,name=list,proto3" json:"list"`
}

func (x *MedicineCompanyStockReq) Reset() {
	*x = MedicineCompanyStockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineCompanyStockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineCompanyStockReq) ProtoMessage() {}

func (x *MedicineCompanyStockReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineCompanyStockReq.ProtoReflect.Descriptor instead.
func (*MedicineCompanyStockReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{294}
}

func (x *MedicineCompanyStockReq) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *MedicineCompanyStockReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *MedicineCompanyStockReq) GetOrganizationCode() string {
	if x != nil {
		return x.OrganizationCode
	}
	return ""
}

func (x *MedicineCompanyStockReq) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *MedicineCompanyStockReq) GetList() []*MedicineCompanyStock {
	if x != nil {
		return x.List
	}
	return nil
}

type MedicineCompanyStockResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *MedicineCompanyStockResp) Reset() {
	*x = MedicineCompanyStockResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineCompanyStockResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineCompanyStockResp) ProtoMessage() {}

func (x *MedicineCompanyStockResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineCompanyStockResp.ProtoReflect.Descriptor instead.
func (*MedicineCompanyStockResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{295}
}

func (x *MedicineCompanyStockResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type MedicineCompanyStock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineLinkCode string                 `protobuf:"bytes,1,opt,name=medicineLinkCode,proto3" json:"medicineLinkCode"`
	MedicineLinkName string                 `protobuf:"bytes,2,opt,name=medicineLinkName,proto3" json:"medicineLinkName"`
	Num              int64                  `protobuf:"varint,3,opt,name=num,proto3" json:"num"`
	StockNum         int64                  `protobuf:"varint,4,opt,name=stockNum,proto3" json:"stockNum"`
	WarehouseCode    string                 `protobuf:"bytes,5,opt,name=warehouseCode,proto3" json:"warehouseCode"`
	ChangeTime       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=changeTime,proto3" json:"changeTime"`
}

func (x *MedicineCompanyStock) Reset() {
	*x = MedicineCompanyStock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineCompanyStock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineCompanyStock) ProtoMessage() {}

func (x *MedicineCompanyStock) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineCompanyStock.ProtoReflect.Descriptor instead.
func (*MedicineCompanyStock) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{296}
}

func (x *MedicineCompanyStock) GetMedicineLinkCode() string {
	if x != nil {
		return x.MedicineLinkCode
	}
	return ""
}

func (x *MedicineCompanyStock) GetMedicineLinkName() string {
	if x != nil {
		return x.MedicineLinkName
	}
	return ""
}

func (x *MedicineCompanyStock) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *MedicineCompanyStock) GetStockNum() int64 {
	if x != nil {
		return x.StockNum
	}
	return 0
}

func (x *MedicineCompanyStock) GetWarehouseCode() string {
	if x != nil {
		return x.WarehouseCode
	}
	return ""
}

func (x *MedicineCompanyStock) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

type MedicineStockMiListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyCode    string                 `protobuf:"bytes,1,opt,name=companyCode,proto3" json:"companyCode"`
	CompanyName    string                 `protobuf:"bytes,2,opt,name=companyName,proto3" json:"companyName"`
	ContractNo     string                 `protobuf:"bytes,3,opt,name=contractNo,proto3" json:"contractNo"`
	EndAt          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=endAt,proto3" json:"endAt"`
	MedicineCode   string                 `protobuf:"bytes,5,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineName   string                 `protobuf:"bytes,6,opt,name=medicineName,proto3" json:"medicineName"`
	StartAt        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=startAt,proto3" json:"startAt"`
	TenderCompany  string                 `protobuf:"bytes,8,opt,name=tenderCompany,proto3" json:"tenderCompany"`
	OrganizationId int64                  `protobuf:"varint,9,opt,name=organizationId,proto3" json:"organizationId"`
	Page           *Page                  `protobuf:"bytes,10,opt,name=page,proto3" json:"page"`
	ManagerId      int64                  `protobuf:"varint,11,opt,name=managerId,proto3" json:"managerId"`
}

func (x *MedicineStockMiListReq) Reset() {
	*x = MedicineStockMiListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineStockMiListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineStockMiListReq) ProtoMessage() {}

func (x *MedicineStockMiListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineStockMiListReq.ProtoReflect.Descriptor instead.
func (*MedicineStockMiListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{297}
}

func (x *MedicineStockMiListReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *MedicineStockMiListReq) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *MedicineStockMiListReq) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

func (x *MedicineStockMiListReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *MedicineStockMiListReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *MedicineStockMiListReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *MedicineStockMiListReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *MedicineStockMiListReq) GetTenderCompany() string {
	if x != nil {
		return x.TenderCompany
	}
	return ""
}

func (x *MedicineStockMiListReq) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *MedicineStockMiListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *MedicineStockMiListReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type MedicineStockMiListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*MedicineStockMiListVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                    `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                    `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                    `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *MedicineStockMiListResp) Reset() {
	*x = MedicineStockMiListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineStockMiListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineStockMiListResp) ProtoMessage() {}

func (x *MedicineStockMiListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineStockMiListResp.ProtoReflect.Descriptor instead.
func (*MedicineStockMiListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{298}
}

func (x *MedicineStockMiListResp) GetList() []*MedicineStockMiListVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *MedicineStockMiListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MedicineStockMiListResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *MedicineStockMiListResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type MedicineStockMiListVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineName          string `protobuf:"bytes,1,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string `protobuf:"bytes,2,opt,name=medicineCode,proto3" json:"medicineCode"`
	ContractNo            string `protobuf:"bytes,3,opt,name=contractNo,proto3" json:"contractNo"`
	TenderCompany         string `protobuf:"bytes,4,opt,name=tenderCompany,proto3" json:"tenderCompany"`
	CompanyName           string `protobuf:"bytes,5,opt,name=companyName,proto3" json:"companyName"`
	ComStockNum           int64  `protobuf:"varint,6,opt,name=comStockNum,proto3" json:"comStockNum"`
	MiName                string `protobuf:"bytes,7,opt,name=miName,proto3" json:"miName"`
	MiStockNum            int64  `protobuf:"varint,8,opt,name=miStockNum,proto3" json:"miStockNum"`
	MedicineSpecification string `protobuf:"bytes,9,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
}

func (x *MedicineStockMiListVo) Reset() {
	*x = MedicineStockMiListVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineStockMiListVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineStockMiListVo) ProtoMessage() {}

func (x *MedicineStockMiListVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineStockMiListVo.ProtoReflect.Descriptor instead.
func (*MedicineStockMiListVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{299}
}

func (x *MedicineStockMiListVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *MedicineStockMiListVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *MedicineStockMiListVo) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

func (x *MedicineStockMiListVo) GetTenderCompany() string {
	if x != nil {
		return x.TenderCompany
	}
	return ""
}

func (x *MedicineStockMiListVo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *MedicineStockMiListVo) GetComStockNum() int64 {
	if x != nil {
		return x.ComStockNum
	}
	return 0
}

func (x *MedicineStockMiListVo) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *MedicineStockMiListVo) GetMiStockNum() int64 {
	if x != nil {
		return x.MiStockNum
	}
	return 0
}

func (x *MedicineStockMiListVo) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

type ReimbursementListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month     int64  `protobuf:"varint,1,opt,name=month,proto3" json:"month"`
	Type      string `protobuf:"bytes,2,opt,name=type,proto3" json:"type"`
	Year      int64  `protobuf:"varint,3,opt,name=year,proto3" json:"year"`
	ManagerId int64  `protobuf:"varint,4,opt,name=managerId,proto3" json:"managerId"`
}

func (x *ReimbursementListReq) Reset() {
	*x = ReimbursementListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReimbursementListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReimbursementListReq) ProtoMessage() {}

func (x *ReimbursementListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReimbursementListReq.ProtoReflect.Descriptor instead.
func (*ReimbursementListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{300}
}

func (x *ReimbursementListReq) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ReimbursementListReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ReimbursementListReq) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ReimbursementListReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ReimbursementListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ReimbursementListVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
}

func (x *ReimbursementListResp) Reset() {
	*x = ReimbursementListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReimbursementListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReimbursementListResp) ProtoMessage() {}

func (x *ReimbursementListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReimbursementListResp.ProtoReflect.Descriptor instead.
func (*ReimbursementListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{301}
}

func (x *ReimbursementListResp) GetList() []*ReimbursementListVo {
	if x != nil {
		return x.List
	}
	return nil
}

type ReimbursementListVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year           int64                  `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month          int64                  `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	Mi             string                 `protobuf:"bytes,3,opt,name=mi,proto3" json:"mi"`
	ApplyAmount    int64                  `protobuf:"varint,4,opt,name=applyAmount,proto3" json:"applyAmount"`
	ApprovalAmount int64                  `protobuf:"varint,5,opt,name=approvalAmount,proto3" json:"approvalAmount"`
	FloatAmount    int64                  `protobuf:"varint,6,opt,name=floatAmount,proto3" json:"floatAmount"`
	FixedAmount    int64                  `protobuf:"varint,7,opt,name=fixedAmount,proto3" json:"fixedAmount"`
	ApprovalStatus string                 `protobuf:"bytes,8,opt,name=approvalStatus,proto3" json:"approvalStatus"`
	PayStatus      string                 `protobuf:"bytes,9,opt,name=payStatus,proto3" json:"payStatus"`
	PayErrMsg      string                 `protobuf:"bytes,10,opt,name=payErrMsg,proto3" json:"payErrMsg"`
	BankAccount    string                 `protobuf:"bytes,11,opt,name=bankAccount,proto3" json:"bankAccount"`
	BankOrgName    string                 `protobuf:"bytes,12,opt,name=bankOrgName,proto3" json:"bankOrgName"`
	BankName       string                 `protobuf:"bytes,13,opt,name=bankName,proto3" json:"bankName"`
	ApprovalFile   string                 `protobuf:"bytes,14,opt,name=approvalFile,proto3" json:"approvalFile"`
	PaySuccessTime *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=paySuccessTime,proto3" json:"paySuccessTime"`
	InsuranceType  string                 `protobuf:"bytes,16,opt,name=insuranceType,proto3" json:"insuranceType"`
	ApplyFile      string                 `protobuf:"bytes,17,opt,name=applyFile,proto3" json:"applyFile"`
}

func (x *ReimbursementListVo) Reset() {
	*x = ReimbursementListVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReimbursementListVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReimbursementListVo) ProtoMessage() {}

func (x *ReimbursementListVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReimbursementListVo.ProtoReflect.Descriptor instead.
func (*ReimbursementListVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{302}
}

func (x *ReimbursementListVo) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ReimbursementListVo) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ReimbursementListVo) GetMi() string {
	if x != nil {
		return x.Mi
	}
	return ""
}

func (x *ReimbursementListVo) GetApplyAmount() int64 {
	if x != nil {
		return x.ApplyAmount
	}
	return 0
}

func (x *ReimbursementListVo) GetApprovalAmount() int64 {
	if x != nil {
		return x.ApprovalAmount
	}
	return 0
}

func (x *ReimbursementListVo) GetFloatAmount() int64 {
	if x != nil {
		return x.FloatAmount
	}
	return 0
}

func (x *ReimbursementListVo) GetFixedAmount() int64 {
	if x != nil {
		return x.FixedAmount
	}
	return 0
}

func (x *ReimbursementListVo) GetApprovalStatus() string {
	if x != nil {
		return x.ApprovalStatus
	}
	return ""
}

func (x *ReimbursementListVo) GetPayStatus() string {
	if x != nil {
		return x.PayStatus
	}
	return ""
}

func (x *ReimbursementListVo) GetPayErrMsg() string {
	if x != nil {
		return x.PayErrMsg
	}
	return ""
}

func (x *ReimbursementListVo) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *ReimbursementListVo) GetBankOrgName() string {
	if x != nil {
		return x.BankOrgName
	}
	return ""
}

func (x *ReimbursementListVo) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *ReimbursementListVo) GetApprovalFile() string {
	if x != nil {
		return x.ApprovalFile
	}
	return ""
}

func (x *ReimbursementListVo) GetPaySuccessTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PaySuccessTime
	}
	return nil
}

func (x *ReimbursementListVo) GetInsuranceType() string {
	if x != nil {
		return x.InsuranceType
	}
	return ""
}

func (x *ReimbursementListVo) GetApplyFile() string {
	if x != nil {
		return x.ApplyFile
	}
	return ""
}

type ReimbursementApplyQuotaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month     int64  `protobuf:"varint,1,opt,name=month,proto3" json:"month"`
	Type      string `protobuf:"bytes,2,opt,name=type,proto3" json:"type"`
	Year      int64  `protobuf:"varint,3,opt,name=year,proto3" json:"year"`
	ManagerId int64  `protobuf:"varint,4,opt,name=managerId,proto3" json:"managerId"`
	Amount    int64  `protobuf:"varint,5,opt,name=amount,proto3" json:"amount"`
}

func (x *ReimbursementApplyQuotaReq) Reset() {
	*x = ReimbursementApplyQuotaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReimbursementApplyQuotaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReimbursementApplyQuotaReq) ProtoMessage() {}

func (x *ReimbursementApplyQuotaReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReimbursementApplyQuotaReq.ProtoReflect.Descriptor instead.
func (*ReimbursementApplyQuotaReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{303}
}

func (x *ReimbursementApplyQuotaReq) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ReimbursementApplyQuotaReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ReimbursementApplyQuotaReq) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ReimbursementApplyQuotaReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ReimbursementApplyQuotaReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type ReimbursementApplyQuotaResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
}

func (x *ReimbursementApplyQuotaResp) Reset() {
	*x = ReimbursementApplyQuotaResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReimbursementApplyQuotaResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReimbursementApplyQuotaResp) ProtoMessage() {}

func (x *ReimbursementApplyQuotaResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReimbursementApplyQuotaResp.ProtoReflect.Descriptor instead.
func (*ReimbursementApplyQuotaResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{304}
}

func (x *ReimbursementApplyQuotaResp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ReimbursementApplyQuotaResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type GetWsGetContractListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User       string `protobuf:"bytes,1,opt,name=user,proto3" json:"user"`
	Password   string `protobuf:"bytes,2,opt,name=password,proto3" json:"password"`
	Begintime  string `protobuf:"bytes,3,opt,name=begintime,proto3" json:"begintime"`
	Endtime    string `protobuf:"bytes,4,opt,name=endtime,proto3" json:"endtime"`
	PageSize   int64  `protobuf:"varint,5,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64  `protobuf:"varint,6,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetWsGetContractListReq) Reset() {
	*x = GetWsGetContractListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWsGetContractListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWsGetContractListReq) ProtoMessage() {}

func (x *GetWsGetContractListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWsGetContractListReq.ProtoReflect.Descriptor instead.
func (*GetWsGetContractListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{305}
}

func (x *GetWsGetContractListReq) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *GetWsGetContractListReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *GetWsGetContractListReq) GetBegintime() string {
	if x != nil {
		return x.Begintime
	}
	return ""
}

func (x *GetWsGetContractListReq) GetEndtime() string {
	if x != nil {
		return x.Endtime
	}
	return ""
}

func (x *GetWsGetContractListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetWsGetContractListReq) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetWsGetContractListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RtnCode string                  `protobuf:"bytes,1,opt,name=rtnCode,proto3" json:"rtnCode"`
	RtnMsg  string                  `protobuf:"bytes,2,opt,name=rtnMsg,proto3" json:"rtnMsg"`
	RtnTime string                  `protobuf:"bytes,3,opt,name=rtnTime,proto3" json:"rtnTime"`
	Resu    []*TpsyncContractListVo `protobuf:"bytes,4,rep,name=resu,proto3" json:"resu"`
}

func (x *GetWsGetContractListResp) Reset() {
	*x = GetWsGetContractListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWsGetContractListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWsGetContractListResp) ProtoMessage() {}

func (x *GetWsGetContractListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWsGetContractListResp.ProtoReflect.Descriptor instead.
func (*GetWsGetContractListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{306}
}

func (x *GetWsGetContractListResp) GetRtnCode() string {
	if x != nil {
		return x.RtnCode
	}
	return ""
}

func (x *GetWsGetContractListResp) GetRtnMsg() string {
	if x != nil {
		return x.RtnMsg
	}
	return ""
}

func (x *GetWsGetContractListResp) GetRtnTime() string {
	if x != nil {
		return x.RtnTime
	}
	return ""
}

func (x *GetWsGetContractListResp) GetResu() []*TpsyncContractListVo {
	if x != nil {
		return x.Resu
	}
	return nil
}

type TpsyncContractListVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HTLSH     string `protobuf:"bytes,1,opt,name=HTLSH,proto3" json:"HTLSH"`
	YPBH      string `protobuf:"bytes,2,opt,name=YPBH,proto3" json:"YPBH"`
	YYBH      string `protobuf:"bytes,3,opt,name=YYBH,proto3" json:"YYBH"`
	PSQYBH    string `protobuf:"bytes,4,opt,name=PSQYBH,proto3" json:"PSQYBH"`
	CGL       int64  `protobuf:"varint,5,opt,name=CGL,proto3" json:"CGL"`
	HTPRICE   int64  `protobuf:"varint,6,opt,name=HTPRICE,proto3" json:"HTPRICE"`
	HTUSEDATE string `protobuf:"bytes,7,opt,name=HTUSEDATE,proto3" json:"HTUSEDATE"`
}

func (x *TpsyncContractListVo) Reset() {
	*x = TpsyncContractListVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpsyncContractListVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpsyncContractListVo) ProtoMessage() {}

func (x *TpsyncContractListVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpsyncContractListVo.ProtoReflect.Descriptor instead.
func (*TpsyncContractListVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{307}
}

func (x *TpsyncContractListVo) GetHTLSH() string {
	if x != nil {
		return x.HTLSH
	}
	return ""
}

func (x *TpsyncContractListVo) GetYPBH() string {
	if x != nil {
		return x.YPBH
	}
	return ""
}

func (x *TpsyncContractListVo) GetYYBH() string {
	if x != nil {
		return x.YYBH
	}
	return ""
}

func (x *TpsyncContractListVo) GetPSQYBH() string {
	if x != nil {
		return x.PSQYBH
	}
	return ""
}

func (x *TpsyncContractListVo) GetCGL() int64 {
	if x != nil {
		return x.CGL
	}
	return 0
}

func (x *TpsyncContractListVo) GetHTPRICE() int64 {
	if x != nil {
		return x.HTPRICE
	}
	return 0
}

func (x *TpsyncContractListVo) GetHTUSEDATE() string {
	if x != nil {
		return x.HTUSEDATE
	}
	return ""
}

type ShipmentPlanListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentPlans []*ShipmentPlan `protobuf:"bytes,1,rep,name=ShipmentPlans,proto3" json:"ShipmentPlans"`
}

func (x *ShipmentPlanListReq) Reset() {
	*x = ShipmentPlanListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentPlanListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentPlanListReq) ProtoMessage() {}

func (x *ShipmentPlanListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentPlanListReq.ProtoReflect.Descriptor instead.
func (*ShipmentPlanListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{308}
}

func (x *ShipmentPlanListReq) GetShipmentPlans() []*ShipmentPlan {
	if x != nil {
		return x.ShipmentPlans
	}
	return nil
}

type ShipmentPlanListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *ShipmentPlanListResp) Reset() {
	*x = ShipmentPlanListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentPlanListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentPlanListResp) ProtoMessage() {}

func (x *ShipmentPlanListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentPlanListResp.ProtoReflect.Descriptor instead.
func (*ShipmentPlanListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{309}
}

func (x *ShipmentPlanListResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type ShipmentPlaneListVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PLANLSH   string `protobuf:"bytes,1,opt,name=PLANLSH,proto3" json:"PLANLSH"`
	YPBH      string `protobuf:"bytes,2,opt,name=YPBH,proto3" json:"YPBH"`
	PSQYBH    string `protobuf:"bytes,3,opt,name=PSQYBH,proto3" json:"PSQYBH"`
	YYBH      int64  `protobuf:"varint,4,opt,name=YYBH,proto3" json:"YYBH"`
	Begintime string `protobuf:"bytes,5,opt,name=Begintime,proto3" json:"Begintime"`
	PSNUM     int64  `protobuf:"varint,6,opt,name=PSNUM,proto3" json:"PSNUM"`
	PSAMOUNT  int64  `protobuf:"varint,7,opt,name=PSAMOUNT,proto3" json:"PSAMOUNT"`
}

func (x *ShipmentPlaneListVo) Reset() {
	*x = ShipmentPlaneListVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentPlaneListVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentPlaneListVo) ProtoMessage() {}

func (x *ShipmentPlaneListVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentPlaneListVo.ProtoReflect.Descriptor instead.
func (*ShipmentPlaneListVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{310}
}

func (x *ShipmentPlaneListVo) GetPLANLSH() string {
	if x != nil {
		return x.PLANLSH
	}
	return ""
}

func (x *ShipmentPlaneListVo) GetYPBH() string {
	if x != nil {
		return x.YPBH
	}
	return ""
}

func (x *ShipmentPlaneListVo) GetPSQYBH() string {
	if x != nil {
		return x.PSQYBH
	}
	return ""
}

func (x *ShipmentPlaneListVo) GetYYBH() int64 {
	if x != nil {
		return x.YYBH
	}
	return 0
}

func (x *ShipmentPlaneListVo) GetBegintime() string {
	if x != nil {
		return x.Begintime
	}
	return ""
}

func (x *ShipmentPlaneListVo) GetPSNUM() int64 {
	if x != nil {
		return x.PSNUM
	}
	return 0
}

func (x *ShipmentPlaneListVo) GetPSAMOUNT() int64 {
	if x != nil {
		return x.PSAMOUNT
	}
	return 0
}

type TenderContractInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenderContracts []*TenderContract `protobuf:"bytes,1,rep,name=tenderContracts,proto3" json:"tenderContracts"`
}

func (x *TenderContractInfoReq) Reset() {
	*x = TenderContractInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenderContractInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenderContractInfoReq) ProtoMessage() {}

func (x *TenderContractInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenderContractInfoReq.ProtoReflect.Descriptor instead.
func (*TenderContractInfoReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{311}
}

func (x *TenderContractInfoReq) GetTenderContracts() []*TenderContract {
	if x != nil {
		return x.TenderContracts
	}
	return nil
}

type TenderContractInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *TenderContractInfoResp) Reset() {
	*x = TenderContractInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenderContractInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenderContractInfoResp) ProtoMessage() {}

func (x *TenderContractInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenderContractInfoResp.ProtoReflect.Descriptor instead.
func (*TenderContractInfoResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{312}
}

func (x *TenderContractInfoResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type TenderContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineId    int64                  `protobuf:"varint,1,opt,name=medicineId,proto3" json:"medicineId"`
	TenderCompany string                 `protobuf:"bytes,2,opt,name=tenderCompany,proto3" json:"tenderCompany"`
	CompanyId     int64                  `protobuf:"varint,3,opt,name=companyId,proto3" json:"companyId"`
	MedicinePrice int64                  `protobuf:"varint,4,opt,name=medicinePrice,proto3" json:"medicinePrice"`
	TotalAmount   int64                  `protobuf:"varint,5,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount"`
	StartAt       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=startAt,proto3" json:"startAt"`
	EndAt         *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=endAt,proto3" json:"endAt"`
	ContractCode  string                 `protobuf:"bytes,8,opt,name=contractCode,proto3" json:"contractCode"`
	MiId          int64                  `protobuf:"varint,9,opt,name=miId,proto3" json:"miId"`
	LinkCode      string                 `protobuf:"bytes,10,opt,name=linkCode,proto3" json:"linkCode"`
}

func (x *TenderContract) Reset() {
	*x = TenderContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenderContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenderContract) ProtoMessage() {}

func (x *TenderContract) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenderContract.ProtoReflect.Descriptor instead.
func (*TenderContract) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{313}
}

func (x *TenderContract) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *TenderContract) GetTenderCompany() string {
	if x != nil {
		return x.TenderCompany
	}
	return ""
}

func (x *TenderContract) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *TenderContract) GetMedicinePrice() int64 {
	if x != nil {
		return x.MedicinePrice
	}
	return 0
}

func (x *TenderContract) GetTotalAmount() int64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *TenderContract) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *TenderContract) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *TenderContract) GetContractCode() string {
	if x != nil {
		return x.ContractCode
	}
	return ""
}

func (x *TenderContract) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *TenderContract) GetLinkCode() string {
	if x != nil {
		return x.LinkCode
	}
	return ""
}

type ShipmentPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineCode   string `protobuf:"bytes,1,opt,name=medicineCode,proto3" json:"medicineCode"`
	Comcode        string `protobuf:"bytes,2,opt,name=comcode,proto3" json:"comcode"`
	MiCode         string `protobuf:"bytes,3,opt,name=miCode,proto3" json:"miCode"`
	ContractMiId   int64  `protobuf:"varint,4,opt,name=contractMiId,proto3" json:"contractMiId"`
	TpCode         string `protobuf:"bytes,5,opt,name=tpCode,proto3" json:"tpCode"`
	TpOrderTitle   string `protobuf:"bytes,6,opt,name=tpOrderTitle,proto3" json:"tpOrderTitle"`
	OrderAmount    int64  `protobuf:"varint,7,opt,name=orderAmount,proto3" json:"orderAmount"`
	ShipmentAmount int64  `protobuf:"varint,8,opt,name=shipmentAmount,proto3" json:"shipmentAmount"`
}

func (x *ShipmentPlan) Reset() {
	*x = ShipmentPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentPlan) ProtoMessage() {}

func (x *ShipmentPlan) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentPlan.ProtoReflect.Descriptor instead.
func (*ShipmentPlan) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{314}
}

func (x *ShipmentPlan) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ShipmentPlan) GetComcode() string {
	if x != nil {
		return x.Comcode
	}
	return ""
}

func (x *ShipmentPlan) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ShipmentPlan) GetContractMiId() int64 {
	if x != nil {
		return x.ContractMiId
	}
	return 0
}

func (x *ShipmentPlan) GetTpCode() string {
	if x != nil {
		return x.TpCode
	}
	return ""
}

func (x *ShipmentPlan) GetTpOrderTitle() string {
	if x != nil {
		return x.TpOrderTitle
	}
	return ""
}

func (x *ShipmentPlan) GetOrderAmount() int64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *ShipmentPlan) GetShipmentAmount() int64 {
	if x != nil {
		return x.ShipmentAmount
	}
	return 0
}

type UploadCompanyLogoUrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogoUrl   string `protobuf:"bytes,1,opt,name=logoUrl,proto3" json:"logoUrl"`
	ManagerId int64  `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UploadCompanyLogoUrlReq) Reset() {
	*x = UploadCompanyLogoUrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadCompanyLogoUrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadCompanyLogoUrlReq) ProtoMessage() {}

func (x *UploadCompanyLogoUrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadCompanyLogoUrlReq.ProtoReflect.Descriptor instead.
func (*UploadCompanyLogoUrlReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{315}
}

func (x *UploadCompanyLogoUrlReq) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *UploadCompanyLogoUrlReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UploadCompanyLogoUrlResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UploadCompanyLogoUrlResp) Reset() {
	*x = UploadCompanyLogoUrlResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadCompanyLogoUrlResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadCompanyLogoUrlResp) ProtoMessage() {}

func (x *UploadCompanyLogoUrlResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadCompanyLogoUrlResp.ProtoReflect.Descriptor instead.
func (*UploadCompanyLogoUrlResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{316}
}

func (x *UploadCompanyLogoUrlResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type UploadMiLogoUrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogoUrl   string `protobuf:"bytes,1,opt,name=logoUrl,proto3" json:"logoUrl"`
	ManagerId int64  `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UploadMiLogoUrlReq) Reset() {
	*x = UploadMiLogoUrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadMiLogoUrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadMiLogoUrlReq) ProtoMessage() {}

func (x *UploadMiLogoUrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadMiLogoUrlReq.ProtoReflect.Descriptor instead.
func (*UploadMiLogoUrlReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{317}
}

func (x *UploadMiLogoUrlReq) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *UploadMiLogoUrlReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UploadMiLogoUrlResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UploadMiLogoUrlResp) Reset() {
	*x = UploadMiLogoUrlResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadMiLogoUrlResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadMiLogoUrlResp) ProtoMessage() {}

func (x *UploadMiLogoUrlResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadMiLogoUrlResp.ProtoReflect.Descriptor instead.
func (*UploadMiLogoUrlResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{318}
}

func (x *UploadMiLogoUrlResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type GetMedicineHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId   int64   `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	MedicineIds []int64 `protobuf:"varint,2,rep,packed,name=medicineIds,proto3" json:"medicineIds"`
}

func (x *GetMedicineHashReq) Reset() {
	*x = GetMedicineHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMedicineHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMedicineHashReq) ProtoMessage() {}

func (x *GetMedicineHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMedicineHashReq.ProtoReflect.Descriptor instead.
func (*GetMedicineHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{319}
}

func (x *GetMedicineHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetMedicineHashReq) GetMedicineIds() []int64 {
	if x != nil {
		return x.MedicineIds
	}
	return nil
}

type GetMedicineHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*MedicineChainHash `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetMedicineHashResp) Reset() {
	*x = GetMedicineHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMedicineHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMedicineHashResp) ProtoMessage() {}

func (x *GetMedicineHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMedicineHashResp.ProtoReflect.Descriptor instead.
func (*GetMedicineHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{320}
}

func (x *GetMedicineHashResp) GetList() []*MedicineChainHash {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetMedicineHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetMedicineHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetMedicineHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type MedicineChainHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineId   int64                  `protobuf:"varint,1,opt,name=medicineId,proto3" json:"medicineId"`
	InfoHash     string                 `protobuf:"bytes,2,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
}

func (x *MedicineChainHash) Reset() {
	*x = MedicineChainHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineChainHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineChainHash) ProtoMessage() {}

func (x *MedicineChainHash) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineChainHash.ProtoReflect.Descriptor instead.
func (*MedicineChainHash) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{321}
}

func (x *MedicineChainHash) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *MedicineChainHash) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *MedicineChainHash) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

//根据药品id查询药品信息
type MedicineByMedicineIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineId int64 `protobuf:"varint,1,opt,name=medicineId,proto3" json:"medicineId"`
	ManagerId  int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *MedicineByMedicineIdReq) Reset() {
	*x = MedicineByMedicineIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineByMedicineIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineByMedicineIdReq) ProtoMessage() {}

func (x *MedicineByMedicineIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineByMedicineIdReq.ProtoReflect.Descriptor instead.
func (*MedicineByMedicineIdReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{322}
}

func (x *MedicineByMedicineIdReq) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *MedicineByMedicineIdReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type MedicineByMedicineIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	MedicineName          string `protobuf:"bytes,2,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string `protobuf:"bytes,3,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineSpecification string `protobuf:"bytes,4,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	MedicineForm          string `protobuf:"bytes,5,opt,name=medicineForm,proto3" json:"medicineForm"`
	MedicinePackage       string `protobuf:"bytes,6,opt,name=medicinePackage,proto3" json:"medicinePackage"`
	CalculateRate         int64  `protobuf:"varint,7,opt,name=calculateRate,proto3" json:"calculateRate"`
	Manufacturer          string `protobuf:"bytes,8,opt,name=manufacturer,proto3" json:"manufacturer"`
	MedicineUnit          string `protobuf:"bytes,9,opt,name=medicineUnit,proto3" json:"medicineUnit"`
	ActiveStatus          string `protobuf:"bytes,10,opt,name=activeStatus,proto3" json:"activeStatus"`
	MedicinePCode         string `protobuf:"bytes,11,opt,name=medicinePCode,proto3" json:"medicinePCode"`
}

func (x *MedicineByMedicineIdResp) Reset() {
	*x = MedicineByMedicineIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineByMedicineIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineByMedicineIdResp) ProtoMessage() {}

func (x *MedicineByMedicineIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineByMedicineIdResp.ProtoReflect.Descriptor instead.
func (*MedicineByMedicineIdResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{323}
}

func (x *MedicineByMedicineIdResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MedicineByMedicineIdResp) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *MedicineByMedicineIdResp) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *MedicineByMedicineIdResp) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *MedicineByMedicineIdResp) GetMedicineForm() string {
	if x != nil {
		return x.MedicineForm
	}
	return ""
}

func (x *MedicineByMedicineIdResp) GetMedicinePackage() string {
	if x != nil {
		return x.MedicinePackage
	}
	return ""
}

func (x *MedicineByMedicineIdResp) GetCalculateRate() int64 {
	if x != nil {
		return x.CalculateRate
	}
	return 0
}

func (x *MedicineByMedicineIdResp) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *MedicineByMedicineIdResp) GetMedicineUnit() string {
	if x != nil {
		return x.MedicineUnit
	}
	return ""
}

func (x *MedicineByMedicineIdResp) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *MedicineByMedicineIdResp) GetMedicinePCode() string {
	if x != nil {
		return x.MedicinePCode
	}
	return ""
}

type GetMICodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiId      int64 `protobuf:"varint,1,opt,name=miId,proto3" json:"miId"`
	ManagerId int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *GetMICodeReq) Reset() {
	*x = GetMICodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMICodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMICodeReq) ProtoMessage() {}

func (x *GetMICodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMICodeReq.ProtoReflect.Descriptor instead.
func (*GetMICodeReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{324}
}

func (x *GetMICodeReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *GetMICodeReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type GetMICodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiId         int64  `protobuf:"varint,1,opt,name=miId,proto3" json:"miId"`
	MiCode       string `protobuf:"bytes,2,opt,name=miCode,proto3" json:"miCode"`
	MiName       string `protobuf:"bytes,3,opt,name=miName,proto3" json:"miName"`
	MiType       string `protobuf:"bytes,4,opt,name=miType,proto3" json:"miType"`
	ManagerName  string `protobuf:"bytes,5,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone string `protobuf:"bytes,6,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province     string `protobuf:"bytes,7,opt,name=province,proto3" json:"province"`
	City         string `protobuf:"bytes,8,opt,name=city,proto3" json:"city"`
	Zone         string `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone"`
}

func (x *GetMICodeResp) Reset() {
	*x = GetMICodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMICodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMICodeResp) ProtoMessage() {}

func (x *GetMICodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMICodeResp.ProtoReflect.Descriptor instead.
func (*GetMICodeResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{325}
}

func (x *GetMICodeResp) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *GetMICodeResp) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *GetMICodeResp) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *GetMICodeResp) GetMiType() string {
	if x != nil {
		return x.MiType
	}
	return ""
}

func (x *GetMICodeResp) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *GetMICodeResp) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *GetMICodeResp) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *GetMICodeResp) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *GetMICodeResp) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

type GetCompanyInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId int64 `protobuf:"varint,1,opt,name=companyId,proto3" json:"companyId"`
	ManagerId int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *GetCompanyInfoReq) Reset() {
	*x = GetCompanyInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyInfoReq) ProtoMessage() {}

func (x *GetCompanyInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyInfoReq.ProtoReflect.Descriptor instead.
func (*GetCompanyInfoReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{326}
}

func (x *GetCompanyInfoReq) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *GetCompanyInfoReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type GetCompanyInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId    int64  `protobuf:"varint,1,opt,name=companyId,proto3" json:"companyId"`
	CompanyCode  string `protobuf:"bytes,2,opt,name=companyCode,proto3" json:"companyCode"`
	CompanyName  string `protobuf:"bytes,3,opt,name=companyName,proto3" json:"companyName"`
	ManagerName  string `protobuf:"bytes,4,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone string `protobuf:"bytes,5,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province     string `protobuf:"bytes,6,opt,name=province,proto3" json:"province"`
	City         string `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`
	Zone         string `protobuf:"bytes,8,opt,name=zone,proto3" json:"zone"`
}

func (x *GetCompanyInfoResp) Reset() {
	*x = GetCompanyInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyInfoResp) ProtoMessage() {}

func (x *GetCompanyInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyInfoResp.ProtoReflect.Descriptor instead.
func (*GetCompanyInfoResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{327}
}

func (x *GetCompanyInfoResp) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *GetCompanyInfoResp) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *GetCompanyInfoResp) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *GetCompanyInfoResp) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *GetCompanyInfoResp) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *GetCompanyInfoResp) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *GetCompanyInfoResp) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *GetCompanyInfoResp) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

//查询建设单位列表
type ListConstructionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstructionCode string  `protobuf:"bytes,1,opt,name=constructionCode,proto3" json:"constructionCode"`
	ConstructionName string  `protobuf:"bytes,2,opt,name=constructionName,proto3" json:"constructionName"`
	Province         string  `protobuf:"bytes,3,opt,name=province,proto3" json:"province"`
	City             string  `protobuf:"bytes,4,opt,name=city,proto3" json:"city"`
	Zone             string  `protobuf:"bytes,5,opt,name=zone,proto3" json:"zone"`
	ActiveStatus     string  `protobuf:"bytes,6,opt,name=activeStatus,proto3" json:"activeStatus"`
	ManagerId        int64   `protobuf:"varint,7,opt,name=managerId,proto3" json:"managerId"`
	Page             *Page   `protobuf:"bytes,8,opt,name=page,proto3" json:"page"`
	ConstructionIds  []int64 `protobuf:"varint,9,rep,packed,name=constructionIds,proto3" json:"constructionIds"`
}

func (x *ListConstructionReq) Reset() {
	*x = ListConstructionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConstructionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConstructionReq) ProtoMessage() {}

func (x *ListConstructionReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConstructionReq.ProtoReflect.Descriptor instead.
func (*ListConstructionReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{328}
}

func (x *ListConstructionReq) GetConstructionCode() string {
	if x != nil {
		return x.ConstructionCode
	}
	return ""
}

func (x *ListConstructionReq) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *ListConstructionReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ListConstructionReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ListConstructionReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ListConstructionReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *ListConstructionReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListConstructionReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListConstructionReq) GetConstructionIds() []int64 {
	if x != nil {
		return x.ConstructionIds
	}
	return nil
}

type ListConstructionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ConstructionVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64             `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64             `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListConstructionResp) Reset() {
	*x = ListConstructionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConstructionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConstructionResp) ProtoMessage() {}

func (x *ListConstructionResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConstructionResp.ProtoReflect.Descriptor instead.
func (*ListConstructionResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{329}
}

func (x *ListConstructionResp) GetList() []*ConstructionVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListConstructionResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListConstructionResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListConstructionResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ConstructionVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstructionId   int64                  `protobuf:"varint,1,opt,name=constructionId,proto3" json:"constructionId"`
	ConstructionCode string                 `protobuf:"bytes,2,opt,name=constructionCode,proto3" json:"constructionCode"`
	ConstructionName string                 `protobuf:"bytes,3,opt,name=constructionName,proto3" json:"constructionName"`
	ConstructionType string                 `protobuf:"bytes,4,opt,name=constructionType,proto3" json:"constructionType"`
	ManagerName      string                 `protobuf:"bytes,5,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone     string                 `protobuf:"bytes,6,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province         string                 `protobuf:"bytes,7,opt,name=province,proto3" json:"province"`
	City             string                 `protobuf:"bytes,8,opt,name=city,proto3" json:"city"`
	Zone             string                 `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone"`
	ActiveStatus     string                 `protobuf:"bytes,10,opt,name=activeStatus,proto3" json:"activeStatus"`
	LogoUrl          string                 `protobuf:"bytes,11,opt,name=logoUrl,proto3" json:"logoUrl"`
	Memo             string                 `protobuf:"bytes,12,opt,name=memo,proto3" json:"memo"`
	CreatedBy        int64                  `protobuf:"varint,13,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy        int64                  `protobuf:"varint,15,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updatedAt,proto3" json:"updatedAt"`
	HashInfo         string                 `protobuf:"bytes,17,opt,name=hashInfo,proto3" json:"hashInfo"`
}

func (x *ConstructionVo) Reset() {
	*x = ConstructionVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstructionVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstructionVo) ProtoMessage() {}

func (x *ConstructionVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstructionVo.ProtoReflect.Descriptor instead.
func (*ConstructionVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{330}
}

func (x *ConstructionVo) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *ConstructionVo) GetConstructionCode() string {
	if x != nil {
		return x.ConstructionCode
	}
	return ""
}

func (x *ConstructionVo) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *ConstructionVo) GetConstructionType() string {
	if x != nil {
		return x.ConstructionType
	}
	return ""
}

func (x *ConstructionVo) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *ConstructionVo) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *ConstructionVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ConstructionVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ConstructionVo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ConstructionVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *ConstructionVo) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *ConstructionVo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *ConstructionVo) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *ConstructionVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ConstructionVo) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *ConstructionVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ConstructionVo) GetHashInfo() string {
	if x != nil {
		return x.HashInfo
	}
	return ""
}

//查询建设单位(通用接口)
type CommonConstructionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstructionName string  `protobuf:"bytes,1,opt,name=constructionName,proto3" json:"constructionName"`
	ConstructionCode string  `protobuf:"bytes,2,opt,name=constructionCode,proto3" json:"constructionCode"`
	ActiveStatus     string  `protobuf:"bytes,3,opt,name=activeStatus,proto3" json:"activeStatus"`
	ManagerId        int64   `protobuf:"varint,4,opt,name=managerId,proto3" json:"managerId"`
	Page             *Page   `protobuf:"bytes,5,opt,name=page,proto3" json:"page"`
	ConstructionIds  []int64 `protobuf:"varint,6,rep,packed,name=constructionIds,proto3" json:"constructionIds"`
}

func (x *CommonConstructionReq) Reset() {
	*x = CommonConstructionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonConstructionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonConstructionReq) ProtoMessage() {}

func (x *CommonConstructionReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonConstructionReq.ProtoReflect.Descriptor instead.
func (*CommonConstructionReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{331}
}

func (x *CommonConstructionReq) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *CommonConstructionReq) GetConstructionCode() string {
	if x != nil {
		return x.ConstructionCode
	}
	return ""
}

func (x *CommonConstructionReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *CommonConstructionReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CommonConstructionReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *CommonConstructionReq) GetConstructionIds() []int64 {
	if x != nil {
		return x.ConstructionIds
	}
	return nil
}

type CommonConstructionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*CommonConstructionVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                   `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                   `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                   `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *CommonConstructionResp) Reset() {
	*x = CommonConstructionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonConstructionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonConstructionResp) ProtoMessage() {}

func (x *CommonConstructionResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonConstructionResp.ProtoReflect.Descriptor instead.
func (*CommonConstructionResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{332}
}

func (x *CommonConstructionResp) GetList() []*CommonConstructionVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CommonConstructionResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CommonConstructionResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CommonConstructionResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type CommonConstructionVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstructionId   int64  `protobuf:"varint,1,opt,name=constructionId,proto3" json:"constructionId"`
	ConstructionName string `protobuf:"bytes,2,opt,name=constructionName,proto3" json:"constructionName"`
	ConstructionCode string `protobuf:"bytes,3,opt,name=constructionCode,proto3" json:"constructionCode"`
	LogoUrl          string `protobuf:"bytes,4,opt,name=logoUrl,proto3" json:"logoUrl"`
}

func (x *CommonConstructionVo) Reset() {
	*x = CommonConstructionVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonConstructionVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonConstructionVo) ProtoMessage() {}

func (x *CommonConstructionVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonConstructionVo.ProtoReflect.Descriptor instead.
func (*CommonConstructionVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{333}
}

func (x *CommonConstructionVo) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *CommonConstructionVo) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *CommonConstructionVo) GetConstructionCode() string {
	if x != nil {
		return x.ConstructionCode
	}
	return ""
}

func (x *CommonConstructionVo) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

//获取建设单位详情
type GetConstructionInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstructionId   int64  `protobuf:"varint,1,opt,name=constructionId,proto3" json:"constructionId"`
	ConstructionCode string `protobuf:"bytes,2,opt,name=constructionCode,proto3" json:"constructionCode"`
	ManagerId        int64  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
	Page             *Page  `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
}

func (x *GetConstructionInfoReq) Reset() {
	*x = GetConstructionInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConstructionInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConstructionInfoReq) ProtoMessage() {}

func (x *GetConstructionInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConstructionInfoReq.ProtoReflect.Descriptor instead.
func (*GetConstructionInfoReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{334}
}

func (x *GetConstructionInfoReq) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *GetConstructionInfoReq) GetConstructionCode() string {
	if x != nil {
		return x.ConstructionCode
	}
	return ""
}

func (x *GetConstructionInfoReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetConstructionInfoReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ConstructionInfoVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstructionId   int64                  `protobuf:"varint,1,opt,name=constructionId,proto3" json:"constructionId"`
	ConstructionCode string                 `protobuf:"bytes,2,opt,name=constructionCode,proto3" json:"constructionCode"`
	ConstructionName string                 `protobuf:"bytes,3,opt,name=constructionName,proto3" json:"constructionName"`
	ConstructionType string                 `protobuf:"bytes,4,opt,name=constructionType,proto3" json:"constructionType"`
	ManagerName      string                 `protobuf:"bytes,5,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone     string                 `protobuf:"bytes,6,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province         string                 `protobuf:"bytes,7,opt,name=province,proto3" json:"province"`
	City             string                 `protobuf:"bytes,8,opt,name=city,proto3" json:"city"`
	Zone             string                 `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone"`
	ActiveStatus     string                 `protobuf:"bytes,10,opt,name=activeStatus,proto3" json:"activeStatus"`
	LogoUrl          string                 `protobuf:"bytes,11,opt,name=logoUrl,proto3" json:"logoUrl"`
	Memo             string                 `protobuf:"bytes,12,opt,name=memo,proto3" json:"memo"`
	CreatedBy        int64                  `protobuf:"varint,13,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy        int64                  `protobuf:"varint,15,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updatedAt,proto3" json:"updatedAt"`
	HashInfo         string                 `protobuf:"bytes,17,opt,name=hashInfo,proto3" json:"hashInfo"`
}

func (x *ConstructionInfoVo) Reset() {
	*x = ConstructionInfoVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstructionInfoVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstructionInfoVo) ProtoMessage() {}

func (x *ConstructionInfoVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstructionInfoVo.ProtoReflect.Descriptor instead.
func (*ConstructionInfoVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{335}
}

func (x *ConstructionInfoVo) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *ConstructionInfoVo) GetConstructionCode() string {
	if x != nil {
		return x.ConstructionCode
	}
	return ""
}

func (x *ConstructionInfoVo) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *ConstructionInfoVo) GetConstructionType() string {
	if x != nil {
		return x.ConstructionType
	}
	return ""
}

func (x *ConstructionInfoVo) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *ConstructionInfoVo) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *ConstructionInfoVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ConstructionInfoVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ConstructionInfoVo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ConstructionInfoVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *ConstructionInfoVo) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *ConstructionInfoVo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *ConstructionInfoVo) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *ConstructionInfoVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ConstructionInfoVo) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *ConstructionInfoVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ConstructionInfoVo) GetHashInfo() string {
	if x != nil {
		return x.HashInfo
	}
	return ""
}

type GetConstructionInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ConstructionInfoVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                 `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                 `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetConstructionInfoResp) Reset() {
	*x = GetConstructionInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConstructionInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConstructionInfoResp) ProtoMessage() {}

func (x *GetConstructionInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConstructionInfoResp.ProtoReflect.Descriptor instead.
func (*GetConstructionInfoResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{336}
}

func (x *GetConstructionInfoResp) GetList() []*ConstructionInfoVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetConstructionInfoResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetConstructionInfoResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetConstructionInfoResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

//创建建设单位信息
type CreateOneConstructionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstructionName string `protobuf:"bytes,1,opt,name=constructionName,proto3" json:"constructionName"`
	ConstructionCode string `protobuf:"bytes,2,opt,name=constructionCode,proto3" json:"constructionCode"`
	ConstructionType string `protobuf:"bytes,3,opt,name=constructionType,proto3" json:"constructionType"`
	ManagerName      string `protobuf:"bytes,4,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone     string `protobuf:"bytes,5,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province         string `protobuf:"bytes,6,opt,name=province,proto3" json:"province"`
	City             string `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`
	Zone             string `protobuf:"bytes,8,opt,name=zone,proto3" json:"zone"`
	Memo             string `protobuf:"bytes,9,opt,name=memo,proto3" json:"memo"`
	ManagerId        int64  `protobuf:"varint,10,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateOneConstructionReq) Reset() {
	*x = CreateOneConstructionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneConstructionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneConstructionReq) ProtoMessage() {}

func (x *CreateOneConstructionReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneConstructionReq.ProtoReflect.Descriptor instead.
func (*CreateOneConstructionReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{337}
}

func (x *CreateOneConstructionReq) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *CreateOneConstructionReq) GetConstructionCode() string {
	if x != nil {
		return x.ConstructionCode
	}
	return ""
}

func (x *CreateOneConstructionReq) GetConstructionType() string {
	if x != nil {
		return x.ConstructionType
	}
	return ""
}

func (x *CreateOneConstructionReq) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *CreateOneConstructionReq) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *CreateOneConstructionReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *CreateOneConstructionReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CreateOneConstructionReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *CreateOneConstructionReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CreateOneConstructionReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CreateOneConstructionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateOneConstructionResp) Reset() {
	*x = CreateOneConstructionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneConstructionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneConstructionResp) ProtoMessage() {}

func (x *CreateOneConstructionResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneConstructionResp.ProtoReflect.Descriptor instead.
func (*CreateOneConstructionResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{338}
}

func (x *CreateOneConstructionResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//创建并上链建设单位信息
type CreateHashConstructionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstructionName string `protobuf:"bytes,1,opt,name=constructionName,proto3" json:"constructionName"`
	ConstructionCode string `protobuf:"bytes,2,opt,name=constructionCode,proto3" json:"constructionCode"`
	ConstructionType string `protobuf:"bytes,3,opt,name=constructionType,proto3" json:"constructionType"`
	ManagerName      string `protobuf:"bytes,4,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone     string `protobuf:"bytes,5,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province         string `protobuf:"bytes,6,opt,name=province,proto3" json:"province"`
	City             string `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`
	Zone             string `protobuf:"bytes,8,opt,name=zone,proto3" json:"zone"`
	Memo             string `protobuf:"bytes,9,opt,name=memo,proto3" json:"memo"`
	InfoHash         string `protobuf:"bytes,10,opt,name=infoHash,proto3" json:"infoHash"`
	ManagerId        int64  `protobuf:"varint,11,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateHashConstructionReq) Reset() {
	*x = CreateHashConstructionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHashConstructionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHashConstructionReq) ProtoMessage() {}

func (x *CreateHashConstructionReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHashConstructionReq.ProtoReflect.Descriptor instead.
func (*CreateHashConstructionReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{339}
}

func (x *CreateHashConstructionReq) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *CreateHashConstructionReq) GetConstructionCode() string {
	if x != nil {
		return x.ConstructionCode
	}
	return ""
}

func (x *CreateHashConstructionReq) GetConstructionType() string {
	if x != nil {
		return x.ConstructionType
	}
	return ""
}

func (x *CreateHashConstructionReq) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *CreateHashConstructionReq) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *CreateHashConstructionReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *CreateHashConstructionReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CreateHashConstructionReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *CreateHashConstructionReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CreateHashConstructionReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *CreateHashConstructionReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CreateHashConstructionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateHashConstructionResp) Reset() {
	*x = CreateHashConstructionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHashConstructionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHashConstructionResp) ProtoMessage() {}

func (x *CreateHashConstructionResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHashConstructionResp.ProtoReflect.Descriptor instead.
func (*CreateHashConstructionResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{340}
}

func (x *CreateHashConstructionResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//更新建设单位信息
type UpdateOneConstructionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstructionId   int64  `protobuf:"varint,1,opt,name=constructionId,proto3" json:"constructionId"`
	ConstructionCode string `protobuf:"bytes,2,opt,name=constructionCode,proto3" json:"constructionCode"`
	ConstructionName string `protobuf:"bytes,3,opt,name=constructionName,proto3" json:"constructionName"`
	ConstructionType string `protobuf:"bytes,4,opt,name=constructionType,proto3" json:"constructionType"`
	ManagerName      string `protobuf:"bytes,5,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone     string `protobuf:"bytes,6,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province         string `protobuf:"bytes,7,opt,name=province,proto3" json:"province"`
	City             string `protobuf:"bytes,8,opt,name=city,proto3" json:"city"`
	Zone             string `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone"`
	Memo             string `protobuf:"bytes,10,opt,name=memo,proto3" json:"memo"`
	ManagerId        int64  `protobuf:"varint,11,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UpdateOneConstructionReq) Reset() {
	*x = UpdateOneConstructionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOneConstructionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOneConstructionReq) ProtoMessage() {}

func (x *UpdateOneConstructionReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOneConstructionReq.ProtoReflect.Descriptor instead.
func (*UpdateOneConstructionReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{341}
}

func (x *UpdateOneConstructionReq) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *UpdateOneConstructionReq) GetConstructionCode() string {
	if x != nil {
		return x.ConstructionCode
	}
	return ""
}

func (x *UpdateOneConstructionReq) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *UpdateOneConstructionReq) GetConstructionType() string {
	if x != nil {
		return x.ConstructionType
	}
	return ""
}

func (x *UpdateOneConstructionReq) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *UpdateOneConstructionReq) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *UpdateOneConstructionReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *UpdateOneConstructionReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UpdateOneConstructionReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *UpdateOneConstructionReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UpdateOneConstructionReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UpdateOneConstructionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateOneConstructionResp) Reset() {
	*x = UpdateOneConstructionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOneConstructionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOneConstructionResp) ProtoMessage() {}

func (x *UpdateOneConstructionResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOneConstructionResp.ProtoReflect.Descriptor instead.
func (*UpdateOneConstructionResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{342}
}

func (x *UpdateOneConstructionResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//更新并上链建设单位信息
type UpdateHashConstructionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstructionId   int64  `protobuf:"varint,1,opt,name=constructionId,proto3" json:"constructionId"`
	ConstructionName string `protobuf:"bytes,2,opt,name=constructionName,proto3" json:"constructionName"`
	ConstructionType string `protobuf:"bytes,3,opt,name=constructionType,proto3" json:"constructionType"`
	ManagerName      string `protobuf:"bytes,4,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone     string `protobuf:"bytes,5,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province         string `protobuf:"bytes,6,opt,name=province,proto3" json:"province"`
	City             string `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`
	Zone             string `protobuf:"bytes,8,opt,name=zone,proto3" json:"zone"`
	Memo             string `protobuf:"bytes,9,opt,name=memo,proto3" json:"memo"`
	InfoHash         string `protobuf:"bytes,10,opt,name=infoHash,proto3" json:"infoHash"`
	ManagerId        int64  `protobuf:"varint,11,opt,name=managerId,proto3" json:"managerId"`
	ConstructionCode string `protobuf:"bytes,12,opt,name=constructionCode,proto3" json:"constructionCode"`
}

func (x *UpdateHashConstructionReq) Reset() {
	*x = UpdateHashConstructionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHashConstructionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHashConstructionReq) ProtoMessage() {}

func (x *UpdateHashConstructionReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHashConstructionReq.ProtoReflect.Descriptor instead.
func (*UpdateHashConstructionReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{343}
}

func (x *UpdateHashConstructionReq) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *UpdateHashConstructionReq) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *UpdateHashConstructionReq) GetConstructionType() string {
	if x != nil {
		return x.ConstructionType
	}
	return ""
}

func (x *UpdateHashConstructionReq) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *UpdateHashConstructionReq) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *UpdateHashConstructionReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *UpdateHashConstructionReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UpdateHashConstructionReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *UpdateHashConstructionReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UpdateHashConstructionReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *UpdateHashConstructionReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *UpdateHashConstructionReq) GetConstructionCode() string {
	if x != nil {
		return x.ConstructionCode
	}
	return ""
}

type UpdateHashConstructionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateHashConstructionResp) Reset() {
	*x = UpdateHashConstructionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHashConstructionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHashConstructionResp) ProtoMessage() {}

func (x *UpdateHashConstructionResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHashConstructionResp.ProtoReflect.Descriptor instead.
func (*UpdateHashConstructionResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{344}
}

func (x *UpdateHashConstructionResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type UploadConstructionLogoUrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogoUrl   string `protobuf:"bytes,1,opt,name=logoUrl,proto3" json:"logoUrl"`
	ManagerId int64  `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UploadConstructionLogoUrlReq) Reset() {
	*x = UploadConstructionLogoUrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadConstructionLogoUrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadConstructionLogoUrlReq) ProtoMessage() {}

func (x *UploadConstructionLogoUrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadConstructionLogoUrlReq.ProtoReflect.Descriptor instead.
func (*UploadConstructionLogoUrlReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{345}
}

func (x *UploadConstructionLogoUrlReq) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *UploadConstructionLogoUrlReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UploadConstructionLogoUrlResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UploadConstructionLogoUrlResp) Reset() {
	*x = UploadConstructionLogoUrlResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadConstructionLogoUrlResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadConstructionLogoUrlResp) ProtoMessage() {}

func (x *UploadConstructionLogoUrlResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadConstructionLogoUrlResp.ProtoReflect.Descriptor instead.
func (*UploadConstructionLogoUrlResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{346}
}

func (x *UploadConstructionLogoUrlResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//删除建设单位信息
type DeleteConstructionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstructionId int64 `protobuf:"varint,1,opt,name=constructionId,proto3" json:"constructionId"`
	ManagerId      int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *DeleteConstructionReq) Reset() {
	*x = DeleteConstructionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConstructionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConstructionReq) ProtoMessage() {}

func (x *DeleteConstructionReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConstructionReq.ProtoReflect.Descriptor instead.
func (*DeleteConstructionReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{347}
}

func (x *DeleteConstructionReq) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *DeleteConstructionReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type DeleteConstructionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteConstructionResp) Reset() {
	*x = DeleteConstructionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConstructionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConstructionResp) ProtoMessage() {}

func (x *DeleteConstructionResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConstructionResp.ProtoReflect.Descriptor instead.
func (*DeleteConstructionResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{348}
}

//获取建设单位hash
type GetConstructionHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId       int64   `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ConstructionIds []int64 `protobuf:"varint,2,rep,packed,name=constructionIds,proto3" json:"constructionIds"`
}

func (x *GetConstructionHashReq) Reset() {
	*x = GetConstructionHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConstructionHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConstructionHashReq) ProtoMessage() {}

func (x *GetConstructionHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConstructionHashReq.ProtoReflect.Descriptor instead.
func (*GetConstructionHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{349}
}

func (x *GetConstructionHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetConstructionHashReq) GetConstructionIds() []int64 {
	if x != nil {
		return x.ConstructionIds
	}
	return nil
}

type GetConstructionHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ConstructionHashVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                 `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                 `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetConstructionHashResp) Reset() {
	*x = GetConstructionHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConstructionHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConstructionHashResp) ProtoMessage() {}

func (x *GetConstructionHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConstructionHashResp.ProtoReflect.Descriptor instead.
func (*GetConstructionHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{350}
}

func (x *GetConstructionHashResp) GetList() []*ConstructionHashVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetConstructionHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetConstructionHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetConstructionHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ConstructionHashVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstructionId   int64                  `protobuf:"varint,1,opt,name=constructionId,proto3" json:"constructionId"`
	ConstructionCode string                 `protobuf:"bytes,2,opt,name=constructionCode,proto3" json:"constructionCode"`
	InfoHash         string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
}

func (x *ConstructionHashVo) Reset() {
	*x = ConstructionHashVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstructionHashVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstructionHashVo) ProtoMessage() {}

func (x *ConstructionHashVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstructionHashVo.ProtoReflect.Descriptor instead.
func (*ConstructionHashVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{351}
}

func (x *ConstructionHashVo) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *ConstructionHashVo) GetConstructionCode() string {
	if x != nil {
		return x.ConstructionCode
	}
	return ""
}

func (x *ConstructionHashVo) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *ConstructionHashVo) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

//查询施工单位列表
type ListBuildReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildCode    string  `protobuf:"bytes,1,opt,name=buildCode,proto3" json:"buildCode"`
	BuildName    string  `protobuf:"bytes,2,opt,name=buildName,proto3" json:"buildName"`
	Province     string  `protobuf:"bytes,3,opt,name=province,proto3" json:"province"`
	City         string  `protobuf:"bytes,4,opt,name=city,proto3" json:"city"`
	Zone         string  `protobuf:"bytes,5,opt,name=zone,proto3" json:"zone"`
	ActiveStatus string  `protobuf:"bytes,6,opt,name=activeStatus,proto3" json:"activeStatus"`
	ManagerId    int64   `protobuf:"varint,7,opt,name=managerId,proto3" json:"managerId"`
	Page         *Page   `protobuf:"bytes,8,opt,name=page,proto3" json:"page"`
	BuildIds     []int64 `protobuf:"varint,9,rep,packed,name=buildIds,proto3" json:"buildIds"`
}

func (x *ListBuildReq) Reset() {
	*x = ListBuildReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBuildReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuildReq) ProtoMessage() {}

func (x *ListBuildReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuildReq.ProtoReflect.Descriptor instead.
func (*ListBuildReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{352}
}

func (x *ListBuildReq) GetBuildCode() string {
	if x != nil {
		return x.BuildCode
	}
	return ""
}

func (x *ListBuildReq) GetBuildName() string {
	if x != nil {
		return x.BuildName
	}
	return ""
}

func (x *ListBuildReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ListBuildReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ListBuildReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ListBuildReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *ListBuildReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListBuildReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListBuildReq) GetBuildIds() []int64 {
	if x != nil {
		return x.BuildIds
	}
	return nil
}

type ListBuildResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*BuildVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64      `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64      `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64      `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListBuildResp) Reset() {
	*x = ListBuildResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBuildResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuildResp) ProtoMessage() {}

func (x *ListBuildResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuildResp.ProtoReflect.Descriptor instead.
func (*ListBuildResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{353}
}

func (x *ListBuildResp) GetList() []*BuildVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListBuildResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBuildResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListBuildResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type BuildVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildId      int64                  `protobuf:"varint,1,opt,name=buildId,proto3" json:"buildId"`
	BuildCode    string                 `protobuf:"bytes,2,opt,name=buildCode,proto3" json:"buildCode"`
	BuildName    string                 `protobuf:"bytes,3,opt,name=buildName,proto3" json:"buildName"`
	BuildType    string                 `protobuf:"bytes,4,opt,name=buildType,proto3" json:"buildType"`
	ManagerName  string                 `protobuf:"bytes,5,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone string                 `protobuf:"bytes,6,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province     string                 `protobuf:"bytes,7,opt,name=province,proto3" json:"province"`
	City         string                 `protobuf:"bytes,8,opt,name=city,proto3" json:"city"`
	Zone         string                 `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone"`
	ActiveStatus string                 `protobuf:"bytes,10,opt,name=activeStatus,proto3" json:"activeStatus"`
	LogoUrl      string                 `protobuf:"bytes,11,opt,name=logoUrl,proto3" json:"logoUrl"`
	Memo         string                 `protobuf:"bytes,12,opt,name=memo,proto3" json:"memo"`
	CreatedBy    int64                  `protobuf:"varint,13,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy    int64                  `protobuf:"varint,15,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updatedAt,proto3" json:"updatedAt"`
	HashInfo     string                 `protobuf:"bytes,17,opt,name=hashInfo,proto3" json:"hashInfo"`
}

func (x *BuildVo) Reset() {
	*x = BuildVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildVo) ProtoMessage() {}

func (x *BuildVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildVo.ProtoReflect.Descriptor instead.
func (*BuildVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{354}
}

func (x *BuildVo) GetBuildId() int64 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

func (x *BuildVo) GetBuildCode() string {
	if x != nil {
		return x.BuildCode
	}
	return ""
}

func (x *BuildVo) GetBuildName() string {
	if x != nil {
		return x.BuildName
	}
	return ""
}

func (x *BuildVo) GetBuildType() string {
	if x != nil {
		return x.BuildType
	}
	return ""
}

func (x *BuildVo) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *BuildVo) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *BuildVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *BuildVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *BuildVo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *BuildVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *BuildVo) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *BuildVo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *BuildVo) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *BuildVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *BuildVo) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *BuildVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *BuildVo) GetHashInfo() string {
	if x != nil {
		return x.HashInfo
	}
	return ""
}

//查询施工单位(通用接口)
type CommonBuildReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildName    string  `protobuf:"bytes,1,opt,name=buildName,proto3" json:"buildName"`
	BuildCode    string  `protobuf:"bytes,2,opt,name=buildCode,proto3" json:"buildCode"`
	ActiveStatus string  `protobuf:"bytes,3,opt,name=activeStatus,proto3" json:"activeStatus"`
	ManagerId    int64   `protobuf:"varint,4,opt,name=managerId,proto3" json:"managerId"`
	Page         *Page   `protobuf:"bytes,5,opt,name=page,proto3" json:"page"`
	BuildIds     []int64 `protobuf:"varint,6,rep,packed,name=buildIds,proto3" json:"buildIds"`
}

func (x *CommonBuildReq) Reset() {
	*x = CommonBuildReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonBuildReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonBuildReq) ProtoMessage() {}

func (x *CommonBuildReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonBuildReq.ProtoReflect.Descriptor instead.
func (*CommonBuildReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{355}
}

func (x *CommonBuildReq) GetBuildName() string {
	if x != nil {
		return x.BuildName
	}
	return ""
}

func (x *CommonBuildReq) GetBuildCode() string {
	if x != nil {
		return x.BuildCode
	}
	return ""
}

func (x *CommonBuildReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *CommonBuildReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CommonBuildReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *CommonBuildReq) GetBuildIds() []int64 {
	if x != nil {
		return x.BuildIds
	}
	return nil
}

type CommonBuildResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*CommonBuildVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64            `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64            `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64            `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *CommonBuildResp) Reset() {
	*x = CommonBuildResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonBuildResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonBuildResp) ProtoMessage() {}

func (x *CommonBuildResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonBuildResp.ProtoReflect.Descriptor instead.
func (*CommonBuildResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{356}
}

func (x *CommonBuildResp) GetList() []*CommonBuildVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CommonBuildResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CommonBuildResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CommonBuildResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type CommonBuildVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildId   int64  `protobuf:"varint,1,opt,name=buildId,proto3" json:"buildId"`
	BuildName string `protobuf:"bytes,2,opt,name=buildName,proto3" json:"buildName"`
	BuildCode string `protobuf:"bytes,3,opt,name=buildCode,proto3" json:"buildCode"`
	LogoUrl   string `protobuf:"bytes,4,opt,name=logoUrl,proto3" json:"logoUrl"`
}

func (x *CommonBuildVo) Reset() {
	*x = CommonBuildVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonBuildVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonBuildVo) ProtoMessage() {}

func (x *CommonBuildVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonBuildVo.ProtoReflect.Descriptor instead.
func (*CommonBuildVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{357}
}

func (x *CommonBuildVo) GetBuildId() int64 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

func (x *CommonBuildVo) GetBuildName() string {
	if x != nil {
		return x.BuildName
	}
	return ""
}

func (x *CommonBuildVo) GetBuildCode() string {
	if x != nil {
		return x.BuildCode
	}
	return ""
}

func (x *CommonBuildVo) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

//获取施工单位详情
type GetBuildInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildId   int64  `protobuf:"varint,1,opt,name=buildId,proto3" json:"buildId"`
	BuildCode string `protobuf:"bytes,2,opt,name=buildCode,proto3" json:"buildCode"`
	ManagerId int64  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
	Page      *Page  `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
}

func (x *GetBuildInfoReq) Reset() {
	*x = GetBuildInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuildInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuildInfoReq) ProtoMessage() {}

func (x *GetBuildInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuildInfoReq.ProtoReflect.Descriptor instead.
func (*GetBuildInfoReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{358}
}

func (x *GetBuildInfoReq) GetBuildId() int64 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

func (x *GetBuildInfoReq) GetBuildCode() string {
	if x != nil {
		return x.BuildCode
	}
	return ""
}

func (x *GetBuildInfoReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetBuildInfoReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type BuildInfoVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildId      int64                  `protobuf:"varint,1,opt,name=buildId,proto3" json:"buildId"`
	BuildCode    string                 `protobuf:"bytes,2,opt,name=buildCode,proto3" json:"buildCode"`
	BuildName    string                 `protobuf:"bytes,3,opt,name=buildName,proto3" json:"buildName"`
	BuildType    string                 `protobuf:"bytes,4,opt,name=buildType,proto3" json:"buildType"`
	ManagerName  string                 `protobuf:"bytes,5,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone string                 `protobuf:"bytes,6,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province     string                 `protobuf:"bytes,7,opt,name=province,proto3" json:"province"`
	City         string                 `protobuf:"bytes,8,opt,name=city,proto3" json:"city"`
	Zone         string                 `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone"`
	ActiveStatus string                 `protobuf:"bytes,10,opt,name=activeStatus,proto3" json:"activeStatus"`
	LogoUrl      string                 `protobuf:"bytes,11,opt,name=logoUrl,proto3" json:"logoUrl"`
	Memo         string                 `protobuf:"bytes,12,opt,name=memo,proto3" json:"memo"`
	CreatedBy    int64                  `protobuf:"varint,13,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy    int64                  `protobuf:"varint,15,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updatedAt,proto3" json:"updatedAt"`
	HashInfo     string                 `protobuf:"bytes,17,opt,name=hashInfo,proto3" json:"hashInfo"`
}

func (x *BuildInfoVo) Reset() {
	*x = BuildInfoVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildInfoVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildInfoVo) ProtoMessage() {}

func (x *BuildInfoVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildInfoVo.ProtoReflect.Descriptor instead.
func (*BuildInfoVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{359}
}

func (x *BuildInfoVo) GetBuildId() int64 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

func (x *BuildInfoVo) GetBuildCode() string {
	if x != nil {
		return x.BuildCode
	}
	return ""
}

func (x *BuildInfoVo) GetBuildName() string {
	if x != nil {
		return x.BuildName
	}
	return ""
}

func (x *BuildInfoVo) GetBuildType() string {
	if x != nil {
		return x.BuildType
	}
	return ""
}

func (x *BuildInfoVo) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *BuildInfoVo) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *BuildInfoVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *BuildInfoVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *BuildInfoVo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *BuildInfoVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *BuildInfoVo) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *BuildInfoVo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *BuildInfoVo) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *BuildInfoVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *BuildInfoVo) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *BuildInfoVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *BuildInfoVo) GetHashInfo() string {
	if x != nil {
		return x.HashInfo
	}
	return ""
}

type GetBuildInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*BuildInfoVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64          `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64          `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetBuildInfoResp) Reset() {
	*x = GetBuildInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuildInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuildInfoResp) ProtoMessage() {}

func (x *GetBuildInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuildInfoResp.ProtoReflect.Descriptor instead.
func (*GetBuildInfoResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{360}
}

func (x *GetBuildInfoResp) GetList() []*BuildInfoVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetBuildInfoResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetBuildInfoResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetBuildInfoResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

//创建施工单位信息
type CreateOneBuildReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildName    string `protobuf:"bytes,1,opt,name=buildName,proto3" json:"buildName"`
	BuildCode    string `protobuf:"bytes,2,opt,name=buildCode,proto3" json:"buildCode"`
	BuildType    string `protobuf:"bytes,3,opt,name=buildType,proto3" json:"buildType"`
	ManagerName  string `protobuf:"bytes,4,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone string `protobuf:"bytes,5,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province     string `protobuf:"bytes,6,opt,name=province,proto3" json:"province"`
	City         string `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`
	Zone         string `protobuf:"bytes,8,opt,name=zone,proto3" json:"zone"`
	Memo         string `protobuf:"bytes,9,opt,name=memo,proto3" json:"memo"`
	ManagerId    int64  `protobuf:"varint,10,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateOneBuildReq) Reset() {
	*x = CreateOneBuildReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneBuildReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneBuildReq) ProtoMessage() {}

func (x *CreateOneBuildReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneBuildReq.ProtoReflect.Descriptor instead.
func (*CreateOneBuildReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{361}
}

func (x *CreateOneBuildReq) GetBuildName() string {
	if x != nil {
		return x.BuildName
	}
	return ""
}

func (x *CreateOneBuildReq) GetBuildCode() string {
	if x != nil {
		return x.BuildCode
	}
	return ""
}

func (x *CreateOneBuildReq) GetBuildType() string {
	if x != nil {
		return x.BuildType
	}
	return ""
}

func (x *CreateOneBuildReq) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *CreateOneBuildReq) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *CreateOneBuildReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *CreateOneBuildReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CreateOneBuildReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *CreateOneBuildReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CreateOneBuildReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CreateOneBuildResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateOneBuildResp) Reset() {
	*x = CreateOneBuildResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneBuildResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneBuildResp) ProtoMessage() {}

func (x *CreateOneBuildResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneBuildResp.ProtoReflect.Descriptor instead.
func (*CreateOneBuildResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{362}
}

func (x *CreateOneBuildResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//创建并上链施工单位信息
type CreateHashBuildReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildName    string `protobuf:"bytes,1,opt,name=buildName,proto3" json:"buildName"`
	BuildCode    string `protobuf:"bytes,2,opt,name=buildCode,proto3" json:"buildCode"`
	BuildType    string `protobuf:"bytes,3,opt,name=buildType,proto3" json:"buildType"`
	ManagerName  string `protobuf:"bytes,4,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone string `protobuf:"bytes,5,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province     string `protobuf:"bytes,6,opt,name=province,proto3" json:"province"`
	City         string `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`
	Zone         string `protobuf:"bytes,8,opt,name=zone,proto3" json:"zone"`
	Memo         string `protobuf:"bytes,9,opt,name=memo,proto3" json:"memo"`
	InfoHash     string `protobuf:"bytes,10,opt,name=infoHash,proto3" json:"infoHash"`
	ManagerId    int64  `protobuf:"varint,11,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateHashBuildReq) Reset() {
	*x = CreateHashBuildReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHashBuildReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHashBuildReq) ProtoMessage() {}

func (x *CreateHashBuildReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHashBuildReq.ProtoReflect.Descriptor instead.
func (*CreateHashBuildReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{363}
}

func (x *CreateHashBuildReq) GetBuildName() string {
	if x != nil {
		return x.BuildName
	}
	return ""
}

func (x *CreateHashBuildReq) GetBuildCode() string {
	if x != nil {
		return x.BuildCode
	}
	return ""
}

func (x *CreateHashBuildReq) GetBuildType() string {
	if x != nil {
		return x.BuildType
	}
	return ""
}

func (x *CreateHashBuildReq) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *CreateHashBuildReq) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *CreateHashBuildReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *CreateHashBuildReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CreateHashBuildReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *CreateHashBuildReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CreateHashBuildReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *CreateHashBuildReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CreateHashBuildResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateHashBuildResp) Reset() {
	*x = CreateHashBuildResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHashBuildResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHashBuildResp) ProtoMessage() {}

func (x *CreateHashBuildResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHashBuildResp.ProtoReflect.Descriptor instead.
func (*CreateHashBuildResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{364}
}

func (x *CreateHashBuildResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//更新施工单位信息
type UpdateOneBuildReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildId      int64  `protobuf:"varint,1,opt,name=buildId,proto3" json:"buildId"`
	BuildCode    string `protobuf:"bytes,2,opt,name=buildCode,proto3" json:"buildCode"`
	BuildName    string `protobuf:"bytes,3,opt,name=buildName,proto3" json:"buildName"`
	BuildType    string `protobuf:"bytes,4,opt,name=buildType,proto3" json:"buildType"`
	ManagerName  string `protobuf:"bytes,5,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone string `protobuf:"bytes,6,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province     string `protobuf:"bytes,7,opt,name=province,proto3" json:"province"`
	City         string `protobuf:"bytes,8,opt,name=city,proto3" json:"city"`
	Zone         string `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone"`
	Memo         string `protobuf:"bytes,10,opt,name=memo,proto3" json:"memo"`
	ManagerId    int64  `protobuf:"varint,11,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UpdateOneBuildReq) Reset() {
	*x = UpdateOneBuildReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOneBuildReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOneBuildReq) ProtoMessage() {}

func (x *UpdateOneBuildReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOneBuildReq.ProtoReflect.Descriptor instead.
func (*UpdateOneBuildReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{365}
}

func (x *UpdateOneBuildReq) GetBuildId() int64 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

func (x *UpdateOneBuildReq) GetBuildCode() string {
	if x != nil {
		return x.BuildCode
	}
	return ""
}

func (x *UpdateOneBuildReq) GetBuildName() string {
	if x != nil {
		return x.BuildName
	}
	return ""
}

func (x *UpdateOneBuildReq) GetBuildType() string {
	if x != nil {
		return x.BuildType
	}
	return ""
}

func (x *UpdateOneBuildReq) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *UpdateOneBuildReq) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *UpdateOneBuildReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *UpdateOneBuildReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UpdateOneBuildReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *UpdateOneBuildReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UpdateOneBuildReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UpdateOneBuildResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateOneBuildResp) Reset() {
	*x = UpdateOneBuildResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOneBuildResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOneBuildResp) ProtoMessage() {}

func (x *UpdateOneBuildResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOneBuildResp.ProtoReflect.Descriptor instead.
func (*UpdateOneBuildResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{366}
}

func (x *UpdateOneBuildResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//更新并上链施工单位信息
type UpdateHashBuildReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildId      int64  `protobuf:"varint,1,opt,name=buildId,proto3" json:"buildId"`
	BuildName    string `protobuf:"bytes,2,opt,name=buildName,proto3" json:"buildName"`
	BuildType    string `protobuf:"bytes,3,opt,name=buildType,proto3" json:"buildType"`
	ManagerName  string `protobuf:"bytes,4,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone string `protobuf:"bytes,5,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province     string `protobuf:"bytes,6,opt,name=province,proto3" json:"province"`
	City         string `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`
	Zone         string `protobuf:"bytes,8,opt,name=zone,proto3" json:"zone"`
	Memo         string `protobuf:"bytes,9,opt,name=memo,proto3" json:"memo"`
	InfoHash     string `protobuf:"bytes,10,opt,name=infoHash,proto3" json:"infoHash"`
	ManagerId    int64  `protobuf:"varint,11,opt,name=managerId,proto3" json:"managerId"`
	BuildCode    string `protobuf:"bytes,12,opt,name=buildCode,proto3" json:"buildCode"`
}

func (x *UpdateHashBuildReq) Reset() {
	*x = UpdateHashBuildReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHashBuildReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHashBuildReq) ProtoMessage() {}

func (x *UpdateHashBuildReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHashBuildReq.ProtoReflect.Descriptor instead.
func (*UpdateHashBuildReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{367}
}

func (x *UpdateHashBuildReq) GetBuildId() int64 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

func (x *UpdateHashBuildReq) GetBuildName() string {
	if x != nil {
		return x.BuildName
	}
	return ""
}

func (x *UpdateHashBuildReq) GetBuildType() string {
	if x != nil {
		return x.BuildType
	}
	return ""
}

func (x *UpdateHashBuildReq) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *UpdateHashBuildReq) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *UpdateHashBuildReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *UpdateHashBuildReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UpdateHashBuildReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *UpdateHashBuildReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UpdateHashBuildReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *UpdateHashBuildReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *UpdateHashBuildReq) GetBuildCode() string {
	if x != nil {
		return x.BuildCode
	}
	return ""
}

type UpdateHashBuildResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateHashBuildResp) Reset() {
	*x = UpdateHashBuildResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHashBuildResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHashBuildResp) ProtoMessage() {}

func (x *UpdateHashBuildResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHashBuildResp.ProtoReflect.Descriptor instead.
func (*UpdateHashBuildResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{368}
}

func (x *UpdateHashBuildResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type UploadBuildLogoUrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogoUrl   string `protobuf:"bytes,1,opt,name=logoUrl,proto3" json:"logoUrl"`
	ManagerId int64  `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UploadBuildLogoUrlReq) Reset() {
	*x = UploadBuildLogoUrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadBuildLogoUrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadBuildLogoUrlReq) ProtoMessage() {}

func (x *UploadBuildLogoUrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadBuildLogoUrlReq.ProtoReflect.Descriptor instead.
func (*UploadBuildLogoUrlReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{369}
}

func (x *UploadBuildLogoUrlReq) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *UploadBuildLogoUrlReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UploadBuildLogoUrlResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UploadBuildLogoUrlResp) Reset() {
	*x = UploadBuildLogoUrlResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadBuildLogoUrlResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadBuildLogoUrlResp) ProtoMessage() {}

func (x *UploadBuildLogoUrlResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadBuildLogoUrlResp.ProtoReflect.Descriptor instead.
func (*UploadBuildLogoUrlResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{370}
}

func (x *UploadBuildLogoUrlResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//删除施工单位信息
type DeleteBuildReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildId   int64 `protobuf:"varint,1,opt,name=buildId,proto3" json:"buildId"`
	ManagerId int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *DeleteBuildReq) Reset() {
	*x = DeleteBuildReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBuildReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBuildReq) ProtoMessage() {}

func (x *DeleteBuildReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBuildReq.ProtoReflect.Descriptor instead.
func (*DeleteBuildReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{371}
}

func (x *DeleteBuildReq) GetBuildId() int64 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

func (x *DeleteBuildReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type DeleteBuildResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteBuildResp) Reset() {
	*x = DeleteBuildResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBuildResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBuildResp) ProtoMessage() {}

func (x *DeleteBuildResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBuildResp.ProtoReflect.Descriptor instead.
func (*DeleteBuildResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{372}
}

//获取施工单位hash
type GetBuildHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int64   `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	BuildIds  []int64 `protobuf:"varint,2,rep,packed,name=buildIds,proto3" json:"buildIds"`
}

func (x *GetBuildHashReq) Reset() {
	*x = GetBuildHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuildHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuildHashReq) ProtoMessage() {}

func (x *GetBuildHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuildHashReq.ProtoReflect.Descriptor instead.
func (*GetBuildHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{373}
}

func (x *GetBuildHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetBuildHashReq) GetBuildIds() []int64 {
	if x != nil {
		return x.BuildIds
	}
	return nil
}

type GetBuildHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*BuildHashVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64          `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64          `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetBuildHashResp) Reset() {
	*x = GetBuildHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuildHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuildHashResp) ProtoMessage() {}

func (x *GetBuildHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuildHashResp.ProtoReflect.Descriptor instead.
func (*GetBuildHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{374}
}

func (x *GetBuildHashResp) GetList() []*BuildHashVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetBuildHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetBuildHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetBuildHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type BuildHashVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildId      int64                  `protobuf:"varint,1,opt,name=buildId,proto3" json:"buildId"`
	BuildCode    string                 `protobuf:"bytes,2,opt,name=buildCode,proto3" json:"buildCode"`
	InfoHash     string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
}

func (x *BuildHashVo) Reset() {
	*x = BuildHashVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildHashVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildHashVo) ProtoMessage() {}

func (x *BuildHashVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildHashVo.ProtoReflect.Descriptor instead.
func (*BuildHashVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{375}
}

func (x *BuildHashVo) GetBuildId() int64 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

func (x *BuildHashVo) GetBuildCode() string {
	if x != nil {
		return x.BuildCode
	}
	return ""
}

func (x *BuildHashVo) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *BuildHashVo) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

//查询监理单位列表
type ListSupervisorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupervisorCode string  `protobuf:"bytes,1,opt,name=supervisorCode,proto3" json:"supervisorCode"`
	SupervisorName string  `protobuf:"bytes,2,opt,name=supervisorName,proto3" json:"supervisorName"`
	Province       string  `protobuf:"bytes,3,opt,name=province,proto3" json:"province"`
	City           string  `protobuf:"bytes,4,opt,name=city,proto3" json:"city"`
	Zone           string  `protobuf:"bytes,5,opt,name=zone,proto3" json:"zone"`
	ActiveStatus   string  `protobuf:"bytes,6,opt,name=activeStatus,proto3" json:"activeStatus"`
	ManagerId      int64   `protobuf:"varint,7,opt,name=managerId,proto3" json:"managerId"`
	Page           *Page   `protobuf:"bytes,8,opt,name=page,proto3" json:"page"`
	SupervisorIds  []int64 `protobuf:"varint,9,rep,packed,name=supervisorIds,proto3" json:"supervisorIds"`
}

func (x *ListSupervisorReq) Reset() {
	*x = ListSupervisorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSupervisorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSupervisorReq) ProtoMessage() {}

func (x *ListSupervisorReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSupervisorReq.ProtoReflect.Descriptor instead.
func (*ListSupervisorReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{376}
}

func (x *ListSupervisorReq) GetSupervisorCode() string {
	if x != nil {
		return x.SupervisorCode
	}
	return ""
}

func (x *ListSupervisorReq) GetSupervisorName() string {
	if x != nil {
		return x.SupervisorName
	}
	return ""
}

func (x *ListSupervisorReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ListSupervisorReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ListSupervisorReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ListSupervisorReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *ListSupervisorReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListSupervisorReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListSupervisorReq) GetSupervisorIds() []int64 {
	if x != nil {
		return x.SupervisorIds
	}
	return nil
}

type ListSupervisorResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*SupervisorVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64           `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64           `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListSupervisorResp) Reset() {
	*x = ListSupervisorResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSupervisorResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSupervisorResp) ProtoMessage() {}

func (x *ListSupervisorResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSupervisorResp.ProtoReflect.Descriptor instead.
func (*ListSupervisorResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{377}
}

func (x *ListSupervisorResp) GetList() []*SupervisorVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListSupervisorResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListSupervisorResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSupervisorResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type SupervisorVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupervisorId   int64                  `protobuf:"varint,1,opt,name=supervisorId,proto3" json:"supervisorId"`
	SupervisorCode string                 `protobuf:"bytes,2,opt,name=supervisorCode,proto3" json:"supervisorCode"`
	SupervisorName string                 `protobuf:"bytes,3,opt,name=supervisorName,proto3" json:"supervisorName"`
	SupervisorType string                 `protobuf:"bytes,4,opt,name=supervisorType,proto3" json:"supervisorType"`
	ManagerName    string                 `protobuf:"bytes,5,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone   string                 `protobuf:"bytes,6,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province       string                 `protobuf:"bytes,7,opt,name=province,proto3" json:"province"`
	City           string                 `protobuf:"bytes,8,opt,name=city,proto3" json:"city"`
	Zone           string                 `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone"`
	ActiveStatus   string                 `protobuf:"bytes,10,opt,name=activeStatus,proto3" json:"activeStatus"`
	LogoUrl        string                 `protobuf:"bytes,11,opt,name=logoUrl,proto3" json:"logoUrl"`
	Memo           string                 `protobuf:"bytes,12,opt,name=memo,proto3" json:"memo"`
	CreatedBy      int64                  `protobuf:"varint,13,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy      int64                  `protobuf:"varint,15,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updatedAt,proto3" json:"updatedAt"`
	HashInfo       string                 `protobuf:"bytes,17,opt,name=hashInfo,proto3" json:"hashInfo"`
}

func (x *SupervisorVo) Reset() {
	*x = SupervisorVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupervisorVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupervisorVo) ProtoMessage() {}

func (x *SupervisorVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupervisorVo.ProtoReflect.Descriptor instead.
func (*SupervisorVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{378}
}

func (x *SupervisorVo) GetSupervisorId() int64 {
	if x != nil {
		return x.SupervisorId
	}
	return 0
}

func (x *SupervisorVo) GetSupervisorCode() string {
	if x != nil {
		return x.SupervisorCode
	}
	return ""
}

func (x *SupervisorVo) GetSupervisorName() string {
	if x != nil {
		return x.SupervisorName
	}
	return ""
}

func (x *SupervisorVo) GetSupervisorType() string {
	if x != nil {
		return x.SupervisorType
	}
	return ""
}

func (x *SupervisorVo) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *SupervisorVo) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *SupervisorVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *SupervisorVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *SupervisorVo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *SupervisorVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *SupervisorVo) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *SupervisorVo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *SupervisorVo) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *SupervisorVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SupervisorVo) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *SupervisorVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SupervisorVo) GetHashInfo() string {
	if x != nil {
		return x.HashInfo
	}
	return ""
}

//查询监理单位(通用接口)
type CommonSupervisorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupervisorName string  `protobuf:"bytes,1,opt,name=supervisorName,proto3" json:"supervisorName"`
	SupervisorCode string  `protobuf:"bytes,2,opt,name=supervisorCode,proto3" json:"supervisorCode"`
	ActiveStatus   string  `protobuf:"bytes,3,opt,name=activeStatus,proto3" json:"activeStatus"`
	ManagerId      int64   `protobuf:"varint,4,opt,name=managerId,proto3" json:"managerId"`
	Page           *Page   `protobuf:"bytes,5,opt,name=page,proto3" json:"page"`
	SupervisorIds  []int64 `protobuf:"varint,6,rep,packed,name=supervisorIds,proto3" json:"supervisorIds"`
}

func (x *CommonSupervisorReq) Reset() {
	*x = CommonSupervisorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonSupervisorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonSupervisorReq) ProtoMessage() {}

func (x *CommonSupervisorReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonSupervisorReq.ProtoReflect.Descriptor instead.
func (*CommonSupervisorReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{379}
}

func (x *CommonSupervisorReq) GetSupervisorName() string {
	if x != nil {
		return x.SupervisorName
	}
	return ""
}

func (x *CommonSupervisorReq) GetSupervisorCode() string {
	if x != nil {
		return x.SupervisorCode
	}
	return ""
}

func (x *CommonSupervisorReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *CommonSupervisorReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CommonSupervisorReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *CommonSupervisorReq) GetSupervisorIds() []int64 {
	if x != nil {
		return x.SupervisorIds
	}
	return nil
}

type CommonSupervisorResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*CommonSupervisorVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                 `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                 `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *CommonSupervisorResp) Reset() {
	*x = CommonSupervisorResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonSupervisorResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonSupervisorResp) ProtoMessage() {}

func (x *CommonSupervisorResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonSupervisorResp.ProtoReflect.Descriptor instead.
func (*CommonSupervisorResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{380}
}

func (x *CommonSupervisorResp) GetList() []*CommonSupervisorVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CommonSupervisorResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CommonSupervisorResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CommonSupervisorResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type CommonSupervisorVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupervisorId   int64  `protobuf:"varint,1,opt,name=supervisorId,proto3" json:"supervisorId"`
	SupervisorName string `protobuf:"bytes,2,opt,name=supervisorName,proto3" json:"supervisorName"`
	SupervisorCode string `protobuf:"bytes,3,opt,name=supervisorCode,proto3" json:"supervisorCode"`
	LogoUrl        string `protobuf:"bytes,4,opt,name=logoUrl,proto3" json:"logoUrl"`
}

func (x *CommonSupervisorVo) Reset() {
	*x = CommonSupervisorVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonSupervisorVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonSupervisorVo) ProtoMessage() {}

func (x *CommonSupervisorVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonSupervisorVo.ProtoReflect.Descriptor instead.
func (*CommonSupervisorVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{381}
}

func (x *CommonSupervisorVo) GetSupervisorId() int64 {
	if x != nil {
		return x.SupervisorId
	}
	return 0
}

func (x *CommonSupervisorVo) GetSupervisorName() string {
	if x != nil {
		return x.SupervisorName
	}
	return ""
}

func (x *CommonSupervisorVo) GetSupervisorCode() string {
	if x != nil {
		return x.SupervisorCode
	}
	return ""
}

func (x *CommonSupervisorVo) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

//获取监理单位详情
type GetSupervisorInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupervisorId   int64  `protobuf:"varint,1,opt,name=supervisorId,proto3" json:"supervisorId"`
	SupervisorCode string `protobuf:"bytes,2,opt,name=supervisorCode,proto3" json:"supervisorCode"`
	ManagerId      int64  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
	Page           *Page  `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
}

func (x *GetSupervisorInfoReq) Reset() {
	*x = GetSupervisorInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSupervisorInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSupervisorInfoReq) ProtoMessage() {}

func (x *GetSupervisorInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSupervisorInfoReq.ProtoReflect.Descriptor instead.
func (*GetSupervisorInfoReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{382}
}

func (x *GetSupervisorInfoReq) GetSupervisorId() int64 {
	if x != nil {
		return x.SupervisorId
	}
	return 0
}

func (x *GetSupervisorInfoReq) GetSupervisorCode() string {
	if x != nil {
		return x.SupervisorCode
	}
	return ""
}

func (x *GetSupervisorInfoReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetSupervisorInfoReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type SupervisorInfoVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupervisorId   int64                  `protobuf:"varint,1,opt,name=supervisorId,proto3" json:"supervisorId"`
	SupervisorCode string                 `protobuf:"bytes,2,opt,name=supervisorCode,proto3" json:"supervisorCode"`
	SupervisorName string                 `protobuf:"bytes,3,opt,name=supervisorName,proto3" json:"supervisorName"`
	SupervisorType string                 `protobuf:"bytes,4,opt,name=supervisorType,proto3" json:"supervisorType"`
	ManagerName    string                 `protobuf:"bytes,5,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone   string                 `protobuf:"bytes,6,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province       string                 `protobuf:"bytes,7,opt,name=province,proto3" json:"province"`
	City           string                 `protobuf:"bytes,8,opt,name=city,proto3" json:"city"`
	Zone           string                 `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone"`
	ActiveStatus   string                 `protobuf:"bytes,10,opt,name=activeStatus,proto3" json:"activeStatus"`
	LogoUrl        string                 `protobuf:"bytes,11,opt,name=logoUrl,proto3" json:"logoUrl"`
	Memo           string                 `protobuf:"bytes,12,opt,name=memo,proto3" json:"memo"`
	CreatedBy      int64                  `protobuf:"varint,13,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy      int64                  `protobuf:"varint,15,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updatedAt,proto3" json:"updatedAt"`
	HashInfo       string                 `protobuf:"bytes,17,opt,name=hashInfo,proto3" json:"hashInfo"`
}

func (x *SupervisorInfoVo) Reset() {
	*x = SupervisorInfoVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupervisorInfoVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupervisorInfoVo) ProtoMessage() {}

func (x *SupervisorInfoVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupervisorInfoVo.ProtoReflect.Descriptor instead.
func (*SupervisorInfoVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{383}
}

func (x *SupervisorInfoVo) GetSupervisorId() int64 {
	if x != nil {
		return x.SupervisorId
	}
	return 0
}

func (x *SupervisorInfoVo) GetSupervisorCode() string {
	if x != nil {
		return x.SupervisorCode
	}
	return ""
}

func (x *SupervisorInfoVo) GetSupervisorName() string {
	if x != nil {
		return x.SupervisorName
	}
	return ""
}

func (x *SupervisorInfoVo) GetSupervisorType() string {
	if x != nil {
		return x.SupervisorType
	}
	return ""
}

func (x *SupervisorInfoVo) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *SupervisorInfoVo) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *SupervisorInfoVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *SupervisorInfoVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *SupervisorInfoVo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *SupervisorInfoVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *SupervisorInfoVo) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *SupervisorInfoVo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *SupervisorInfoVo) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *SupervisorInfoVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SupervisorInfoVo) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *SupervisorInfoVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SupervisorInfoVo) GetHashInfo() string {
	if x != nil {
		return x.HashInfo
	}
	return ""
}

type GetSupervisorInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*SupervisorInfoVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64               `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64               `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64               `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetSupervisorInfoResp) Reset() {
	*x = GetSupervisorInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSupervisorInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSupervisorInfoResp) ProtoMessage() {}

func (x *GetSupervisorInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSupervisorInfoResp.ProtoReflect.Descriptor instead.
func (*GetSupervisorInfoResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{384}
}

func (x *GetSupervisorInfoResp) GetList() []*SupervisorInfoVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetSupervisorInfoResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetSupervisorInfoResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetSupervisorInfoResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

//创建监理单位信息
type CreateOneSupervisorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupervisorName string `protobuf:"bytes,1,opt,name=supervisorName,proto3" json:"supervisorName"`
	SupervisorCode string `protobuf:"bytes,2,opt,name=supervisorCode,proto3" json:"supervisorCode"`
	SupervisorType string `protobuf:"bytes,3,opt,name=supervisorType,proto3" json:"supervisorType"`
	ManagerName    string `protobuf:"bytes,4,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone   string `protobuf:"bytes,5,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province       string `protobuf:"bytes,6,opt,name=province,proto3" json:"province"`
	City           string `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`
	Zone           string `protobuf:"bytes,8,opt,name=zone,proto3" json:"zone"`
	Memo           string `protobuf:"bytes,9,opt,name=memo,proto3" json:"memo"`
	ManagerId      int64  `protobuf:"varint,10,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateOneSupervisorReq) Reset() {
	*x = CreateOneSupervisorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneSupervisorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneSupervisorReq) ProtoMessage() {}

func (x *CreateOneSupervisorReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneSupervisorReq.ProtoReflect.Descriptor instead.
func (*CreateOneSupervisorReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{385}
}

func (x *CreateOneSupervisorReq) GetSupervisorName() string {
	if x != nil {
		return x.SupervisorName
	}
	return ""
}

func (x *CreateOneSupervisorReq) GetSupervisorCode() string {
	if x != nil {
		return x.SupervisorCode
	}
	return ""
}

func (x *CreateOneSupervisorReq) GetSupervisorType() string {
	if x != nil {
		return x.SupervisorType
	}
	return ""
}

func (x *CreateOneSupervisorReq) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *CreateOneSupervisorReq) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *CreateOneSupervisorReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *CreateOneSupervisorReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CreateOneSupervisorReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *CreateOneSupervisorReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CreateOneSupervisorReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CreateOneSupervisorResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateOneSupervisorResp) Reset() {
	*x = CreateOneSupervisorResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneSupervisorResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneSupervisorResp) ProtoMessage() {}

func (x *CreateOneSupervisorResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneSupervisorResp.ProtoReflect.Descriptor instead.
func (*CreateOneSupervisorResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{386}
}

func (x *CreateOneSupervisorResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//创建并上链监理单位信息
type CreateHashSupervisorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupervisorName string `protobuf:"bytes,1,opt,name=supervisorName,proto3" json:"supervisorName"`
	SupervisorCode string `protobuf:"bytes,2,opt,name=supervisorCode,proto3" json:"supervisorCode"`
	SupervisorType string `protobuf:"bytes,3,opt,name=supervisorType,proto3" json:"supervisorType"`
	ManagerName    string `protobuf:"bytes,4,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone   string `protobuf:"bytes,5,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province       string `protobuf:"bytes,6,opt,name=province,proto3" json:"province"`
	City           string `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`
	Zone           string `protobuf:"bytes,8,opt,name=zone,proto3" json:"zone"`
	Memo           string `protobuf:"bytes,9,opt,name=memo,proto3" json:"memo"`
	InfoHash       string `protobuf:"bytes,10,opt,name=infoHash,proto3" json:"infoHash"`
	ManagerId      int64  `protobuf:"varint,11,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateHashSupervisorReq) Reset() {
	*x = CreateHashSupervisorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHashSupervisorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHashSupervisorReq) ProtoMessage() {}

func (x *CreateHashSupervisorReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHashSupervisorReq.ProtoReflect.Descriptor instead.
func (*CreateHashSupervisorReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{387}
}

func (x *CreateHashSupervisorReq) GetSupervisorName() string {
	if x != nil {
		return x.SupervisorName
	}
	return ""
}

func (x *CreateHashSupervisorReq) GetSupervisorCode() string {
	if x != nil {
		return x.SupervisorCode
	}
	return ""
}

func (x *CreateHashSupervisorReq) GetSupervisorType() string {
	if x != nil {
		return x.SupervisorType
	}
	return ""
}

func (x *CreateHashSupervisorReq) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *CreateHashSupervisorReq) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *CreateHashSupervisorReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *CreateHashSupervisorReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CreateHashSupervisorReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *CreateHashSupervisorReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CreateHashSupervisorReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *CreateHashSupervisorReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CreateHashSupervisorResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateHashSupervisorResp) Reset() {
	*x = CreateHashSupervisorResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHashSupervisorResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHashSupervisorResp) ProtoMessage() {}

func (x *CreateHashSupervisorResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHashSupervisorResp.ProtoReflect.Descriptor instead.
func (*CreateHashSupervisorResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{388}
}

func (x *CreateHashSupervisorResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//更新监理单位信息
type UpdateOneSupervisorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupervisorId   int64  `protobuf:"varint,1,opt,name=supervisorId,proto3" json:"supervisorId"`
	SupervisorCode string `protobuf:"bytes,2,opt,name=supervisorCode,proto3" json:"supervisorCode"`
	SupervisorName string `protobuf:"bytes,3,opt,name=supervisorName,proto3" json:"supervisorName"`
	SupervisorType string `protobuf:"bytes,4,opt,name=supervisorType,proto3" json:"supervisorType"`
	ManagerName    string `protobuf:"bytes,5,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone   string `protobuf:"bytes,6,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province       string `protobuf:"bytes,7,opt,name=province,proto3" json:"province"`
	City           string `protobuf:"bytes,8,opt,name=city,proto3" json:"city"`
	Zone           string `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone"`
	Memo           string `protobuf:"bytes,10,opt,name=memo,proto3" json:"memo"`
	ManagerId      int64  `protobuf:"varint,11,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UpdateOneSupervisorReq) Reset() {
	*x = UpdateOneSupervisorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOneSupervisorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOneSupervisorReq) ProtoMessage() {}

func (x *UpdateOneSupervisorReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOneSupervisorReq.ProtoReflect.Descriptor instead.
func (*UpdateOneSupervisorReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{389}
}

func (x *UpdateOneSupervisorReq) GetSupervisorId() int64 {
	if x != nil {
		return x.SupervisorId
	}
	return 0
}

func (x *UpdateOneSupervisorReq) GetSupervisorCode() string {
	if x != nil {
		return x.SupervisorCode
	}
	return ""
}

func (x *UpdateOneSupervisorReq) GetSupervisorName() string {
	if x != nil {
		return x.SupervisorName
	}
	return ""
}

func (x *UpdateOneSupervisorReq) GetSupervisorType() string {
	if x != nil {
		return x.SupervisorType
	}
	return ""
}

func (x *UpdateOneSupervisorReq) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *UpdateOneSupervisorReq) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *UpdateOneSupervisorReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *UpdateOneSupervisorReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UpdateOneSupervisorReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *UpdateOneSupervisorReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UpdateOneSupervisorReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UpdateOneSupervisorResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateOneSupervisorResp) Reset() {
	*x = UpdateOneSupervisorResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOneSupervisorResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOneSupervisorResp) ProtoMessage() {}

func (x *UpdateOneSupervisorResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOneSupervisorResp.ProtoReflect.Descriptor instead.
func (*UpdateOneSupervisorResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{390}
}

func (x *UpdateOneSupervisorResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//更新并上链监理单位信息
type UpdateHashSupervisorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupervisorId   int64  `protobuf:"varint,1,opt,name=supervisorId,proto3" json:"supervisorId"`
	SupervisorName string `protobuf:"bytes,2,opt,name=supervisorName,proto3" json:"supervisorName"`
	SupervisorType string `protobuf:"bytes,3,opt,name=supervisorType,proto3" json:"supervisorType"`
	ManagerName    string `protobuf:"bytes,4,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone   string `protobuf:"bytes,5,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province       string `protobuf:"bytes,6,opt,name=province,proto3" json:"province"`
	City           string `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`
	Zone           string `protobuf:"bytes,8,opt,name=zone,proto3" json:"zone"`
	Memo           string `protobuf:"bytes,9,opt,name=memo,proto3" json:"memo"`
	InfoHash       string `protobuf:"bytes,10,opt,name=infoHash,proto3" json:"infoHash"`
	ManagerId      int64  `protobuf:"varint,11,opt,name=managerId,proto3" json:"managerId"`
	SupervisorCode string `protobuf:"bytes,12,opt,name=supervisorCode,proto3" json:"supervisorCode"`
}

func (x *UpdateHashSupervisorReq) Reset() {
	*x = UpdateHashSupervisorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[391]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHashSupervisorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHashSupervisorReq) ProtoMessage() {}

func (x *UpdateHashSupervisorReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[391]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHashSupervisorReq.ProtoReflect.Descriptor instead.
func (*UpdateHashSupervisorReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{391}
}

func (x *UpdateHashSupervisorReq) GetSupervisorId() int64 {
	if x != nil {
		return x.SupervisorId
	}
	return 0
}

func (x *UpdateHashSupervisorReq) GetSupervisorName() string {
	if x != nil {
		return x.SupervisorName
	}
	return ""
}

func (x *UpdateHashSupervisorReq) GetSupervisorType() string {
	if x != nil {
		return x.SupervisorType
	}
	return ""
}

func (x *UpdateHashSupervisorReq) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *UpdateHashSupervisorReq) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *UpdateHashSupervisorReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *UpdateHashSupervisorReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UpdateHashSupervisorReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *UpdateHashSupervisorReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UpdateHashSupervisorReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *UpdateHashSupervisorReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *UpdateHashSupervisorReq) GetSupervisorCode() string {
	if x != nil {
		return x.SupervisorCode
	}
	return ""
}

type UpdateHashSupervisorResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateHashSupervisorResp) Reset() {
	*x = UpdateHashSupervisorResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[392]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHashSupervisorResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHashSupervisorResp) ProtoMessage() {}

func (x *UpdateHashSupervisorResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[392]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHashSupervisorResp.ProtoReflect.Descriptor instead.
func (*UpdateHashSupervisorResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{392}
}

func (x *UpdateHashSupervisorResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type UploadSupervisorLogoUrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogoUrl   string `protobuf:"bytes,1,opt,name=logoUrl,proto3" json:"logoUrl"`
	ManagerId int64  `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UploadSupervisorLogoUrlReq) Reset() {
	*x = UploadSupervisorLogoUrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[393]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadSupervisorLogoUrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadSupervisorLogoUrlReq) ProtoMessage() {}

func (x *UploadSupervisorLogoUrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[393]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadSupervisorLogoUrlReq.ProtoReflect.Descriptor instead.
func (*UploadSupervisorLogoUrlReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{393}
}

func (x *UploadSupervisorLogoUrlReq) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *UploadSupervisorLogoUrlReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UploadSupervisorLogoUrlResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UploadSupervisorLogoUrlResp) Reset() {
	*x = UploadSupervisorLogoUrlResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[394]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadSupervisorLogoUrlResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadSupervisorLogoUrlResp) ProtoMessage() {}

func (x *UploadSupervisorLogoUrlResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[394]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadSupervisorLogoUrlResp.ProtoReflect.Descriptor instead.
func (*UploadSupervisorLogoUrlResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{394}
}

func (x *UploadSupervisorLogoUrlResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//删除监理单位信息
type DeleteSupervisorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupervisorId int64 `protobuf:"varint,1,opt,name=supervisorId,proto3" json:"supervisorId"`
	ManagerId    int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *DeleteSupervisorReq) Reset() {
	*x = DeleteSupervisorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[395]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSupervisorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSupervisorReq) ProtoMessage() {}

func (x *DeleteSupervisorReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[395]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSupervisorReq.ProtoReflect.Descriptor instead.
func (*DeleteSupervisorReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{395}
}

func (x *DeleteSupervisorReq) GetSupervisorId() int64 {
	if x != nil {
		return x.SupervisorId
	}
	return 0
}

func (x *DeleteSupervisorReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type DeleteSupervisorResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSupervisorResp) Reset() {
	*x = DeleteSupervisorResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[396]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSupervisorResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSupervisorResp) ProtoMessage() {}

func (x *DeleteSupervisorResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[396]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSupervisorResp.ProtoReflect.Descriptor instead.
func (*DeleteSupervisorResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{396}
}

//获取监理单位hash
type GetSupervisorHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId     int64   `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	SupervisorIds []int64 `protobuf:"varint,2,rep,packed,name=supervisorIds,proto3" json:"supervisorIds"`
}

func (x *GetSupervisorHashReq) Reset() {
	*x = GetSupervisorHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[397]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSupervisorHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSupervisorHashReq) ProtoMessage() {}

func (x *GetSupervisorHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[397]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSupervisorHashReq.ProtoReflect.Descriptor instead.
func (*GetSupervisorHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{397}
}

func (x *GetSupervisorHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetSupervisorHashReq) GetSupervisorIds() []int64 {
	if x != nil {
		return x.SupervisorIds
	}
	return nil
}

type GetSupervisorHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*SupervisorHashVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64               `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64               `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64               `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetSupervisorHashResp) Reset() {
	*x = GetSupervisorHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[398]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSupervisorHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSupervisorHashResp) ProtoMessage() {}

func (x *GetSupervisorHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[398]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSupervisorHashResp.ProtoReflect.Descriptor instead.
func (*GetSupervisorHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{398}
}

func (x *GetSupervisorHashResp) GetList() []*SupervisorHashVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetSupervisorHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetSupervisorHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetSupervisorHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type SupervisorHashVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupervisorId   int64                  `protobuf:"varint,1,opt,name=supervisorId,proto3" json:"supervisorId"`
	SupervisorCode string                 `protobuf:"bytes,2,opt,name=supervisorCode,proto3" json:"supervisorCode"`
	InfoHash       string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
}

func (x *SupervisorHashVo) Reset() {
	*x = SupervisorHashVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[399]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupervisorHashVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupervisorHashVo) ProtoMessage() {}

func (x *SupervisorHashVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[399]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupervisorHashVo.ProtoReflect.Descriptor instead.
func (*SupervisorHashVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{399}
}

func (x *SupervisorHashVo) GetSupervisorId() int64 {
	if x != nil {
		return x.SupervisorId
	}
	return 0
}

func (x *SupervisorHashVo) GetSupervisorCode() string {
	if x != nil {
		return x.SupervisorCode
	}
	return ""
}

func (x *SupervisorHashVo) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *SupervisorHashVo) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

//查询监管单位列表
type ListGovermentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GovermentCode string  `protobuf:"bytes,1,opt,name=govermentCode,proto3" json:"govermentCode"`
	GovermentName string  `protobuf:"bytes,2,opt,name=govermentName,proto3" json:"govermentName"`
	Province      string  `protobuf:"bytes,3,opt,name=province,proto3" json:"province"`
	City          string  `protobuf:"bytes,4,opt,name=city,proto3" json:"city"`
	Zone          string  `protobuf:"bytes,5,opt,name=zone,proto3" json:"zone"`
	ActiveStatus  string  `protobuf:"bytes,6,opt,name=activeStatus,proto3" json:"activeStatus"`
	ManagerId     int64   `protobuf:"varint,7,opt,name=managerId,proto3" json:"managerId"`
	Page          *Page   `protobuf:"bytes,8,opt,name=page,proto3" json:"page"`
	GovermentIds  []int64 `protobuf:"varint,9,rep,packed,name=govermentIds,proto3" json:"govermentIds"`
}

func (x *ListGovermentReq) Reset() {
	*x = ListGovermentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[400]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGovermentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGovermentReq) ProtoMessage() {}

func (x *ListGovermentReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[400]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGovermentReq.ProtoReflect.Descriptor instead.
func (*ListGovermentReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{400}
}

func (x *ListGovermentReq) GetGovermentCode() string {
	if x != nil {
		return x.GovermentCode
	}
	return ""
}

func (x *ListGovermentReq) GetGovermentName() string {
	if x != nil {
		return x.GovermentName
	}
	return ""
}

func (x *ListGovermentReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ListGovermentReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ListGovermentReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ListGovermentReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *ListGovermentReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListGovermentReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListGovermentReq) GetGovermentIds() []int64 {
	if x != nil {
		return x.GovermentIds
	}
	return nil
}

type ListGovermentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*GovermentVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64          `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64          `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListGovermentResp) Reset() {
	*x = ListGovermentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[401]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGovermentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGovermentResp) ProtoMessage() {}

func (x *ListGovermentResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[401]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGovermentResp.ProtoReflect.Descriptor instead.
func (*ListGovermentResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{401}
}

func (x *ListGovermentResp) GetList() []*GovermentVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListGovermentResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListGovermentResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListGovermentResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GovermentVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GovermentId   int64                  `protobuf:"varint,1,opt,name=govermentId,proto3" json:"govermentId"`
	GovermentCode string                 `protobuf:"bytes,2,opt,name=govermentCode,proto3" json:"govermentCode"`
	GovermentName string                 `protobuf:"bytes,3,opt,name=govermentName,proto3" json:"govermentName"`
	GovermentType string                 `protobuf:"bytes,4,opt,name=govermentType,proto3" json:"govermentType"`
	ManagerName   string                 `protobuf:"bytes,5,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone  string                 `protobuf:"bytes,6,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province      string                 `protobuf:"bytes,7,opt,name=province,proto3" json:"province"`
	City          string                 `protobuf:"bytes,8,opt,name=city,proto3" json:"city"`
	Zone          string                 `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone"`
	ActiveStatus  string                 `protobuf:"bytes,10,opt,name=activeStatus,proto3" json:"activeStatus"`
	LogoUrl       string                 `protobuf:"bytes,11,opt,name=logoUrl,proto3" json:"logoUrl"`
	Memo          string                 `protobuf:"bytes,12,opt,name=memo,proto3" json:"memo"`
	CreatedBy     int64                  `protobuf:"varint,13,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy     int64                  `protobuf:"varint,15,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updatedAt,proto3" json:"updatedAt"`
	HashInfo      string                 `protobuf:"bytes,17,opt,name=hashInfo,proto3" json:"hashInfo"`
}

func (x *GovermentVo) Reset() {
	*x = GovermentVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[402]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovermentVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovermentVo) ProtoMessage() {}

func (x *GovermentVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[402]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovermentVo.ProtoReflect.Descriptor instead.
func (*GovermentVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{402}
}

func (x *GovermentVo) GetGovermentId() int64 {
	if x != nil {
		return x.GovermentId
	}
	return 0
}

func (x *GovermentVo) GetGovermentCode() string {
	if x != nil {
		return x.GovermentCode
	}
	return ""
}

func (x *GovermentVo) GetGovermentName() string {
	if x != nil {
		return x.GovermentName
	}
	return ""
}

func (x *GovermentVo) GetGovermentType() string {
	if x != nil {
		return x.GovermentType
	}
	return ""
}

func (x *GovermentVo) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *GovermentVo) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *GovermentVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *GovermentVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *GovermentVo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *GovermentVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *GovermentVo) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *GovermentVo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *GovermentVo) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *GovermentVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GovermentVo) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *GovermentVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *GovermentVo) GetHashInfo() string {
	if x != nil {
		return x.HashInfo
	}
	return ""
}

//查询监管单位(通用接口)
type CommonGovermentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GovermentName string  `protobuf:"bytes,1,opt,name=govermentName,proto3" json:"govermentName"`
	GovermentCode string  `protobuf:"bytes,2,opt,name=govermentCode,proto3" json:"govermentCode"`
	ActiveStatus  string  `protobuf:"bytes,3,opt,name=activeStatus,proto3" json:"activeStatus"`
	ManagerId     int64   `protobuf:"varint,4,opt,name=managerId,proto3" json:"managerId"`
	Page          *Page   `protobuf:"bytes,5,opt,name=page,proto3" json:"page"`
	GovermentIds  []int64 `protobuf:"varint,6,rep,packed,name=govermentIds,proto3" json:"govermentIds"`
}

func (x *CommonGovermentReq) Reset() {
	*x = CommonGovermentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[403]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonGovermentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonGovermentReq) ProtoMessage() {}

func (x *CommonGovermentReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[403]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonGovermentReq.ProtoReflect.Descriptor instead.
func (*CommonGovermentReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{403}
}

func (x *CommonGovermentReq) GetGovermentName() string {
	if x != nil {
		return x.GovermentName
	}
	return ""
}

func (x *CommonGovermentReq) GetGovermentCode() string {
	if x != nil {
		return x.GovermentCode
	}
	return ""
}

func (x *CommonGovermentReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *CommonGovermentReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CommonGovermentReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *CommonGovermentReq) GetGovermentIds() []int64 {
	if x != nil {
		return x.GovermentIds
	}
	return nil
}

type CommonGovermentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*CommonGovermentVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *CommonGovermentResp) Reset() {
	*x = CommonGovermentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[404]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonGovermentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonGovermentResp) ProtoMessage() {}

func (x *CommonGovermentResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[404]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonGovermentResp.ProtoReflect.Descriptor instead.
func (*CommonGovermentResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{404}
}

func (x *CommonGovermentResp) GetList() []*CommonGovermentVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CommonGovermentResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CommonGovermentResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CommonGovermentResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type CommonGovermentVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GovermentId   int64  `protobuf:"varint,1,opt,name=govermentId,proto3" json:"govermentId"`
	GovermentName string `protobuf:"bytes,2,opt,name=govermentName,proto3" json:"govermentName"`
	GovermentCode string `protobuf:"bytes,3,opt,name=govermentCode,proto3" json:"govermentCode"`
	LogoUrl       string `protobuf:"bytes,4,opt,name=logoUrl,proto3" json:"logoUrl"`
}

func (x *CommonGovermentVo) Reset() {
	*x = CommonGovermentVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[405]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonGovermentVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonGovermentVo) ProtoMessage() {}

func (x *CommonGovermentVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[405]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonGovermentVo.ProtoReflect.Descriptor instead.
func (*CommonGovermentVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{405}
}

func (x *CommonGovermentVo) GetGovermentId() int64 {
	if x != nil {
		return x.GovermentId
	}
	return 0
}

func (x *CommonGovermentVo) GetGovermentName() string {
	if x != nil {
		return x.GovermentName
	}
	return ""
}

func (x *CommonGovermentVo) GetGovermentCode() string {
	if x != nil {
		return x.GovermentCode
	}
	return ""
}

func (x *CommonGovermentVo) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

//获取监管单位详情
type GetGovermentInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GovermentId   int64  `protobuf:"varint,1,opt,name=govermentId,proto3" json:"govermentId"`
	GovermentCode string `protobuf:"bytes,2,opt,name=govermentCode,proto3" json:"govermentCode"`
	ManagerId     int64  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
	Page          *Page  `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
}

func (x *GetGovermentInfoReq) Reset() {
	*x = GetGovermentInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[406]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGovermentInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGovermentInfoReq) ProtoMessage() {}

func (x *GetGovermentInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[406]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGovermentInfoReq.ProtoReflect.Descriptor instead.
func (*GetGovermentInfoReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{406}
}

func (x *GetGovermentInfoReq) GetGovermentId() int64 {
	if x != nil {
		return x.GovermentId
	}
	return 0
}

func (x *GetGovermentInfoReq) GetGovermentCode() string {
	if x != nil {
		return x.GovermentCode
	}
	return ""
}

func (x *GetGovermentInfoReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetGovermentInfoReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type GovermentInfoVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GovermentId   int64                  `protobuf:"varint,1,opt,name=govermentId,proto3" json:"govermentId"`
	GovermentCode string                 `protobuf:"bytes,2,opt,name=govermentCode,proto3" json:"govermentCode"`
	GovermentName string                 `protobuf:"bytes,3,opt,name=govermentName,proto3" json:"govermentName"`
	GovermentType string                 `protobuf:"bytes,4,opt,name=govermentType,proto3" json:"govermentType"`
	ManagerName   string                 `protobuf:"bytes,5,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone  string                 `protobuf:"bytes,6,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province      string                 `protobuf:"bytes,7,opt,name=province,proto3" json:"province"`
	City          string                 `protobuf:"bytes,8,opt,name=city,proto3" json:"city"`
	Zone          string                 `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone"`
	ActiveStatus  string                 `protobuf:"bytes,10,opt,name=activeStatus,proto3" json:"activeStatus"`
	LogoUrl       string                 `protobuf:"bytes,11,opt,name=logoUrl,proto3" json:"logoUrl"`
	Memo          string                 `protobuf:"bytes,12,opt,name=memo,proto3" json:"memo"`
	CreatedBy     int64                  `protobuf:"varint,13,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy     int64                  `protobuf:"varint,15,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updatedAt,proto3" json:"updatedAt"`
	HashInfo      string                 `protobuf:"bytes,17,opt,name=hashInfo,proto3" json:"hashInfo"`
}

func (x *GovermentInfoVo) Reset() {
	*x = GovermentInfoVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[407]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovermentInfoVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovermentInfoVo) ProtoMessage() {}

func (x *GovermentInfoVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[407]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovermentInfoVo.ProtoReflect.Descriptor instead.
func (*GovermentInfoVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{407}
}

func (x *GovermentInfoVo) GetGovermentId() int64 {
	if x != nil {
		return x.GovermentId
	}
	return 0
}

func (x *GovermentInfoVo) GetGovermentCode() string {
	if x != nil {
		return x.GovermentCode
	}
	return ""
}

func (x *GovermentInfoVo) GetGovermentName() string {
	if x != nil {
		return x.GovermentName
	}
	return ""
}

func (x *GovermentInfoVo) GetGovermentType() string {
	if x != nil {
		return x.GovermentType
	}
	return ""
}

func (x *GovermentInfoVo) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *GovermentInfoVo) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *GovermentInfoVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *GovermentInfoVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *GovermentInfoVo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *GovermentInfoVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *GovermentInfoVo) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *GovermentInfoVo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *GovermentInfoVo) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *GovermentInfoVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GovermentInfoVo) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *GovermentInfoVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *GovermentInfoVo) GetHashInfo() string {
	if x != nil {
		return x.HashInfo
	}
	return ""
}

type GetGovermentInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*GovermentInfoVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64              `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64              `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64              `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetGovermentInfoResp) Reset() {
	*x = GetGovermentInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[408]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGovermentInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGovermentInfoResp) ProtoMessage() {}

func (x *GetGovermentInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[408]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGovermentInfoResp.ProtoReflect.Descriptor instead.
func (*GetGovermentInfoResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{408}
}

func (x *GetGovermentInfoResp) GetList() []*GovermentInfoVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetGovermentInfoResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetGovermentInfoResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetGovermentInfoResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

//创建监管单位信息
type CreateOneGovermentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GovermentName string `protobuf:"bytes,1,opt,name=govermentName,proto3" json:"govermentName"`
	GovermentCode string `protobuf:"bytes,2,opt,name=govermentCode,proto3" json:"govermentCode"`
	GovermentType string `protobuf:"bytes,3,opt,name=govermentType,proto3" json:"govermentType"`
	ManagerName   string `protobuf:"bytes,4,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone  string `protobuf:"bytes,5,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province      string `protobuf:"bytes,6,opt,name=province,proto3" json:"province"`
	City          string `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`
	Zone          string `protobuf:"bytes,8,opt,name=zone,proto3" json:"zone"`
	Memo          string `protobuf:"bytes,9,opt,name=memo,proto3" json:"memo"`
	ManagerId     int64  `protobuf:"varint,10,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateOneGovermentReq) Reset() {
	*x = CreateOneGovermentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[409]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneGovermentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneGovermentReq) ProtoMessage() {}

func (x *CreateOneGovermentReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[409]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneGovermentReq.ProtoReflect.Descriptor instead.
func (*CreateOneGovermentReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{409}
}

func (x *CreateOneGovermentReq) GetGovermentName() string {
	if x != nil {
		return x.GovermentName
	}
	return ""
}

func (x *CreateOneGovermentReq) GetGovermentCode() string {
	if x != nil {
		return x.GovermentCode
	}
	return ""
}

func (x *CreateOneGovermentReq) GetGovermentType() string {
	if x != nil {
		return x.GovermentType
	}
	return ""
}

func (x *CreateOneGovermentReq) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *CreateOneGovermentReq) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *CreateOneGovermentReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *CreateOneGovermentReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CreateOneGovermentReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *CreateOneGovermentReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CreateOneGovermentReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CreateOneGovermentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateOneGovermentResp) Reset() {
	*x = CreateOneGovermentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[410]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneGovermentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneGovermentResp) ProtoMessage() {}

func (x *CreateOneGovermentResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[410]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneGovermentResp.ProtoReflect.Descriptor instead.
func (*CreateOneGovermentResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{410}
}

func (x *CreateOneGovermentResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//创建并上链监管单位信息
type CreateHashGovermentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GovermentName string `protobuf:"bytes,1,opt,name=govermentName,proto3" json:"govermentName"`
	GovermentCode string `protobuf:"bytes,2,opt,name=govermentCode,proto3" json:"govermentCode"`
	GovermentType string `protobuf:"bytes,3,opt,name=govermentType,proto3" json:"govermentType"`
	ManagerName   string `protobuf:"bytes,4,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone  string `protobuf:"bytes,5,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province      string `protobuf:"bytes,6,opt,name=province,proto3" json:"province"`
	City          string `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`
	Zone          string `protobuf:"bytes,8,opt,name=zone,proto3" json:"zone"`
	Memo          string `protobuf:"bytes,9,opt,name=memo,proto3" json:"memo"`
	InfoHash      string `protobuf:"bytes,10,opt,name=infoHash,proto3" json:"infoHash"`
	ManagerId     int64  `protobuf:"varint,11,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateHashGovermentReq) Reset() {
	*x = CreateHashGovermentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[411]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHashGovermentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHashGovermentReq) ProtoMessage() {}

func (x *CreateHashGovermentReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[411]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHashGovermentReq.ProtoReflect.Descriptor instead.
func (*CreateHashGovermentReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{411}
}

func (x *CreateHashGovermentReq) GetGovermentName() string {
	if x != nil {
		return x.GovermentName
	}
	return ""
}

func (x *CreateHashGovermentReq) GetGovermentCode() string {
	if x != nil {
		return x.GovermentCode
	}
	return ""
}

func (x *CreateHashGovermentReq) GetGovermentType() string {
	if x != nil {
		return x.GovermentType
	}
	return ""
}

func (x *CreateHashGovermentReq) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *CreateHashGovermentReq) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *CreateHashGovermentReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *CreateHashGovermentReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CreateHashGovermentReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *CreateHashGovermentReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CreateHashGovermentReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *CreateHashGovermentReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CreateHashGovermentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateHashGovermentResp) Reset() {
	*x = CreateHashGovermentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[412]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHashGovermentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHashGovermentResp) ProtoMessage() {}

func (x *CreateHashGovermentResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[412]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHashGovermentResp.ProtoReflect.Descriptor instead.
func (*CreateHashGovermentResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{412}
}

func (x *CreateHashGovermentResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//更新监管单位信息
type UpdateOneGovermentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GovermentId   int64  `protobuf:"varint,1,opt,name=govermentId,proto3" json:"govermentId"`
	GovermentCode string `protobuf:"bytes,2,opt,name=govermentCode,proto3" json:"govermentCode"`
	GovermentName string `protobuf:"bytes,3,opt,name=govermentName,proto3" json:"govermentName"`
	GovermentType string `protobuf:"bytes,4,opt,name=govermentType,proto3" json:"govermentType"`
	ManagerName   string `protobuf:"bytes,5,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone  string `protobuf:"bytes,6,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province      string `protobuf:"bytes,7,opt,name=province,proto3" json:"province"`
	City          string `protobuf:"bytes,8,opt,name=city,proto3" json:"city"`
	Zone          string `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone"`
	Memo          string `protobuf:"bytes,10,opt,name=memo,proto3" json:"memo"`
	ManagerId     int64  `protobuf:"varint,11,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UpdateOneGovermentReq) Reset() {
	*x = UpdateOneGovermentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[413]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOneGovermentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOneGovermentReq) ProtoMessage() {}

func (x *UpdateOneGovermentReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[413]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOneGovermentReq.ProtoReflect.Descriptor instead.
func (*UpdateOneGovermentReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{413}
}

func (x *UpdateOneGovermentReq) GetGovermentId() int64 {
	if x != nil {
		return x.GovermentId
	}
	return 0
}

func (x *UpdateOneGovermentReq) GetGovermentCode() string {
	if x != nil {
		return x.GovermentCode
	}
	return ""
}

func (x *UpdateOneGovermentReq) GetGovermentName() string {
	if x != nil {
		return x.GovermentName
	}
	return ""
}

func (x *UpdateOneGovermentReq) GetGovermentType() string {
	if x != nil {
		return x.GovermentType
	}
	return ""
}

func (x *UpdateOneGovermentReq) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *UpdateOneGovermentReq) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *UpdateOneGovermentReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *UpdateOneGovermentReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UpdateOneGovermentReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *UpdateOneGovermentReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UpdateOneGovermentReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UpdateOneGovermentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateOneGovermentResp) Reset() {
	*x = UpdateOneGovermentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[414]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOneGovermentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOneGovermentResp) ProtoMessage() {}

func (x *UpdateOneGovermentResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[414]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOneGovermentResp.ProtoReflect.Descriptor instead.
func (*UpdateOneGovermentResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{414}
}

func (x *UpdateOneGovermentResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//更新并上链监管单位信息
type UpdateHashGovermentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GovermentId   int64  `protobuf:"varint,1,opt,name=govermentId,proto3" json:"govermentId"`
	GovermentName string `protobuf:"bytes,2,opt,name=govermentName,proto3" json:"govermentName"`
	GovermentType string `protobuf:"bytes,3,opt,name=govermentType,proto3" json:"govermentType"`
	ManagerName   string `protobuf:"bytes,4,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone  string `protobuf:"bytes,5,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province      string `protobuf:"bytes,6,opt,name=province,proto3" json:"province"`
	City          string `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`
	Zone          string `protobuf:"bytes,8,opt,name=zone,proto3" json:"zone"`
	Memo          string `protobuf:"bytes,9,opt,name=memo,proto3" json:"memo"`
	InfoHash      string `protobuf:"bytes,10,opt,name=infoHash,proto3" json:"infoHash"`
	ManagerId     int64  `protobuf:"varint,11,opt,name=managerId,proto3" json:"managerId"`
	GovermentCode string `protobuf:"bytes,12,opt,name=govermentCode,proto3" json:"govermentCode"`
}

func (x *UpdateHashGovermentReq) Reset() {
	*x = UpdateHashGovermentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[415]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHashGovermentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHashGovermentReq) ProtoMessage() {}

func (x *UpdateHashGovermentReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[415]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHashGovermentReq.ProtoReflect.Descriptor instead.
func (*UpdateHashGovermentReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{415}
}

func (x *UpdateHashGovermentReq) GetGovermentId() int64 {
	if x != nil {
		return x.GovermentId
	}
	return 0
}

func (x *UpdateHashGovermentReq) GetGovermentName() string {
	if x != nil {
		return x.GovermentName
	}
	return ""
}

func (x *UpdateHashGovermentReq) GetGovermentType() string {
	if x != nil {
		return x.GovermentType
	}
	return ""
}

func (x *UpdateHashGovermentReq) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *UpdateHashGovermentReq) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *UpdateHashGovermentReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *UpdateHashGovermentReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UpdateHashGovermentReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *UpdateHashGovermentReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UpdateHashGovermentReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *UpdateHashGovermentReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *UpdateHashGovermentReq) GetGovermentCode() string {
	if x != nil {
		return x.GovermentCode
	}
	return ""
}

type UpdateHashGovermentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateHashGovermentResp) Reset() {
	*x = UpdateHashGovermentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[416]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHashGovermentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHashGovermentResp) ProtoMessage() {}

func (x *UpdateHashGovermentResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[416]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHashGovermentResp.ProtoReflect.Descriptor instead.
func (*UpdateHashGovermentResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{416}
}

func (x *UpdateHashGovermentResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type UploadGovermentLogoUrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogoUrl   string `protobuf:"bytes,1,opt,name=logoUrl,proto3" json:"logoUrl"`
	ManagerId int64  `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UploadGovermentLogoUrlReq) Reset() {
	*x = UploadGovermentLogoUrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[417]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadGovermentLogoUrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadGovermentLogoUrlReq) ProtoMessage() {}

func (x *UploadGovermentLogoUrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[417]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadGovermentLogoUrlReq.ProtoReflect.Descriptor instead.
func (*UploadGovermentLogoUrlReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{417}
}

func (x *UploadGovermentLogoUrlReq) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *UploadGovermentLogoUrlReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UploadGovermentLogoUrlResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UploadGovermentLogoUrlResp) Reset() {
	*x = UploadGovermentLogoUrlResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[418]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadGovermentLogoUrlResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadGovermentLogoUrlResp) ProtoMessage() {}

func (x *UploadGovermentLogoUrlResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[418]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadGovermentLogoUrlResp.ProtoReflect.Descriptor instead.
func (*UploadGovermentLogoUrlResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{418}
}

func (x *UploadGovermentLogoUrlResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//删除监管单位信息
type DeleteGovermentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GovermentId int64 `protobuf:"varint,1,opt,name=govermentId,proto3" json:"govermentId"`
	ManagerId   int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *DeleteGovermentReq) Reset() {
	*x = DeleteGovermentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[419]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGovermentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGovermentReq) ProtoMessage() {}

func (x *DeleteGovermentReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[419]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGovermentReq.ProtoReflect.Descriptor instead.
func (*DeleteGovermentReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{419}
}

func (x *DeleteGovermentReq) GetGovermentId() int64 {
	if x != nil {
		return x.GovermentId
	}
	return 0
}

func (x *DeleteGovermentReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type DeleteGovermentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteGovermentResp) Reset() {
	*x = DeleteGovermentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[420]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGovermentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGovermentResp) ProtoMessage() {}

func (x *DeleteGovermentResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[420]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGovermentResp.ProtoReflect.Descriptor instead.
func (*DeleteGovermentResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{420}
}

//获取监管单位hash
type GetGovermentHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId    int64   `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	GovermentIds []int64 `protobuf:"varint,2,rep,packed,name=govermentIds,proto3" json:"govermentIds"`
}

func (x *GetGovermentHashReq) Reset() {
	*x = GetGovermentHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[421]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGovermentHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGovermentHashReq) ProtoMessage() {}

func (x *GetGovermentHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[421]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGovermentHashReq.ProtoReflect.Descriptor instead.
func (*GetGovermentHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{421}
}

func (x *GetGovermentHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetGovermentHashReq) GetGovermentIds() []int64 {
	if x != nil {
		return x.GovermentIds
	}
	return nil
}

type GetGovermentHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*GovermentHashVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64              `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64              `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64              `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetGovermentHashResp) Reset() {
	*x = GetGovermentHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[422]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGovermentHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGovermentHashResp) ProtoMessage() {}

func (x *GetGovermentHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[422]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGovermentHashResp.ProtoReflect.Descriptor instead.
func (*GetGovermentHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{422}
}

func (x *GetGovermentHashResp) GetList() []*GovermentHashVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetGovermentHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetGovermentHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetGovermentHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GovermentHashVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GovermentId   int64                  `protobuf:"varint,1,opt,name=govermentId,proto3" json:"govermentId"`
	GovermentCode string                 `protobuf:"bytes,2,opt,name=govermentCode,proto3" json:"govermentCode"`
	InfoHash      string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
}

func (x *GovermentHashVo) Reset() {
	*x = GovermentHashVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[423]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovermentHashVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovermentHashVo) ProtoMessage() {}

func (x *GovermentHashVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[423]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovermentHashVo.ProtoReflect.Descriptor instead.
func (*GovermentHashVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{423}
}

func (x *GovermentHashVo) GetGovermentId() int64 {
	if x != nil {
		return x.GovermentId
	}
	return 0
}

func (x *GovermentHashVo) GetGovermentCode() string {
	if x != nil {
		return x.GovermentCode
	}
	return ""
}

func (x *GovermentHashVo) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *GovermentHashVo) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

//创建申请流程信息(主体信息)
type CreateOneProcessReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ProjectId             int64                  `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId"`
	ConstructionId        int64                  `protobuf:"varint,3,opt,name=constructionId,proto3" json:"constructionId"`
	GovermentId           int64                  `protobuf:"varint,4,opt,name=govermentId,proto3" json:"govermentId"`
	ProjectPhaseId        int64                  `protobuf:"varint,5,opt,name=projectPhaseId,proto3" json:"projectPhaseId"`
	ProcessName           string                 `protobuf:"bytes,6,opt,name=processName,proto3" json:"processName"`
	ApplyDate             *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=applyDate,proto3" json:"applyDate"`
	EstimatedApprovalDays int64                  `protobuf:"varint,8,opt,name=estimatedApprovalDays,proto3" json:"estimatedApprovalDays"`
	SortFlag              int64                  `protobuf:"varint,9,opt,name=sortFlag,proto3" json:"sortFlag"`
	IsParallel            int64                  `protobuf:"varint,10,opt,name=isParallel,proto3" json:"isParallel"`
	ProcessStatus         string                 `protobuf:"bytes,11,opt,name=processStatus,proto3" json:"processStatus"`
	Memo                  string                 `protobuf:"bytes,12,opt,name=memo,proto3" json:"memo"`
	ApproveDeadline       *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=approveDeadline,proto3" json:"approveDeadline"`
	ApproveDeadlineWarn   *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=approveDeadlineWarn,proto3" json:"approveDeadlineWarn"`
	ApproveAt             *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=approveAt,proto3" json:"approveAt"`
	ApproveDesc           string                 `protobuf:"bytes,16,opt,name=approveDesc,proto3" json:"approveDesc"`
	PreProcessIds         string                 `protobuf:"bytes,17,opt,name=preProcessIds,proto3" json:"preProcessIds"`
	ActiveStatus          string                 `protobuf:"bytes,18,opt,name=activeStatus,proto3" json:"activeStatus"`
	ManagerId             int64                  `protobuf:"varint,19,opt,name=managerId,proto3" json:"managerId"`
	UploadDocumentApply   []*DocumentInfoApply   `protobuf:"bytes,20,rep,name=uploadDocumentApply,proto3" json:"uploadDocumentApply"`
	ProcessCode           string                 `protobuf:"bytes,21,opt,name=processCode,proto3" json:"processCode"`
	ApplyBy               int64                  `protobuf:"varint,22,opt,name=applyBy,proto3" json:"applyBy"`
	ProjectPhaseIds       string                 `protobuf:"bytes,23,opt,name=projectPhaseIds,proto3" json:"projectPhaseIds"`
}

func (x *CreateOneProcessReq) Reset() {
	*x = CreateOneProcessReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[424]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneProcessReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneProcessReq) ProtoMessage() {}

func (x *CreateOneProcessReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[424]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneProcessReq.ProtoReflect.Descriptor instead.
func (*CreateOneProcessReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{424}
}

func (x *CreateOneProcessReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateOneProcessReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CreateOneProcessReq) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *CreateOneProcessReq) GetGovermentId() int64 {
	if x != nil {
		return x.GovermentId
	}
	return 0
}

func (x *CreateOneProcessReq) GetProjectPhaseId() int64 {
	if x != nil {
		return x.ProjectPhaseId
	}
	return 0
}

func (x *CreateOneProcessReq) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *CreateOneProcessReq) GetApplyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyDate
	}
	return nil
}

func (x *CreateOneProcessReq) GetEstimatedApprovalDays() int64 {
	if x != nil {
		return x.EstimatedApprovalDays
	}
	return 0
}

func (x *CreateOneProcessReq) GetSortFlag() int64 {
	if x != nil {
		return x.SortFlag
	}
	return 0
}

func (x *CreateOneProcessReq) GetIsParallel() int64 {
	if x != nil {
		return x.IsParallel
	}
	return 0
}

func (x *CreateOneProcessReq) GetProcessStatus() string {
	if x != nil {
		return x.ProcessStatus
	}
	return ""
}

func (x *CreateOneProcessReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CreateOneProcessReq) GetApproveDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveDeadline
	}
	return nil
}

func (x *CreateOneProcessReq) GetApproveDeadlineWarn() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveDeadlineWarn
	}
	return nil
}

func (x *CreateOneProcessReq) GetApproveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveAt
	}
	return nil
}

func (x *CreateOneProcessReq) GetApproveDesc() string {
	if x != nil {
		return x.ApproveDesc
	}
	return ""
}

func (x *CreateOneProcessReq) GetPreProcessIds() string {
	if x != nil {
		return x.PreProcessIds
	}
	return ""
}

func (x *CreateOneProcessReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *CreateOneProcessReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CreateOneProcessReq) GetUploadDocumentApply() []*DocumentInfoApply {
	if x != nil {
		return x.UploadDocumentApply
	}
	return nil
}

func (x *CreateOneProcessReq) GetProcessCode() string {
	if x != nil {
		return x.ProcessCode
	}
	return ""
}

func (x *CreateOneProcessReq) GetApplyBy() int64 {
	if x != nil {
		return x.ApplyBy
	}
	return 0
}

func (x *CreateOneProcessReq) GetProjectPhaseIds() string {
	if x != nil {
		return x.ProjectPhaseIds
	}
	return ""
}

type DocumentInfoApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessType string `protobuf:"bytes,1,opt,name=businessType,proto3" json:"businessType"`
	FileName     string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName"`
	UploadUrl    string `protobuf:"bytes,3,opt,name=uploadUrl,proto3" json:"uploadUrl"`
}

func (x *DocumentInfoApply) Reset() {
	*x = DocumentInfoApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[425]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentInfoApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentInfoApply) ProtoMessage() {}

func (x *DocumentInfoApply) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[425]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentInfoApply.ProtoReflect.Descriptor instead.
func (*DocumentInfoApply) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{425}
}

func (x *DocumentInfoApply) GetBusinessType() string {
	if x != nil {
		return x.BusinessType
	}
	return ""
}

func (x *DocumentInfoApply) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *DocumentInfoApply) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

type CreateOneProcessResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateOneProcessResp) Reset() {
	*x = CreateOneProcessResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[426]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneProcessResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneProcessResp) ProtoMessage() {}

func (x *CreateOneProcessResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[426]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneProcessResp.ProtoReflect.Descriptor instead.
func (*CreateOneProcessResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{426}
}

func (x *CreateOneProcessResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type GetProcessCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessId int64 `protobuf:"varint,1,opt,name=processId,proto3" json:"processId"`
	ManagerId int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *GetProcessCodeReq) Reset() {
	*x = GetProcessCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[427]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProcessCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessCodeReq) ProtoMessage() {}

func (x *GetProcessCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[427]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessCodeReq.ProtoReflect.Descriptor instead.
func (*GetProcessCodeReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{427}
}

func (x *GetProcessCodeReq) GetProcessId() int64 {
	if x != nil {
		return x.ProcessId
	}
	return 0
}

func (x *GetProcessCodeReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type GetProcessCodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ProjectId             int64                  `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId"`
	ConstructionId        int64                  `protobuf:"varint,3,opt,name=constructionId,proto3" json:"constructionId"`
	GovermentId           int64                  `protobuf:"varint,4,opt,name=govermentId,proto3" json:"govermentId"`
	ProjectPhaseId        int64                  `protobuf:"varint,5,opt,name=projectPhaseId,proto3" json:"projectPhaseId"`
	ProcessName           string                 `protobuf:"bytes,6,opt,name=processName,proto3" json:"processName"`
	ApplyDate             *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=applyDate,proto3" json:"applyDate"`
	EstimatedApprovalDays int64                  `protobuf:"varint,8,opt,name=estimatedApprovalDays,proto3" json:"estimatedApprovalDays"`
	SortFlag              int64                  `protobuf:"varint,9,opt,name=sortFlag,proto3" json:"sortFlag"`
	IsParallel            int64                  `protobuf:"varint,10,opt,name=isParallel,proto3" json:"isParallel"`
	ProcessStatus         string                 `protobuf:"bytes,11,opt,name=processStatus,proto3" json:"processStatus"`
	Memo                  string                 `protobuf:"bytes,12,opt,name=memo,proto3" json:"memo"`
	ApproveDeadline       *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=approveDeadline,proto3" json:"approveDeadline"`
	ApproveDeadlineWarn   *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=approveDeadlineWarn,proto3" json:"approveDeadlineWarn"`
	ApproveAt             *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=approveAt,proto3" json:"approveAt"`
	ApproveDesc           string                 `protobuf:"bytes,16,opt,name=approveDesc,proto3" json:"approveDesc"`
	PreProcessIds         string                 `protobuf:"bytes,17,opt,name=preProcessIds,proto3" json:"preProcessIds"`
	ActiveStatus          string                 `protobuf:"bytes,18,opt,name=activeStatus,proto3" json:"activeStatus"`
	ProcessCode           string                 `protobuf:"bytes,19,opt,name=processCode,proto3" json:"processCode"`
	ProjectPhaseIds       string                 `protobuf:"bytes,20,opt,name=projectPhaseIds,proto3" json:"projectPhaseIds"`
	ProjectPhaseIdsDesc   string                 `protobuf:"bytes,21,opt,name=projectPhaseIdsDesc,proto3" json:"projectPhaseIdsDesc"`
}

func (x *GetProcessCodeResp) Reset() {
	*x = GetProcessCodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[428]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProcessCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessCodeResp) ProtoMessage() {}

func (x *GetProcessCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[428]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessCodeResp.ProtoReflect.Descriptor instead.
func (*GetProcessCodeResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{428}
}

func (x *GetProcessCodeResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetProcessCodeResp) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetProcessCodeResp) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *GetProcessCodeResp) GetGovermentId() int64 {
	if x != nil {
		return x.GovermentId
	}
	return 0
}

func (x *GetProcessCodeResp) GetProjectPhaseId() int64 {
	if x != nil {
		return x.ProjectPhaseId
	}
	return 0
}

func (x *GetProcessCodeResp) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *GetProcessCodeResp) GetApplyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyDate
	}
	return nil
}

func (x *GetProcessCodeResp) GetEstimatedApprovalDays() int64 {
	if x != nil {
		return x.EstimatedApprovalDays
	}
	return 0
}

func (x *GetProcessCodeResp) GetSortFlag() int64 {
	if x != nil {
		return x.SortFlag
	}
	return 0
}

func (x *GetProcessCodeResp) GetIsParallel() int64 {
	if x != nil {
		return x.IsParallel
	}
	return 0
}

func (x *GetProcessCodeResp) GetProcessStatus() string {
	if x != nil {
		return x.ProcessStatus
	}
	return ""
}

func (x *GetProcessCodeResp) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *GetProcessCodeResp) GetApproveDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveDeadline
	}
	return nil
}

func (x *GetProcessCodeResp) GetApproveDeadlineWarn() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveDeadlineWarn
	}
	return nil
}

func (x *GetProcessCodeResp) GetApproveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveAt
	}
	return nil
}

func (x *GetProcessCodeResp) GetApproveDesc() string {
	if x != nil {
		return x.ApproveDesc
	}
	return ""
}

func (x *GetProcessCodeResp) GetPreProcessIds() string {
	if x != nil {
		return x.PreProcessIds
	}
	return ""
}

func (x *GetProcessCodeResp) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *GetProcessCodeResp) GetProcessCode() string {
	if x != nil {
		return x.ProcessCode
	}
	return ""
}

func (x *GetProcessCodeResp) GetProjectPhaseIds() string {
	if x != nil {
		return x.ProjectPhaseIds
	}
	return ""
}

func (x *GetProcessCodeResp) GetProjectPhaseIdsDesc() string {
	if x != nil {
		return x.ProjectPhaseIdsDesc
	}
	return ""
}

type CreateHashProcessReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ProjectId             int64                  `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId"`
	ConstructionId        int64                  `protobuf:"varint,3,opt,name=constructionId,proto3" json:"constructionId"`
	GovermentId           int64                  `protobuf:"varint,4,opt,name=govermentId,proto3" json:"govermentId"`
	ProjectPhaseId        int64                  `protobuf:"varint,5,opt,name=projectPhaseId,proto3" json:"projectPhaseId"`
	ProcessName           string                 `protobuf:"bytes,6,opt,name=processName,proto3" json:"processName"`
	ApplyDate             *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=applyDate,proto3" json:"applyDate"`
	EstimatedApprovalDays int64                  `protobuf:"varint,8,opt,name=estimatedApprovalDays,proto3" json:"estimatedApprovalDays"`
	SortFlag              int64                  `protobuf:"varint,9,opt,name=sortFlag,proto3" json:"sortFlag"`
	IsParallel            int64                  `protobuf:"varint,10,opt,name=isParallel,proto3" json:"isParallel"`
	ProcessStatus         string                 `protobuf:"bytes,11,opt,name=processStatus,proto3" json:"processStatus"`
	Memo                  string                 `protobuf:"bytes,12,opt,name=memo,proto3" json:"memo"`
	ApproveDeadline       *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=approveDeadline,proto3" json:"approveDeadline"`
	ApproveDeadlineWarn   *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=approveDeadlineWarn,proto3" json:"approveDeadlineWarn"`
	ApproveAt             *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=approveAt,proto3" json:"approveAt"`
	ApproveDesc           string                 `protobuf:"bytes,16,opt,name=approveDesc,proto3" json:"approveDesc"`
	PreProcessIds         string                 `protobuf:"bytes,17,opt,name=preProcessIds,proto3" json:"preProcessIds"`
	ActiveStatus          string                 `protobuf:"bytes,18,opt,name=activeStatus,proto3" json:"activeStatus"`
	ManagerId             int64                  `protobuf:"varint,19,opt,name=managerId,proto3" json:"managerId"`
	InfoHash              string                 `protobuf:"bytes,20,opt,name=infoHash,proto3" json:"infoHash"`
	UploadDocumentApply   []*DocumentInfoApply   `protobuf:"bytes,21,rep,name=uploadDocumentApply,proto3" json:"uploadDocumentApply"`
	ProcessCode           string                 `protobuf:"bytes,22,opt,name=processCode,proto3" json:"processCode"`
	ApplyBy               int64                  `protobuf:"varint,23,opt,name=applyBy,proto3" json:"applyBy"`
	ProjectPhaseIds       string                 `protobuf:"bytes,24,opt,name=projectPhaseIds,proto3" json:"projectPhaseIds"`
}

func (x *CreateHashProcessReq) Reset() {
	*x = CreateHashProcessReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[429]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHashProcessReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHashProcessReq) ProtoMessage() {}

func (x *CreateHashProcessReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[429]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHashProcessReq.ProtoReflect.Descriptor instead.
func (*CreateHashProcessReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{429}
}

func (x *CreateHashProcessReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateHashProcessReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CreateHashProcessReq) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *CreateHashProcessReq) GetGovermentId() int64 {
	if x != nil {
		return x.GovermentId
	}
	return 0
}

func (x *CreateHashProcessReq) GetProjectPhaseId() int64 {
	if x != nil {
		return x.ProjectPhaseId
	}
	return 0
}

func (x *CreateHashProcessReq) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *CreateHashProcessReq) GetApplyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyDate
	}
	return nil
}

func (x *CreateHashProcessReq) GetEstimatedApprovalDays() int64 {
	if x != nil {
		return x.EstimatedApprovalDays
	}
	return 0
}

func (x *CreateHashProcessReq) GetSortFlag() int64 {
	if x != nil {
		return x.SortFlag
	}
	return 0
}

func (x *CreateHashProcessReq) GetIsParallel() int64 {
	if x != nil {
		return x.IsParallel
	}
	return 0
}

func (x *CreateHashProcessReq) GetProcessStatus() string {
	if x != nil {
		return x.ProcessStatus
	}
	return ""
}

func (x *CreateHashProcessReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CreateHashProcessReq) GetApproveDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveDeadline
	}
	return nil
}

func (x *CreateHashProcessReq) GetApproveDeadlineWarn() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveDeadlineWarn
	}
	return nil
}

func (x *CreateHashProcessReq) GetApproveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveAt
	}
	return nil
}

func (x *CreateHashProcessReq) GetApproveDesc() string {
	if x != nil {
		return x.ApproveDesc
	}
	return ""
}

func (x *CreateHashProcessReq) GetPreProcessIds() string {
	if x != nil {
		return x.PreProcessIds
	}
	return ""
}

func (x *CreateHashProcessReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *CreateHashProcessReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CreateHashProcessReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *CreateHashProcessReq) GetUploadDocumentApply() []*DocumentInfoApply {
	if x != nil {
		return x.UploadDocumentApply
	}
	return nil
}

func (x *CreateHashProcessReq) GetProcessCode() string {
	if x != nil {
		return x.ProcessCode
	}
	return ""
}

func (x *CreateHashProcessReq) GetApplyBy() int64 {
	if x != nil {
		return x.ApplyBy
	}
	return 0
}

func (x *CreateHashProcessReq) GetProjectPhaseIds() string {
	if x != nil {
		return x.ProjectPhaseIds
	}
	return ""
}

type CreateHashProcessResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateHashProcessResp) Reset() {
	*x = CreateHashProcessResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[430]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHashProcessResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHashProcessResp) ProtoMessage() {}

func (x *CreateHashProcessResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[430]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHashProcessResp.ProtoReflect.Descriptor instead.
func (*CreateHashProcessResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{430}
}

func (x *CreateHashProcessResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//更新流程审批信息
type UpdateProcessReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ProjectId             int64                  `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId"`
	ConstructionId        int64                  `protobuf:"varint,3,opt,name=constructionId,proto3" json:"constructionId"`
	GovermentId           int64                  `protobuf:"varint,4,opt,name=govermentId,proto3" json:"govermentId"`
	ProjectPhaseId        int64                  `protobuf:"varint,5,opt,name=projectPhaseId,proto3" json:"projectPhaseId"`
	ProcessName           string                 `protobuf:"bytes,6,opt,name=processName,proto3" json:"processName"`
	ApplyDate             *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=applyDate,proto3" json:"applyDate"`
	EstimatedApprovalDays int64                  `protobuf:"varint,8,opt,name=estimatedApprovalDays,proto3" json:"estimatedApprovalDays"`
	SortFlag              int64                  `protobuf:"varint,9,opt,name=sortFlag,proto3" json:"sortFlag"`
	IsParallel            int64                  `protobuf:"varint,10,opt,name=isParallel,proto3" json:"isParallel"`
	ProcessStatus         string                 `protobuf:"bytes,11,opt,name=processStatus,proto3" json:"processStatus"`
	Memo                  string                 `protobuf:"bytes,12,opt,name=memo,proto3" json:"memo"`
	ApproveDeadline       *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=approveDeadline,proto3" json:"approveDeadline"`
	ApproveDeadlineWarn   *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=approveDeadlineWarn,proto3" json:"approveDeadlineWarn"`
	ApproveAt             *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=approveAt,proto3" json:"approveAt"`
	ApproveDesc           string                 `protobuf:"bytes,16,opt,name=approveDesc,proto3" json:"approveDesc"`
	PreProcessIds         string                 `protobuf:"bytes,17,opt,name=preProcessIds,proto3" json:"preProcessIds"`
	ActiveStatus          string                 `protobuf:"bytes,18,opt,name=activeStatus,proto3" json:"activeStatus"`
	UploadDocumentApply   []*DocumentInfoApply   `protobuf:"bytes,19,rep,name=uploadDocumentApply,proto3" json:"uploadDocumentApply"`
	ManagerId             int64                  `protobuf:"varint,20,opt,name=managerId,proto3" json:"managerId"`
	ApplyBy               int64                  `protobuf:"varint,21,opt,name=applyBy,proto3" json:"applyBy"`
	ProjectPhaseIds       string                 `protobuf:"bytes,22,opt,name=projectPhaseIds,proto3" json:"projectPhaseIds"`
}

func (x *UpdateProcessReq) Reset() {
	*x = UpdateProcessReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[431]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProcessReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProcessReq) ProtoMessage() {}

func (x *UpdateProcessReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[431]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProcessReq.ProtoReflect.Descriptor instead.
func (*UpdateProcessReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{431}
}

func (x *UpdateProcessReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProcessReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateProcessReq) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *UpdateProcessReq) GetGovermentId() int64 {
	if x != nil {
		return x.GovermentId
	}
	return 0
}

func (x *UpdateProcessReq) GetProjectPhaseId() int64 {
	if x != nil {
		return x.ProjectPhaseId
	}
	return 0
}

func (x *UpdateProcessReq) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *UpdateProcessReq) GetApplyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyDate
	}
	return nil
}

func (x *UpdateProcessReq) GetEstimatedApprovalDays() int64 {
	if x != nil {
		return x.EstimatedApprovalDays
	}
	return 0
}

func (x *UpdateProcessReq) GetSortFlag() int64 {
	if x != nil {
		return x.SortFlag
	}
	return 0
}

func (x *UpdateProcessReq) GetIsParallel() int64 {
	if x != nil {
		return x.IsParallel
	}
	return 0
}

func (x *UpdateProcessReq) GetProcessStatus() string {
	if x != nil {
		return x.ProcessStatus
	}
	return ""
}

func (x *UpdateProcessReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UpdateProcessReq) GetApproveDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveDeadline
	}
	return nil
}

func (x *UpdateProcessReq) GetApproveDeadlineWarn() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveDeadlineWarn
	}
	return nil
}

func (x *UpdateProcessReq) GetApproveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveAt
	}
	return nil
}

func (x *UpdateProcessReq) GetApproveDesc() string {
	if x != nil {
		return x.ApproveDesc
	}
	return ""
}

func (x *UpdateProcessReq) GetPreProcessIds() string {
	if x != nil {
		return x.PreProcessIds
	}
	return ""
}

func (x *UpdateProcessReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *UpdateProcessReq) GetUploadDocumentApply() []*DocumentInfoApply {
	if x != nil {
		return x.UploadDocumentApply
	}
	return nil
}

func (x *UpdateProcessReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *UpdateProcessReq) GetApplyBy() int64 {
	if x != nil {
		return x.ApplyBy
	}
	return 0
}

func (x *UpdateProcessReq) GetProjectPhaseIds() string {
	if x != nil {
		return x.ProjectPhaseIds
	}
	return ""
}

type UpdateProcessResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateProcessResp) Reset() {
	*x = UpdateProcessResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[432]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProcessResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProcessResp) ProtoMessage() {}

func (x *UpdateProcessResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[432]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProcessResp.ProtoReflect.Descriptor instead.
func (*UpdateProcessResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{432}
}

func (x *UpdateProcessResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type UpdateHashProcessReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ProjectId             int64                  `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId"`
	ConstructionId        int64                  `protobuf:"varint,3,opt,name=constructionId,proto3" json:"constructionId"`
	GovermentId           int64                  `protobuf:"varint,4,opt,name=govermentId,proto3" json:"govermentId"`
	ProjectPhaseId        int64                  `protobuf:"varint,5,opt,name=projectPhaseId,proto3" json:"projectPhaseId"`
	ProcessName           string                 `protobuf:"bytes,6,opt,name=processName,proto3" json:"processName"`
	ApplyDate             *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=applyDate,proto3" json:"applyDate"`
	EstimatedApprovalDays int64                  `protobuf:"varint,8,opt,name=estimatedApprovalDays,proto3" json:"estimatedApprovalDays"`
	SortFlag              int64                  `protobuf:"varint,9,opt,name=sortFlag,proto3" json:"sortFlag"`
	IsParallel            int64                  `protobuf:"varint,10,opt,name=isParallel,proto3" json:"isParallel"`
	ProcessStatus         string                 `protobuf:"bytes,11,opt,name=processStatus,proto3" json:"processStatus"`
	Memo                  string                 `protobuf:"bytes,12,opt,name=memo,proto3" json:"memo"`
	ApproveDeadline       *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=approveDeadline,proto3" json:"approveDeadline"`
	ApproveDeadlineWarn   *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=approveDeadlineWarn,proto3" json:"approveDeadlineWarn"`
	ApproveAt             *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=approveAt,proto3" json:"approveAt"`
	ApproveDesc           string                 `protobuf:"bytes,16,opt,name=approveDesc,proto3" json:"approveDesc"`
	PreProcessIds         string                 `protobuf:"bytes,17,opt,name=preProcessIds,proto3" json:"preProcessIds"`
	ActiveStatus          string                 `protobuf:"bytes,18,opt,name=activeStatus,proto3" json:"activeStatus"`
	InfoHash              string                 `protobuf:"bytes,19,opt,name=infoHash,proto3" json:"infoHash"`
	UploadDocumentApply   []*DocumentInfoApply   `protobuf:"bytes,20,rep,name=uploadDocumentApply,proto3" json:"uploadDocumentApply"`
	ManagerId             int64                  `protobuf:"varint,21,opt,name=managerId,proto3" json:"managerId"`
	ApplyBy               int64                  `protobuf:"varint,22,opt,name=applyBy,proto3" json:"applyBy"`
	ProjectPhaseIds       string                 `protobuf:"bytes,23,opt,name=projectPhaseIds,proto3" json:"projectPhaseIds"`
}

func (x *UpdateHashProcessReq) Reset() {
	*x = UpdateHashProcessReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[433]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHashProcessReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHashProcessReq) ProtoMessage() {}

func (x *UpdateHashProcessReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[433]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHashProcessReq.ProtoReflect.Descriptor instead.
func (*UpdateHashProcessReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{433}
}

func (x *UpdateHashProcessReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateHashProcessReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateHashProcessReq) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *UpdateHashProcessReq) GetGovermentId() int64 {
	if x != nil {
		return x.GovermentId
	}
	return 0
}

func (x *UpdateHashProcessReq) GetProjectPhaseId() int64 {
	if x != nil {
		return x.ProjectPhaseId
	}
	return 0
}

func (x *UpdateHashProcessReq) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *UpdateHashProcessReq) GetApplyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyDate
	}
	return nil
}

func (x *UpdateHashProcessReq) GetEstimatedApprovalDays() int64 {
	if x != nil {
		return x.EstimatedApprovalDays
	}
	return 0
}

func (x *UpdateHashProcessReq) GetSortFlag() int64 {
	if x != nil {
		return x.SortFlag
	}
	return 0
}

func (x *UpdateHashProcessReq) GetIsParallel() int64 {
	if x != nil {
		return x.IsParallel
	}
	return 0
}

func (x *UpdateHashProcessReq) GetProcessStatus() string {
	if x != nil {
		return x.ProcessStatus
	}
	return ""
}

func (x *UpdateHashProcessReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UpdateHashProcessReq) GetApproveDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveDeadline
	}
	return nil
}

func (x *UpdateHashProcessReq) GetApproveDeadlineWarn() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveDeadlineWarn
	}
	return nil
}

func (x *UpdateHashProcessReq) GetApproveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveAt
	}
	return nil
}

func (x *UpdateHashProcessReq) GetApproveDesc() string {
	if x != nil {
		return x.ApproveDesc
	}
	return ""
}

func (x *UpdateHashProcessReq) GetPreProcessIds() string {
	if x != nil {
		return x.PreProcessIds
	}
	return ""
}

func (x *UpdateHashProcessReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *UpdateHashProcessReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *UpdateHashProcessReq) GetUploadDocumentApply() []*DocumentInfoApply {
	if x != nil {
		return x.UploadDocumentApply
	}
	return nil
}

func (x *UpdateHashProcessReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *UpdateHashProcessReq) GetApplyBy() int64 {
	if x != nil {
		return x.ApplyBy
	}
	return 0
}

func (x *UpdateHashProcessReq) GetProjectPhaseIds() string {
	if x != nil {
		return x.ProjectPhaseIds
	}
	return ""
}

type UpdateHashProcessResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateHashProcessResp) Reset() {
	*x = UpdateHashProcessResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[434]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHashProcessResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHashProcessResp) ProtoMessage() {}

func (x *UpdateHashProcessResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[434]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHashProcessResp.ProtoReflect.Descriptor instead.
func (*UpdateHashProcessResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{434}
}

func (x *UpdateHashProcessResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//删除流程信息
type DeleteProcessReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessId int64 `protobuf:"varint,1,opt,name=processId,proto3" json:"processId"`
	ManagerId int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *DeleteProcessReq) Reset() {
	*x = DeleteProcessReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[435]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProcessReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProcessReq) ProtoMessage() {}

func (x *DeleteProcessReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[435]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProcessReq.ProtoReflect.Descriptor instead.
func (*DeleteProcessReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{435}
}

func (x *DeleteProcessReq) GetProcessId() int64 {
	if x != nil {
		return x.ProcessId
	}
	return 0
}

func (x *DeleteProcessReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type DeleteProcessResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteProcessResp) Reset() {
	*x = DeleteProcessResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[436]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProcessResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProcessResp) ProtoMessage() {}

func (x *DeleteProcessResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[436]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProcessResp.ProtoReflect.Descriptor instead.
func (*DeleteProcessResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{436}
}

//更新流顺序信息
type UpdateProcessSortReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	SortFlag  int64 `protobuf:"varint,2,opt,name=sortFlag,proto3" json:"sortFlag"`
	ManagerId int64 `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UpdateProcessSortReq) Reset() {
	*x = UpdateProcessSortReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[437]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProcessSortReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProcessSortReq) ProtoMessage() {}

func (x *UpdateProcessSortReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[437]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProcessSortReq.ProtoReflect.Descriptor instead.
func (*UpdateProcessSortReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{437}
}

func (x *UpdateProcessSortReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProcessSortReq) GetSortFlag() int64 {
	if x != nil {
		return x.SortFlag
	}
	return 0
}

func (x *UpdateProcessSortReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UpdateProcessSortResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateProcessSortResp) Reset() {
	*x = UpdateProcessSortResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[438]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProcessSortResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProcessSortResp) ProtoMessage() {}

func (x *UpdateProcessSortResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[438]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProcessSortResp.ProtoReflect.Descriptor instead.
func (*UpdateProcessSortResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{438}
}

func (x *UpdateProcessSortResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//流程审批列表
type ListProcessReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GovermentName    string                 `protobuf:"bytes,1,opt,name=GovermentName,proto3" json:"GovermentName"`
	ProcessName      string                 `protobuf:"bytes,2,opt,name=processName,proto3" json:"processName"`
	ProcessStatus    string                 `protobuf:"bytes,3,opt,name=processStatus,proto3" json:"processStatus"`
	Page             *Page                  `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
	ManagerId        int64                  `protobuf:"varint,5,opt,name=managerId,proto3" json:"managerId"`
	ApplyStartAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=applyStartAt,proto3" json:"applyStartAt"`
	ApplyEndAt       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=applyEndAt,proto3" json:"applyEndAt"`
	ApproveStartAt   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=approveStartAt,proto3" json:"approveStartAt"`
	ApproveEndAt     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=approveEndAt,proto3" json:"approveEndAt"`
	OrganizationId   int64                  `protobuf:"varint,11,opt,name=organizationId,proto3" json:"organizationId"`
	ProjectPhaseId   int64                  `protobuf:"varint,12,opt,name=projectPhaseId,proto3" json:"projectPhaseId"`
	FromPlatFormType string                 `protobuf:"bytes,13,opt,name=fromPlatFormType,proto3" json:"fromPlatFormType"`
	ActiveStatus     string                 `protobuf:"bytes,14,opt,name=activeStatus,proto3" json:"activeStatus"`
	ProjectPhaseIds  string                 `protobuf:"bytes,15,opt,name=projectPhaseIds,proto3" json:"projectPhaseIds"`
	IsParallel       int64                  `protobuf:"varint,16,opt,name=isParallel,proto3" json:"isParallel"`
}

func (x *ListProcessReq) Reset() {
	*x = ListProcessReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[439]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProcessReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProcessReq) ProtoMessage() {}

func (x *ListProcessReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[439]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProcessReq.ProtoReflect.Descriptor instead.
func (*ListProcessReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{439}
}

func (x *ListProcessReq) GetGovermentName() string {
	if x != nil {
		return x.GovermentName
	}
	return ""
}

func (x *ListProcessReq) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *ListProcessReq) GetProcessStatus() string {
	if x != nil {
		return x.ProcessStatus
	}
	return ""
}

func (x *ListProcessReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListProcessReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListProcessReq) GetApplyStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyStartAt
	}
	return nil
}

func (x *ListProcessReq) GetApplyEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyEndAt
	}
	return nil
}

func (x *ListProcessReq) GetApproveStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveStartAt
	}
	return nil
}

func (x *ListProcessReq) GetApproveEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveEndAt
	}
	return nil
}

func (x *ListProcessReq) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *ListProcessReq) GetProjectPhaseId() int64 {
	if x != nil {
		return x.ProjectPhaseId
	}
	return 0
}

func (x *ListProcessReq) GetFromPlatFormType() string {
	if x != nil {
		return x.FromPlatFormType
	}
	return ""
}

func (x *ListProcessReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *ListProcessReq) GetProjectPhaseIds() string {
	if x != nil {
		return x.ProjectPhaseIds
	}
	return ""
}

func (x *ListProcessReq) GetIsParallel() int64 {
	if x != nil {
		return x.IsParallel
	}
	return 0
}

type ListProcessResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ListProcessVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64            `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64            `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64            `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListProcessResp) Reset() {
	*x = ListProcessResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[440]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProcessResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProcessResp) ProtoMessage() {}

func (x *ListProcessResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[440]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProcessResp.ProtoReflect.Descriptor instead.
func (*ListProcessResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{440}
}

func (x *ListProcessResp) GetList() []*ListProcessVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListProcessResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListProcessResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListProcessResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ListProcessVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ProjectId                int64                  `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId"`
	ConstructionId           int64                  `protobuf:"varint,3,opt,name=constructionId,proto3" json:"constructionId"`
	GovermentId              int64                  `protobuf:"varint,4,opt,name=govermentId,proto3" json:"govermentId"`
	ProjectPhaseId           int64                  `protobuf:"varint,5,opt,name=projectPhaseId,proto3" json:"projectPhaseId"`
	ProcessName              string                 `protobuf:"bytes,6,opt,name=processName,proto3" json:"processName"`
	ApplyDate                *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=applyDate,proto3" json:"applyDate"`
	EstimatedApprovalDays    int64                  `protobuf:"varint,8,opt,name=estimatedApprovalDays,proto3" json:"estimatedApprovalDays"`
	SortFlag                 int64                  `protobuf:"varint,9,opt,name=sortFlag,proto3" json:"sortFlag"`
	IsParallel               int64                  `protobuf:"varint,10,opt,name=isParallel,proto3" json:"isParallel"`
	ProcessStatus            string                 `protobuf:"bytes,11,opt,name=processStatus,proto3" json:"processStatus"`
	Memo                     string                 `protobuf:"bytes,12,opt,name=memo,proto3" json:"memo"`
	ApproveDeadline          *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=approveDeadline,proto3" json:"approveDeadline"`
	ApproveDeadlineWarn      *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=approveDeadlineWarn,proto3" json:"approveDeadlineWarn"`
	ApproveAt                *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=approveAt,proto3" json:"approveAt"`
	ApproveDesc              string                 `protobuf:"bytes,16,opt,name=approveDesc,proto3" json:"approveDesc"`
	PreProcessIds            string                 `protobuf:"bytes,17,opt,name=preProcessIds,proto3" json:"preProcessIds"`
	ActiveStatus             string                 `protobuf:"bytes,18,opt,name=activeStatus,proto3" json:"activeStatus"`
	ProjectPhaseName         string                 `protobuf:"bytes,19,opt,name=projectPhaseName,proto3" json:"projectPhaseName"`
	ProjectPhaseDesc         string                 `protobuf:"bytes,20,opt,name=projectPhaseDesc,proto3" json:"projectPhaseDesc"`
	ProjectPhaseApprovalDays int64                  `protobuf:"varint,21,opt,name=projectPhaseApprovalDays,proto3" json:"projectPhaseApprovalDays"`
	ConstructionName         string                 `protobuf:"bytes,22,opt,name=constructionName,proto3" json:"constructionName"`
	GovermentName            string                 `protobuf:"bytes,23,opt,name=govermentName,proto3" json:"govermentName"`
	ProjectName              string                 `protobuf:"bytes,24,opt,name=projectName,proto3" json:"projectName"`
	ProjectPhaseIds          string                 `protobuf:"bytes,25,opt,name=projectPhaseIds,proto3" json:"projectPhaseIds"`
	ProjectPhaseIdsDesc      string                 `protobuf:"bytes,26,opt,name=projectPhaseIdsDesc,proto3" json:"projectPhaseIdsDesc"`
}

func (x *ListProcessVo) Reset() {
	*x = ListProcessVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[441]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProcessVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProcessVo) ProtoMessage() {}

func (x *ListProcessVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[441]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProcessVo.ProtoReflect.Descriptor instead.
func (*ListProcessVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{441}
}

func (x *ListProcessVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListProcessVo) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListProcessVo) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *ListProcessVo) GetGovermentId() int64 {
	if x != nil {
		return x.GovermentId
	}
	return 0
}

func (x *ListProcessVo) GetProjectPhaseId() int64 {
	if x != nil {
		return x.ProjectPhaseId
	}
	return 0
}

func (x *ListProcessVo) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *ListProcessVo) GetApplyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyDate
	}
	return nil
}

func (x *ListProcessVo) GetEstimatedApprovalDays() int64 {
	if x != nil {
		return x.EstimatedApprovalDays
	}
	return 0
}

func (x *ListProcessVo) GetSortFlag() int64 {
	if x != nil {
		return x.SortFlag
	}
	return 0
}

func (x *ListProcessVo) GetIsParallel() int64 {
	if x != nil {
		return x.IsParallel
	}
	return 0
}

func (x *ListProcessVo) GetProcessStatus() string {
	if x != nil {
		return x.ProcessStatus
	}
	return ""
}

func (x *ListProcessVo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *ListProcessVo) GetApproveDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveDeadline
	}
	return nil
}

func (x *ListProcessVo) GetApproveDeadlineWarn() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveDeadlineWarn
	}
	return nil
}

func (x *ListProcessVo) GetApproveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveAt
	}
	return nil
}

func (x *ListProcessVo) GetApproveDesc() string {
	if x != nil {
		return x.ApproveDesc
	}
	return ""
}

func (x *ListProcessVo) GetPreProcessIds() string {
	if x != nil {
		return x.PreProcessIds
	}
	return ""
}

func (x *ListProcessVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *ListProcessVo) GetProjectPhaseName() string {
	if x != nil {
		return x.ProjectPhaseName
	}
	return ""
}

func (x *ListProcessVo) GetProjectPhaseDesc() string {
	if x != nil {
		return x.ProjectPhaseDesc
	}
	return ""
}

func (x *ListProcessVo) GetProjectPhaseApprovalDays() int64 {
	if x != nil {
		return x.ProjectPhaseApprovalDays
	}
	return 0
}

func (x *ListProcessVo) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *ListProcessVo) GetGovermentName() string {
	if x != nil {
		return x.GovermentName
	}
	return ""
}

func (x *ListProcessVo) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ListProcessVo) GetProjectPhaseIds() string {
	if x != nil {
		return x.ProjectPhaseIds
	}
	return ""
}

func (x *ListProcessVo) GetProjectPhaseIdsDesc() string {
	if x != nil {
		return x.ProjectPhaseIdsDesc
	}
	return ""
}

//流程审批详情
type CommonProcessReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessId   int64 `protobuf:"varint,1,opt,name=processId,proto3" json:"processId"`
	ManagerId   int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
	GovermentId int64 `protobuf:"varint,3,opt,name=govermentId,proto3" json:"govermentId"`
}

func (x *CommonProcessReq) Reset() {
	*x = CommonProcessReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[442]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonProcessReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonProcessReq) ProtoMessage() {}

func (x *CommonProcessReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[442]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonProcessReq.ProtoReflect.Descriptor instead.
func (*CommonProcessReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{442}
}

func (x *CommonProcessReq) GetProcessId() int64 {
	if x != nil {
		return x.ProcessId
	}
	return 0
}

func (x *CommonProcessReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CommonProcessReq) GetGovermentId() int64 {
	if x != nil {
		return x.GovermentId
	}
	return 0
}

type CommonProcessResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ProjectId             int64                  `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId"`
	ConstructionId        int64                  `protobuf:"varint,3,opt,name=constructionId,proto3" json:"constructionId"`
	GovermentId           int64                  `protobuf:"varint,4,opt,name=govermentId,proto3" json:"govermentId"`
	ProjectPhaseId        int64                  `protobuf:"varint,5,opt,name=projectPhaseId,proto3" json:"projectPhaseId"`
	ProcessName           string                 `protobuf:"bytes,6,opt,name=processName,proto3" json:"processName"`
	ApplyDate             *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=applyDate,proto3" json:"applyDate"`
	EstimatedApprovalDays int64                  `protobuf:"varint,8,opt,name=estimatedApprovalDays,proto3" json:"estimatedApprovalDays"`
	SortFlag              int64                  `protobuf:"varint,9,opt,name=sortFlag,proto3" json:"sortFlag"`
	IsParallel            int64                  `protobuf:"varint,10,opt,name=isParallel,proto3" json:"isParallel"`
	ProcessStatus         string                 `protobuf:"bytes,11,opt,name=processStatus,proto3" json:"processStatus"`
	Memo                  string                 `protobuf:"bytes,12,opt,name=memo,proto3" json:"memo"`
	ApproveDeadline       *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=approveDeadline,proto3" json:"approveDeadline"`
	ApproveDeadlineWarn   *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=approveDeadlineWarn,proto3" json:"approveDeadlineWarn"`
	ApproveAt             *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=approveAt,proto3" json:"approveAt"`
	ApproveDesc           string                 `protobuf:"bytes,16,opt,name=approveDesc,proto3" json:"approveDesc"`
	PreProcessIds         string                 `protobuf:"bytes,17,opt,name=preProcessIds,proto3" json:"preProcessIds"`
	ActiveStatus          string                 `protobuf:"bytes,18,opt,name=activeStatus,proto3" json:"activeStatus"`
	ProjectPhaseIds       string                 `protobuf:"bytes,19,opt,name=projectPhaseIds,proto3" json:"projectPhaseIds"`
	ProjectPhaseIdsDesc   string                 `protobuf:"bytes,20,opt,name=projectPhaseIdsDesc,proto3" json:"projectPhaseIdsDesc"`
}

func (x *CommonProcessResp) Reset() {
	*x = CommonProcessResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[443]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonProcessResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonProcessResp) ProtoMessage() {}

func (x *CommonProcessResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[443]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonProcessResp.ProtoReflect.Descriptor instead.
func (*CommonProcessResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{443}
}

func (x *CommonProcessResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommonProcessResp) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CommonProcessResp) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *CommonProcessResp) GetGovermentId() int64 {
	if x != nil {
		return x.GovermentId
	}
	return 0
}

func (x *CommonProcessResp) GetProjectPhaseId() int64 {
	if x != nil {
		return x.ProjectPhaseId
	}
	return 0
}

func (x *CommonProcessResp) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *CommonProcessResp) GetApplyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyDate
	}
	return nil
}

func (x *CommonProcessResp) GetEstimatedApprovalDays() int64 {
	if x != nil {
		return x.EstimatedApprovalDays
	}
	return 0
}

func (x *CommonProcessResp) GetSortFlag() int64 {
	if x != nil {
		return x.SortFlag
	}
	return 0
}

func (x *CommonProcessResp) GetIsParallel() int64 {
	if x != nil {
		return x.IsParallel
	}
	return 0
}

func (x *CommonProcessResp) GetProcessStatus() string {
	if x != nil {
		return x.ProcessStatus
	}
	return ""
}

func (x *CommonProcessResp) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CommonProcessResp) GetApproveDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveDeadline
	}
	return nil
}

func (x *CommonProcessResp) GetApproveDeadlineWarn() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveDeadlineWarn
	}
	return nil
}

func (x *CommonProcessResp) GetApproveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveAt
	}
	return nil
}

func (x *CommonProcessResp) GetApproveDesc() string {
	if x != nil {
		return x.ApproveDesc
	}
	return ""
}

func (x *CommonProcessResp) GetPreProcessIds() string {
	if x != nil {
		return x.PreProcessIds
	}
	return ""
}

func (x *CommonProcessResp) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *CommonProcessResp) GetProjectPhaseIds() string {
	if x != nil {
		return x.ProjectPhaseIds
	}
	return ""
}

func (x *CommonProcessResp) GetProjectPhaseIdsDesc() string {
	if x != nil {
		return x.ProjectPhaseIdsDesc
	}
	return ""
}

type UploadDocumentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName     string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName"`
	UploadUrl    string `protobuf:"bytes,2,opt,name=uploadUrl,proto3" json:"uploadUrl"`
	BusinessId   int64  `protobuf:"varint,3,opt,name=businessId,proto3" json:"businessId"`
	BusinessType string `protobuf:"bytes,4,opt,name=businessType,proto3" json:"businessType"`
}

func (x *UploadDocumentInfo) Reset() {
	*x = UploadDocumentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[444]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadDocumentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadDocumentInfo) ProtoMessage() {}

func (x *UploadDocumentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[444]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadDocumentInfo.ProtoReflect.Descriptor instead.
func (*UploadDocumentInfo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{444}
}

func (x *UploadDocumentInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *UploadDocumentInfo) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

func (x *UploadDocumentInfo) GetBusinessId() int64 {
	if x != nil {
		return x.BusinessId
	}
	return 0
}

func (x *UploadDocumentInfo) GetBusinessType() string {
	if x != nil {
		return x.BusinessType
	}
	return ""
}

type ProjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId          int64                  `protobuf:"varint,1,opt,name=projectId,proto3" json:"projectId"`
	ProjectCode        string                 `protobuf:"bytes,2,opt,name=projectCode,proto3" json:"projectCode"`
	ProjectName        string                 `protobuf:"bytes,3,opt,name=projectName,proto3" json:"projectName"`
	StartAt            *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=startAt,proto3" json:"startAt"`
	EndAt              *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=endAt,proto3" json:"endAt"`
	BuildingArea       int64                  `protobuf:"varint,6,opt,name=buildingArea,proto3" json:"buildingArea"`
	EngineeringCost    int64                  `protobuf:"varint,7,opt,name=engineeringCost,proto3" json:"engineeringCost"`
	ProjectAddress     string                 `protobuf:"bytes,8,opt,name=projectAddress,proto3" json:"projectAddress"`
	FormType           string                 `protobuf:"bytes,9,opt,name=formType,proto3" json:"formType"`
	ProjectLeader      string                 `protobuf:"bytes,10,opt,name=projectLeader,proto3" json:"projectLeader"`
	ContactMobile      string                 `protobuf:"bytes,11,opt,name=contactMobile,proto3" json:"contactMobile"`
	ContactAddress     string                 `protobuf:"bytes,12,opt,name=contactAddress,proto3" json:"contactAddress"`
	ConstructionName   string                 `protobuf:"bytes,13,opt,name=constructionName,proto3" json:"constructionName"`
	DesignName         string                 `protobuf:"bytes,14,opt,name=designName,proto3" json:"designName"`
	BuildName          string                 `protobuf:"bytes,15,opt,name=buildName,proto3" json:"buildName"`
	SupervisorName     string                 `protobuf:"bytes,16,opt,name=supervisorName,proto3" json:"supervisorName"`
	ActiveStatus       string                 `protobuf:"bytes,17,opt,name=activeStatus,proto3" json:"activeStatus"`
	ProjectDescription string                 `protobuf:"bytes,18,opt,name=projectDescription,proto3" json:"projectDescription"`
	Memo               string                 `protobuf:"bytes,19,opt,name=memo,proto3" json:"memo"`
	UploadDocument     []*UploadDocumentInfo  `protobuf:"bytes,20,rep,name=uploadDocument,proto3" json:"uploadDocument"`
	InfoHash           string                 `protobuf:"bytes,21,opt,name=infoHash,proto3" json:"infoHash"`
	Page               *Page                  `protobuf:"bytes,22,opt,name=page,proto3" json:"page"`
	ManagerId          int64                  `protobuf:"varint,23,opt,name=managerId,proto3" json:"managerId"`
}

func (x *ProjectReq) Reset() {
	*x = ProjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[445]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectReq) ProtoMessage() {}

func (x *ProjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[445]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectReq.ProtoReflect.Descriptor instead.
func (*ProjectReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{445}
}

func (x *ProjectReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ProjectReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *ProjectReq) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ProjectReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *ProjectReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *ProjectReq) GetBuildingArea() int64 {
	if x != nil {
		return x.BuildingArea
	}
	return 0
}

func (x *ProjectReq) GetEngineeringCost() int64 {
	if x != nil {
		return x.EngineeringCost
	}
	return 0
}

func (x *ProjectReq) GetProjectAddress() string {
	if x != nil {
		return x.ProjectAddress
	}
	return ""
}

func (x *ProjectReq) GetFormType() string {
	if x != nil {
		return x.FormType
	}
	return ""
}

func (x *ProjectReq) GetProjectLeader() string {
	if x != nil {
		return x.ProjectLeader
	}
	return ""
}

func (x *ProjectReq) GetContactMobile() string {
	if x != nil {
		return x.ContactMobile
	}
	return ""
}

func (x *ProjectReq) GetContactAddress() string {
	if x != nil {
		return x.ContactAddress
	}
	return ""
}

func (x *ProjectReq) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *ProjectReq) GetDesignName() string {
	if x != nil {
		return x.DesignName
	}
	return ""
}

func (x *ProjectReq) GetBuildName() string {
	if x != nil {
		return x.BuildName
	}
	return ""
}

func (x *ProjectReq) GetSupervisorName() string {
	if x != nil {
		return x.SupervisorName
	}
	return ""
}

func (x *ProjectReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *ProjectReq) GetProjectDescription() string {
	if x != nil {
		return x.ProjectDescription
	}
	return ""
}

func (x *ProjectReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *ProjectReq) GetUploadDocument() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocument
	}
	return nil
}

func (x *ProjectReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *ProjectReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ProjectReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ProjectVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId          int64                  `protobuf:"varint,1,opt,name=projectId,proto3" json:"projectId"`
	ProjectCode        string                 `protobuf:"bytes,2,opt,name=projectCode,proto3" json:"projectCode"`
	ProjectName        string                 `protobuf:"bytes,3,opt,name=projectName,proto3" json:"projectName"`
	StartAt            *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=startAt,proto3" json:"startAt"`
	EndAt              *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=endAt,proto3" json:"endAt"`
	BuildingArea       int64                  `protobuf:"varint,6,opt,name=buildingArea,proto3" json:"buildingArea"`
	EngineeringCost    int64                  `protobuf:"varint,7,opt,name=engineeringCost,proto3" json:"engineeringCost"`
	ProjectAddress     string                 `protobuf:"bytes,8,opt,name=projectAddress,proto3" json:"projectAddress"`
	FormType           string                 `protobuf:"bytes,9,opt,name=formType,proto3" json:"formType"`
	ProjectLeader      string                 `protobuf:"bytes,10,opt,name=projectLeader,proto3" json:"projectLeader"`
	ContactMobile      string                 `protobuf:"bytes,11,opt,name=contactMobile,proto3" json:"contactMobile"`
	ContactAddress     string                 `protobuf:"bytes,12,opt,name=contactAddress,proto3" json:"contactAddress"`
	ConstructionName   string                 `protobuf:"bytes,13,opt,name=constructionName,proto3" json:"constructionName"`
	DesignName         string                 `protobuf:"bytes,14,opt,name=designName,proto3" json:"designName"`
	BuildName          string                 `protobuf:"bytes,15,opt,name=buildName,proto3" json:"buildName"`
	SupervisorName     string                 `protobuf:"bytes,16,opt,name=supervisorName,proto3" json:"supervisorName"`
	ActiveStatus       string                 `protobuf:"bytes,17,opt,name=activeStatus,proto3" json:"activeStatus"`
	ProjectDescription string                 `protobuf:"bytes,18,opt,name=projectDescription,proto3" json:"projectDescription"`
	Memo               string                 `protobuf:"bytes,19,opt,name=memo,proto3" json:"memo"`
	UploadDocument     []*UploadDocumentInfo  `protobuf:"bytes,20,rep,name=uploadDocument,proto3" json:"uploadDocument"`
	CreatedBy          int64                  `protobuf:"varint,21,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy          int64                  `protobuf:"varint,23,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=updatedAt,proto3" json:"updatedAt"`
	HashInfo           string                 `protobuf:"bytes,25,opt,name=hashInfo,proto3" json:"hashInfo"`
}

func (x *ProjectVo) Reset() {
	*x = ProjectVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[446]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectVo) ProtoMessage() {}

func (x *ProjectVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[446]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectVo.ProtoReflect.Descriptor instead.
func (*ProjectVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{446}
}

func (x *ProjectVo) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ProjectVo) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *ProjectVo) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ProjectVo) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *ProjectVo) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *ProjectVo) GetBuildingArea() int64 {
	if x != nil {
		return x.BuildingArea
	}
	return 0
}

func (x *ProjectVo) GetEngineeringCost() int64 {
	if x != nil {
		return x.EngineeringCost
	}
	return 0
}

func (x *ProjectVo) GetProjectAddress() string {
	if x != nil {
		return x.ProjectAddress
	}
	return ""
}

func (x *ProjectVo) GetFormType() string {
	if x != nil {
		return x.FormType
	}
	return ""
}

func (x *ProjectVo) GetProjectLeader() string {
	if x != nil {
		return x.ProjectLeader
	}
	return ""
}

func (x *ProjectVo) GetContactMobile() string {
	if x != nil {
		return x.ContactMobile
	}
	return ""
}

func (x *ProjectVo) GetContactAddress() string {
	if x != nil {
		return x.ContactAddress
	}
	return ""
}

func (x *ProjectVo) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *ProjectVo) GetDesignName() string {
	if x != nil {
		return x.DesignName
	}
	return ""
}

func (x *ProjectVo) GetBuildName() string {
	if x != nil {
		return x.BuildName
	}
	return ""
}

func (x *ProjectVo) GetSupervisorName() string {
	if x != nil {
		return x.SupervisorName
	}
	return ""
}

func (x *ProjectVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *ProjectVo) GetProjectDescription() string {
	if x != nil {
		return x.ProjectDescription
	}
	return ""
}

func (x *ProjectVo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *ProjectVo) GetUploadDocument() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocument
	}
	return nil
}

func (x *ProjectVo) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *ProjectVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ProjectVo) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *ProjectVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ProjectVo) GetHashInfo() string {
	if x != nil {
		return x.HashInfo
	}
	return ""
}

type ProjectsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ProjectVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64        `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64        `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64        `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ProjectsResp) Reset() {
	*x = ProjectsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[447]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectsResp) ProtoMessage() {}

func (x *ProjectsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[447]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectsResp.ProtoReflect.Descriptor instead.
func (*ProjectsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{447}
}

func (x *ProjectsResp) GetList() []*ProjectVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ProjectsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ProjectsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ProjectsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type CreateProjectHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode        string                 `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode"`
	ProjectName        string                 `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName"`
	StartAt            *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=startAt,proto3" json:"startAt"`
	EndAt              *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=endAt,proto3" json:"endAt"`
	BuildingArea       int64                  `protobuf:"varint,5,opt,name=buildingArea,proto3" json:"buildingArea"`
	EngineeringCost    int64                  `protobuf:"varint,6,opt,name=engineeringCost,proto3" json:"engineeringCost"`
	ProjectAddress     string                 `protobuf:"bytes,7,opt,name=projectAddress,proto3" json:"projectAddress"`
	FormType           string                 `protobuf:"bytes,8,opt,name=formType,proto3" json:"formType"`
	ProjectLeader      string                 `protobuf:"bytes,9,opt,name=projectLeader,proto3" json:"projectLeader"`
	ContactMobile      string                 `protobuf:"bytes,10,opt,name=contactMobile,proto3" json:"contactMobile"`
	ContactAddress     string                 `protobuf:"bytes,11,opt,name=contactAddress,proto3" json:"contactAddress"`
	ConstructionName   string                 `protobuf:"bytes,12,opt,name=constructionName,proto3" json:"constructionName"`
	DesignName         string                 `protobuf:"bytes,13,opt,name=designName,proto3" json:"designName"`
	BuildName          string                 `protobuf:"bytes,14,opt,name=buildName,proto3" json:"buildName"`
	SupervisorName     string                 `protobuf:"bytes,15,opt,name=supervisorName,proto3" json:"supervisorName"`
	ActiveStatus       string                 `protobuf:"bytes,16,opt,name=activeStatus,proto3" json:"activeStatus"`
	ProjectDescription string                 `protobuf:"bytes,17,opt,name=projectDescription,proto3" json:"projectDescription"`
	Memo               string                 `protobuf:"bytes,18,opt,name=memo,proto3" json:"memo"`
	UploadDocument     []*UploadDocumentInfo  `protobuf:"bytes,19,rep,name=uploadDocument,proto3" json:"uploadDocument"`
	InfoHash           string                 `protobuf:"bytes,20,opt,name=infoHash,proto3" json:"infoHash"`
	ManagerId          int64                  `protobuf:"varint,21,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateProjectHashReq) Reset() {
	*x = CreateProjectHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[448]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProjectHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectHashReq) ProtoMessage() {}

func (x *CreateProjectHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[448]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectHashReq.ProtoReflect.Descriptor instead.
func (*CreateProjectHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{448}
}

func (x *CreateProjectHashReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *CreateProjectHashReq) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *CreateProjectHashReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *CreateProjectHashReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *CreateProjectHashReq) GetBuildingArea() int64 {
	if x != nil {
		return x.BuildingArea
	}
	return 0
}

func (x *CreateProjectHashReq) GetEngineeringCost() int64 {
	if x != nil {
		return x.EngineeringCost
	}
	return 0
}

func (x *CreateProjectHashReq) GetProjectAddress() string {
	if x != nil {
		return x.ProjectAddress
	}
	return ""
}

func (x *CreateProjectHashReq) GetFormType() string {
	if x != nil {
		return x.FormType
	}
	return ""
}

func (x *CreateProjectHashReq) GetProjectLeader() string {
	if x != nil {
		return x.ProjectLeader
	}
	return ""
}

func (x *CreateProjectHashReq) GetContactMobile() string {
	if x != nil {
		return x.ContactMobile
	}
	return ""
}

func (x *CreateProjectHashReq) GetContactAddress() string {
	if x != nil {
		return x.ContactAddress
	}
	return ""
}

func (x *CreateProjectHashReq) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *CreateProjectHashReq) GetDesignName() string {
	if x != nil {
		return x.DesignName
	}
	return ""
}

func (x *CreateProjectHashReq) GetBuildName() string {
	if x != nil {
		return x.BuildName
	}
	return ""
}

func (x *CreateProjectHashReq) GetSupervisorName() string {
	if x != nil {
		return x.SupervisorName
	}
	return ""
}

func (x *CreateProjectHashReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *CreateProjectHashReq) GetProjectDescription() string {
	if x != nil {
		return x.ProjectDescription
	}
	return ""
}

func (x *CreateProjectHashReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CreateProjectHashReq) GetUploadDocument() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocument
	}
	return nil
}

func (x *CreateProjectHashReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *CreateProjectHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UpdateProjectHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId          int64                  `protobuf:"varint,1,opt,name=projectId,proto3" json:"projectId"`
	ProjectCode        string                 `protobuf:"bytes,2,opt,name=projectCode,proto3" json:"projectCode"`
	ProjectName        string                 `protobuf:"bytes,3,opt,name=projectName,proto3" json:"projectName"`
	StartAt            *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=startAt,proto3" json:"startAt"`
	EndAt              *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=endAt,proto3" json:"endAt"`
	BuildingArea       int64                  `protobuf:"varint,6,opt,name=buildingArea,proto3" json:"buildingArea"`
	EngineeringCost    int64                  `protobuf:"varint,7,opt,name=engineeringCost,proto3" json:"engineeringCost"`
	ProjectAddress     string                 `protobuf:"bytes,8,opt,name=projectAddress,proto3" json:"projectAddress"`
	FormType           string                 `protobuf:"bytes,9,opt,name=formType,proto3" json:"formType"`
	ProjectLeader      string                 `protobuf:"bytes,10,opt,name=projectLeader,proto3" json:"projectLeader"`
	ContactMobile      string                 `protobuf:"bytes,11,opt,name=contactMobile,proto3" json:"contactMobile"`
	ContactAddress     string                 `protobuf:"bytes,12,opt,name=contactAddress,proto3" json:"contactAddress"`
	ConstructionName   string                 `protobuf:"bytes,13,opt,name=constructionName,proto3" json:"constructionName"`
	DesignName         string                 `protobuf:"bytes,14,opt,name=designName,proto3" json:"designName"`
	BuildName          string                 `protobuf:"bytes,15,opt,name=buildName,proto3" json:"buildName"`
	SupervisorName     string                 `protobuf:"bytes,16,opt,name=supervisorName,proto3" json:"supervisorName"`
	ActiveStatus       string                 `protobuf:"bytes,17,opt,name=activeStatus,proto3" json:"activeStatus"`
	ProjectDescription string                 `protobuf:"bytes,18,opt,name=projectDescription,proto3" json:"projectDescription"`
	Memo               string                 `protobuf:"bytes,19,opt,name=memo,proto3" json:"memo"`
	UploadDocument     []*UploadDocumentInfo  `protobuf:"bytes,20,rep,name=uploadDocument,proto3" json:"uploadDocument"`
	InfoHash           string                 `protobuf:"bytes,21,opt,name=infoHash,proto3" json:"infoHash"`
	ManagerId          int64                  `protobuf:"varint,22,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UpdateProjectHashReq) Reset() {
	*x = UpdateProjectHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[449]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectHashReq) ProtoMessage() {}

func (x *UpdateProjectHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[449]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectHashReq.ProtoReflect.Descriptor instead.
func (*UpdateProjectHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{449}
}

func (x *UpdateProjectHashReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateProjectHashReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *UpdateProjectHashReq) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *UpdateProjectHashReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *UpdateProjectHashReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *UpdateProjectHashReq) GetBuildingArea() int64 {
	if x != nil {
		return x.BuildingArea
	}
	return 0
}

func (x *UpdateProjectHashReq) GetEngineeringCost() int64 {
	if x != nil {
		return x.EngineeringCost
	}
	return 0
}

func (x *UpdateProjectHashReq) GetProjectAddress() string {
	if x != nil {
		return x.ProjectAddress
	}
	return ""
}

func (x *UpdateProjectHashReq) GetFormType() string {
	if x != nil {
		return x.FormType
	}
	return ""
}

func (x *UpdateProjectHashReq) GetProjectLeader() string {
	if x != nil {
		return x.ProjectLeader
	}
	return ""
}

func (x *UpdateProjectHashReq) GetContactMobile() string {
	if x != nil {
		return x.ContactMobile
	}
	return ""
}

func (x *UpdateProjectHashReq) GetContactAddress() string {
	if x != nil {
		return x.ContactAddress
	}
	return ""
}

func (x *UpdateProjectHashReq) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *UpdateProjectHashReq) GetDesignName() string {
	if x != nil {
		return x.DesignName
	}
	return ""
}

func (x *UpdateProjectHashReq) GetBuildName() string {
	if x != nil {
		return x.BuildName
	}
	return ""
}

func (x *UpdateProjectHashReq) GetSupervisorName() string {
	if x != nil {
		return x.SupervisorName
	}
	return ""
}

func (x *UpdateProjectHashReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *UpdateProjectHashReq) GetProjectDescription() string {
	if x != nil {
		return x.ProjectDescription
	}
	return ""
}

func (x *UpdateProjectHashReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UpdateProjectHashReq) GetUploadDocument() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocument
	}
	return nil
}

func (x *UpdateProjectHashReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *UpdateProjectHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type GetProjectHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId  int64   `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ProjectIds []int64 `protobuf:"varint,2,rep,packed,name=projectIds,proto3" json:"projectIds"`
}

func (x *GetProjectHashReq) Reset() {
	*x = GetProjectHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[450]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectHashReq) ProtoMessage() {}

func (x *GetProjectHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[450]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectHashReq.ProtoReflect.Descriptor instead.
func (*GetProjectHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{450}
}

func (x *GetProjectHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetProjectHashReq) GetProjectIds() []int64 {
	if x != nil {
		return x.ProjectIds
	}
	return nil
}

type ProjectHashVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    int64                  `protobuf:"varint,1,opt,name=projectId,proto3" json:"projectId"`
	ProjectCode  string                 `protobuf:"bytes,2,opt,name=projectCode,proto3" json:"projectCode"`
	InfoHash     string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
}

func (x *ProjectHashVo) Reset() {
	*x = ProjectHashVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[451]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectHashVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectHashVo) ProtoMessage() {}

func (x *ProjectHashVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[451]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectHashVo.ProtoReflect.Descriptor instead.
func (*ProjectHashVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{451}
}

func (x *ProjectHashVo) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ProjectHashVo) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *ProjectHashVo) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *ProjectHashVo) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

type GetProjectHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ProjectHashVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64            `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64            `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64            `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetProjectHashResp) Reset() {
	*x = GetProjectHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[452]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectHashResp) ProtoMessage() {}

func (x *GetProjectHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[452]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectHashResp.ProtoReflect.Descriptor instead.
func (*GetProjectHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{452}
}

func (x *GetProjectHashResp) GetList() []*ProjectHashVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetProjectHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetProjectHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetProjectHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ProgressPlanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgressPlanId   int64                  `protobuf:"varint,1,opt,name=progressPlanId,proto3" json:"progressPlanId"`
	ProgressPlanCode string                 `protobuf:"bytes,2,opt,name=progressPlanCode,proto3" json:"progressPlanCode"`
	ProjectId        int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	ProjectName      string                 `protobuf:"bytes,4,opt,name=projectName,proto3" json:"projectName"`
	BuildId          int64                  `protobuf:"varint,5,opt,name=buildId,proto3" json:"buildId"`
	PlanName         string                 `protobuf:"bytes,6,opt,name=planName,proto3" json:"planName"`
	StartAt          *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=startAt,proto3" json:"startAt"`
	EndAt            *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=endAt,proto3" json:"endAt"`
	PlanPerson       string                 `protobuf:"bytes,9,opt,name=planPerson,proto3" json:"planPerson"`
	MilestoneStatus  string                 `protobuf:"bytes,10,opt,name=milestoneStatus,proto3" json:"milestoneStatus"`
	ActualDate       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=actualDate,proto3" json:"actualDate"`
	ActualPercent    int64                  `protobuf:"varint,12,opt,name=actualPercent,proto3" json:"actualPercent"`
	ActiveStatus     string                 `protobuf:"bytes,13,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo             string                 `protobuf:"bytes,14,opt,name=memo,proto3" json:"memo"`
	UploadDocument   []*UploadDocumentInfo  `protobuf:"bytes,15,rep,name=uploadDocument,proto3" json:"uploadDocument"`
	InfoHash         string                 `protobuf:"bytes,16,opt,name=infoHash,proto3" json:"infoHash"`
	Page             *Page                  `protobuf:"bytes,17,opt,name=page,proto3" json:"page"`
	ManagerId        int64                  `protobuf:"varint,18,opt,name=managerId,proto3" json:"managerId"`
}

func (x *ProgressPlanReq) Reset() {
	*x = ProgressPlanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[453]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressPlanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressPlanReq) ProtoMessage() {}

func (x *ProgressPlanReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[453]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressPlanReq.ProtoReflect.Descriptor instead.
func (*ProgressPlanReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{453}
}

func (x *ProgressPlanReq) GetProgressPlanId() int64 {
	if x != nil {
		return x.ProgressPlanId
	}
	return 0
}

func (x *ProgressPlanReq) GetProgressPlanCode() string {
	if x != nil {
		return x.ProgressPlanCode
	}
	return ""
}

func (x *ProgressPlanReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ProgressPlanReq) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ProgressPlanReq) GetBuildId() int64 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

func (x *ProgressPlanReq) GetPlanName() string {
	if x != nil {
		return x.PlanName
	}
	return ""
}

func (x *ProgressPlanReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *ProgressPlanReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *ProgressPlanReq) GetPlanPerson() string {
	if x != nil {
		return x.PlanPerson
	}
	return ""
}

func (x *ProgressPlanReq) GetMilestoneStatus() string {
	if x != nil {
		return x.MilestoneStatus
	}
	return ""
}

func (x *ProgressPlanReq) GetActualDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ActualDate
	}
	return nil
}

func (x *ProgressPlanReq) GetActualPercent() int64 {
	if x != nil {
		return x.ActualPercent
	}
	return 0
}

func (x *ProgressPlanReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *ProgressPlanReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *ProgressPlanReq) GetUploadDocument() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocument
	}
	return nil
}

func (x *ProgressPlanReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *ProgressPlanReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ProgressPlanReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ProgressPlanVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgressPlanId   int64                  `protobuf:"varint,1,opt,name=progressPlanId,proto3" json:"progressPlanId"`
	ProgressPlanCode string                 `protobuf:"bytes,2,opt,name=progressPlanCode,proto3" json:"progressPlanCode"`
	ProjectId        int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	ProjectName      string                 `protobuf:"bytes,4,opt,name=projectName,proto3" json:"projectName"`
	BuildId          int64                  `protobuf:"varint,5,opt,name=buildId,proto3" json:"buildId"`
	PlanName         string                 `protobuf:"bytes,6,opt,name=planName,proto3" json:"planName"`
	StartAt          *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=startAt,proto3" json:"startAt"`
	EndAt            *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=endAt,proto3" json:"endAt"`
	PlanPerson       string                 `protobuf:"bytes,9,opt,name=planPerson,proto3" json:"planPerson"`
	MilestoneStatus  string                 `protobuf:"bytes,10,opt,name=milestoneStatus,proto3" json:"milestoneStatus"`
	ActualDate       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=actualDate,proto3" json:"actualDate"`
	ActualPercent    int64                  `protobuf:"varint,12,opt,name=actualPercent,proto3" json:"actualPercent"`
	ActiveStatus     string                 `protobuf:"bytes,13,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo             string                 `protobuf:"bytes,14,opt,name=memo,proto3" json:"memo"`
	UploadDocument   []*UploadDocumentInfo  `protobuf:"bytes,15,rep,name=uploadDocument,proto3" json:"uploadDocument"`
	CreatedBy        int64                  `protobuf:"varint,16,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedByName    string                 `protobuf:"bytes,17,opt,name=createdByName,proto3" json:"createdByName"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy        int64                  `protobuf:"varint,19,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedByName    string                 `protobuf:"bytes,20,opt,name=updatedByName,proto3" json:"updatedByName"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=updatedAt,proto3" json:"updatedAt"`
	HashInfo         string                 `protobuf:"bytes,22,opt,name=hashInfo,proto3" json:"hashInfo"`
}

func (x *ProgressPlanVo) Reset() {
	*x = ProgressPlanVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[454]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressPlanVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressPlanVo) ProtoMessage() {}

func (x *ProgressPlanVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[454]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressPlanVo.ProtoReflect.Descriptor instead.
func (*ProgressPlanVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{454}
}

func (x *ProgressPlanVo) GetProgressPlanId() int64 {
	if x != nil {
		return x.ProgressPlanId
	}
	return 0
}

func (x *ProgressPlanVo) GetProgressPlanCode() string {
	if x != nil {
		return x.ProgressPlanCode
	}
	return ""
}

func (x *ProgressPlanVo) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ProgressPlanVo) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ProgressPlanVo) GetBuildId() int64 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

func (x *ProgressPlanVo) GetPlanName() string {
	if x != nil {
		return x.PlanName
	}
	return ""
}

func (x *ProgressPlanVo) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *ProgressPlanVo) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *ProgressPlanVo) GetPlanPerson() string {
	if x != nil {
		return x.PlanPerson
	}
	return ""
}

func (x *ProgressPlanVo) GetMilestoneStatus() string {
	if x != nil {
		return x.MilestoneStatus
	}
	return ""
}

func (x *ProgressPlanVo) GetActualDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ActualDate
	}
	return nil
}

func (x *ProgressPlanVo) GetActualPercent() int64 {
	if x != nil {
		return x.ActualPercent
	}
	return 0
}

func (x *ProgressPlanVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *ProgressPlanVo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *ProgressPlanVo) GetUploadDocument() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocument
	}
	return nil
}

func (x *ProgressPlanVo) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *ProgressPlanVo) GetCreatedByName() string {
	if x != nil {
		return x.CreatedByName
	}
	return ""
}

func (x *ProgressPlanVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ProgressPlanVo) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *ProgressPlanVo) GetUpdatedByName() string {
	if x != nil {
		return x.UpdatedByName
	}
	return ""
}

func (x *ProgressPlanVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ProgressPlanVo) GetHashInfo() string {
	if x != nil {
		return x.HashInfo
	}
	return ""
}

type ProgressPlansResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ProgressPlanVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64             `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64             `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ProgressPlansResp) Reset() {
	*x = ProgressPlansResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[455]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressPlansResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressPlansResp) ProtoMessage() {}

func (x *ProgressPlansResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[455]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressPlansResp.ProtoReflect.Descriptor instead.
func (*ProgressPlansResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{455}
}

func (x *ProgressPlansResp) GetList() []*ProgressPlanVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ProgressPlansResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ProgressPlansResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ProgressPlansResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type CreateProgressPlanHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgressPlanId   int64                  `protobuf:"varint,1,opt,name=progressPlanId,proto3" json:"progressPlanId"`
	ProgressPlanCode string                 `protobuf:"bytes,2,opt,name=progressPlanCode,proto3" json:"progressPlanCode"`
	ProjectId        int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	BuildId          int64                  `protobuf:"varint,4,opt,name=buildId,proto3" json:"buildId"`
	PlanName         string                 `protobuf:"bytes,5,opt,name=planName,proto3" json:"planName"`
	StartAt          *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=startAt,proto3" json:"startAt"`
	EndAt            *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=endAt,proto3" json:"endAt"`
	PlanPerson       string                 `protobuf:"bytes,8,opt,name=planPerson,proto3" json:"planPerson"`
	MilestoneStatus  string                 `protobuf:"bytes,9,opt,name=milestoneStatus,proto3" json:"milestoneStatus"`
	ActualDate       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=actualDate,proto3" json:"actualDate"`
	ActualPercent    int64                  `protobuf:"varint,11,opt,name=actualPercent,proto3" json:"actualPercent"`
	ActiveStatus     string                 `protobuf:"bytes,12,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo             string                 `protobuf:"bytes,13,opt,name=memo,proto3" json:"memo"`
	UploadDocument   []*UploadDocumentInfo  `protobuf:"bytes,14,rep,name=uploadDocument,proto3" json:"uploadDocument"`
	InfoHash         string                 `protobuf:"bytes,15,opt,name=infoHash,proto3" json:"infoHash"`
	ManagerId        int64                  `protobuf:"varint,16,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateProgressPlanHashReq) Reset() {
	*x = CreateProgressPlanHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[456]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProgressPlanHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProgressPlanHashReq) ProtoMessage() {}

func (x *CreateProgressPlanHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[456]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProgressPlanHashReq.ProtoReflect.Descriptor instead.
func (*CreateProgressPlanHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{456}
}

func (x *CreateProgressPlanHashReq) GetProgressPlanId() int64 {
	if x != nil {
		return x.ProgressPlanId
	}
	return 0
}

func (x *CreateProgressPlanHashReq) GetProgressPlanCode() string {
	if x != nil {
		return x.ProgressPlanCode
	}
	return ""
}

func (x *CreateProgressPlanHashReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CreateProgressPlanHashReq) GetBuildId() int64 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

func (x *CreateProgressPlanHashReq) GetPlanName() string {
	if x != nil {
		return x.PlanName
	}
	return ""
}

func (x *CreateProgressPlanHashReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *CreateProgressPlanHashReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *CreateProgressPlanHashReq) GetPlanPerson() string {
	if x != nil {
		return x.PlanPerson
	}
	return ""
}

func (x *CreateProgressPlanHashReq) GetMilestoneStatus() string {
	if x != nil {
		return x.MilestoneStatus
	}
	return ""
}

func (x *CreateProgressPlanHashReq) GetActualDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ActualDate
	}
	return nil
}

func (x *CreateProgressPlanHashReq) GetActualPercent() int64 {
	if x != nil {
		return x.ActualPercent
	}
	return 0
}

func (x *CreateProgressPlanHashReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *CreateProgressPlanHashReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CreateProgressPlanHashReq) GetUploadDocument() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocument
	}
	return nil
}

func (x *CreateProgressPlanHashReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *CreateProgressPlanHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UpdateProgressPlanHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgressPlanid   int64                  `protobuf:"varint,1,opt,name=progressPlanid,proto3" json:"progressPlanid"`
	ProgressPlanCode string                 `protobuf:"bytes,2,opt,name=progressPlanCode,proto3" json:"progressPlanCode"`
	ProjectId        int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	BuildId          int64                  `protobuf:"varint,4,opt,name=buildId,proto3" json:"buildId"`
	PlanName         string                 `protobuf:"bytes,5,opt,name=planName,proto3" json:"planName"`
	StartAt          *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=startAt,proto3" json:"startAt"`
	EndAt            *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=endAt,proto3" json:"endAt"`
	PlanPerson       string                 `protobuf:"bytes,8,opt,name=planPerson,proto3" json:"planPerson"`
	MilestoneStatus  string                 `protobuf:"bytes,9,opt,name=milestoneStatus,proto3" json:"milestoneStatus"`
	ActualDate       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=actualDate,proto3" json:"actualDate"`
	ActualPercent    int64                  `protobuf:"varint,11,opt,name=actualPercent,proto3" json:"actualPercent"`
	ActiveStatus     string                 `protobuf:"bytes,12,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo             string                 `protobuf:"bytes,13,opt,name=memo,proto3" json:"memo"`
	UploadDocument   []*UploadDocumentInfo  `protobuf:"bytes,14,rep,name=uploadDocument,proto3" json:"uploadDocument"`
	InfoHash         string                 `protobuf:"bytes,15,opt,name=infoHash,proto3" json:"infoHash"`
	ManagerId        int64                  `protobuf:"varint,16,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UpdateProgressPlanHashReq) Reset() {
	*x = UpdateProgressPlanHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[457]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProgressPlanHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProgressPlanHashReq) ProtoMessage() {}

func (x *UpdateProgressPlanHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[457]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProgressPlanHashReq.ProtoReflect.Descriptor instead.
func (*UpdateProgressPlanHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{457}
}

func (x *UpdateProgressPlanHashReq) GetProgressPlanid() int64 {
	if x != nil {
		return x.ProgressPlanid
	}
	return 0
}

func (x *UpdateProgressPlanHashReq) GetProgressPlanCode() string {
	if x != nil {
		return x.ProgressPlanCode
	}
	return ""
}

func (x *UpdateProgressPlanHashReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateProgressPlanHashReq) GetBuildId() int64 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

func (x *UpdateProgressPlanHashReq) GetPlanName() string {
	if x != nil {
		return x.PlanName
	}
	return ""
}

func (x *UpdateProgressPlanHashReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *UpdateProgressPlanHashReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *UpdateProgressPlanHashReq) GetPlanPerson() string {
	if x != nil {
		return x.PlanPerson
	}
	return ""
}

func (x *UpdateProgressPlanHashReq) GetMilestoneStatus() string {
	if x != nil {
		return x.MilestoneStatus
	}
	return ""
}

func (x *UpdateProgressPlanHashReq) GetActualDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ActualDate
	}
	return nil
}

func (x *UpdateProgressPlanHashReq) GetActualPercent() int64 {
	if x != nil {
		return x.ActualPercent
	}
	return 0
}

func (x *UpdateProgressPlanHashReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *UpdateProgressPlanHashReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UpdateProgressPlanHashReq) GetUploadDocument() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocument
	}
	return nil
}

func (x *UpdateProgressPlanHashReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *UpdateProgressPlanHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type GetProgressPlanHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId       int64   `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ProgressPlanIds []int64 `protobuf:"varint,2,rep,packed,name=progressPlanIds,proto3" json:"progressPlanIds"`
}

func (x *GetProgressPlanHashReq) Reset() {
	*x = GetProgressPlanHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[458]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProgressPlanHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProgressPlanHashReq) ProtoMessage() {}

func (x *GetProgressPlanHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[458]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProgressPlanHashReq.ProtoReflect.Descriptor instead.
func (*GetProgressPlanHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{458}
}

func (x *GetProgressPlanHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetProgressPlanHashReq) GetProgressPlanIds() []int64 {
	if x != nil {
		return x.ProgressPlanIds
	}
	return nil
}

type ProgressPlanHashVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgressPlanId   int64                  `protobuf:"varint,1,opt,name=progressPlanId,proto3" json:"progressPlanId"`
	ProgressPlanCode string                 `protobuf:"bytes,2,opt,name=progressPlanCode,proto3" json:"progressPlanCode"`
	InfoHash         string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
}

func (x *ProgressPlanHashVo) Reset() {
	*x = ProgressPlanHashVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[459]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressPlanHashVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressPlanHashVo) ProtoMessage() {}

func (x *ProgressPlanHashVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[459]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressPlanHashVo.ProtoReflect.Descriptor instead.
func (*ProgressPlanHashVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{459}
}

func (x *ProgressPlanHashVo) GetProgressPlanId() int64 {
	if x != nil {
		return x.ProgressPlanId
	}
	return 0
}

func (x *ProgressPlanHashVo) GetProgressPlanCode() string {
	if x != nil {
		return x.ProgressPlanCode
	}
	return ""
}

func (x *ProgressPlanHashVo) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *ProgressPlanHashVo) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

type GetProgressPlanHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ProgressPlanHashVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                 `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                 `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetProgressPlanHashResp) Reset() {
	*x = GetProgressPlanHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[460]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProgressPlanHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProgressPlanHashResp) ProtoMessage() {}

func (x *GetProgressPlanHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[460]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProgressPlanHashResp.ProtoReflect.Descriptor instead.
func (*GetProgressPlanHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{460}
}

func (x *GetProgressPlanHashResp) GetList() []*ProgressPlanHashVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetProgressPlanHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetProgressPlanHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetProgressPlanHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ProgressActualReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgressActualId   int64                  `protobuf:"varint,1,opt,name=progressActualId,proto3" json:"progressActualId"`
	ProgressActualCode string                 `protobuf:"bytes,2,opt,name=progressActualCode,proto3" json:"progressActualCode"`
	ProjectId          int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	ProgressPlanId     int64                  `protobuf:"varint,4,opt,name=progressPlanId,proto3" json:"progressPlanId"`
	BuildId            int64                  `protobuf:"varint,5,opt,name=buildId,proto3" json:"buildId"`
	ActualName         string                 `protobuf:"bytes,6,opt,name=actualName,proto3" json:"actualName"`
	ActualDate         *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=actualDate,proto3" json:"actualDate"`
	ActualPercent      int64                  `protobuf:"varint,8,opt,name=actualPercent,proto3" json:"actualPercent"`
	ActualPerson       string                 `protobuf:"bytes,9,opt,name=actualPerson,proto3" json:"actualPerson"`
	ActiveStatus       string                 `protobuf:"bytes,10,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo               string                 `protobuf:"bytes,11,opt,name=memo,proto3" json:"memo"`
	UploadDocument     []*UploadDocumentInfo  `protobuf:"bytes,12,rep,name=uploadDocument,proto3" json:"uploadDocument"`
	InfoHash           string                 `protobuf:"bytes,13,opt,name=infoHash,proto3" json:"infoHash"`
	Page               *Page                  `protobuf:"bytes,14,opt,name=page,proto3" json:"page"`
	ManagerId          int64                  `protobuf:"varint,15,opt,name=managerId,proto3" json:"managerId"`
}

func (x *ProgressActualReq) Reset() {
	*x = ProgressActualReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[461]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressActualReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressActualReq) ProtoMessage() {}

func (x *ProgressActualReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[461]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressActualReq.ProtoReflect.Descriptor instead.
func (*ProgressActualReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{461}
}

func (x *ProgressActualReq) GetProgressActualId() int64 {
	if x != nil {
		return x.ProgressActualId
	}
	return 0
}

func (x *ProgressActualReq) GetProgressActualCode() string {
	if x != nil {
		return x.ProgressActualCode
	}
	return ""
}

func (x *ProgressActualReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ProgressActualReq) GetProgressPlanId() int64 {
	if x != nil {
		return x.ProgressPlanId
	}
	return 0
}

func (x *ProgressActualReq) GetBuildId() int64 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

func (x *ProgressActualReq) GetActualName() string {
	if x != nil {
		return x.ActualName
	}
	return ""
}

func (x *ProgressActualReq) GetActualDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ActualDate
	}
	return nil
}

func (x *ProgressActualReq) GetActualPercent() int64 {
	if x != nil {
		return x.ActualPercent
	}
	return 0
}

func (x *ProgressActualReq) GetActualPerson() string {
	if x != nil {
		return x.ActualPerson
	}
	return ""
}

func (x *ProgressActualReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *ProgressActualReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *ProgressActualReq) GetUploadDocument() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocument
	}
	return nil
}

func (x *ProgressActualReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *ProgressActualReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ProgressActualReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ProgressActualVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgressActualId   int64                  `protobuf:"varint,1,opt,name=progressActualId,proto3" json:"progressActualId"`
	ProgressActualCode string                 `protobuf:"bytes,2,opt,name=progressActualCode,proto3" json:"progressActualCode"`
	ProjectId          int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	ProjectName        string                 `protobuf:"bytes,4,opt,name=projectName,proto3" json:"projectName"`
	ProgressPlanId     int64                  `protobuf:"varint,5,opt,name=progressPlanId,proto3" json:"progressPlanId"`
	BuildId            int64                  `protobuf:"varint,6,opt,name=buildId,proto3" json:"buildId"`
	ActualName         string                 `protobuf:"bytes,7,opt,name=actualName,proto3" json:"actualName"`
	ActualDate         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=actualDate,proto3" json:"actualDate"`
	ActualPercent      int64                  `protobuf:"varint,9,opt,name=actualPercent,proto3" json:"actualPercent"`
	ActualPerson       string                 `protobuf:"bytes,10,opt,name=actualPerson,proto3" json:"actualPerson"`
	ActiveStatus       string                 `protobuf:"bytes,11,opt,name=activeStatus,proto3" json:"activeStatus"`
	UploadDocument     []*UploadDocumentInfo  `protobuf:"bytes,12,rep,name=uploadDocument,proto3" json:"uploadDocument"`
	Memo               string                 `protobuf:"bytes,13,opt,name=memo,proto3" json:"memo"`
	CreatedBy          int64                  `protobuf:"varint,14,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedByName      string                 `protobuf:"bytes,15,opt,name=createdByName,proto3" json:"createdByName"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy          int64                  `protobuf:"varint,17,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedByName      string                 `protobuf:"bytes,18,opt,name=updatedByName,proto3" json:"updatedByName"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=updatedAt,proto3" json:"updatedAt"`
	HashInfo           string                 `protobuf:"bytes,20,opt,name=hashInfo,proto3" json:"hashInfo"`
}

func (x *ProgressActualVo) Reset() {
	*x = ProgressActualVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[462]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressActualVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressActualVo) ProtoMessage() {}

func (x *ProgressActualVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[462]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressActualVo.ProtoReflect.Descriptor instead.
func (*ProgressActualVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{462}
}

func (x *ProgressActualVo) GetProgressActualId() int64 {
	if x != nil {
		return x.ProgressActualId
	}
	return 0
}

func (x *ProgressActualVo) GetProgressActualCode() string {
	if x != nil {
		return x.ProgressActualCode
	}
	return ""
}

func (x *ProgressActualVo) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ProgressActualVo) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ProgressActualVo) GetProgressPlanId() int64 {
	if x != nil {
		return x.ProgressPlanId
	}
	return 0
}

func (x *ProgressActualVo) GetBuildId() int64 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

func (x *ProgressActualVo) GetActualName() string {
	if x != nil {
		return x.ActualName
	}
	return ""
}

func (x *ProgressActualVo) GetActualDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ActualDate
	}
	return nil
}

func (x *ProgressActualVo) GetActualPercent() int64 {
	if x != nil {
		return x.ActualPercent
	}
	return 0
}

func (x *ProgressActualVo) GetActualPerson() string {
	if x != nil {
		return x.ActualPerson
	}
	return ""
}

func (x *ProgressActualVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *ProgressActualVo) GetUploadDocument() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocument
	}
	return nil
}

func (x *ProgressActualVo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *ProgressActualVo) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *ProgressActualVo) GetCreatedByName() string {
	if x != nil {
		return x.CreatedByName
	}
	return ""
}

func (x *ProgressActualVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ProgressActualVo) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *ProgressActualVo) GetUpdatedByName() string {
	if x != nil {
		return x.UpdatedByName
	}
	return ""
}

func (x *ProgressActualVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ProgressActualVo) GetHashInfo() string {
	if x != nil {
		return x.HashInfo
	}
	return ""
}

type ProgressActualsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ProgressActualVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64               `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64               `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64               `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ProgressActualsResp) Reset() {
	*x = ProgressActualsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[463]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressActualsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressActualsResp) ProtoMessage() {}

func (x *ProgressActualsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[463]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressActualsResp.ProtoReflect.Descriptor instead.
func (*ProgressActualsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{463}
}

func (x *ProgressActualsResp) GetList() []*ProgressActualVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ProgressActualsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ProgressActualsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ProgressActualsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type CreateProgressActualHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgressActualId   int64                  `protobuf:"varint,1,opt,name=progressActualId,proto3" json:"progressActualId"`
	ProgressActualCode string                 `protobuf:"bytes,2,opt,name=progressActualCode,proto3" json:"progressActualCode"`
	ProjectId          int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	ProgressPlanId     int64                  `protobuf:"varint,4,opt,name=progressPlanId,proto3" json:"progressPlanId"`
	BuildId            int64                  `protobuf:"varint,5,opt,name=buildId,proto3" json:"buildId"`
	ActualName         string                 `protobuf:"bytes,6,opt,name=actualName,proto3" json:"actualName"`
	ActualDate         *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=actualDate,proto3" json:"actualDate"`
	ActualPercent      int64                  `protobuf:"varint,8,opt,name=actualPercent,proto3" json:"actualPercent"`
	ActualPerson       string                 `protobuf:"bytes,9,opt,name=actualPerson,proto3" json:"actualPerson"`
	ActiveStatus       string                 `protobuf:"bytes,10,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo               string                 `protobuf:"bytes,11,opt,name=memo,proto3" json:"memo"`
	UploadDocument     []*UploadDocumentInfo  `protobuf:"bytes,12,rep,name=uploadDocument,proto3" json:"uploadDocument"`
	InfoHash           string                 `protobuf:"bytes,13,opt,name=infoHash,proto3" json:"infoHash"`
	ManagerId          int64                  `protobuf:"varint,14,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateProgressActualHashReq) Reset() {
	*x = CreateProgressActualHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[464]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProgressActualHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProgressActualHashReq) ProtoMessage() {}

func (x *CreateProgressActualHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[464]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProgressActualHashReq.ProtoReflect.Descriptor instead.
func (*CreateProgressActualHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{464}
}

func (x *CreateProgressActualHashReq) GetProgressActualId() int64 {
	if x != nil {
		return x.ProgressActualId
	}
	return 0
}

func (x *CreateProgressActualHashReq) GetProgressActualCode() string {
	if x != nil {
		return x.ProgressActualCode
	}
	return ""
}

func (x *CreateProgressActualHashReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CreateProgressActualHashReq) GetProgressPlanId() int64 {
	if x != nil {
		return x.ProgressPlanId
	}
	return 0
}

func (x *CreateProgressActualHashReq) GetBuildId() int64 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

func (x *CreateProgressActualHashReq) GetActualName() string {
	if x != nil {
		return x.ActualName
	}
	return ""
}

func (x *CreateProgressActualHashReq) GetActualDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ActualDate
	}
	return nil
}

func (x *CreateProgressActualHashReq) GetActualPercent() int64 {
	if x != nil {
		return x.ActualPercent
	}
	return 0
}

func (x *CreateProgressActualHashReq) GetActualPerson() string {
	if x != nil {
		return x.ActualPerson
	}
	return ""
}

func (x *CreateProgressActualHashReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *CreateProgressActualHashReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CreateProgressActualHashReq) GetUploadDocument() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocument
	}
	return nil
}

func (x *CreateProgressActualHashReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *CreateProgressActualHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UpdateProgressActualHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgressActualId   int64                  `protobuf:"varint,1,opt,name=progressActualId,proto3" json:"progressActualId"`
	ProgressActualCode string                 `protobuf:"bytes,2,opt,name=progressActualCode,proto3" json:"progressActualCode"`
	ProjectId          int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	ProgressPlanId     int64                  `protobuf:"varint,4,opt,name=progressPlanId,proto3" json:"progressPlanId"`
	BuildId            int64                  `protobuf:"varint,5,opt,name=buildId,proto3" json:"buildId"`
	ActualName         string                 `protobuf:"bytes,6,opt,name=actualName,proto3" json:"actualName"`
	ActualDate         *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=actualDate,proto3" json:"actualDate"`
	ActualPercent      int64                  `protobuf:"varint,8,opt,name=actualPercent,proto3" json:"actualPercent"`
	ActualPerson       string                 `protobuf:"bytes,9,opt,name=actualPerson,proto3" json:"actualPerson"`
	ActiveStatus       string                 `protobuf:"bytes,10,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo               string                 `protobuf:"bytes,11,opt,name=memo,proto3" json:"memo"`
	UploadDocument     []*UploadDocumentInfo  `protobuf:"bytes,12,rep,name=uploadDocument,proto3" json:"uploadDocument"`
	InfoHash           string                 `protobuf:"bytes,13,opt,name=infoHash,proto3" json:"infoHash"`
	ManagerId          int64                  `protobuf:"varint,14,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UpdateProgressActualHashReq) Reset() {
	*x = UpdateProgressActualHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[465]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProgressActualHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProgressActualHashReq) ProtoMessage() {}

func (x *UpdateProgressActualHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[465]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProgressActualHashReq.ProtoReflect.Descriptor instead.
func (*UpdateProgressActualHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{465}
}

func (x *UpdateProgressActualHashReq) GetProgressActualId() int64 {
	if x != nil {
		return x.ProgressActualId
	}
	return 0
}

func (x *UpdateProgressActualHashReq) GetProgressActualCode() string {
	if x != nil {
		return x.ProgressActualCode
	}
	return ""
}

func (x *UpdateProgressActualHashReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateProgressActualHashReq) GetProgressPlanId() int64 {
	if x != nil {
		return x.ProgressPlanId
	}
	return 0
}

func (x *UpdateProgressActualHashReq) GetBuildId() int64 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

func (x *UpdateProgressActualHashReq) GetActualName() string {
	if x != nil {
		return x.ActualName
	}
	return ""
}

func (x *UpdateProgressActualHashReq) GetActualDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ActualDate
	}
	return nil
}

func (x *UpdateProgressActualHashReq) GetActualPercent() int64 {
	if x != nil {
		return x.ActualPercent
	}
	return 0
}

func (x *UpdateProgressActualHashReq) GetActualPerson() string {
	if x != nil {
		return x.ActualPerson
	}
	return ""
}

func (x *UpdateProgressActualHashReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *UpdateProgressActualHashReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UpdateProgressActualHashReq) GetUploadDocument() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocument
	}
	return nil
}

func (x *UpdateProgressActualHashReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *UpdateProgressActualHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type GetProgressActualHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId         int64   `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ProgressActualIds []int64 `protobuf:"varint,2,rep,packed,name=progressActualIds,proto3" json:"progressActualIds"`
}

func (x *GetProgressActualHashReq) Reset() {
	*x = GetProgressActualHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[466]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProgressActualHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProgressActualHashReq) ProtoMessage() {}

func (x *GetProgressActualHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[466]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProgressActualHashReq.ProtoReflect.Descriptor instead.
func (*GetProgressActualHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{466}
}

func (x *GetProgressActualHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetProgressActualHashReq) GetProgressActualIds() []int64 {
	if x != nil {
		return x.ProgressActualIds
	}
	return nil
}

type ProgressActualHashVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgressActualId   int64                  `protobuf:"varint,1,opt,name=progressActualId,proto3" json:"progressActualId"`
	ProgressActualCode string                 `protobuf:"bytes,2,opt,name=progressActualCode,proto3" json:"progressActualCode"`
	InfoHash           string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
}

func (x *ProgressActualHashVo) Reset() {
	*x = ProgressActualHashVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[467]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressActualHashVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressActualHashVo) ProtoMessage() {}

func (x *ProgressActualHashVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[467]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressActualHashVo.ProtoReflect.Descriptor instead.
func (*ProgressActualHashVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{467}
}

func (x *ProgressActualHashVo) GetProgressActualId() int64 {
	if x != nil {
		return x.ProgressActualId
	}
	return 0
}

func (x *ProgressActualHashVo) GetProgressActualCode() string {
	if x != nil {
		return x.ProgressActualCode
	}
	return ""
}

func (x *ProgressActualHashVo) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *ProgressActualHashVo) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

type GetProgressActualHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ProgressActualHashVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                   `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                   `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                   `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetProgressActualHashResp) Reset() {
	*x = GetProgressActualHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[468]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProgressActualHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProgressActualHashResp) ProtoMessage() {}

func (x *GetProgressActualHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[468]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProgressActualHashResp.ProtoReflect.Descriptor instead.
func (*GetProgressActualHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{468}
}

func (x *GetProgressActualHashResp) GetList() []*ProgressActualHashVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetProgressActualHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetProgressActualHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetProgressActualHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type QualityInspectionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QualityInspectionId       int64                  `protobuf:"varint,1,opt,name=qualityInspectionId,proto3" json:"qualityInspectionId"`
	QualityInspectionCode     string                 `protobuf:"bytes,2,opt,name=qualityInspectionCode,proto3" json:"qualityInspectionCode"`
	ProjectId                 int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	ProjectName               string                 `protobuf:"bytes,4,opt,name=projectName,proto3" json:"projectName"`
	FromOrganizationId        int64                  `protobuf:"varint,5,opt,name=fromOrganizationId,proto3" json:"fromOrganizationId"`
	FromPlatFormType          string                 `protobuf:"bytes,6,opt,name=fromPlatFormType,proto3" json:"fromPlatFormType"`
	ToOrganizationId          int64                  `protobuf:"varint,7,opt,name=toOrganizationId,proto3" json:"toOrganizationId"`
	ToPlatFormType            string                 `protobuf:"bytes,8,opt,name=toPlatFormType,proto3" json:"toPlatFormType"`
	QualityInspector          string                 `protobuf:"bytes,9,opt,name=qualityInspector,proto3" json:"qualityInspector"`
	InspectionDate            *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=inspectionDate,proto3" json:"inspectionDate"`
	InspectionDateStartAt     *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=inspectionDateStartAt,proto3" json:"inspectionDateStartAt"`
	InspectionDateEndAt       *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=inspectionDateEndAt,proto3" json:"inspectionDateEndAt"`
	InspectionArea            string                 `protobuf:"bytes,13,opt,name=inspectionArea,proto3" json:"inspectionArea"`
	InspectionSituation       string                 `protobuf:"bytes,14,opt,name=inspectionSituation,proto3" json:"inspectionSituation"`
	InspectionResult          string                 `protobuf:"bytes,15,opt,name=inspectionResult,proto3" json:"inspectionResult"`
	InspectionBy              int64                  `protobuf:"varint,16,opt,name=inspectionBy,proto3" json:"inspectionBy"`
	InspectionAt              *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=inspectionAt,proto3" json:"inspectionAt"`
	QualityStatus             string                 `protobuf:"bytes,18,opt,name=qualityStatus,proto3" json:"qualityStatus"`
	AssignedPerson            string                 `protobuf:"bytes,19,opt,name=assignedPerson,proto3" json:"assignedPerson"`
	AssignedDate              *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=assignedDate,proto3" json:"assignedDate"`
	AssignedDateStartAt       *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=assignedDateStartAt,proto3" json:"assignedDateStartAt"`
	AssignedDateEndAt         *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=assignedDateEndAt,proto3" json:"assignedDateEndAt"`
	AssignedDesc              string                 `protobuf:"bytes,23,opt,name=assignedDesc,proto3" json:"assignedDesc"`
	Duration                  int64                  `protobuf:"varint,24,opt,name=duration,proto3" json:"duration"`
	RectifyDeadline           *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=rectifyDeadline,proto3" json:"rectifyDeadline"`
	RectifyDeadlineWarn       *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=rectifyDeadlineWarn,proto3" json:"rectifyDeadlineWarn"`
	RectifyDate               *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=rectifyDate,proto3" json:"rectifyDate"`
	RectifyDateStartAt        *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=rectifyDateStartAt,proto3" json:"rectifyDateStartAt"`
	RectifyDateEndAt          *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=rectifyDateEndAt,proto3" json:"rectifyDateEndAt"`
	RectifyPerson             string                 `protobuf:"bytes,30,opt,name=rectifyPerson,proto3" json:"rectifyPerson"`
	RectifyDesc               string                 `protobuf:"bytes,31,opt,name=rectifyDesc,proto3" json:"rectifyDesc"`
	RectifyBy                 int64                  `protobuf:"varint,32,opt,name=rectifyBy,proto3" json:"rectifyBy"`
	RectifyAt                 *timestamppb.Timestamp `protobuf:"bytes,33,opt,name=rectifyAt,proto3" json:"rectifyAt"`
	ReviewDate                *timestamppb.Timestamp `protobuf:"bytes,34,opt,name=reviewDate,proto3" json:"reviewDate"`
	ReviewDateStartAt         *timestamppb.Timestamp `protobuf:"bytes,35,opt,name=reviewDateStartAt,proto3" json:"reviewDateStartAt"`
	ReviewDateEndAt           *timestamppb.Timestamp `protobuf:"bytes,36,opt,name=reviewDateEndAt,proto3" json:"reviewDateEndAt"`
	ReviewPerson              string                 `protobuf:"bytes,37,opt,name=reviewPerson,proto3" json:"reviewPerson"`
	ReviewDesc                string                 `protobuf:"bytes,38,opt,name=reviewDesc,proto3" json:"reviewDesc"`
	ReviewBy                  int64                  `protobuf:"varint,39,opt,name=reviewBy,proto3" json:"reviewBy"`
	ReviewAt                  *timestamppb.Timestamp `protobuf:"bytes,40,opt,name=reviewAt,proto3" json:"reviewAt"`
	MainQualityInspectionCode string                 `protobuf:"bytes,41,opt,name=mainQualityInspectionCode,proto3" json:"mainQualityInspectionCode"`
	ActiveStatus              string                 `protobuf:"bytes,42,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo                      string                 `protobuf:"bytes,43,opt,name=memo,proto3" json:"memo"`
	UploadDocument            []*UploadDocumentInfo  `protobuf:"bytes,44,rep,name=uploadDocument,proto3" json:"uploadDocument"`
	InfoHash                  string                 `protobuf:"bytes,45,opt,name=infoHash,proto3" json:"infoHash"`
	InspectionHash            string                 `protobuf:"bytes,46,opt,name=inspectionHash,proto3" json:"inspectionHash"`
	RectifyHash               string                 `protobuf:"bytes,47,opt,name=rectifyHash,proto3" json:"rectifyHash"`
	ReviewHash                string                 `protobuf:"bytes,48,opt,name=reviewHash,proto3" json:"reviewHash"`
	Page                      *Page                  `protobuf:"bytes,49,opt,name=page,proto3" json:"page"`
	ManagerId                 int64                  `protobuf:"varint,50,opt,name=managerId,proto3" json:"managerId"`
}

func (x *QualityInspectionReq) Reset() {
	*x = QualityInspectionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[469]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityInspectionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityInspectionReq) ProtoMessage() {}

func (x *QualityInspectionReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[469]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityInspectionReq.ProtoReflect.Descriptor instead.
func (*QualityInspectionReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{469}
}

func (x *QualityInspectionReq) GetQualityInspectionId() int64 {
	if x != nil {
		return x.QualityInspectionId
	}
	return 0
}

func (x *QualityInspectionReq) GetQualityInspectionCode() string {
	if x != nil {
		return x.QualityInspectionCode
	}
	return ""
}

func (x *QualityInspectionReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *QualityInspectionReq) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *QualityInspectionReq) GetFromOrganizationId() int64 {
	if x != nil {
		return x.FromOrganizationId
	}
	return 0
}

func (x *QualityInspectionReq) GetFromPlatFormType() string {
	if x != nil {
		return x.FromPlatFormType
	}
	return ""
}

func (x *QualityInspectionReq) GetToOrganizationId() int64 {
	if x != nil {
		return x.ToOrganizationId
	}
	return 0
}

func (x *QualityInspectionReq) GetToPlatFormType() string {
	if x != nil {
		return x.ToPlatFormType
	}
	return ""
}

func (x *QualityInspectionReq) GetQualityInspector() string {
	if x != nil {
		return x.QualityInspector
	}
	return ""
}

func (x *QualityInspectionReq) GetInspectionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InspectionDate
	}
	return nil
}

func (x *QualityInspectionReq) GetInspectionDateStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InspectionDateStartAt
	}
	return nil
}

func (x *QualityInspectionReq) GetInspectionDateEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InspectionDateEndAt
	}
	return nil
}

func (x *QualityInspectionReq) GetInspectionArea() string {
	if x != nil {
		return x.InspectionArea
	}
	return ""
}

func (x *QualityInspectionReq) GetInspectionSituation() string {
	if x != nil {
		return x.InspectionSituation
	}
	return ""
}

func (x *QualityInspectionReq) GetInspectionResult() string {
	if x != nil {
		return x.InspectionResult
	}
	return ""
}

func (x *QualityInspectionReq) GetInspectionBy() int64 {
	if x != nil {
		return x.InspectionBy
	}
	return 0
}

func (x *QualityInspectionReq) GetInspectionAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InspectionAt
	}
	return nil
}

func (x *QualityInspectionReq) GetQualityStatus() string {
	if x != nil {
		return x.QualityStatus
	}
	return ""
}

func (x *QualityInspectionReq) GetAssignedPerson() string {
	if x != nil {
		return x.AssignedPerson
	}
	return ""
}

func (x *QualityInspectionReq) GetAssignedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.AssignedDate
	}
	return nil
}

func (x *QualityInspectionReq) GetAssignedDateStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AssignedDateStartAt
	}
	return nil
}

func (x *QualityInspectionReq) GetAssignedDateEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AssignedDateEndAt
	}
	return nil
}

func (x *QualityInspectionReq) GetAssignedDesc() string {
	if x != nil {
		return x.AssignedDesc
	}
	return ""
}

func (x *QualityInspectionReq) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *QualityInspectionReq) GetRectifyDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDeadline
	}
	return nil
}

func (x *QualityInspectionReq) GetRectifyDeadlineWarn() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDeadlineWarn
	}
	return nil
}

func (x *QualityInspectionReq) GetRectifyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDate
	}
	return nil
}

func (x *QualityInspectionReq) GetRectifyDateStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDateStartAt
	}
	return nil
}

func (x *QualityInspectionReq) GetRectifyDateEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDateEndAt
	}
	return nil
}

func (x *QualityInspectionReq) GetRectifyPerson() string {
	if x != nil {
		return x.RectifyPerson
	}
	return ""
}

func (x *QualityInspectionReq) GetRectifyDesc() string {
	if x != nil {
		return x.RectifyDesc
	}
	return ""
}

func (x *QualityInspectionReq) GetRectifyBy() int64 {
	if x != nil {
		return x.RectifyBy
	}
	return 0
}

func (x *QualityInspectionReq) GetRectifyAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyAt
	}
	return nil
}

func (x *QualityInspectionReq) GetReviewDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReviewDate
	}
	return nil
}

func (x *QualityInspectionReq) GetReviewDateStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReviewDateStartAt
	}
	return nil
}

func (x *QualityInspectionReq) GetReviewDateEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReviewDateEndAt
	}
	return nil
}

func (x *QualityInspectionReq) GetReviewPerson() string {
	if x != nil {
		return x.ReviewPerson
	}
	return ""
}

func (x *QualityInspectionReq) GetReviewDesc() string {
	if x != nil {
		return x.ReviewDesc
	}
	return ""
}

func (x *QualityInspectionReq) GetReviewBy() int64 {
	if x != nil {
		return x.ReviewBy
	}
	return 0
}

func (x *QualityInspectionReq) GetReviewAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReviewAt
	}
	return nil
}

func (x *QualityInspectionReq) GetMainQualityInspectionCode() string {
	if x != nil {
		return x.MainQualityInspectionCode
	}
	return ""
}

func (x *QualityInspectionReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *QualityInspectionReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *QualityInspectionReq) GetUploadDocument() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocument
	}
	return nil
}

func (x *QualityInspectionReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *QualityInspectionReq) GetInspectionHash() string {
	if x != nil {
		return x.InspectionHash
	}
	return ""
}

func (x *QualityInspectionReq) GetRectifyHash() string {
	if x != nil {
		return x.RectifyHash
	}
	return ""
}

func (x *QualityInspectionReq) GetReviewHash() string {
	if x != nil {
		return x.ReviewHash
	}
	return ""
}

func (x *QualityInspectionReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *QualityInspectionReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type QualityInspectionVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QualityInspectionId       int64                  `protobuf:"varint,1,opt,name=qualityInspectionId,proto3" json:"qualityInspectionId"`
	QualityInspectionCode     string                 `protobuf:"bytes,2,opt,name=qualityInspectionCode,proto3" json:"qualityInspectionCode"`
	ProjectId                 int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	ProjectName               string                 `protobuf:"bytes,4,opt,name=projectName,proto3" json:"projectName"`
	FromOrganizationId        int64                  `protobuf:"varint,5,opt,name=fromOrganizationId,proto3" json:"fromOrganizationId"`
	FromPlatFormType          string                 `protobuf:"bytes,6,opt,name=fromPlatFormType,proto3" json:"fromPlatFormType"`
	ToOrganizationId          int64                  `protobuf:"varint,7,opt,name=toOrganizationId,proto3" json:"toOrganizationId"`
	ToPlatFormType            string                 `protobuf:"bytes,8,opt,name=toPlatFormType,proto3" json:"toPlatFormType"`
	QualityInspector          string                 `protobuf:"bytes,9,opt,name=qualityInspector,proto3" json:"qualityInspector"`
	InspectionDate            *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=inspectionDate,proto3" json:"inspectionDate"`
	InspectionArea            string                 `protobuf:"bytes,11,opt,name=inspectionArea,proto3" json:"inspectionArea"`
	InspectionSituation       string                 `protobuf:"bytes,12,opt,name=inspectionSituation,proto3" json:"inspectionSituation"`
	InspectionResult          string                 `protobuf:"bytes,13,opt,name=inspectionResult,proto3" json:"inspectionResult"`
	InspectionBy              int64                  `protobuf:"varint,14,opt,name=inspectionBy,proto3" json:"inspectionBy"`
	InspectionAt              *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=inspectionAt,proto3" json:"inspectionAt"`
	QualityStatus             string                 `protobuf:"bytes,16,opt,name=qualityStatus,proto3" json:"qualityStatus"`
	AssignedPerson            string                 `protobuf:"bytes,17,opt,name=assignedPerson,proto3" json:"assignedPerson"`
	AssignedDate              *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=assignedDate,proto3" json:"assignedDate"`
	AssignedDesc              string                 `protobuf:"bytes,19,opt,name=assignedDesc,proto3" json:"assignedDesc"`
	Duration                  int64                  `protobuf:"varint,20,opt,name=duration,proto3" json:"duration"`
	RectifyDeadline           *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=rectifyDeadline,proto3" json:"rectifyDeadline"`
	RectifyDeadlineWarn       *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=rectifyDeadlineWarn,proto3" json:"rectifyDeadlineWarn"`
	RectifyDate               *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=rectifyDate,proto3" json:"rectifyDate"`
	RectifyPerson             string                 `protobuf:"bytes,24,opt,name=rectifyPerson,proto3" json:"rectifyPerson"`
	RectifyDesc               string                 `protobuf:"bytes,25,opt,name=rectifyDesc,proto3" json:"rectifyDesc"`
	RectifyBy                 int64                  `protobuf:"varint,26,opt,name=rectifyBy,proto3" json:"rectifyBy"`
	RectifyAt                 *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=rectifyAt,proto3" json:"rectifyAt"`
	ReviewDate                *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=reviewDate,proto3" json:"reviewDate"`
	ReviewPerson              string                 `protobuf:"bytes,29,opt,name=reviewPerson,proto3" json:"reviewPerson"`
	ReviewDesc                string                 `protobuf:"bytes,30,opt,name=reviewDesc,proto3" json:"reviewDesc"`
	ReviewBy                  int64                  `protobuf:"varint,31,opt,name=reviewBy,proto3" json:"reviewBy"`
	ReviewAt                  *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=reviewAt,proto3" json:"reviewAt"`
	MainQualityInspectionCode string                 `protobuf:"bytes,33,opt,name=mainQualityInspectionCode,proto3" json:"mainQualityInspectionCode"`
	ActiveStatus              string                 `protobuf:"bytes,34,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo                      string                 `protobuf:"bytes,35,opt,name=memo,proto3" json:"memo"`
	UploadDocument            []*UploadDocumentInfo  `protobuf:"bytes,36,rep,name=uploadDocument,proto3" json:"uploadDocument"`
	CreatedBy                 int64                  `protobuf:"varint,37,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt                 *timestamppb.Timestamp `protobuf:"bytes,38,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy                 int64                  `protobuf:"varint,39,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt                 *timestamppb.Timestamp `protobuf:"bytes,40,opt,name=updatedAt,proto3" json:"updatedAt"`
	HashInfo                  string                 `protobuf:"bytes,41,opt,name=hashInfo,proto3" json:"hashInfo"`
	InspectionHashInfo        string                 `protobuf:"bytes,42,opt,name=inspectionHashInfo,proto3" json:"inspectionHashInfo"`
	RectifyHashInfo           string                 `protobuf:"bytes,43,opt,name=rectifyHashInfo,proto3" json:"rectifyHashInfo"`
	ReviewHashInfo            string                 `protobuf:"bytes,44,opt,name=reviewHashInfo,proto3" json:"reviewHashInfo"`
}

func (x *QualityInspectionVo) Reset() {
	*x = QualityInspectionVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[470]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityInspectionVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityInspectionVo) ProtoMessage() {}

func (x *QualityInspectionVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[470]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityInspectionVo.ProtoReflect.Descriptor instead.
func (*QualityInspectionVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{470}
}

func (x *QualityInspectionVo) GetQualityInspectionId() int64 {
	if x != nil {
		return x.QualityInspectionId
	}
	return 0
}

func (x *QualityInspectionVo) GetQualityInspectionCode() string {
	if x != nil {
		return x.QualityInspectionCode
	}
	return ""
}

func (x *QualityInspectionVo) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *QualityInspectionVo) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *QualityInspectionVo) GetFromOrganizationId() int64 {
	if x != nil {
		return x.FromOrganizationId
	}
	return 0
}

func (x *QualityInspectionVo) GetFromPlatFormType() string {
	if x != nil {
		return x.FromPlatFormType
	}
	return ""
}

func (x *QualityInspectionVo) GetToOrganizationId() int64 {
	if x != nil {
		return x.ToOrganizationId
	}
	return 0
}

func (x *QualityInspectionVo) GetToPlatFormType() string {
	if x != nil {
		return x.ToPlatFormType
	}
	return ""
}

func (x *QualityInspectionVo) GetQualityInspector() string {
	if x != nil {
		return x.QualityInspector
	}
	return ""
}

func (x *QualityInspectionVo) GetInspectionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InspectionDate
	}
	return nil
}

func (x *QualityInspectionVo) GetInspectionArea() string {
	if x != nil {
		return x.InspectionArea
	}
	return ""
}

func (x *QualityInspectionVo) GetInspectionSituation() string {
	if x != nil {
		return x.InspectionSituation
	}
	return ""
}

func (x *QualityInspectionVo) GetInspectionResult() string {
	if x != nil {
		return x.InspectionResult
	}
	return ""
}

func (x *QualityInspectionVo) GetInspectionBy() int64 {
	if x != nil {
		return x.InspectionBy
	}
	return 0
}

func (x *QualityInspectionVo) GetInspectionAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InspectionAt
	}
	return nil
}

func (x *QualityInspectionVo) GetQualityStatus() string {
	if x != nil {
		return x.QualityStatus
	}
	return ""
}

func (x *QualityInspectionVo) GetAssignedPerson() string {
	if x != nil {
		return x.AssignedPerson
	}
	return ""
}

func (x *QualityInspectionVo) GetAssignedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.AssignedDate
	}
	return nil
}

func (x *QualityInspectionVo) GetAssignedDesc() string {
	if x != nil {
		return x.AssignedDesc
	}
	return ""
}

func (x *QualityInspectionVo) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *QualityInspectionVo) GetRectifyDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDeadline
	}
	return nil
}

func (x *QualityInspectionVo) GetRectifyDeadlineWarn() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDeadlineWarn
	}
	return nil
}

func (x *QualityInspectionVo) GetRectifyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDate
	}
	return nil
}

func (x *QualityInspectionVo) GetRectifyPerson() string {
	if x != nil {
		return x.RectifyPerson
	}
	return ""
}

func (x *QualityInspectionVo) GetRectifyDesc() string {
	if x != nil {
		return x.RectifyDesc
	}
	return ""
}

func (x *QualityInspectionVo) GetRectifyBy() int64 {
	if x != nil {
		return x.RectifyBy
	}
	return 0
}

func (x *QualityInspectionVo) GetRectifyAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyAt
	}
	return nil
}

func (x *QualityInspectionVo) GetReviewDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReviewDate
	}
	return nil
}

func (x *QualityInspectionVo) GetReviewPerson() string {
	if x != nil {
		return x.ReviewPerson
	}
	return ""
}

func (x *QualityInspectionVo) GetReviewDesc() string {
	if x != nil {
		return x.ReviewDesc
	}
	return ""
}

func (x *QualityInspectionVo) GetReviewBy() int64 {
	if x != nil {
		return x.ReviewBy
	}
	return 0
}

func (x *QualityInspectionVo) GetReviewAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReviewAt
	}
	return nil
}

func (x *QualityInspectionVo) GetMainQualityInspectionCode() string {
	if x != nil {
		return x.MainQualityInspectionCode
	}
	return ""
}

func (x *QualityInspectionVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *QualityInspectionVo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *QualityInspectionVo) GetUploadDocument() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocument
	}
	return nil
}

func (x *QualityInspectionVo) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *QualityInspectionVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *QualityInspectionVo) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *QualityInspectionVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *QualityInspectionVo) GetHashInfo() string {
	if x != nil {
		return x.HashInfo
	}
	return ""
}

func (x *QualityInspectionVo) GetInspectionHashInfo() string {
	if x != nil {
		return x.InspectionHashInfo
	}
	return ""
}

func (x *QualityInspectionVo) GetRectifyHashInfo() string {
	if x != nil {
		return x.RectifyHashInfo
	}
	return ""
}

func (x *QualityInspectionVo) GetReviewHashInfo() string {
	if x != nil {
		return x.ReviewHashInfo
	}
	return ""
}

type QualityInspectionsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*QualityInspectionVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                  `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                  `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *QualityInspectionsResp) Reset() {
	*x = QualityInspectionsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[471]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityInspectionsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityInspectionsResp) ProtoMessage() {}

func (x *QualityInspectionsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[471]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityInspectionsResp.ProtoReflect.Descriptor instead.
func (*QualityInspectionsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{471}
}

func (x *QualityInspectionsResp) GetList() []*QualityInspectionVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *QualityInspectionsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QualityInspectionsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QualityInspectionsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type CreateQualityInspectionHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QualityInspectionCode     string                 `protobuf:"bytes,1,opt,name=qualityInspectionCode,proto3" json:"qualityInspectionCode"`
	ProjectId                 int64                  `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId"`
	FromOrganizationId        int64                  `protobuf:"varint,3,opt,name=fromOrganizationId,proto3" json:"fromOrganizationId"`
	FromPlatFormType          string                 `protobuf:"bytes,4,opt,name=fromPlatFormType,proto3" json:"fromPlatFormType"`
	ToOrganizationId          int64                  `protobuf:"varint,5,opt,name=toOrganizationId,proto3" json:"toOrganizationId"`
	ToPlatFormType            string                 `protobuf:"bytes,6,opt,name=toPlatFormType,proto3" json:"toPlatFormType"`
	QualityInspector          string                 `protobuf:"bytes,7,opt,name=qualityInspector,proto3" json:"qualityInspector"`
	InspectionDate            *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=inspectionDate,proto3" json:"inspectionDate"`
	InspectionArea            string                 `protobuf:"bytes,9,opt,name=inspectionArea,proto3" json:"inspectionArea"`
	InspectionSituation       string                 `protobuf:"bytes,10,opt,name=inspectionSituation,proto3" json:"inspectionSituation"`
	InspectionResult          string                 `protobuf:"bytes,11,opt,name=inspectionResult,proto3" json:"inspectionResult"`
	InspectionBy              int64                  `protobuf:"varint,12,opt,name=inspectionBy,proto3" json:"inspectionBy"`
	InspectionAt              *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=inspectionAt,proto3" json:"inspectionAt"`
	QualityStatus             string                 `protobuf:"bytes,14,opt,name=qualityStatus,proto3" json:"qualityStatus"`
	AssignedPerson            string                 `protobuf:"bytes,15,opt,name=assignedPerson,proto3" json:"assignedPerson"`
	AssignedDate              *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=assignedDate,proto3" json:"assignedDate"`
	AssignedDesc              string                 `protobuf:"bytes,17,opt,name=assignedDesc,proto3" json:"assignedDesc"`
	Duration                  int64                  `protobuf:"varint,18,opt,name=duration,proto3" json:"duration"`
	RectifyDeadline           *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=rectifyDeadline,proto3" json:"rectifyDeadline"`
	RectifyDeadlineWarn       *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=rectifyDeadlineWarn,proto3" json:"rectifyDeadlineWarn"`
	RectifyDate               *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=rectifyDate,proto3" json:"rectifyDate"`
	RectifyPerson             string                 `protobuf:"bytes,22,opt,name=rectifyPerson,proto3" json:"rectifyPerson"`
	RectifyDesc               string                 `protobuf:"bytes,23,opt,name=rectifyDesc,proto3" json:"rectifyDesc"`
	RectifyBy                 int64                  `protobuf:"varint,24,opt,name=rectifyBy,proto3" json:"rectifyBy"`
	RectifyAt                 *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=rectifyAt,proto3" json:"rectifyAt"`
	ReviewDate                *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=reviewDate,proto3" json:"reviewDate"`
	ReviewPerson              string                 `protobuf:"bytes,27,opt,name=reviewPerson,proto3" json:"reviewPerson"`
	ReviewDesc                string                 `protobuf:"bytes,28,opt,name=reviewDesc,proto3" json:"reviewDesc"`
	ReviewBy                  int64                  `protobuf:"varint,29,opt,name=reviewBy,proto3" json:"reviewBy"`
	ReviewAt                  *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=reviewAt,proto3" json:"reviewAt"`
	MainQualityInspectionCode string                 `protobuf:"bytes,31,opt,name=mainQualityInspectionCode,proto3" json:"mainQualityInspectionCode"`
	ActiveStatus              string                 `protobuf:"bytes,32,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo                      string                 `protobuf:"bytes,33,opt,name=memo,proto3" json:"memo"`
	UploadDocument            []*UploadDocumentInfo  `protobuf:"bytes,34,rep,name=uploadDocument,proto3" json:"uploadDocument"`
	InfoHash                  string                 `protobuf:"bytes,35,opt,name=infoHash,proto3" json:"infoHash"`
	InspectionHash            string                 `protobuf:"bytes,36,opt,name=inspectionHash,proto3" json:"inspectionHash"`
	ManagerId                 int64                  `protobuf:"varint,37,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateQualityInspectionHashReq) Reset() {
	*x = CreateQualityInspectionHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[472]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQualityInspectionHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQualityInspectionHashReq) ProtoMessage() {}

func (x *CreateQualityInspectionHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[472]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQualityInspectionHashReq.ProtoReflect.Descriptor instead.
func (*CreateQualityInspectionHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{472}
}

func (x *CreateQualityInspectionHashReq) GetQualityInspectionCode() string {
	if x != nil {
		return x.QualityInspectionCode
	}
	return ""
}

func (x *CreateQualityInspectionHashReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CreateQualityInspectionHashReq) GetFromOrganizationId() int64 {
	if x != nil {
		return x.FromOrganizationId
	}
	return 0
}

func (x *CreateQualityInspectionHashReq) GetFromPlatFormType() string {
	if x != nil {
		return x.FromPlatFormType
	}
	return ""
}

func (x *CreateQualityInspectionHashReq) GetToOrganizationId() int64 {
	if x != nil {
		return x.ToOrganizationId
	}
	return 0
}

func (x *CreateQualityInspectionHashReq) GetToPlatFormType() string {
	if x != nil {
		return x.ToPlatFormType
	}
	return ""
}

func (x *CreateQualityInspectionHashReq) GetQualityInspector() string {
	if x != nil {
		return x.QualityInspector
	}
	return ""
}

func (x *CreateQualityInspectionHashReq) GetInspectionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InspectionDate
	}
	return nil
}

func (x *CreateQualityInspectionHashReq) GetInspectionArea() string {
	if x != nil {
		return x.InspectionArea
	}
	return ""
}

func (x *CreateQualityInspectionHashReq) GetInspectionSituation() string {
	if x != nil {
		return x.InspectionSituation
	}
	return ""
}

func (x *CreateQualityInspectionHashReq) GetInspectionResult() string {
	if x != nil {
		return x.InspectionResult
	}
	return ""
}

func (x *CreateQualityInspectionHashReq) GetInspectionBy() int64 {
	if x != nil {
		return x.InspectionBy
	}
	return 0
}

func (x *CreateQualityInspectionHashReq) GetInspectionAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InspectionAt
	}
	return nil
}

func (x *CreateQualityInspectionHashReq) GetQualityStatus() string {
	if x != nil {
		return x.QualityStatus
	}
	return ""
}

func (x *CreateQualityInspectionHashReq) GetAssignedPerson() string {
	if x != nil {
		return x.AssignedPerson
	}
	return ""
}

func (x *CreateQualityInspectionHashReq) GetAssignedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.AssignedDate
	}
	return nil
}

func (x *CreateQualityInspectionHashReq) GetAssignedDesc() string {
	if x != nil {
		return x.AssignedDesc
	}
	return ""
}

func (x *CreateQualityInspectionHashReq) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *CreateQualityInspectionHashReq) GetRectifyDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDeadline
	}
	return nil
}

func (x *CreateQualityInspectionHashReq) GetRectifyDeadlineWarn() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDeadlineWarn
	}
	return nil
}

func (x *CreateQualityInspectionHashReq) GetRectifyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDate
	}
	return nil
}

func (x *CreateQualityInspectionHashReq) GetRectifyPerson() string {
	if x != nil {
		return x.RectifyPerson
	}
	return ""
}

func (x *CreateQualityInspectionHashReq) GetRectifyDesc() string {
	if x != nil {
		return x.RectifyDesc
	}
	return ""
}

func (x *CreateQualityInspectionHashReq) GetRectifyBy() int64 {
	if x != nil {
		return x.RectifyBy
	}
	return 0
}

func (x *CreateQualityInspectionHashReq) GetRectifyAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyAt
	}
	return nil
}

func (x *CreateQualityInspectionHashReq) GetReviewDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReviewDate
	}
	return nil
}

func (x *CreateQualityInspectionHashReq) GetReviewPerson() string {
	if x != nil {
		return x.ReviewPerson
	}
	return ""
}

func (x *CreateQualityInspectionHashReq) GetReviewDesc() string {
	if x != nil {
		return x.ReviewDesc
	}
	return ""
}

func (x *CreateQualityInspectionHashReq) GetReviewBy() int64 {
	if x != nil {
		return x.ReviewBy
	}
	return 0
}

func (x *CreateQualityInspectionHashReq) GetReviewAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReviewAt
	}
	return nil
}

func (x *CreateQualityInspectionHashReq) GetMainQualityInspectionCode() string {
	if x != nil {
		return x.MainQualityInspectionCode
	}
	return ""
}

func (x *CreateQualityInspectionHashReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *CreateQualityInspectionHashReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CreateQualityInspectionHashReq) GetUploadDocument() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocument
	}
	return nil
}

func (x *CreateQualityInspectionHashReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *CreateQualityInspectionHashReq) GetInspectionHash() string {
	if x != nil {
		return x.InspectionHash
	}
	return ""
}

func (x *CreateQualityInspectionHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UpdateQualityInspectionHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QualityInspectionId       int64                  `protobuf:"varint,1,opt,name=qualityInspectionId,proto3" json:"qualityInspectionId"`
	QualityInspectionCode     string                 `protobuf:"bytes,2,opt,name=qualityInspectionCode,proto3" json:"qualityInspectionCode"`
	ProjectId                 int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	FromOrganizationId        int64                  `protobuf:"varint,4,opt,name=fromOrganizationId,proto3" json:"fromOrganizationId"`
	FromPlatFormType          string                 `protobuf:"bytes,5,opt,name=fromPlatFormType,proto3" json:"fromPlatFormType"`
	ToOrganizationId          int64                  `protobuf:"varint,6,opt,name=toOrganizationId,proto3" json:"toOrganizationId"`
	ToPlatFormType            string                 `protobuf:"bytes,7,opt,name=toPlatFormType,proto3" json:"toPlatFormType"`
	QualityInspector          string                 `protobuf:"bytes,8,opt,name=qualityInspector,proto3" json:"qualityInspector"`
	InspectionDate            *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=inspectionDate,proto3" json:"inspectionDate"`
	InspectionArea            string                 `protobuf:"bytes,10,opt,name=inspectionArea,proto3" json:"inspectionArea"`
	InspectionSituation       string                 `protobuf:"bytes,11,opt,name=inspectionSituation,proto3" json:"inspectionSituation"`
	InspectionResult          string                 `protobuf:"bytes,12,opt,name=inspectionResult,proto3" json:"inspectionResult"`
	InspectionBy              int64                  `protobuf:"varint,13,opt,name=inspectionBy,proto3" json:"inspectionBy"`
	InspectionAt              *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=inspectionAt,proto3" json:"inspectionAt"`
	QualityStatus             string                 `protobuf:"bytes,15,opt,name=qualityStatus,proto3" json:"qualityStatus"`
	AssignedPerson            string                 `protobuf:"bytes,16,opt,name=assignedPerson,proto3" json:"assignedPerson"`
	AssignedDate              *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=assignedDate,proto3" json:"assignedDate"`
	AssignedDesc              string                 `protobuf:"bytes,18,opt,name=assignedDesc,proto3" json:"assignedDesc"`
	Duration                  int64                  `protobuf:"varint,19,opt,name=duration,proto3" json:"duration"`
	RectifyDeadline           *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=rectifyDeadline,proto3" json:"rectifyDeadline"`
	RectifyDeadlineWarn       *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=rectifyDeadlineWarn,proto3" json:"rectifyDeadlineWarn"`
	RectifyDate               *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=rectifyDate,proto3" json:"rectifyDate"`
	RectifyPerson             string                 `protobuf:"bytes,23,opt,name=rectifyPerson,proto3" json:"rectifyPerson"`
	RectifyDesc               string                 `protobuf:"bytes,24,opt,name=rectifyDesc,proto3" json:"rectifyDesc"`
	RectifyBy                 int64                  `protobuf:"varint,25,opt,name=rectifyBy,proto3" json:"rectifyBy"`
	RectifyAt                 *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=rectifyAt,proto3" json:"rectifyAt"`
	ReviewDate                *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=reviewDate,proto3" json:"reviewDate"`
	ReviewPerson              string                 `protobuf:"bytes,28,opt,name=reviewPerson,proto3" json:"reviewPerson"`
	ReviewDesc                string                 `protobuf:"bytes,29,opt,name=reviewDesc,proto3" json:"reviewDesc"`
	ReviewBy                  int64                  `protobuf:"varint,30,opt,name=reviewBy,proto3" json:"reviewBy"`
	ReviewAt                  *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=reviewAt,proto3" json:"reviewAt"`
	MainQualityInspectionCode string                 `protobuf:"bytes,32,opt,name=mainQualityInspectionCode,proto3" json:"mainQualityInspectionCode"`
	ActiveStatus              string                 `protobuf:"bytes,33,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo                      string                 `protobuf:"bytes,34,opt,name=memo,proto3" json:"memo"`
	UploadDocument            []*UploadDocumentInfo  `protobuf:"bytes,35,rep,name=uploadDocument,proto3" json:"uploadDocument"`
	InfoHash                  string                 `protobuf:"bytes,36,opt,name=infoHash,proto3" json:"infoHash"`
	InspectionHash            string                 `protobuf:"bytes,37,opt,name=inspectionHash,proto3" json:"inspectionHash"`
	RectifyHash               string                 `protobuf:"bytes,38,opt,name=rectifyHash,proto3" json:"rectifyHash"`
	ReviewHash                string                 `protobuf:"bytes,39,opt,name=reviewHash,proto3" json:"reviewHash"`
	ManagerId                 int64                  `protobuf:"varint,40,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UpdateQualityInspectionHashReq) Reset() {
	*x = UpdateQualityInspectionHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[473]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateQualityInspectionHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQualityInspectionHashReq) ProtoMessage() {}

func (x *UpdateQualityInspectionHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[473]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQualityInspectionHashReq.ProtoReflect.Descriptor instead.
func (*UpdateQualityInspectionHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{473}
}

func (x *UpdateQualityInspectionHashReq) GetQualityInspectionId() int64 {
	if x != nil {
		return x.QualityInspectionId
	}
	return 0
}

func (x *UpdateQualityInspectionHashReq) GetQualityInspectionCode() string {
	if x != nil {
		return x.QualityInspectionCode
	}
	return ""
}

func (x *UpdateQualityInspectionHashReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateQualityInspectionHashReq) GetFromOrganizationId() int64 {
	if x != nil {
		return x.FromOrganizationId
	}
	return 0
}

func (x *UpdateQualityInspectionHashReq) GetFromPlatFormType() string {
	if x != nil {
		return x.FromPlatFormType
	}
	return ""
}

func (x *UpdateQualityInspectionHashReq) GetToOrganizationId() int64 {
	if x != nil {
		return x.ToOrganizationId
	}
	return 0
}

func (x *UpdateQualityInspectionHashReq) GetToPlatFormType() string {
	if x != nil {
		return x.ToPlatFormType
	}
	return ""
}

func (x *UpdateQualityInspectionHashReq) GetQualityInspector() string {
	if x != nil {
		return x.QualityInspector
	}
	return ""
}

func (x *UpdateQualityInspectionHashReq) GetInspectionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InspectionDate
	}
	return nil
}

func (x *UpdateQualityInspectionHashReq) GetInspectionArea() string {
	if x != nil {
		return x.InspectionArea
	}
	return ""
}

func (x *UpdateQualityInspectionHashReq) GetInspectionSituation() string {
	if x != nil {
		return x.InspectionSituation
	}
	return ""
}

func (x *UpdateQualityInspectionHashReq) GetInspectionResult() string {
	if x != nil {
		return x.InspectionResult
	}
	return ""
}

func (x *UpdateQualityInspectionHashReq) GetInspectionBy() int64 {
	if x != nil {
		return x.InspectionBy
	}
	return 0
}

func (x *UpdateQualityInspectionHashReq) GetInspectionAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InspectionAt
	}
	return nil
}

func (x *UpdateQualityInspectionHashReq) GetQualityStatus() string {
	if x != nil {
		return x.QualityStatus
	}
	return ""
}

func (x *UpdateQualityInspectionHashReq) GetAssignedPerson() string {
	if x != nil {
		return x.AssignedPerson
	}
	return ""
}

func (x *UpdateQualityInspectionHashReq) GetAssignedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.AssignedDate
	}
	return nil
}

func (x *UpdateQualityInspectionHashReq) GetAssignedDesc() string {
	if x != nil {
		return x.AssignedDesc
	}
	return ""
}

func (x *UpdateQualityInspectionHashReq) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *UpdateQualityInspectionHashReq) GetRectifyDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDeadline
	}
	return nil
}

func (x *UpdateQualityInspectionHashReq) GetRectifyDeadlineWarn() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDeadlineWarn
	}
	return nil
}

func (x *UpdateQualityInspectionHashReq) GetRectifyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDate
	}
	return nil
}

func (x *UpdateQualityInspectionHashReq) GetRectifyPerson() string {
	if x != nil {
		return x.RectifyPerson
	}
	return ""
}

func (x *UpdateQualityInspectionHashReq) GetRectifyDesc() string {
	if x != nil {
		return x.RectifyDesc
	}
	return ""
}

func (x *UpdateQualityInspectionHashReq) GetRectifyBy() int64 {
	if x != nil {
		return x.RectifyBy
	}
	return 0
}

func (x *UpdateQualityInspectionHashReq) GetRectifyAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyAt
	}
	return nil
}

func (x *UpdateQualityInspectionHashReq) GetReviewDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReviewDate
	}
	return nil
}

func (x *UpdateQualityInspectionHashReq) GetReviewPerson() string {
	if x != nil {
		return x.ReviewPerson
	}
	return ""
}

func (x *UpdateQualityInspectionHashReq) GetReviewDesc() string {
	if x != nil {
		return x.ReviewDesc
	}
	return ""
}

func (x *UpdateQualityInspectionHashReq) GetReviewBy() int64 {
	if x != nil {
		return x.ReviewBy
	}
	return 0
}

func (x *UpdateQualityInspectionHashReq) GetReviewAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReviewAt
	}
	return nil
}

func (x *UpdateQualityInspectionHashReq) GetMainQualityInspectionCode() string {
	if x != nil {
		return x.MainQualityInspectionCode
	}
	return ""
}

func (x *UpdateQualityInspectionHashReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *UpdateQualityInspectionHashReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UpdateQualityInspectionHashReq) GetUploadDocument() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocument
	}
	return nil
}

func (x *UpdateQualityInspectionHashReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *UpdateQualityInspectionHashReq) GetInspectionHash() string {
	if x != nil {
		return x.InspectionHash
	}
	return ""
}

func (x *UpdateQualityInspectionHashReq) GetRectifyHash() string {
	if x != nil {
		return x.RectifyHash
	}
	return ""
}

func (x *UpdateQualityInspectionHashReq) GetReviewHash() string {
	if x != nil {
		return x.ReviewHash
	}
	return ""
}

func (x *UpdateQualityInspectionHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type GetQualityInspectionHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId            int64   `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	QualityInspectionIds []int64 `protobuf:"varint,2,rep,packed,name=qualityInspectionIds,proto3" json:"qualityInspectionIds"`
}

func (x *GetQualityInspectionHashReq) Reset() {
	*x = GetQualityInspectionHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[474]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQualityInspectionHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQualityInspectionHashReq) ProtoMessage() {}

func (x *GetQualityInspectionHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[474]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQualityInspectionHashReq.ProtoReflect.Descriptor instead.
func (*GetQualityInspectionHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{474}
}

func (x *GetQualityInspectionHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetQualityInspectionHashReq) GetQualityInspectionIds() []int64 {
	if x != nil {
		return x.QualityInspectionIds
	}
	return nil
}

type QualityInspectionHashVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QualityInspectionId   int64                  `protobuf:"varint,1,opt,name=qualityInspectionId,proto3" json:"qualityInspectionId"`
	QualityInspectionCode string                 `protobuf:"bytes,2,opt,name=qualityInspectionCode,proto3" json:"qualityInspectionCode"`
	InfoHash              string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
	InspectionHash        string                 `protobuf:"bytes,5,opt,name=inspectionHash,proto3" json:"inspectionHash"`
	InspectionUploadAt    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=inspectionUploadAt,proto3" json:"inspectionUploadAt"`
	RectifyHash           string                 `protobuf:"bytes,7,opt,name=rectifyHash,proto3" json:"rectifyHash"`
	RectifyUploadAt       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=rectifyUploadAt,proto3" json:"rectifyUploadAt"`
	ReviewHash            string                 `protobuf:"bytes,9,opt,name=reviewHash,proto3" json:"reviewHash"`
	ReviewUploadAt        *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=reviewUploadAt,proto3" json:"reviewUploadAt"`
}

func (x *QualityInspectionHashVo) Reset() {
	*x = QualityInspectionHashVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[475]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityInspectionHashVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityInspectionHashVo) ProtoMessage() {}

func (x *QualityInspectionHashVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[475]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityInspectionHashVo.ProtoReflect.Descriptor instead.
func (*QualityInspectionHashVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{475}
}

func (x *QualityInspectionHashVo) GetQualityInspectionId() int64 {
	if x != nil {
		return x.QualityInspectionId
	}
	return 0
}

func (x *QualityInspectionHashVo) GetQualityInspectionCode() string {
	if x != nil {
		return x.QualityInspectionCode
	}
	return ""
}

func (x *QualityInspectionHashVo) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *QualityInspectionHashVo) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

func (x *QualityInspectionHashVo) GetInspectionHash() string {
	if x != nil {
		return x.InspectionHash
	}
	return ""
}

func (x *QualityInspectionHashVo) GetInspectionUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InspectionUploadAt
	}
	return nil
}

func (x *QualityInspectionHashVo) GetRectifyHash() string {
	if x != nil {
		return x.RectifyHash
	}
	return ""
}

func (x *QualityInspectionHashVo) GetRectifyUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyUploadAt
	}
	return nil
}

func (x *QualityInspectionHashVo) GetReviewHash() string {
	if x != nil {
		return x.ReviewHash
	}
	return ""
}

func (x *QualityInspectionHashVo) GetReviewUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReviewUploadAt
	}
	return nil
}

type GetQualityInspectionHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*QualityInspectionHashVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                      `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                      `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                      `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetQualityInspectionHashResp) Reset() {
	*x = GetQualityInspectionHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[476]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQualityInspectionHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQualityInspectionHashResp) ProtoMessage() {}

func (x *GetQualityInspectionHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[476]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQualityInspectionHashResp.ProtoReflect.Descriptor instead.
func (*GetQualityInspectionHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{476}
}

func (x *GetQualityInspectionHashResp) GetList() []*QualityInspectionHashVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetQualityInspectionHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetQualityInspectionHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetQualityInspectionHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

//获取流程HASH
type GetProcessHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId  int64   `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ProcessIds []int64 `protobuf:"varint,2,rep,packed,name=processIds,proto3" json:"processIds"`
}

func (x *GetProcessHashReq) Reset() {
	*x = GetProcessHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[477]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProcessHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessHashReq) ProtoMessage() {}

func (x *GetProcessHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[477]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessHashReq.ProtoReflect.Descriptor instead.
func (*GetProcessHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{477}
}

func (x *GetProcessHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetProcessHashReq) GetProcessIds() []int64 {
	if x != nil {
		return x.ProcessIds
	}
	return nil
}

type GetProcessHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ProcessHashVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64            `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64            `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64            `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetProcessHashResp) Reset() {
	*x = GetProcessHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[478]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProcessHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessHashResp) ProtoMessage() {}

func (x *GetProcessHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[478]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessHashResp.ProtoReflect.Descriptor instead.
func (*GetProcessHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{478}
}

func (x *GetProcessHashResp) GetList() []*ProcessHashVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetProcessHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetProcessHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetProcessHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ProcessHashVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessId       int64                  `protobuf:"varint,1,opt,name=processId,proto3" json:"processId"`
	ApplyHash       string                 `protobuf:"bytes,2,opt,name=applyHash,proto3" json:"applyHash"`
	InfoHash        string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
	ApproveHash     string                 `protobuf:"bytes,5,opt,name=approveHash,proto3" json:"approveHash"`
	ApproveUploadAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=approve_upload_at,json=approveUploadAt,proto3" json:"approve_upload_at"`
}

func (x *ProcessHashVo) Reset() {
	*x = ProcessHashVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[479]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessHashVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessHashVo) ProtoMessage() {}

func (x *ProcessHashVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[479]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessHashVo.ProtoReflect.Descriptor instead.
func (*ProcessHashVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{479}
}

func (x *ProcessHashVo) GetProcessId() int64 {
	if x != nil {
		return x.ProcessId
	}
	return 0
}

func (x *ProcessHashVo) GetApplyHash() string {
	if x != nil {
		return x.ApplyHash
	}
	return ""
}

func (x *ProcessHashVo) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *ProcessHashVo) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

func (x *ProcessHashVo) GetApproveHash() string {
	if x != nil {
		return x.ApproveHash
	}
	return ""
}

func (x *ProcessHashVo) GetApproveUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveUploadAt
	}
	return nil
}

//GOV审批流程审批信息
type UpdateProcessApproveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ProjectId             int64                  `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId"`
	ConstructionId        int64                  `protobuf:"varint,3,opt,name=constructionId,proto3" json:"constructionId"`
	GovermentId           int64                  `protobuf:"varint,4,opt,name=govermentId,proto3" json:"govermentId"`
	ProjectPhaseId        int64                  `protobuf:"varint,5,opt,name=projectPhaseId,proto3" json:"projectPhaseId"`
	ProcessName           string                 `protobuf:"bytes,6,opt,name=processName,proto3" json:"processName"`
	ApplyDate             *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=applyDate,proto3" json:"applyDate"`
	EstimatedApprovalDays int64                  `protobuf:"varint,8,opt,name=estimatedApprovalDays,proto3" json:"estimatedApprovalDays"`
	SortFlag              int64                  `protobuf:"varint,9,opt,name=sortFlag,proto3" json:"sortFlag"`
	IsParallel            int64                  `protobuf:"varint,10,opt,name=isParallel,proto3" json:"isParallel"`
	ProcessStatus         string                 `protobuf:"bytes,11,opt,name=processStatus,proto3" json:"processStatus"`
	Memo                  string                 `protobuf:"bytes,12,opt,name=memo,proto3" json:"memo"`
	ApproveDeadline       *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=approveDeadline,proto3" json:"approveDeadline"`
	ApproveDeadlineWarn   *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=approveDeadlineWarn,proto3" json:"approveDeadlineWarn"`
	ApproveAt             *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=approveAt,proto3" json:"approveAt"`
	ApproveDesc           string                 `protobuf:"bytes,16,opt,name=approveDesc,proto3" json:"approveDesc"`
	PreProcessIds         string                 `protobuf:"bytes,17,opt,name=preProcessIds,proto3" json:"preProcessIds"`
	ActiveStatus          string                 `protobuf:"bytes,18,opt,name=activeStatus,proto3" json:"activeStatus"`
	InfoHash              string                 `protobuf:"bytes,19,opt,name=infoHash,proto3" json:"infoHash"`
	UploadDocumentApprove []*DocumentInfoApprove `protobuf:"bytes,20,rep,name=uploadDocumentApprove,proto3" json:"uploadDocumentApprove"`
	ManagerId             int64                  `protobuf:"varint,21,opt,name=managerId,proto3" json:"managerId"`
	ApproveBy             int64                  `protobuf:"varint,22,opt,name=approveBy,proto3" json:"approveBy"`
}

func (x *UpdateProcessApproveReq) Reset() {
	*x = UpdateProcessApproveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[480]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProcessApproveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProcessApproveReq) ProtoMessage() {}

func (x *UpdateProcessApproveReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[480]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProcessApproveReq.ProtoReflect.Descriptor instead.
func (*UpdateProcessApproveReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{480}
}

func (x *UpdateProcessApproveReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProcessApproveReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateProcessApproveReq) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *UpdateProcessApproveReq) GetGovermentId() int64 {
	if x != nil {
		return x.GovermentId
	}
	return 0
}

func (x *UpdateProcessApproveReq) GetProjectPhaseId() int64 {
	if x != nil {
		return x.ProjectPhaseId
	}
	return 0
}

func (x *UpdateProcessApproveReq) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *UpdateProcessApproveReq) GetApplyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyDate
	}
	return nil
}

func (x *UpdateProcessApproveReq) GetEstimatedApprovalDays() int64 {
	if x != nil {
		return x.EstimatedApprovalDays
	}
	return 0
}

func (x *UpdateProcessApproveReq) GetSortFlag() int64 {
	if x != nil {
		return x.SortFlag
	}
	return 0
}

func (x *UpdateProcessApproveReq) GetIsParallel() int64 {
	if x != nil {
		return x.IsParallel
	}
	return 0
}

func (x *UpdateProcessApproveReq) GetProcessStatus() string {
	if x != nil {
		return x.ProcessStatus
	}
	return ""
}

func (x *UpdateProcessApproveReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UpdateProcessApproveReq) GetApproveDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveDeadline
	}
	return nil
}

func (x *UpdateProcessApproveReq) GetApproveDeadlineWarn() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveDeadlineWarn
	}
	return nil
}

func (x *UpdateProcessApproveReq) GetApproveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveAt
	}
	return nil
}

func (x *UpdateProcessApproveReq) GetApproveDesc() string {
	if x != nil {
		return x.ApproveDesc
	}
	return ""
}

func (x *UpdateProcessApproveReq) GetPreProcessIds() string {
	if x != nil {
		return x.PreProcessIds
	}
	return ""
}

func (x *UpdateProcessApproveReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *UpdateProcessApproveReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *UpdateProcessApproveReq) GetUploadDocumentApprove() []*DocumentInfoApprove {
	if x != nil {
		return x.UploadDocumentApprove
	}
	return nil
}

func (x *UpdateProcessApproveReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *UpdateProcessApproveReq) GetApproveBy() int64 {
	if x != nil {
		return x.ApproveBy
	}
	return 0
}

type DocumentInfoApprove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessType string `protobuf:"bytes,1,opt,name=businessType,proto3" json:"businessType"`
	FileName     string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName"`
	UploadUrl    string `protobuf:"bytes,3,opt,name=uploadUrl,proto3" json:"uploadUrl"`
}

func (x *DocumentInfoApprove) Reset() {
	*x = DocumentInfoApprove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[481]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentInfoApprove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentInfoApprove) ProtoMessage() {}

func (x *DocumentInfoApprove) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[481]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentInfoApprove.ProtoReflect.Descriptor instead.
func (*DocumentInfoApprove) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{481}
}

func (x *DocumentInfoApprove) GetBusinessType() string {
	if x != nil {
		return x.BusinessType
	}
	return ""
}

func (x *DocumentInfoApprove) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *DocumentInfoApprove) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

//获取流程信息详情
type GetProcessInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessId int64 `protobuf:"varint,1,opt,name=processId,proto3" json:"processId"`
	ManagerId int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
	Page      *Page `protobuf:"bytes,3,opt,name=page,proto3" json:"page"`
}

func (x *GetProcessInfoReq) Reset() {
	*x = GetProcessInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[482]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProcessInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessInfoReq) ProtoMessage() {}

func (x *GetProcessInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[482]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessInfoReq.ProtoReflect.Descriptor instead.
func (*GetProcessInfoReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{482}
}

func (x *GetProcessInfoReq) GetProcessId() int64 {
	if x != nil {
		return x.ProcessId
	}
	return 0
}

func (x *GetProcessInfoReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetProcessInfoReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ProcessInfoVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ProjectId                int64                  `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId"`
	ConstructionId           int64                  `protobuf:"varint,3,opt,name=constructionId,proto3" json:"constructionId"`
	GovermentId              int64                  `protobuf:"varint,4,opt,name=govermentId,proto3" json:"govermentId"`
	ProjectPhaseId           int64                  `protobuf:"varint,5,opt,name=projectPhaseId,proto3" json:"projectPhaseId"`
	ProcessName              string                 `protobuf:"bytes,6,opt,name=processName,proto3" json:"processName"`
	ApplyDate                *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=applyDate,proto3" json:"applyDate"`
	EstimatedApprovalDays    int64                  `protobuf:"varint,8,opt,name=estimatedApprovalDays,proto3" json:"estimatedApprovalDays"`
	SortFlag                 int64                  `protobuf:"varint,9,opt,name=sortFlag,proto3" json:"sortFlag"`
	IsParallel               int64                  `protobuf:"varint,10,opt,name=isParallel,proto3" json:"isParallel"`
	ProcessStatus            string                 `protobuf:"bytes,11,opt,name=processStatus,proto3" json:"processStatus"`
	Memo                     string                 `protobuf:"bytes,12,opt,name=memo,proto3" json:"memo"`
	ApproveDeadline          *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=approveDeadline,proto3" json:"approveDeadline"`
	ApproveDeadlineWarn      *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=approveDeadlineWarn,proto3" json:"approveDeadlineWarn"`
	ApproveAt                *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=approveAt,proto3" json:"approveAt"`
	ApproveDesc              string                 `protobuf:"bytes,16,opt,name=approveDesc,proto3" json:"approveDesc"`
	PreProcessIds            string                 `protobuf:"bytes,17,opt,name=preProcessIds,proto3" json:"preProcessIds"`
	ActiveStatus             string                 `protobuf:"bytes,18,opt,name=activeStatus,proto3" json:"activeStatus"`
	InfoHash                 string                 `protobuf:"bytes,19,opt,name=infoHash,proto3" json:"infoHash"`
	DocumentInfoApply        []*DocumentInfo        `protobuf:"bytes,20,rep,name=documentInfoApply,proto3" json:"documentInfoApply"`
	DocumentInfoApprove      []*DocumentInfo        `protobuf:"bytes,21,rep,name=documentInfoApprove,proto3" json:"documentInfoApprove"`
	ProjectPhaseName         string                 `protobuf:"bytes,22,opt,name=projectPhaseName,proto3" json:"projectPhaseName"`
	ProjectPhaseDesc         string                 `protobuf:"bytes,23,opt,name=projectPhaseDesc,proto3" json:"projectPhaseDesc"`
	ProjectPhaseApprovalDays int64                  `protobuf:"varint,24,opt,name=projectPhaseApprovalDays,proto3" json:"projectPhaseApprovalDays"`
	ConstructionName         string                 `protobuf:"bytes,25,opt,name=constructionName,proto3" json:"constructionName"`
	GovermentName            string                 `protobuf:"bytes,26,opt,name=govermentName,proto3" json:"govermentName"`
	ProjectName              string                 `protobuf:"bytes,27,opt,name=projectName,proto3" json:"projectName"`
	ProcessInfoHash          *ProcessInfoHashVo     `protobuf:"bytes,28,opt,name=processInfoHash,proto3" json:"processInfoHash"`
	ProjectPhaseIds          string                 `protobuf:"bytes,29,opt,name=projectPhaseIds,proto3" json:"projectPhaseIds"`
	ProjectPhaseIdsDesc      string                 `protobuf:"bytes,30,opt,name=projectPhaseIdsDesc,proto3" json:"projectPhaseIdsDesc"`
}

func (x *ProcessInfoVo) Reset() {
	*x = ProcessInfoVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[483]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInfoVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInfoVo) ProtoMessage() {}

func (x *ProcessInfoVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[483]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInfoVo.ProtoReflect.Descriptor instead.
func (*ProcessInfoVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{483}
}

func (x *ProcessInfoVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProcessInfoVo) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ProcessInfoVo) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *ProcessInfoVo) GetGovermentId() int64 {
	if x != nil {
		return x.GovermentId
	}
	return 0
}

func (x *ProcessInfoVo) GetProjectPhaseId() int64 {
	if x != nil {
		return x.ProjectPhaseId
	}
	return 0
}

func (x *ProcessInfoVo) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *ProcessInfoVo) GetApplyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyDate
	}
	return nil
}

func (x *ProcessInfoVo) GetEstimatedApprovalDays() int64 {
	if x != nil {
		return x.EstimatedApprovalDays
	}
	return 0
}

func (x *ProcessInfoVo) GetSortFlag() int64 {
	if x != nil {
		return x.SortFlag
	}
	return 0
}

func (x *ProcessInfoVo) GetIsParallel() int64 {
	if x != nil {
		return x.IsParallel
	}
	return 0
}

func (x *ProcessInfoVo) GetProcessStatus() string {
	if x != nil {
		return x.ProcessStatus
	}
	return ""
}

func (x *ProcessInfoVo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *ProcessInfoVo) GetApproveDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveDeadline
	}
	return nil
}

func (x *ProcessInfoVo) GetApproveDeadlineWarn() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveDeadlineWarn
	}
	return nil
}

func (x *ProcessInfoVo) GetApproveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveAt
	}
	return nil
}

func (x *ProcessInfoVo) GetApproveDesc() string {
	if x != nil {
		return x.ApproveDesc
	}
	return ""
}

func (x *ProcessInfoVo) GetPreProcessIds() string {
	if x != nil {
		return x.PreProcessIds
	}
	return ""
}

func (x *ProcessInfoVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *ProcessInfoVo) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *ProcessInfoVo) GetDocumentInfoApply() []*DocumentInfo {
	if x != nil {
		return x.DocumentInfoApply
	}
	return nil
}

func (x *ProcessInfoVo) GetDocumentInfoApprove() []*DocumentInfo {
	if x != nil {
		return x.DocumentInfoApprove
	}
	return nil
}

func (x *ProcessInfoVo) GetProjectPhaseName() string {
	if x != nil {
		return x.ProjectPhaseName
	}
	return ""
}

func (x *ProcessInfoVo) GetProjectPhaseDesc() string {
	if x != nil {
		return x.ProjectPhaseDesc
	}
	return ""
}

func (x *ProcessInfoVo) GetProjectPhaseApprovalDays() int64 {
	if x != nil {
		return x.ProjectPhaseApprovalDays
	}
	return 0
}

func (x *ProcessInfoVo) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *ProcessInfoVo) GetGovermentName() string {
	if x != nil {
		return x.GovermentName
	}
	return ""
}

func (x *ProcessInfoVo) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ProcessInfoVo) GetProcessInfoHash() *ProcessInfoHashVo {
	if x != nil {
		return x.ProcessInfoHash
	}
	return nil
}

func (x *ProcessInfoVo) GetProjectPhaseIds() string {
	if x != nil {
		return x.ProjectPhaseIds
	}
	return ""
}

func (x *ProcessInfoVo) GetProjectPhaseIdsDesc() string {
	if x != nil {
		return x.ProjectPhaseIdsDesc
	}
	return ""
}

type ProcessInfoHashVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ProcessId       int64                  `protobuf:"varint,2,opt,name=processId,proto3" json:"processId"`
	InfoHash        string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
	ApplyHash       string                 `protobuf:"bytes,5,opt,name=applyHash,proto3" json:"applyHash"`
	ApplyUploadAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=applyUploadAt,proto3" json:"applyUploadAt"`
	ApproveHash     string                 `protobuf:"bytes,7,opt,name=approveHash,proto3" json:"approveHash"`
	ApproveUploadAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=approveUploadAt,proto3" json:"approveUploadAt"`
	Msg             string                 `protobuf:"bytes,9,opt,name=msg,proto3" json:"msg"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updatedAt,proto3" json:"updatedAt"`
}

func (x *ProcessInfoHashVo) Reset() {
	*x = ProcessInfoHashVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[484]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInfoHashVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInfoHashVo) ProtoMessage() {}

func (x *ProcessInfoHashVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[484]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInfoHashVo.ProtoReflect.Descriptor instead.
func (*ProcessInfoHashVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{484}
}

func (x *ProcessInfoHashVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProcessInfoHashVo) GetProcessId() int64 {
	if x != nil {
		return x.ProcessId
	}
	return 0
}

func (x *ProcessInfoHashVo) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *ProcessInfoHashVo) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

func (x *ProcessInfoHashVo) GetApplyHash() string {
	if x != nil {
		return x.ApplyHash
	}
	return ""
}

func (x *ProcessInfoHashVo) GetApplyUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyUploadAt
	}
	return nil
}

func (x *ProcessInfoHashVo) GetApproveHash() string {
	if x != nil {
		return x.ApproveHash
	}
	return ""
}

func (x *ProcessInfoHashVo) GetApproveUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveUploadAt
	}
	return nil
}

func (x *ProcessInfoHashVo) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ProcessInfoHashVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ProcessInfoHashVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type GetProcessInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ProcessInfoVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64            `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64            `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64            `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetProcessInfoResp) Reset() {
	*x = GetProcessInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[485]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProcessInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessInfoResp) ProtoMessage() {}

func (x *GetProcessInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[485]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessInfoResp.ProtoReflect.Descriptor instead.
func (*GetProcessInfoResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{485}
}

func (x *GetProcessInfoResp) GetList() []*ProcessInfoVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetProcessInfoResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetProcessInfoResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetProcessInfoResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

//合同信息message
type ListContractReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractType     string                 `protobuf:"bytes,1,opt,name=contractType,proto3" json:"contractType"`
	ContractCode     string                 `protobuf:"bytes,2,opt,name=contractCode,proto3" json:"contractCode"`
	ContractName     string                 `protobuf:"bytes,3,opt,name=contractName,proto3" json:"contractName"`
	ProjectId        int64                  `protobuf:"varint,4,opt,name=projectId,proto3" json:"projectId"`
	ConstructionId   int64                  `protobuf:"varint,5,opt,name=constructionId,proto3" json:"constructionId"`
	ToPlatFormType   string                 `protobuf:"bytes,6,opt,name=toPlatFormType,proto3" json:"toPlatFormType"`
	ToOrganizationId int64                  `protobuf:"varint,7,opt,name=toOrganizationId,proto3" json:"toOrganizationId"`
	StartAt          *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=startAt,proto3" json:"startAt"`
	EndAt            *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=endAt,proto3" json:"endAt"`
	Page             *Page                  `protobuf:"bytes,10,opt,name=page,proto3" json:"page"`
	ManagerId        int64                  `protobuf:"varint,11,opt,name=managerId,proto3" json:"managerId"`
	ProjectName      string                 `protobuf:"bytes,12,opt,name=projectName,proto3" json:"projectName"`
}

func (x *ListContractReq) Reset() {
	*x = ListContractReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[486]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContractReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContractReq) ProtoMessage() {}

func (x *ListContractReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[486]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContractReq.ProtoReflect.Descriptor instead.
func (*ListContractReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{486}
}

func (x *ListContractReq) GetContractType() string {
	if x != nil {
		return x.ContractType
	}
	return ""
}

func (x *ListContractReq) GetContractCode() string {
	if x != nil {
		return x.ContractCode
	}
	return ""
}

func (x *ListContractReq) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *ListContractReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListContractReq) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *ListContractReq) GetToPlatFormType() string {
	if x != nil {
		return x.ToPlatFormType
	}
	return ""
}

func (x *ListContractReq) GetToOrganizationId() int64 {
	if x != nil {
		return x.ToOrganizationId
	}
	return 0
}

func (x *ListContractReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *ListContractReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *ListContractReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListContractReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListContractReq) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type ListContractResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ListContractVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64             `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64             `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListContractResp) Reset() {
	*x = ListContractResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[487]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContractResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContractResp) ProtoMessage() {}

func (x *ListContractResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[487]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContractResp.ProtoReflect.Descriptor instead.
func (*ListContractResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{487}
}

func (x *ListContractResp) GetList() []*ListContractVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListContractResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListContractResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListContractResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ListContractVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ContractCode       string                 `protobuf:"bytes,2,opt,name=contractCode,proto3" json:"contractCode"`
	ContractName       string                 `protobuf:"bytes,3,opt,name=contractName,proto3" json:"contractName"`
	ContractType       string                 `protobuf:"bytes,4,opt,name=contractType,proto3" json:"contractType"`
	ProjectId          int64                  `protobuf:"varint,5,opt,name=projectId,proto3" json:"projectId"`
	ConstructionId     int64                  `protobuf:"varint,6,opt,name=constructionId,proto3" json:"constructionId"`
	ToOrganizationId   int64                  `protobuf:"varint,7,opt,name=toOrganizationId,proto3" json:"toOrganizationId"`
	ToPlatFormType     string                 `protobuf:"bytes,8,opt,name=toPlatFormType,proto3" json:"toPlatFormType"`
	ThirdCode          string                 `protobuf:"bytes,9,opt,name=thirdCode,proto3" json:"thirdCode"`
	ContractAmount     int64                  `protobuf:"varint,10,opt,name=contractAmount,proto3" json:"contractAmount"`
	StartAt            *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=startAt,proto3" json:"startAt"`
	EndAt              *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=endAt,proto3" json:"endAt"`
	Memo               string                 `protobuf:"bytes,13,opt,name=memo,proto3" json:"memo"`
	ActiveStatus       string                 `protobuf:"bytes,14,opt,name=activeStatus,proto3" json:"activeStatus"`
	CreatedBy          int64                  `protobuf:"varint,15,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy          int64                  `protobuf:"varint,17,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=updatedAt,proto3" json:"updatedAt"`
	ProjectName        string                 `protobuf:"bytes,19,opt,name=projectName,proto3" json:"projectName"`
	ToOrganizationName string                 `protobuf:"bytes,20,opt,name=toOrganizationName,proto3" json:"toOrganizationName"`
	InfoHash           string                 `protobuf:"bytes,21,opt,name=infoHash,proto3" json:"infoHash"`
	ConstructionName   string                 `protobuf:"bytes,22,opt,name=constructionName,proto3" json:"constructionName"`
}

func (x *ListContractVo) Reset() {
	*x = ListContractVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[488]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContractVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContractVo) ProtoMessage() {}

func (x *ListContractVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[488]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContractVo.ProtoReflect.Descriptor instead.
func (*ListContractVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{488}
}

func (x *ListContractVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListContractVo) GetContractCode() string {
	if x != nil {
		return x.ContractCode
	}
	return ""
}

func (x *ListContractVo) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *ListContractVo) GetContractType() string {
	if x != nil {
		return x.ContractType
	}
	return ""
}

func (x *ListContractVo) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListContractVo) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *ListContractVo) GetToOrganizationId() int64 {
	if x != nil {
		return x.ToOrganizationId
	}
	return 0
}

func (x *ListContractVo) GetToPlatFormType() string {
	if x != nil {
		return x.ToPlatFormType
	}
	return ""
}

func (x *ListContractVo) GetThirdCode() string {
	if x != nil {
		return x.ThirdCode
	}
	return ""
}

func (x *ListContractVo) GetContractAmount() int64 {
	if x != nil {
		return x.ContractAmount
	}
	return 0
}

func (x *ListContractVo) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *ListContractVo) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *ListContractVo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *ListContractVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *ListContractVo) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *ListContractVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListContractVo) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *ListContractVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ListContractVo) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ListContractVo) GetToOrganizationName() string {
	if x != nil {
		return x.ToOrganizationName
	}
	return ""
}

func (x *ListContractVo) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *ListContractVo) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

type GetOneContractReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId     int64  `protobuf:"varint,1,opt,name=contractId,proto3" json:"contractId"`
	ManagerId      int64  `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
	Page           *Page  `protobuf:"bytes,3,opt,name=page,proto3" json:"page"`
	ToPlatFormType string `protobuf:"bytes,4,opt,name=toPlatFormType,proto3" json:"toPlatFormType"`
}

func (x *GetOneContractReq) Reset() {
	*x = GetOneContractReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[489]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOneContractReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOneContractReq) ProtoMessage() {}

func (x *GetOneContractReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[489]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOneContractReq.ProtoReflect.Descriptor instead.
func (*GetOneContractReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{489}
}

func (x *GetOneContractReq) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *GetOneContractReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetOneContractReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GetOneContractReq) GetToPlatFormType() string {
	if x != nil {
		return x.ToPlatFormType
	}
	return ""
}

type GetOneContractResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ContractInfoVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64             `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64             `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetOneContractResp) Reset() {
	*x = GetOneContractResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[490]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOneContractResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOneContractResp) ProtoMessage() {}

func (x *GetOneContractResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[490]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOneContractResp.ProtoReflect.Descriptor instead.
func (*GetOneContractResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{490}
}

func (x *GetOneContractResp) GetList() []*ContractInfoVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetOneContractResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetOneContractResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetOneContractResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ContractInfoVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ContractCode               string                 `protobuf:"bytes,2,opt,name=contractCode,proto3" json:"contractCode"`
	ContractName               string                 `protobuf:"bytes,3,opt,name=contractName,proto3" json:"contractName"`
	ContractType               string                 `protobuf:"bytes,4,opt,name=contractType,proto3" json:"contractType"`
	ProjectId                  int64                  `protobuf:"varint,5,opt,name=projectId,proto3" json:"projectId"`
	ConstructionId             int64                  `protobuf:"varint,6,opt,name=constructionId,proto3" json:"constructionId"`
	ToOrganizationId           int64                  `protobuf:"varint,7,opt,name=toOrganizationId,proto3" json:"toOrganizationId"`
	ToPlatFormType             string                 `protobuf:"bytes,8,opt,name=toPlatFormType,proto3" json:"toPlatFormType"`
	ThirdCode                  string                 `protobuf:"bytes,9,opt,name=thirdCode,proto3" json:"thirdCode"`
	ContractAmount             int64                  `protobuf:"varint,10,opt,name=contractAmount,proto3" json:"contractAmount"`
	StartAt                    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=startAt,proto3" json:"startAt"`
	EndAt                      *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=endAt,proto3" json:"endAt"`
	Memo                       string                 `protobuf:"bytes,13,opt,name=memo,proto3" json:"memo"`
	ActiveStatus               string                 `protobuf:"bytes,14,opt,name=activeStatus,proto3" json:"activeStatus"`
	CreatedBy                  int64                  `protobuf:"varint,15,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt                  *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy                  int64                  `protobuf:"varint,17,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt                  *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=updatedAt,proto3" json:"updatedAt"`
	ProjectName                string                 `protobuf:"bytes,19,opt,name=projectName,proto3" json:"projectName"`
	ToOrganizationName         string                 `protobuf:"bytes,20,opt,name=toOrganizationName,proto3" json:"toOrganizationName"`
	UploadDocumentInfoContract []*DocumentInfo        `protobuf:"bytes,21,rep,name=uploadDocumentInfoContract,proto3" json:"uploadDocumentInfoContract"`
	InfoHash                   string                 `protobuf:"bytes,22,opt,name=infoHash,proto3" json:"infoHash"`
	ConstructionName           string                 `protobuf:"bytes,23,opt,name=constructionName,proto3" json:"constructionName"`
}

func (x *ContractInfoVo) Reset() {
	*x = ContractInfoVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[491]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractInfoVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractInfoVo) ProtoMessage() {}

func (x *ContractInfoVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[491]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractInfoVo.ProtoReflect.Descriptor instead.
func (*ContractInfoVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{491}
}

func (x *ContractInfoVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ContractInfoVo) GetContractCode() string {
	if x != nil {
		return x.ContractCode
	}
	return ""
}

func (x *ContractInfoVo) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *ContractInfoVo) GetContractType() string {
	if x != nil {
		return x.ContractType
	}
	return ""
}

func (x *ContractInfoVo) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ContractInfoVo) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *ContractInfoVo) GetToOrganizationId() int64 {
	if x != nil {
		return x.ToOrganizationId
	}
	return 0
}

func (x *ContractInfoVo) GetToPlatFormType() string {
	if x != nil {
		return x.ToPlatFormType
	}
	return ""
}

func (x *ContractInfoVo) GetThirdCode() string {
	if x != nil {
		return x.ThirdCode
	}
	return ""
}

func (x *ContractInfoVo) GetContractAmount() int64 {
	if x != nil {
		return x.ContractAmount
	}
	return 0
}

func (x *ContractInfoVo) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *ContractInfoVo) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *ContractInfoVo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *ContractInfoVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *ContractInfoVo) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *ContractInfoVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ContractInfoVo) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *ContractInfoVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ContractInfoVo) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ContractInfoVo) GetToOrganizationName() string {
	if x != nil {
		return x.ToOrganizationName
	}
	return ""
}

func (x *ContractInfoVo) GetUploadDocumentInfoContract() []*DocumentInfo {
	if x != nil {
		return x.UploadDocumentInfoContract
	}
	return nil
}

func (x *ContractInfoVo) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *ContractInfoVo) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

type CreateOneContractReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         int64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ContractCode               string                  `protobuf:"bytes,2,opt,name=contractCode,proto3" json:"contractCode"`
	ContractName               string                  `protobuf:"bytes,3,opt,name=contractName,proto3" json:"contractName"`
	ContractType               string                  `protobuf:"bytes,4,opt,name=contractType,proto3" json:"contractType"`
	ProjectId                  int64                   `protobuf:"varint,5,opt,name=projectId,proto3" json:"projectId"`
	ConstructionId             int64                   `protobuf:"varint,6,opt,name=constructionId,proto3" json:"constructionId"`
	ToOrganizationId           int64                   `protobuf:"varint,7,opt,name=toOrganizationId,proto3" json:"toOrganizationId"`
	ToPlatFormType             string                  `protobuf:"bytes,8,opt,name=toPlatFormType,proto3" json:"toPlatFormType"`
	ThirdCode                  string                  `protobuf:"bytes,9,opt,name=thirdCode,proto3" json:"thirdCode"`
	ContractAmount             int64                   `protobuf:"varint,10,opt,name=contractAmount,proto3" json:"contractAmount"`
	StartAt                    *timestamppb.Timestamp  `protobuf:"bytes,11,opt,name=startAt,proto3" json:"startAt"`
	EndAt                      *timestamppb.Timestamp  `protobuf:"bytes,12,opt,name=endAt,proto3" json:"endAt"`
	Memo                       string                  `protobuf:"bytes,13,opt,name=memo,proto3" json:"memo"`
	ActiveStatus               string                  `protobuf:"bytes,14,opt,name=activeStatus,proto3" json:"activeStatus"`
	CreatedBy                  int64                   `protobuf:"varint,15,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt                  *timestamppb.Timestamp  `protobuf:"bytes,16,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy                  int64                   `protobuf:"varint,17,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt                  *timestamppb.Timestamp  `protobuf:"bytes,18,opt,name=updatedAt,proto3" json:"updatedAt"`
	ManagerId                  int64                   `protobuf:"varint,19,opt,name=managerId,proto3" json:"managerId"`
	UploadDocumentInfoContract []*DocumentInfoContract `protobuf:"bytes,20,rep,name=uploadDocumentInfoContract,proto3" json:"uploadDocumentInfoContract"`
}

func (x *CreateOneContractReq) Reset() {
	*x = CreateOneContractReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[492]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneContractReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneContractReq) ProtoMessage() {}

func (x *CreateOneContractReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[492]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneContractReq.ProtoReflect.Descriptor instead.
func (*CreateOneContractReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{492}
}

func (x *CreateOneContractReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateOneContractReq) GetContractCode() string {
	if x != nil {
		return x.ContractCode
	}
	return ""
}

func (x *CreateOneContractReq) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *CreateOneContractReq) GetContractType() string {
	if x != nil {
		return x.ContractType
	}
	return ""
}

func (x *CreateOneContractReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CreateOneContractReq) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *CreateOneContractReq) GetToOrganizationId() int64 {
	if x != nil {
		return x.ToOrganizationId
	}
	return 0
}

func (x *CreateOneContractReq) GetToPlatFormType() string {
	if x != nil {
		return x.ToPlatFormType
	}
	return ""
}

func (x *CreateOneContractReq) GetThirdCode() string {
	if x != nil {
		return x.ThirdCode
	}
	return ""
}

func (x *CreateOneContractReq) GetContractAmount() int64 {
	if x != nil {
		return x.ContractAmount
	}
	return 0
}

func (x *CreateOneContractReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *CreateOneContractReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *CreateOneContractReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CreateOneContractReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *CreateOneContractReq) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *CreateOneContractReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreateOneContractReq) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *CreateOneContractReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CreateOneContractReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CreateOneContractReq) GetUploadDocumentInfoContract() []*DocumentInfoContract {
	if x != nil {
		return x.UploadDocumentInfoContract
	}
	return nil
}

type DocumentInfoContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessType string `protobuf:"bytes,1,opt,name=businessType,proto3" json:"businessType"`
	FileName     string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName"`
	UploadUrl    string `protobuf:"bytes,3,opt,name=uploadUrl,proto3" json:"uploadUrl"`
}

func (x *DocumentInfoContract) Reset() {
	*x = DocumentInfoContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[493]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentInfoContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentInfoContract) ProtoMessage() {}

func (x *DocumentInfoContract) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[493]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentInfoContract.ProtoReflect.Descriptor instead.
func (*DocumentInfoContract) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{493}
}

func (x *DocumentInfoContract) GetBusinessType() string {
	if x != nil {
		return x.BusinessType
	}
	return ""
}

func (x *DocumentInfoContract) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *DocumentInfoContract) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

type CreateOneContractResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateOneContractResp) Reset() {
	*x = CreateOneContractResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[494]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneContractResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneContractResp) ProtoMessage() {}

func (x *CreateOneContractResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[494]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneContractResp.ProtoReflect.Descriptor instead.
func (*CreateOneContractResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{494}
}

func (x *CreateOneContractResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type UpdateOneContractReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         int64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ContractCode               string                  `protobuf:"bytes,2,opt,name=contractCode,proto3" json:"contractCode"`
	ContractName               string                  `protobuf:"bytes,3,opt,name=contractName,proto3" json:"contractName"`
	ContractType               string                  `protobuf:"bytes,4,opt,name=contractType,proto3" json:"contractType"`
	ProjectId                  int64                   `protobuf:"varint,5,opt,name=projectId,proto3" json:"projectId"`
	ConstructionId             int64                   `protobuf:"varint,6,opt,name=constructionId,proto3" json:"constructionId"`
	ToOrganizationId           int64                   `protobuf:"varint,7,opt,name=toOrganizationId,proto3" json:"toOrganizationId"`
	ToPlatFormType             string                  `protobuf:"bytes,8,opt,name=toPlatFormType,proto3" json:"toPlatFormType"`
	ThirdCode                  string                  `protobuf:"bytes,9,opt,name=thirdCode,proto3" json:"thirdCode"`
	ContractAmount             int64                   `protobuf:"varint,10,opt,name=contractAmount,proto3" json:"contractAmount"`
	StartAt                    *timestamppb.Timestamp  `protobuf:"bytes,11,opt,name=startAt,proto3" json:"startAt"`
	EndAt                      *timestamppb.Timestamp  `protobuf:"bytes,12,opt,name=endAt,proto3" json:"endAt"`
	Memo                       string                  `protobuf:"bytes,13,opt,name=memo,proto3" json:"memo"`
	ActiveStatus               string                  `protobuf:"bytes,14,opt,name=activeStatus,proto3" json:"activeStatus"`
	UpdatedBy                  int64                   `protobuf:"varint,15,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt                  *timestamppb.Timestamp  `protobuf:"bytes,16,opt,name=updatedAt,proto3" json:"updatedAt"`
	ManagerId                  int64                   `protobuf:"varint,17,opt,name=managerId,proto3" json:"managerId"`
	UploadDocumentInfoContract []*DocumentInfoContract `protobuf:"bytes,18,rep,name=uploadDocumentInfoContract,proto3" json:"uploadDocumentInfoContract"`
}

func (x *UpdateOneContractReq) Reset() {
	*x = UpdateOneContractReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[495]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOneContractReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOneContractReq) ProtoMessage() {}

func (x *UpdateOneContractReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[495]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOneContractReq.ProtoReflect.Descriptor instead.
func (*UpdateOneContractReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{495}
}

func (x *UpdateOneContractReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateOneContractReq) GetContractCode() string {
	if x != nil {
		return x.ContractCode
	}
	return ""
}

func (x *UpdateOneContractReq) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *UpdateOneContractReq) GetContractType() string {
	if x != nil {
		return x.ContractType
	}
	return ""
}

func (x *UpdateOneContractReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateOneContractReq) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *UpdateOneContractReq) GetToOrganizationId() int64 {
	if x != nil {
		return x.ToOrganizationId
	}
	return 0
}

func (x *UpdateOneContractReq) GetToPlatFormType() string {
	if x != nil {
		return x.ToPlatFormType
	}
	return ""
}

func (x *UpdateOneContractReq) GetThirdCode() string {
	if x != nil {
		return x.ThirdCode
	}
	return ""
}

func (x *UpdateOneContractReq) GetContractAmount() int64 {
	if x != nil {
		return x.ContractAmount
	}
	return 0
}

func (x *UpdateOneContractReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *UpdateOneContractReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *UpdateOneContractReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UpdateOneContractReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *UpdateOneContractReq) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *UpdateOneContractReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UpdateOneContractReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *UpdateOneContractReq) GetUploadDocumentInfoContract() []*DocumentInfoContract {
	if x != nil {
		return x.UploadDocumentInfoContract
	}
	return nil
}

type UpdateOneContractResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateOneContractResp) Reset() {
	*x = UpdateOneContractResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[496]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOneContractResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOneContractResp) ProtoMessage() {}

func (x *UpdateOneContractResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[496]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOneContractResp.ProtoReflect.Descriptor instead.
func (*UpdateOneContractResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{496}
}

func (x *UpdateOneContractResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type CreateContractHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         int64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ContractCode               string                  `protobuf:"bytes,2,opt,name=contractCode,proto3" json:"contractCode"`
	ContractName               string                  `protobuf:"bytes,3,opt,name=contractName,proto3" json:"contractName"`
	ContractType               string                  `protobuf:"bytes,4,opt,name=contractType,proto3" json:"contractType"`
	ProjectId                  int64                   `protobuf:"varint,5,opt,name=projectId,proto3" json:"projectId"`
	ConstructionId             int64                   `protobuf:"varint,6,opt,name=constructionId,proto3" json:"constructionId"`
	ToOrganizationId           int64                   `protobuf:"varint,7,opt,name=toOrganizationId,proto3" json:"toOrganizationId"`
	ToPlatFormType             string                  `protobuf:"bytes,8,opt,name=toPlatFormType,proto3" json:"toPlatFormType"`
	ThirdCode                  string                  `protobuf:"bytes,9,opt,name=thirdCode,proto3" json:"thirdCode"`
	ContractAmount             int64                   `protobuf:"varint,10,opt,name=contractAmount,proto3" json:"contractAmount"`
	StartAt                    *timestamppb.Timestamp  `protobuf:"bytes,11,opt,name=startAt,proto3" json:"startAt"`
	EndAt                      *timestamppb.Timestamp  `protobuf:"bytes,12,opt,name=endAt,proto3" json:"endAt"`
	Memo                       string                  `protobuf:"bytes,13,opt,name=memo,proto3" json:"memo"`
	ActiveStatus               string                  `protobuf:"bytes,14,opt,name=activeStatus,proto3" json:"activeStatus"`
	CreatedBy                  int64                   `protobuf:"varint,15,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt                  *timestamppb.Timestamp  `protobuf:"bytes,16,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy                  int64                   `protobuf:"varint,17,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt                  *timestamppb.Timestamp  `protobuf:"bytes,18,opt,name=updatedAt,proto3" json:"updatedAt"`
	ManagerId                  int64                   `protobuf:"varint,19,opt,name=managerId,proto3" json:"managerId"`
	UploadDocumentInfoContract []*DocumentInfoContract `protobuf:"bytes,20,rep,name=uploadDocumentInfoContract,proto3" json:"uploadDocumentInfoContract"`
	InfoHash                   string                  `protobuf:"bytes,21,opt,name=infoHash,proto3" json:"infoHash"`
}

func (x *CreateContractHashReq) Reset() {
	*x = CreateContractHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[497]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateContractHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContractHashReq) ProtoMessage() {}

func (x *CreateContractHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[497]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContractHashReq.ProtoReflect.Descriptor instead.
func (*CreateContractHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{497}
}

func (x *CreateContractHashReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateContractHashReq) GetContractCode() string {
	if x != nil {
		return x.ContractCode
	}
	return ""
}

func (x *CreateContractHashReq) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *CreateContractHashReq) GetContractType() string {
	if x != nil {
		return x.ContractType
	}
	return ""
}

func (x *CreateContractHashReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CreateContractHashReq) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *CreateContractHashReq) GetToOrganizationId() int64 {
	if x != nil {
		return x.ToOrganizationId
	}
	return 0
}

func (x *CreateContractHashReq) GetToPlatFormType() string {
	if x != nil {
		return x.ToPlatFormType
	}
	return ""
}

func (x *CreateContractHashReq) GetThirdCode() string {
	if x != nil {
		return x.ThirdCode
	}
	return ""
}

func (x *CreateContractHashReq) GetContractAmount() int64 {
	if x != nil {
		return x.ContractAmount
	}
	return 0
}

func (x *CreateContractHashReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *CreateContractHashReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *CreateContractHashReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CreateContractHashReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *CreateContractHashReq) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *CreateContractHashReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreateContractHashReq) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *CreateContractHashReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CreateContractHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CreateContractHashReq) GetUploadDocumentInfoContract() []*DocumentInfoContract {
	if x != nil {
		return x.UploadDocumentInfoContract
	}
	return nil
}

func (x *CreateContractHashReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

type CreateContractHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateContractHashResp) Reset() {
	*x = CreateContractHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[498]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateContractHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContractHashResp) ProtoMessage() {}

func (x *CreateContractHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[498]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContractHashResp.ProtoReflect.Descriptor instead.
func (*CreateContractHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{498}
}

func (x *CreateContractHashResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type UpdateContractHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         int64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ContractCode               string                  `protobuf:"bytes,2,opt,name=contractCode,proto3" json:"contractCode"`
	ContractName               string                  `protobuf:"bytes,3,opt,name=contractName,proto3" json:"contractName"`
	ContractType               string                  `protobuf:"bytes,4,opt,name=contractType,proto3" json:"contractType"`
	ProjectId                  int64                   `protobuf:"varint,5,opt,name=projectId,proto3" json:"projectId"`
	ConstructionId             int64                   `protobuf:"varint,6,opt,name=constructionId,proto3" json:"constructionId"`
	ToOrganizationId           int64                   `protobuf:"varint,7,opt,name=toOrganizationId,proto3" json:"toOrganizationId"`
	ToPlatFormType             string                  `protobuf:"bytes,8,opt,name=toPlatFormType,proto3" json:"toPlatFormType"`
	ThirdCode                  string                  `protobuf:"bytes,9,opt,name=thirdCode,proto3" json:"thirdCode"`
	ContractAmount             int64                   `protobuf:"varint,10,opt,name=contractAmount,proto3" json:"contractAmount"`
	StartAt                    *timestamppb.Timestamp  `protobuf:"bytes,11,opt,name=startAt,proto3" json:"startAt"`
	EndAt                      *timestamppb.Timestamp  `protobuf:"bytes,12,opt,name=endAt,proto3" json:"endAt"`
	Memo                       string                  `protobuf:"bytes,13,opt,name=memo,proto3" json:"memo"`
	ActiveStatus               string                  `protobuf:"bytes,14,opt,name=activeStatus,proto3" json:"activeStatus"`
	UpdatedBy                  int64                   `protobuf:"varint,15,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt                  *timestamppb.Timestamp  `protobuf:"bytes,16,opt,name=updatedAt,proto3" json:"updatedAt"`
	ManagerId                  int64                   `protobuf:"varint,17,opt,name=managerId,proto3" json:"managerId"`
	UploadDocumentInfoContract []*DocumentInfoContract `protobuf:"bytes,18,rep,name=uploadDocumentInfoContract,proto3" json:"uploadDocumentInfoContract"`
	InfoHash                   string                  `protobuf:"bytes,19,opt,name=infoHash,proto3" json:"infoHash"`
}

func (x *UpdateContractHashReq) Reset() {
	*x = UpdateContractHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[499]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContractHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContractHashReq) ProtoMessage() {}

func (x *UpdateContractHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[499]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContractHashReq.ProtoReflect.Descriptor instead.
func (*UpdateContractHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{499}
}

func (x *UpdateContractHashReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateContractHashReq) GetContractCode() string {
	if x != nil {
		return x.ContractCode
	}
	return ""
}

func (x *UpdateContractHashReq) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *UpdateContractHashReq) GetContractType() string {
	if x != nil {
		return x.ContractType
	}
	return ""
}

func (x *UpdateContractHashReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateContractHashReq) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *UpdateContractHashReq) GetToOrganizationId() int64 {
	if x != nil {
		return x.ToOrganizationId
	}
	return 0
}

func (x *UpdateContractHashReq) GetToPlatFormType() string {
	if x != nil {
		return x.ToPlatFormType
	}
	return ""
}

func (x *UpdateContractHashReq) GetThirdCode() string {
	if x != nil {
		return x.ThirdCode
	}
	return ""
}

func (x *UpdateContractHashReq) GetContractAmount() int64 {
	if x != nil {
		return x.ContractAmount
	}
	return 0
}

func (x *UpdateContractHashReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *UpdateContractHashReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *UpdateContractHashReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UpdateContractHashReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *UpdateContractHashReq) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *UpdateContractHashReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UpdateContractHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *UpdateContractHashReq) GetUploadDocumentInfoContract() []*DocumentInfoContract {
	if x != nil {
		return x.UploadDocumentInfoContract
	}
	return nil
}

func (x *UpdateContractHashReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

type UpdateContractHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateContractHashResp) Reset() {
	*x = UpdateContractHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[500]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContractHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContractHashResp) ProtoMessage() {}

func (x *UpdateContractHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[500]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContractHashResp.ProtoReflect.Descriptor instead.
func (*UpdateContractHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{500}
}

func (x *UpdateContractHashResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type DeleteOneContractReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId int64 `protobuf:"varint,1,opt,name=contractId,proto3" json:"contractId"`
	ManagerId  int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *DeleteOneContractReq) Reset() {
	*x = DeleteOneContractReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[501]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOneContractReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOneContractReq) ProtoMessage() {}

func (x *DeleteOneContractReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[501]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOneContractReq.ProtoReflect.Descriptor instead.
func (*DeleteOneContractReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{501}
}

func (x *DeleteOneContractReq) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *DeleteOneContractReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type DeleteOneContractResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteOneContractResp) Reset() {
	*x = DeleteOneContractResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[502]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOneContractResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOneContractResp) ProtoMessage() {}

func (x *DeleteOneContractResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[502]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOneContractResp.ProtoReflect.Descriptor instead.
func (*DeleteOneContractResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{502}
}

type ListContractHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId   int64   `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ContractIds []int64 `protobuf:"varint,2,rep,packed,name=contractIds,proto3" json:"contractIds"`
}

func (x *ListContractHashReq) Reset() {
	*x = ListContractHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[503]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContractHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContractHashReq) ProtoMessage() {}

func (x *ListContractHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[503]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContractHashReq.ProtoReflect.Descriptor instead.
func (*ListContractHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{503}
}

func (x *ListContractHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListContractHashReq) GetContractIds() []int64 {
	if x != nil {
		return x.ContractIds
	}
	return nil
}

type ListContractHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ListContractHashVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                 `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                 `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListContractHashResp) Reset() {
	*x = ListContractHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[504]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContractHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContractHashResp) ProtoMessage() {}

func (x *ListContractHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[504]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContractHashResp.ProtoReflect.Descriptor instead.
func (*ListContractHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{504}
}

func (x *ListContractHashResp) GetList() []*ListContractHashVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListContractHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListContractHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListContractHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ListContractHashVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId   int64                  `protobuf:"varint,1,opt,name=contractId,proto3" json:"contractId"`
	ContractCode string                 `protobuf:"bytes,2,opt,name=contractCode,proto3" json:"contractCode"`
	InfoHash     string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
}

func (x *ListContractHashVo) Reset() {
	*x = ListContractHashVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[505]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContractHashVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContractHashVo) ProtoMessage() {}

func (x *ListContractHashVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[505]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContractHashVo.ProtoReflect.Descriptor instead.
func (*ListContractHashVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{505}
}

func (x *ListContractHashVo) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *ListContractHashVo) GetContractCode() string {
	if x != nil {
		return x.ContractCode
	}
	return ""
}

func (x *ListContractHashVo) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *ListContractHashVo) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

type DocumentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessType string `protobuf:"bytes,1,opt,name=businessType,proto3" json:"businessType"`
	FileName     string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName"`
	UploadUrl    string `protobuf:"bytes,3,opt,name=uploadUrl,proto3" json:"uploadUrl"`
	BusinessId   int64  `protobuf:"varint,4,opt,name=businessId,proto3" json:"businessId"`
}

func (x *DocumentInfo) Reset() {
	*x = DocumentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[506]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentInfo) ProtoMessage() {}

func (x *DocumentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[506]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentInfo.ProtoReflect.Descriptor instead.
func (*DocumentInfo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{506}
}

func (x *DocumentInfo) GetBusinessType() string {
	if x != nil {
		return x.BusinessType
	}
	return ""
}

func (x *DocumentInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *DocumentInfo) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

func (x *DocumentInfo) GetBusinessId() int64 {
	if x != nil {
		return x.BusinessId
	}
	return 0
}

//查询项目信息(通用接口)
type CommonProjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName  string  `protobuf:"bytes,1,opt,name=projectName,proto3" json:"projectName"`
	ProjectCode  string  `protobuf:"bytes,2,opt,name=projectCode,proto3" json:"projectCode"`
	ActiveStatus string  `protobuf:"bytes,3,opt,name=activeStatus,proto3" json:"activeStatus"`
	ManagerId    int64   `protobuf:"varint,4,opt,name=managerId,proto3" json:"managerId"`
	Page         *Page   `protobuf:"bytes,5,opt,name=page,proto3" json:"page"`
	ProjectIds   []int64 `protobuf:"varint,6,rep,packed,name=projectIds,proto3" json:"projectIds"`
}

func (x *CommonProjectReq) Reset() {
	*x = CommonProjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[507]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonProjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonProjectReq) ProtoMessage() {}

func (x *CommonProjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[507]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonProjectReq.ProtoReflect.Descriptor instead.
func (*CommonProjectReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{507}
}

func (x *CommonProjectReq) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *CommonProjectReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *CommonProjectReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *CommonProjectReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CommonProjectReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *CommonProjectReq) GetProjectIds() []int64 {
	if x != nil {
		return x.ProjectIds
	}
	return nil
}

type CommonProjectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*CommonProjectVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64              `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64              `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64              `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *CommonProjectResp) Reset() {
	*x = CommonProjectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[508]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonProjectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonProjectResp) ProtoMessage() {}

func (x *CommonProjectResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[508]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonProjectResp.ProtoReflect.Descriptor instead.
func (*CommonProjectResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{508}
}

func (x *CommonProjectResp) GetList() []*CommonProjectVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CommonProjectResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CommonProjectResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CommonProjectResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type CommonProjectVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId   int64  `protobuf:"varint,1,opt,name=projectId,proto3" json:"projectId"`
	ProjectName string `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName"`
	ProjectCode string `protobuf:"bytes,3,opt,name=projectCode,proto3" json:"projectCode"`
}

func (x *CommonProjectVo) Reset() {
	*x = CommonProjectVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[509]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonProjectVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonProjectVo) ProtoMessage() {}

func (x *CommonProjectVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[509]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonProjectVo.ProtoReflect.Descriptor instead.
func (*CommonProjectVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{509}
}

func (x *CommonProjectVo) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CommonProjectVo) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *CommonProjectVo) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

//查询项目阶段信息(通用接口)
type CommonProjectPhaseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhaseName string `protobuf:"bytes,1,opt,name=phaseName,proto3" json:"phaseName"`
	ManagerId int64  `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
	Page      *Page  `protobuf:"bytes,3,opt,name=page,proto3" json:"page"`
}

func (x *CommonProjectPhaseReq) Reset() {
	*x = CommonProjectPhaseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[510]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonProjectPhaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonProjectPhaseReq) ProtoMessage() {}

func (x *CommonProjectPhaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[510]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonProjectPhaseReq.ProtoReflect.Descriptor instead.
func (*CommonProjectPhaseReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{510}
}

func (x *CommonProjectPhaseReq) GetPhaseName() string {
	if x != nil {
		return x.PhaseName
	}
	return ""
}

func (x *CommonProjectPhaseReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CommonProjectPhaseReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type CommonProjectPhaseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*CommonProjectPhaseVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                   `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                   `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                   `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *CommonProjectPhaseResp) Reset() {
	*x = CommonProjectPhaseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[511]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonProjectPhaseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonProjectPhaseResp) ProtoMessage() {}

func (x *CommonProjectPhaseResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[511]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonProjectPhaseResp.ProtoReflect.Descriptor instead.
func (*CommonProjectPhaseResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{511}
}

func (x *CommonProjectPhaseResp) GetList() []*CommonProjectPhaseVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CommonProjectPhaseResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CommonProjectPhaseResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CommonProjectPhaseResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type CommonProjectPhaseVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectPhaseId int64  `protobuf:"varint,1,opt,name=projectPhaseId,proto3" json:"projectPhaseId"`
	PhaseName      string `protobuf:"bytes,2,opt,name=phaseName,proto3" json:"phaseName"`
	PhaseDesc      string `protobuf:"bytes,3,opt,name=phaseDesc,proto3" json:"phaseDesc"`
	ApprovalDays   int64  `protobuf:"varint,4,opt,name=approvalDays,proto3" json:"approvalDays"`
}

func (x *CommonProjectPhaseVo) Reset() {
	*x = CommonProjectPhaseVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[512]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonProjectPhaseVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonProjectPhaseVo) ProtoMessage() {}

func (x *CommonProjectPhaseVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[512]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonProjectPhaseVo.ProtoReflect.Descriptor instead.
func (*CommonProjectPhaseVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{512}
}

func (x *CommonProjectPhaseVo) GetProjectPhaseId() int64 {
	if x != nil {
		return x.ProjectPhaseId
	}
	return 0
}

func (x *CommonProjectPhaseVo) GetPhaseName() string {
	if x != nil {
		return x.PhaseName
	}
	return ""
}

func (x *CommonProjectPhaseVo) GetPhaseDesc() string {
	if x != nil {
		return x.PhaseDesc
	}
	return ""
}

func (x *CommonProjectPhaseVo) GetApprovalDays() int64 {
	if x != nil {
		return x.ApprovalDays
	}
	return 0
}

//三端产code
type GetBuildInfoCodeByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildId   int64 `protobuf:"varint,1,opt,name=buildId,proto3" json:"buildId"`
	ManagerId int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *GetBuildInfoCodeByIdReq) Reset() {
	*x = GetBuildInfoCodeByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[513]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuildInfoCodeByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuildInfoCodeByIdReq) ProtoMessage() {}

func (x *GetBuildInfoCodeByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[513]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuildInfoCodeByIdReq.ProtoReflect.Descriptor instead.
func (*GetBuildInfoCodeByIdReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{513}
}

func (x *GetBuildInfoCodeByIdReq) GetBuildId() int64 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

func (x *GetBuildInfoCodeByIdReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type GetBuildInfoCodeByIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildName string `protobuf:"bytes,1,opt,name=buildName,proto3" json:"buildName"`
	BuildCode string `protobuf:"bytes,2,opt,name=buildCode,proto3" json:"buildCode"`
	BuildType string `protobuf:"bytes,3,opt,name=buildType,proto3" json:"buildType"`
}

func (x *GetBuildInfoCodeByIdResp) Reset() {
	*x = GetBuildInfoCodeByIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[514]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuildInfoCodeByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuildInfoCodeByIdResp) ProtoMessage() {}

func (x *GetBuildInfoCodeByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[514]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuildInfoCodeByIdResp.ProtoReflect.Descriptor instead.
func (*GetBuildInfoCodeByIdResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{514}
}

func (x *GetBuildInfoCodeByIdResp) GetBuildName() string {
	if x != nil {
		return x.BuildName
	}
	return ""
}

func (x *GetBuildInfoCodeByIdResp) GetBuildCode() string {
	if x != nil {
		return x.BuildCode
	}
	return ""
}

func (x *GetBuildInfoCodeByIdResp) GetBuildType() string {
	if x != nil {
		return x.BuildType
	}
	return ""
}

type GetGovermentCodeByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GovermentId int64 `protobuf:"varint,1,opt,name=govermentId,proto3" json:"govermentId"`
	ManagerId   int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *GetGovermentCodeByIdReq) Reset() {
	*x = GetGovermentCodeByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[515]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGovermentCodeByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGovermentCodeByIdReq) ProtoMessage() {}

func (x *GetGovermentCodeByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[515]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGovermentCodeByIdReq.ProtoReflect.Descriptor instead.
func (*GetGovermentCodeByIdReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{515}
}

func (x *GetGovermentCodeByIdReq) GetGovermentId() int64 {
	if x != nil {
		return x.GovermentId
	}
	return 0
}

func (x *GetGovermentCodeByIdReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type GetGovermentCodeByIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GovermentCode string `protobuf:"bytes,1,opt,name=govermentCode,proto3" json:"govermentCode"`
	GovermentName string `protobuf:"bytes,2,opt,name=govermentName,proto3" json:"govermentName"`
	GovermentType string `protobuf:"bytes,3,opt,name=govermentType,proto3" json:"govermentType"`
}

func (x *GetGovermentCodeByIdResp) Reset() {
	*x = GetGovermentCodeByIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[516]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGovermentCodeByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGovermentCodeByIdResp) ProtoMessage() {}

func (x *GetGovermentCodeByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[516]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGovermentCodeByIdResp.ProtoReflect.Descriptor instead.
func (*GetGovermentCodeByIdResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{516}
}

func (x *GetGovermentCodeByIdResp) GetGovermentCode() string {
	if x != nil {
		return x.GovermentCode
	}
	return ""
}

func (x *GetGovermentCodeByIdResp) GetGovermentName() string {
	if x != nil {
		return x.GovermentName
	}
	return ""
}

func (x *GetGovermentCodeByIdResp) GetGovermentType() string {
	if x != nil {
		return x.GovermentType
	}
	return ""
}

type GetSupervisorCodeByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupervisorId int64 `protobuf:"varint,1,opt,name=supervisorId,proto3" json:"supervisorId"`
	ManagerId    int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *GetSupervisorCodeByIdReq) Reset() {
	*x = GetSupervisorCodeByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[517]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSupervisorCodeByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSupervisorCodeByIdReq) ProtoMessage() {}

func (x *GetSupervisorCodeByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[517]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSupervisorCodeByIdReq.ProtoReflect.Descriptor instead.
func (*GetSupervisorCodeByIdReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{517}
}

func (x *GetSupervisorCodeByIdReq) GetSupervisorId() int64 {
	if x != nil {
		return x.SupervisorId
	}
	return 0
}

func (x *GetSupervisorCodeByIdReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type GetSupervisorCodeByIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupervisorCode string `protobuf:"bytes,1,opt,name=supervisorCode,proto3" json:"supervisorCode"`
	SupervisorName string `protobuf:"bytes,2,opt,name=supervisorName,proto3" json:"supervisorName"`
	SupervisorType string `protobuf:"bytes,3,opt,name=supervisorType,proto3" json:"supervisorType"`
}

func (x *GetSupervisorCodeByIdResp) Reset() {
	*x = GetSupervisorCodeByIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[518]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSupervisorCodeByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSupervisorCodeByIdResp) ProtoMessage() {}

func (x *GetSupervisorCodeByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[518]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSupervisorCodeByIdResp.ProtoReflect.Descriptor instead.
func (*GetSupervisorCodeByIdResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{518}
}

func (x *GetSupervisorCodeByIdResp) GetSupervisorCode() string {
	if x != nil {
		return x.SupervisorCode
	}
	return ""
}

func (x *GetSupervisorCodeByIdResp) GetSupervisorName() string {
	if x != nil {
		return x.SupervisorName
	}
	return ""
}

func (x *GetSupervisorCodeByIdResp) GetSupervisorType() string {
	if x != nil {
		return x.SupervisorType
	}
	return ""
}

//发票信息
type CreateInvoiceHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ProjectId              int64                  `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId"`
	ContractId             int64                  `protobuf:"varint,3,opt,name=contractId,proto3" json:"contractId"`
	FromOrganizationId     int64                  `protobuf:"varint,4,opt,name=fromOrganizationId,proto3" json:"fromOrganizationId"`
	FromPlatFormType       string                 `protobuf:"bytes,5,opt,name=fromPlatFormType,proto3" json:"fromPlatFormType"`
	ConstructionId         int64                  `protobuf:"varint,6,opt,name=constructionId,proto3" json:"constructionId"`
	InvoiceType            string                 `protobuf:"bytes,7,opt,name=invoiceType,proto3" json:"invoiceType"`
	InvoiceNo              string                 `protobuf:"bytes,8,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode            string                 `protobuf:"bytes,9,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	InvoiceMd5             string                 `protobuf:"bytes,10,opt,name=invoiceMd5,proto3" json:"invoiceMd5"`
	InvoiceFilename        string                 `protobuf:"bytes,11,opt,name=invoiceFilename,proto3" json:"invoiceFilename"`
	InvoiceUrl             string                 `protobuf:"bytes,12,opt,name=invoiceUrl,proto3" json:"invoiceUrl"`
	InvoiceAmoumt          int64                  `protobuf:"varint,13,opt,name=invoiceAmoumt,proto3" json:"invoiceAmoumt"`
	InvoiceTax             int64                  `protobuf:"varint,14,opt,name=invoiceTax,proto3" json:"invoiceTax"`
	InvoiceCheckCode       string                 `protobuf:"bytes,15,opt,name=invoiceCheckCode,proto3" json:"invoiceCheckCode"`
	InvoicedDate           *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=invoicedDate,proto3" json:"invoicedDate"`
	InvoiceStatus          string                 `protobuf:"bytes,17,opt,name=invoiceStatus,proto3" json:"invoiceStatus"`
	InvoiceDesc            string                 `protobuf:"bytes,18,opt,name=invoiceDesc,proto3" json:"invoiceDesc"`
	InvoiceBy              int64                  `protobuf:"varint,19,opt,name=invoiceBy,proto3" json:"invoiceBy"`
	InvoiceAt              *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=invoiceAt,proto3" json:"invoiceAt"`
	ReceiveDesc            string                 `protobuf:"bytes,21,opt,name=receiveDesc,proto3" json:"receiveDesc"`
	ReceiveBy              int64                  `protobuf:"varint,22,opt,name=receiveBy,proto3" json:"receiveBy"`
	ReceiveAt              *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=receiveAt,proto3" json:"receiveAt"`
	PayDesc                string                 `protobuf:"bytes,24,opt,name=payDesc,proto3" json:"payDesc"`
	PayBy                  int64                  `protobuf:"varint,25,opt,name=payBy,proto3" json:"payBy"`
	PayAt                  *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=payAt,proto3" json:"payAt"`
	PaymentVoucherFilename string                 `protobuf:"bytes,27,opt,name=paymentVoucherFilename,proto3" json:"paymentVoucherFilename"`
	PaymentVoucherUrl      string                 `protobuf:"bytes,28,opt,name=paymentVoucherUrl,proto3" json:"paymentVoucherUrl"`
	Memo                   string                 `protobuf:"bytes,29,opt,name=memo,proto3" json:"memo"`
	CreatedBy              int64                  `protobuf:"varint,30,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt              *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=createdAt,proto3" json:"createdAt"`
	ManagerId              int64                  `protobuf:"varint,32,opt,name=managerId,proto3" json:"managerId"`
	InfoHash               string                 `protobuf:"bytes,33,opt,name=infoHash,proto3" json:"infoHash"`
	ActiveStatus           string                 `protobuf:"bytes,34,opt,name=activeStatus,proto3" json:"activeStatus"`
}

func (x *CreateInvoiceHashReq) Reset() {
	*x = CreateInvoiceHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[519]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInvoiceHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInvoiceHashReq) ProtoMessage() {}

func (x *CreateInvoiceHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[519]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInvoiceHashReq.ProtoReflect.Descriptor instead.
func (*CreateInvoiceHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{519}
}

func (x *CreateInvoiceHashReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateInvoiceHashReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CreateInvoiceHashReq) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *CreateInvoiceHashReq) GetFromOrganizationId() int64 {
	if x != nil {
		return x.FromOrganizationId
	}
	return 0
}

func (x *CreateInvoiceHashReq) GetFromPlatFormType() string {
	if x != nil {
		return x.FromPlatFormType
	}
	return ""
}

func (x *CreateInvoiceHashReq) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *CreateInvoiceHashReq) GetInvoiceType() string {
	if x != nil {
		return x.InvoiceType
	}
	return ""
}

func (x *CreateInvoiceHashReq) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *CreateInvoiceHashReq) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *CreateInvoiceHashReq) GetInvoiceMd5() string {
	if x != nil {
		return x.InvoiceMd5
	}
	return ""
}

func (x *CreateInvoiceHashReq) GetInvoiceFilename() string {
	if x != nil {
		return x.InvoiceFilename
	}
	return ""
}

func (x *CreateInvoiceHashReq) GetInvoiceUrl() string {
	if x != nil {
		return x.InvoiceUrl
	}
	return ""
}

func (x *CreateInvoiceHashReq) GetInvoiceAmoumt() int64 {
	if x != nil {
		return x.InvoiceAmoumt
	}
	return 0
}

func (x *CreateInvoiceHashReq) GetInvoiceTax() int64 {
	if x != nil {
		return x.InvoiceTax
	}
	return 0
}

func (x *CreateInvoiceHashReq) GetInvoiceCheckCode() string {
	if x != nil {
		return x.InvoiceCheckCode
	}
	return ""
}

func (x *CreateInvoiceHashReq) GetInvoicedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoicedDate
	}
	return nil
}

func (x *CreateInvoiceHashReq) GetInvoiceStatus() string {
	if x != nil {
		return x.InvoiceStatus
	}
	return ""
}

func (x *CreateInvoiceHashReq) GetInvoiceDesc() string {
	if x != nil {
		return x.InvoiceDesc
	}
	return ""
}

func (x *CreateInvoiceHashReq) GetInvoiceBy() int64 {
	if x != nil {
		return x.InvoiceBy
	}
	return 0
}

func (x *CreateInvoiceHashReq) GetInvoiceAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoiceAt
	}
	return nil
}

func (x *CreateInvoiceHashReq) GetReceiveDesc() string {
	if x != nil {
		return x.ReceiveDesc
	}
	return ""
}

func (x *CreateInvoiceHashReq) GetReceiveBy() int64 {
	if x != nil {
		return x.ReceiveBy
	}
	return 0
}

func (x *CreateInvoiceHashReq) GetReceiveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveAt
	}
	return nil
}

func (x *CreateInvoiceHashReq) GetPayDesc() string {
	if x != nil {
		return x.PayDesc
	}
	return ""
}

func (x *CreateInvoiceHashReq) GetPayBy() int64 {
	if x != nil {
		return x.PayBy
	}
	return 0
}

func (x *CreateInvoiceHashReq) GetPayAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PayAt
	}
	return nil
}

func (x *CreateInvoiceHashReq) GetPaymentVoucherFilename() string {
	if x != nil {
		return x.PaymentVoucherFilename
	}
	return ""
}

func (x *CreateInvoiceHashReq) GetPaymentVoucherUrl() string {
	if x != nil {
		return x.PaymentVoucherUrl
	}
	return ""
}

func (x *CreateInvoiceHashReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CreateInvoiceHashReq) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *CreateInvoiceHashReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreateInvoiceHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CreateInvoiceHashReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *CreateInvoiceHashReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

type CreateInvoiceHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateInvoiceHashResp) Reset() {
	*x = CreateInvoiceHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[520]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInvoiceHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInvoiceHashResp) ProtoMessage() {}

func (x *CreateInvoiceHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[520]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInvoiceHashResp.ProtoReflect.Descriptor instead.
func (*CreateInvoiceHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{520}
}

func (x *CreateInvoiceHashResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type CreateOneInvoiceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ProjectId              int64                  `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId"`
	ContractId             int64                  `protobuf:"varint,3,opt,name=contractId,proto3" json:"contractId"`
	FromOrganizationId     int64                  `protobuf:"varint,4,opt,name=fromOrganizationId,proto3" json:"fromOrganizationId"`
	FromPlatFormType       string                 `protobuf:"bytes,5,opt,name=fromPlatFormType,proto3" json:"fromPlatFormType"`
	ConstructionId         int64                  `protobuf:"varint,6,opt,name=constructionId,proto3" json:"constructionId"`
	InvoiceType            string                 `protobuf:"bytes,7,opt,name=invoiceType,proto3" json:"invoiceType"`
	InvoiceNo              string                 `protobuf:"bytes,8,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode            string                 `protobuf:"bytes,9,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	InvoiceMd5             string                 `protobuf:"bytes,10,opt,name=invoiceMd5,proto3" json:"invoiceMd5"`
	InvoiceFilename        string                 `protobuf:"bytes,11,opt,name=invoiceFilename,proto3" json:"invoiceFilename"`
	InvoiceUrl             string                 `protobuf:"bytes,12,opt,name=invoiceUrl,proto3" json:"invoiceUrl"`
	InvoiceAmoumt          int64                  `protobuf:"varint,13,opt,name=invoiceAmoumt,proto3" json:"invoiceAmoumt"`
	InvoiceTax             int64                  `protobuf:"varint,14,opt,name=invoiceTax,proto3" json:"invoiceTax"`
	InvoiceCheckCode       string                 `protobuf:"bytes,15,opt,name=invoiceCheckCode,proto3" json:"invoiceCheckCode"`
	InvoicedDate           *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=invoicedDate,proto3" json:"invoicedDate"`
	InvoiceStatus          string                 `protobuf:"bytes,17,opt,name=invoiceStatus,proto3" json:"invoiceStatus"`
	InvoiceDesc            string                 `protobuf:"bytes,18,opt,name=invoiceDesc,proto3" json:"invoiceDesc"`
	InvoiceBy              int64                  `protobuf:"varint,19,opt,name=invoiceBy,proto3" json:"invoiceBy"`
	InvoiceAt              *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=invoiceAt,proto3" json:"invoiceAt"`
	ReceiveDesc            string                 `protobuf:"bytes,21,opt,name=receiveDesc,proto3" json:"receiveDesc"`
	ReceiveBy              int64                  `protobuf:"varint,22,opt,name=receiveBy,proto3" json:"receiveBy"`
	ReceiveAt              *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=receiveAt,proto3" json:"receiveAt"`
	PayDesc                string                 `protobuf:"bytes,24,opt,name=payDesc,proto3" json:"payDesc"`
	PayBy                  int64                  `protobuf:"varint,25,opt,name=payBy,proto3" json:"payBy"`
	PayAt                  *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=payAt,proto3" json:"payAt"`
	PaymentVoucherFilename string                 `protobuf:"bytes,27,opt,name=paymentVoucherFilename,proto3" json:"paymentVoucherFilename"`
	PaymentVoucherUrl      string                 `protobuf:"bytes,28,opt,name=paymentVoucherUrl,proto3" json:"paymentVoucherUrl"`
	Memo                   string                 `protobuf:"bytes,29,opt,name=memo,proto3" json:"memo"`
	CreatedBy              int64                  `protobuf:"varint,30,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt              *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=createdAt,proto3" json:"createdAt"`
	ManagerId              int64                  `protobuf:"varint,32,opt,name=managerId,proto3" json:"managerId"`
	ActiveStatus           string                 `protobuf:"bytes,33,opt,name=activeStatus,proto3" json:"activeStatus"`
}

func (x *CreateOneInvoiceReq) Reset() {
	*x = CreateOneInvoiceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[521]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneInvoiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneInvoiceReq) ProtoMessage() {}

func (x *CreateOneInvoiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[521]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneInvoiceReq.ProtoReflect.Descriptor instead.
func (*CreateOneInvoiceReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{521}
}

func (x *CreateOneInvoiceReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateOneInvoiceReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CreateOneInvoiceReq) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *CreateOneInvoiceReq) GetFromOrganizationId() int64 {
	if x != nil {
		return x.FromOrganizationId
	}
	return 0
}

func (x *CreateOneInvoiceReq) GetFromPlatFormType() string {
	if x != nil {
		return x.FromPlatFormType
	}
	return ""
}

func (x *CreateOneInvoiceReq) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *CreateOneInvoiceReq) GetInvoiceType() string {
	if x != nil {
		return x.InvoiceType
	}
	return ""
}

func (x *CreateOneInvoiceReq) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *CreateOneInvoiceReq) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *CreateOneInvoiceReq) GetInvoiceMd5() string {
	if x != nil {
		return x.InvoiceMd5
	}
	return ""
}

func (x *CreateOneInvoiceReq) GetInvoiceFilename() string {
	if x != nil {
		return x.InvoiceFilename
	}
	return ""
}

func (x *CreateOneInvoiceReq) GetInvoiceUrl() string {
	if x != nil {
		return x.InvoiceUrl
	}
	return ""
}

func (x *CreateOneInvoiceReq) GetInvoiceAmoumt() int64 {
	if x != nil {
		return x.InvoiceAmoumt
	}
	return 0
}

func (x *CreateOneInvoiceReq) GetInvoiceTax() int64 {
	if x != nil {
		return x.InvoiceTax
	}
	return 0
}

func (x *CreateOneInvoiceReq) GetInvoiceCheckCode() string {
	if x != nil {
		return x.InvoiceCheckCode
	}
	return ""
}

func (x *CreateOneInvoiceReq) GetInvoicedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoicedDate
	}
	return nil
}

func (x *CreateOneInvoiceReq) GetInvoiceStatus() string {
	if x != nil {
		return x.InvoiceStatus
	}
	return ""
}

func (x *CreateOneInvoiceReq) GetInvoiceDesc() string {
	if x != nil {
		return x.InvoiceDesc
	}
	return ""
}

func (x *CreateOneInvoiceReq) GetInvoiceBy() int64 {
	if x != nil {
		return x.InvoiceBy
	}
	return 0
}

func (x *CreateOneInvoiceReq) GetInvoiceAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoiceAt
	}
	return nil
}

func (x *CreateOneInvoiceReq) GetReceiveDesc() string {
	if x != nil {
		return x.ReceiveDesc
	}
	return ""
}

func (x *CreateOneInvoiceReq) GetReceiveBy() int64 {
	if x != nil {
		return x.ReceiveBy
	}
	return 0
}

func (x *CreateOneInvoiceReq) GetReceiveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveAt
	}
	return nil
}

func (x *CreateOneInvoiceReq) GetPayDesc() string {
	if x != nil {
		return x.PayDesc
	}
	return ""
}

func (x *CreateOneInvoiceReq) GetPayBy() int64 {
	if x != nil {
		return x.PayBy
	}
	return 0
}

func (x *CreateOneInvoiceReq) GetPayAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PayAt
	}
	return nil
}

func (x *CreateOneInvoiceReq) GetPaymentVoucherFilename() string {
	if x != nil {
		return x.PaymentVoucherFilename
	}
	return ""
}

func (x *CreateOneInvoiceReq) GetPaymentVoucherUrl() string {
	if x != nil {
		return x.PaymentVoucherUrl
	}
	return ""
}

func (x *CreateOneInvoiceReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CreateOneInvoiceReq) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *CreateOneInvoiceReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreateOneInvoiceReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CreateOneInvoiceReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

type CreateOneInvoiceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateOneInvoiceResp) Reset() {
	*x = CreateOneInvoiceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[522]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneInvoiceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneInvoiceResp) ProtoMessage() {}

func (x *CreateOneInvoiceResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[522]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneInvoiceResp.ProtoReflect.Descriptor instead.
func (*CreateOneInvoiceResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{522}
}

func (x *CreateOneInvoiceResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type UpdateInvoiceHasReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ProjectId              int64                  `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId"`
	ContractId             int64                  `protobuf:"varint,3,opt,name=contractId,proto3" json:"contractId"`
	FromOrganizationId     int64                  `protobuf:"varint,4,opt,name=fromOrganizationId,proto3" json:"fromOrganizationId"`
	FromPlatFormType       string                 `protobuf:"bytes,5,opt,name=fromPlatFormType,proto3" json:"fromPlatFormType"`
	ConstructionId         int64                  `protobuf:"varint,6,opt,name=constructionId,proto3" json:"constructionId"`
	InvoiceType            string                 `protobuf:"bytes,7,opt,name=invoiceType,proto3" json:"invoiceType"`
	InvoiceNo              string                 `protobuf:"bytes,8,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode            string                 `protobuf:"bytes,9,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	InvoiceMd5             string                 `protobuf:"bytes,10,opt,name=invoiceMd5,proto3" json:"invoiceMd5"`
	InvoiceFilename        string                 `protobuf:"bytes,11,opt,name=invoiceFilename,proto3" json:"invoiceFilename"`
	InvoiceUrl             string                 `protobuf:"bytes,12,opt,name=invoiceUrl,proto3" json:"invoiceUrl"`
	InvoiceAmoumt          int64                  `protobuf:"varint,13,opt,name=invoiceAmoumt,proto3" json:"invoiceAmoumt"`
	InvoiceTax             int64                  `protobuf:"varint,14,opt,name=invoiceTax,proto3" json:"invoiceTax"`
	InvoiceCheckCode       string                 `protobuf:"bytes,15,opt,name=invoiceCheckCode,proto3" json:"invoiceCheckCode"`
	InvoicedDate           *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=invoicedDate,proto3" json:"invoicedDate"`
	InvoiceStatus          string                 `protobuf:"bytes,17,opt,name=invoiceStatus,proto3" json:"invoiceStatus"`
	InvoiceDesc            string                 `protobuf:"bytes,18,opt,name=invoiceDesc,proto3" json:"invoiceDesc"`
	InvoiceBy              int64                  `protobuf:"varint,19,opt,name=invoiceBy,proto3" json:"invoiceBy"`
	InvoiceAt              *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=invoiceAt,proto3" json:"invoiceAt"`
	ReceiveDesc            string                 `protobuf:"bytes,21,opt,name=receiveDesc,proto3" json:"receiveDesc"`
	ReceiveBy              int64                  `protobuf:"varint,22,opt,name=receiveBy,proto3" json:"receiveBy"`
	ReceiveAt              *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=receiveAt,proto3" json:"receiveAt"`
	PayDesc                string                 `protobuf:"bytes,24,opt,name=payDesc,proto3" json:"payDesc"`
	PayBy                  int64                  `protobuf:"varint,25,opt,name=payBy,proto3" json:"payBy"`
	PayAt                  *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=payAt,proto3" json:"payAt"`
	PaymentVoucherFilename string                 `protobuf:"bytes,27,opt,name=paymentVoucherFilename,proto3" json:"paymentVoucherFilename"`
	PaymentVoucherUrl      string                 `protobuf:"bytes,28,opt,name=paymentVoucherUrl,proto3" json:"paymentVoucherUrl"`
	Memo                   string                 `protobuf:"bytes,29,opt,name=memo,proto3" json:"memo"`
	UpdatedBy              int64                  `protobuf:"varint,30,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt              *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=updatedAt,proto3" json:"updatedAt"`
	ManagerId              int64                  `protobuf:"varint,32,opt,name=managerId,proto3" json:"managerId"`
	InfoHash               string                 `protobuf:"bytes,33,opt,name=infoHash,proto3" json:"infoHash"`
	ActiveStatus           string                 `protobuf:"bytes,34,opt,name=activeStatus,proto3" json:"activeStatus"`
}

func (x *UpdateInvoiceHasReq) Reset() {
	*x = UpdateInvoiceHasReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[523]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInvoiceHasReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInvoiceHasReq) ProtoMessage() {}

func (x *UpdateInvoiceHasReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[523]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInvoiceHasReq.ProtoReflect.Descriptor instead.
func (*UpdateInvoiceHasReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{523}
}

func (x *UpdateInvoiceHasReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateInvoiceHasReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateInvoiceHasReq) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *UpdateInvoiceHasReq) GetFromOrganizationId() int64 {
	if x != nil {
		return x.FromOrganizationId
	}
	return 0
}

func (x *UpdateInvoiceHasReq) GetFromPlatFormType() string {
	if x != nil {
		return x.FromPlatFormType
	}
	return ""
}

func (x *UpdateInvoiceHasReq) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *UpdateInvoiceHasReq) GetInvoiceType() string {
	if x != nil {
		return x.InvoiceType
	}
	return ""
}

func (x *UpdateInvoiceHasReq) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *UpdateInvoiceHasReq) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *UpdateInvoiceHasReq) GetInvoiceMd5() string {
	if x != nil {
		return x.InvoiceMd5
	}
	return ""
}

func (x *UpdateInvoiceHasReq) GetInvoiceFilename() string {
	if x != nil {
		return x.InvoiceFilename
	}
	return ""
}

func (x *UpdateInvoiceHasReq) GetInvoiceUrl() string {
	if x != nil {
		return x.InvoiceUrl
	}
	return ""
}

func (x *UpdateInvoiceHasReq) GetInvoiceAmoumt() int64 {
	if x != nil {
		return x.InvoiceAmoumt
	}
	return 0
}

func (x *UpdateInvoiceHasReq) GetInvoiceTax() int64 {
	if x != nil {
		return x.InvoiceTax
	}
	return 0
}

func (x *UpdateInvoiceHasReq) GetInvoiceCheckCode() string {
	if x != nil {
		return x.InvoiceCheckCode
	}
	return ""
}

func (x *UpdateInvoiceHasReq) GetInvoicedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoicedDate
	}
	return nil
}

func (x *UpdateInvoiceHasReq) GetInvoiceStatus() string {
	if x != nil {
		return x.InvoiceStatus
	}
	return ""
}

func (x *UpdateInvoiceHasReq) GetInvoiceDesc() string {
	if x != nil {
		return x.InvoiceDesc
	}
	return ""
}

func (x *UpdateInvoiceHasReq) GetInvoiceBy() int64 {
	if x != nil {
		return x.InvoiceBy
	}
	return 0
}

func (x *UpdateInvoiceHasReq) GetInvoiceAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoiceAt
	}
	return nil
}

func (x *UpdateInvoiceHasReq) GetReceiveDesc() string {
	if x != nil {
		return x.ReceiveDesc
	}
	return ""
}

func (x *UpdateInvoiceHasReq) GetReceiveBy() int64 {
	if x != nil {
		return x.ReceiveBy
	}
	return 0
}

func (x *UpdateInvoiceHasReq) GetReceiveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveAt
	}
	return nil
}

func (x *UpdateInvoiceHasReq) GetPayDesc() string {
	if x != nil {
		return x.PayDesc
	}
	return ""
}

func (x *UpdateInvoiceHasReq) GetPayBy() int64 {
	if x != nil {
		return x.PayBy
	}
	return 0
}

func (x *UpdateInvoiceHasReq) GetPayAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PayAt
	}
	return nil
}

func (x *UpdateInvoiceHasReq) GetPaymentVoucherFilename() string {
	if x != nil {
		return x.PaymentVoucherFilename
	}
	return ""
}

func (x *UpdateInvoiceHasReq) GetPaymentVoucherUrl() string {
	if x != nil {
		return x.PaymentVoucherUrl
	}
	return ""
}

func (x *UpdateInvoiceHasReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UpdateInvoiceHasReq) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *UpdateInvoiceHasReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UpdateInvoiceHasReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *UpdateInvoiceHasReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *UpdateInvoiceHasReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

type UpdateInvoiceHasResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateInvoiceHasResp) Reset() {
	*x = UpdateInvoiceHasResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[524]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInvoiceHasResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInvoiceHasResp) ProtoMessage() {}

func (x *UpdateInvoiceHasResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[524]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInvoiceHasResp.ProtoReflect.Descriptor instead.
func (*UpdateInvoiceHasResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{524}
}

func (x *UpdateInvoiceHasResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type UpdateOneInvoiceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ProjectId              int64                  `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId"`
	ContractId             int64                  `protobuf:"varint,3,opt,name=contractId,proto3" json:"contractId"`
	FromOrganizationId     int64                  `protobuf:"varint,4,opt,name=fromOrganizationId,proto3" json:"fromOrganizationId"`
	FromPlatFormType       string                 `protobuf:"bytes,5,opt,name=fromPlatFormType,proto3" json:"fromPlatFormType"`
	ConstructionId         int64                  `protobuf:"varint,6,opt,name=constructionId,proto3" json:"constructionId"`
	InvoiceType            string                 `protobuf:"bytes,7,opt,name=invoiceType,proto3" json:"invoiceType"`
	InvoiceNo              string                 `protobuf:"bytes,8,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode            string                 `protobuf:"bytes,9,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	InvoiceMd5             string                 `protobuf:"bytes,10,opt,name=invoiceMd5,proto3" json:"invoiceMd5"`
	InvoiceFilename        string                 `protobuf:"bytes,11,opt,name=invoiceFilename,proto3" json:"invoiceFilename"`
	InvoiceUrl             string                 `protobuf:"bytes,12,opt,name=invoiceUrl,proto3" json:"invoiceUrl"`
	InvoiceAmoumt          int64                  `protobuf:"varint,13,opt,name=invoiceAmoumt,proto3" json:"invoiceAmoumt"`
	InvoiceTax             int64                  `protobuf:"varint,14,opt,name=invoiceTax,proto3" json:"invoiceTax"`
	InvoiceCheckCode       string                 `protobuf:"bytes,15,opt,name=invoiceCheckCode,proto3" json:"invoiceCheckCode"`
	InvoicedDate           *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=invoicedDate,proto3" json:"invoicedDate"`
	InvoiceStatus          string                 `protobuf:"bytes,17,opt,name=invoiceStatus,proto3" json:"invoiceStatus"`
	InvoiceDesc            string                 `protobuf:"bytes,18,opt,name=invoiceDesc,proto3" json:"invoiceDesc"`
	InvoiceBy              int64                  `protobuf:"varint,19,opt,name=invoiceBy,proto3" json:"invoiceBy"`
	InvoiceAt              *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=invoiceAt,proto3" json:"invoiceAt"`
	ReceiveDesc            string                 `protobuf:"bytes,21,opt,name=receiveDesc,proto3" json:"receiveDesc"`
	ReceiveBy              int64                  `protobuf:"varint,22,opt,name=receiveBy,proto3" json:"receiveBy"`
	ReceiveAt              *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=receiveAt,proto3" json:"receiveAt"`
	PayDesc                string                 `protobuf:"bytes,24,opt,name=payDesc,proto3" json:"payDesc"`
	PayBy                  int64                  `protobuf:"varint,25,opt,name=payBy,proto3" json:"payBy"`
	PayAt                  *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=payAt,proto3" json:"payAt"`
	PaymentVoucherFilename string                 `protobuf:"bytes,27,opt,name=paymentVoucherFilename,proto3" json:"paymentVoucherFilename"`
	PaymentVoucherUrl      string                 `protobuf:"bytes,28,opt,name=paymentVoucherUrl,proto3" json:"paymentVoucherUrl"`
	Memo                   string                 `protobuf:"bytes,29,opt,name=memo,proto3" json:"memo"`
	UpdatedBy              int64                  `protobuf:"varint,30,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt              *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=updatedAt,proto3" json:"updatedAt"`
	ManagerId              int64                  `protobuf:"varint,32,opt,name=managerId,proto3" json:"managerId"`
	ActiveStatus           string                 `protobuf:"bytes,33,opt,name=activeStatus,proto3" json:"activeStatus"`
}

func (x *UpdateOneInvoiceReq) Reset() {
	*x = UpdateOneInvoiceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[525]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOneInvoiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOneInvoiceReq) ProtoMessage() {}

func (x *UpdateOneInvoiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[525]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOneInvoiceReq.ProtoReflect.Descriptor instead.
func (*UpdateOneInvoiceReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{525}
}

func (x *UpdateOneInvoiceReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateOneInvoiceReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateOneInvoiceReq) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *UpdateOneInvoiceReq) GetFromOrganizationId() int64 {
	if x != nil {
		return x.FromOrganizationId
	}
	return 0
}

func (x *UpdateOneInvoiceReq) GetFromPlatFormType() string {
	if x != nil {
		return x.FromPlatFormType
	}
	return ""
}

func (x *UpdateOneInvoiceReq) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *UpdateOneInvoiceReq) GetInvoiceType() string {
	if x != nil {
		return x.InvoiceType
	}
	return ""
}

func (x *UpdateOneInvoiceReq) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *UpdateOneInvoiceReq) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *UpdateOneInvoiceReq) GetInvoiceMd5() string {
	if x != nil {
		return x.InvoiceMd5
	}
	return ""
}

func (x *UpdateOneInvoiceReq) GetInvoiceFilename() string {
	if x != nil {
		return x.InvoiceFilename
	}
	return ""
}

func (x *UpdateOneInvoiceReq) GetInvoiceUrl() string {
	if x != nil {
		return x.InvoiceUrl
	}
	return ""
}

func (x *UpdateOneInvoiceReq) GetInvoiceAmoumt() int64 {
	if x != nil {
		return x.InvoiceAmoumt
	}
	return 0
}

func (x *UpdateOneInvoiceReq) GetInvoiceTax() int64 {
	if x != nil {
		return x.InvoiceTax
	}
	return 0
}

func (x *UpdateOneInvoiceReq) GetInvoiceCheckCode() string {
	if x != nil {
		return x.InvoiceCheckCode
	}
	return ""
}

func (x *UpdateOneInvoiceReq) GetInvoicedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoicedDate
	}
	return nil
}

func (x *UpdateOneInvoiceReq) GetInvoiceStatus() string {
	if x != nil {
		return x.InvoiceStatus
	}
	return ""
}

func (x *UpdateOneInvoiceReq) GetInvoiceDesc() string {
	if x != nil {
		return x.InvoiceDesc
	}
	return ""
}

func (x *UpdateOneInvoiceReq) GetInvoiceBy() int64 {
	if x != nil {
		return x.InvoiceBy
	}
	return 0
}

func (x *UpdateOneInvoiceReq) GetInvoiceAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoiceAt
	}
	return nil
}

func (x *UpdateOneInvoiceReq) GetReceiveDesc() string {
	if x != nil {
		return x.ReceiveDesc
	}
	return ""
}

func (x *UpdateOneInvoiceReq) GetReceiveBy() int64 {
	if x != nil {
		return x.ReceiveBy
	}
	return 0
}

func (x *UpdateOneInvoiceReq) GetReceiveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveAt
	}
	return nil
}

func (x *UpdateOneInvoiceReq) GetPayDesc() string {
	if x != nil {
		return x.PayDesc
	}
	return ""
}

func (x *UpdateOneInvoiceReq) GetPayBy() int64 {
	if x != nil {
		return x.PayBy
	}
	return 0
}

func (x *UpdateOneInvoiceReq) GetPayAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PayAt
	}
	return nil
}

func (x *UpdateOneInvoiceReq) GetPaymentVoucherFilename() string {
	if x != nil {
		return x.PaymentVoucherFilename
	}
	return ""
}

func (x *UpdateOneInvoiceReq) GetPaymentVoucherUrl() string {
	if x != nil {
		return x.PaymentVoucherUrl
	}
	return ""
}

func (x *UpdateOneInvoiceReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UpdateOneInvoiceReq) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *UpdateOneInvoiceReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UpdateOneInvoiceReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *UpdateOneInvoiceReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

type UpdateOneInvoiceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateOneInvoiceResp) Reset() {
	*x = UpdateOneInvoiceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[526]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOneInvoiceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOneInvoiceResp) ProtoMessage() {}

func (x *UpdateOneInvoiceResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[526]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOneInvoiceResp.ProtoReflect.Descriptor instead.
func (*UpdateOneInvoiceResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{526}
}

func (x *UpdateOneInvoiceResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type GetOneInvoiceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceId int64 `protobuf:"varint,1,opt,name=invoiceId,proto3" json:"invoiceId"`
	Page      *Page `protobuf:"bytes,2,opt,name=page,proto3" json:"page"`
	ManagerId int64 `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
}

func (x *GetOneInvoiceReq) Reset() {
	*x = GetOneInvoiceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[527]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOneInvoiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOneInvoiceReq) ProtoMessage() {}

func (x *GetOneInvoiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[527]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOneInvoiceReq.ProtoReflect.Descriptor instead.
func (*GetOneInvoiceReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{527}
}

func (x *GetOneInvoiceReq) GetInvoiceId() int64 {
	if x != nil {
		return x.InvoiceId
	}
	return 0
}

func (x *GetOneInvoiceReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GetOneInvoiceReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type GetOneInvoiceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*InvoiceInfoVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64            `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64            `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64            `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetOneInvoiceResp) Reset() {
	*x = GetOneInvoiceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[528]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOneInvoiceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOneInvoiceResp) ProtoMessage() {}

func (x *GetOneInvoiceResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[528]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOneInvoiceResp.ProtoReflect.Descriptor instead.
func (*GetOneInvoiceResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{528}
}

func (x *GetOneInvoiceResp) GetList() []*InvoiceInfoVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetOneInvoiceResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetOneInvoiceResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetOneInvoiceResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type InvoiceInfoVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ProjectId              int64                  `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId"`
	ContractId             int64                  `protobuf:"varint,3,opt,name=contractId,proto3" json:"contractId"`
	FromOrganizationId     int64                  `protobuf:"varint,4,opt,name=fromOrganizationId,proto3" json:"fromOrganizationId"`
	FromPlatFormType       string                 `protobuf:"bytes,5,opt,name=fromPlatFormType,proto3" json:"fromPlatFormType"`
	ConstructionId         int64                  `protobuf:"varint,6,opt,name=constructionId,proto3" json:"constructionId"`
	InvoiceType            string                 `protobuf:"bytes,7,opt,name=invoiceType,proto3" json:"invoiceType"`
	InvoiceNo              string                 `protobuf:"bytes,8,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode            string                 `protobuf:"bytes,9,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	InvoiceMd5             string                 `protobuf:"bytes,10,opt,name=invoiceMd5,proto3" json:"invoiceMd5"`
	InvoiceFilename        string                 `protobuf:"bytes,11,opt,name=invoiceFilename,proto3" json:"invoiceFilename"`
	InvoiceUrl             string                 `protobuf:"bytes,12,opt,name=invoiceUrl,proto3" json:"invoiceUrl"`
	InvoiceAmoumt          int64                  `protobuf:"varint,13,opt,name=invoiceAmoumt,proto3" json:"invoiceAmoumt"`
	InvoiceTax             int64                  `protobuf:"varint,14,opt,name=invoiceTax,proto3" json:"invoiceTax"`
	InvoiceCheckCode       string                 `protobuf:"bytes,15,opt,name=invoiceCheckCode,proto3" json:"invoiceCheckCode"`
	InvoicedDate           *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=invoicedDate,proto3" json:"invoicedDate"`
	InvoiceStatus          string                 `protobuf:"bytes,17,opt,name=invoiceStatus,proto3" json:"invoiceStatus"`
	InvoiceDesc            string                 `protobuf:"bytes,18,opt,name=invoiceDesc,proto3" json:"invoiceDesc"`
	InvoiceBy              int64                  `protobuf:"varint,19,opt,name=invoiceBy,proto3" json:"invoiceBy"`
	InvoiceAt              *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=invoiceAt,proto3" json:"invoiceAt"`
	ReceiveDesc            string                 `protobuf:"bytes,21,opt,name=receiveDesc,proto3" json:"receiveDesc"`
	ReceiveBy              int64                  `protobuf:"varint,22,opt,name=receiveBy,proto3" json:"receiveBy"`
	ReceiveAt              *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=receiveAt,proto3" json:"receiveAt"`
	PayDesc                string                 `protobuf:"bytes,24,opt,name=payDesc,proto3" json:"payDesc"`
	PayBy                  int64                  `protobuf:"varint,25,opt,name=payBy,proto3" json:"payBy"`
	PayAt                  *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=payAt,proto3" json:"payAt"`
	PaymentVoucherFilename string                 `protobuf:"bytes,27,opt,name=paymentVoucherFilename,proto3" json:"paymentVoucherFilename"`
	PaymentVoucherUrl      string                 `protobuf:"bytes,28,opt,name=paymentVoucherUrl,proto3" json:"paymentVoucherUrl"`
	Memo                   string                 `protobuf:"bytes,29,opt,name=memo,proto3" json:"memo"`
	CreatedBy              int64                  `protobuf:"varint,30,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt              *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy              int64                  `protobuf:"varint,32,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt              *timestamppb.Timestamp `protobuf:"bytes,33,opt,name=updatedAt,proto3" json:"updatedAt"`
	ProjectName            string                 `protobuf:"bytes,34,opt,name=projectName,proto3" json:"projectName"`
	ContractName           string                 `protobuf:"bytes,35,opt,name=contractName,proto3" json:"contractName"`
	ConstructionName       string                 `protobuf:"bytes,36,opt,name=constructionName,proto3" json:"constructionName"`
	FromOrganizationName   string                 `protobuf:"bytes,37,opt,name=fromOrganizationName,proto3" json:"fromOrganizationName"`
	UploadChainInvoice     *UploadChainInvoice    `protobuf:"bytes,38,opt,name=uploadChainInvoice,proto3" json:"uploadChainInvoice"`
	ManagerId              int64                  `protobuf:"varint,39,opt,name=managerId,proto3" json:"managerId"`
	ActiveStatus           string                 `protobuf:"bytes,40,opt,name=activeStatus,proto3" json:"activeStatus"`
}

func (x *InvoiceInfoVo) Reset() {
	*x = InvoiceInfoVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[529]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceInfoVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceInfoVo) ProtoMessage() {}

func (x *InvoiceInfoVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[529]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceInfoVo.ProtoReflect.Descriptor instead.
func (*InvoiceInfoVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{529}
}

func (x *InvoiceInfoVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InvoiceInfoVo) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *InvoiceInfoVo) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *InvoiceInfoVo) GetFromOrganizationId() int64 {
	if x != nil {
		return x.FromOrganizationId
	}
	return 0
}

func (x *InvoiceInfoVo) GetFromPlatFormType() string {
	if x != nil {
		return x.FromPlatFormType
	}
	return ""
}

func (x *InvoiceInfoVo) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *InvoiceInfoVo) GetInvoiceType() string {
	if x != nil {
		return x.InvoiceType
	}
	return ""
}

func (x *InvoiceInfoVo) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *InvoiceInfoVo) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *InvoiceInfoVo) GetInvoiceMd5() string {
	if x != nil {
		return x.InvoiceMd5
	}
	return ""
}

func (x *InvoiceInfoVo) GetInvoiceFilename() string {
	if x != nil {
		return x.InvoiceFilename
	}
	return ""
}

func (x *InvoiceInfoVo) GetInvoiceUrl() string {
	if x != nil {
		return x.InvoiceUrl
	}
	return ""
}

func (x *InvoiceInfoVo) GetInvoiceAmoumt() int64 {
	if x != nil {
		return x.InvoiceAmoumt
	}
	return 0
}

func (x *InvoiceInfoVo) GetInvoiceTax() int64 {
	if x != nil {
		return x.InvoiceTax
	}
	return 0
}

func (x *InvoiceInfoVo) GetInvoiceCheckCode() string {
	if x != nil {
		return x.InvoiceCheckCode
	}
	return ""
}

func (x *InvoiceInfoVo) GetInvoicedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoicedDate
	}
	return nil
}

func (x *InvoiceInfoVo) GetInvoiceStatus() string {
	if x != nil {
		return x.InvoiceStatus
	}
	return ""
}

func (x *InvoiceInfoVo) GetInvoiceDesc() string {
	if x != nil {
		return x.InvoiceDesc
	}
	return ""
}

func (x *InvoiceInfoVo) GetInvoiceBy() int64 {
	if x != nil {
		return x.InvoiceBy
	}
	return 0
}

func (x *InvoiceInfoVo) GetInvoiceAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoiceAt
	}
	return nil
}

func (x *InvoiceInfoVo) GetReceiveDesc() string {
	if x != nil {
		return x.ReceiveDesc
	}
	return ""
}

func (x *InvoiceInfoVo) GetReceiveBy() int64 {
	if x != nil {
		return x.ReceiveBy
	}
	return 0
}

func (x *InvoiceInfoVo) GetReceiveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveAt
	}
	return nil
}

func (x *InvoiceInfoVo) GetPayDesc() string {
	if x != nil {
		return x.PayDesc
	}
	return ""
}

func (x *InvoiceInfoVo) GetPayBy() int64 {
	if x != nil {
		return x.PayBy
	}
	return 0
}

func (x *InvoiceInfoVo) GetPayAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PayAt
	}
	return nil
}

func (x *InvoiceInfoVo) GetPaymentVoucherFilename() string {
	if x != nil {
		return x.PaymentVoucherFilename
	}
	return ""
}

func (x *InvoiceInfoVo) GetPaymentVoucherUrl() string {
	if x != nil {
		return x.PaymentVoucherUrl
	}
	return ""
}

func (x *InvoiceInfoVo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *InvoiceInfoVo) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *InvoiceInfoVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *InvoiceInfoVo) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *InvoiceInfoVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *InvoiceInfoVo) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *InvoiceInfoVo) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *InvoiceInfoVo) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *InvoiceInfoVo) GetFromOrganizationName() string {
	if x != nil {
		return x.FromOrganizationName
	}
	return ""
}

func (x *InvoiceInfoVo) GetUploadChainInvoice() *UploadChainInvoice {
	if x != nil {
		return x.UploadChainInvoice
	}
	return nil
}

func (x *InvoiceInfoVo) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *InvoiceInfoVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

type UploadChainInvoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	InvoiceId       int64                  `protobuf:"varint,2,opt,name=invoiceId,proto3" json:"invoiceId"`
	InfoHash        string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
	InvoiceHash     string                 `protobuf:"bytes,5,opt,name=invoiceHash,proto3" json:"invoiceHash"`
	InvoiceUploadAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=invoiceUploadAt,proto3" json:"invoiceUploadAt"`
	ReceiveHash     string                 `protobuf:"bytes,7,opt,name=receiveHash,proto3" json:"receiveHash"`
	ReceiveUploadAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=receiveUploadAt,proto3" json:"receiveUploadAt"`
	PayHash         string                 `protobuf:"bytes,9,opt,name=payHash,proto3" json:"payHash"`
	PayUploadAt     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=payUploadAt,proto3" json:"payUploadAt"`
	Msg             string                 `protobuf:"bytes,11,opt,name=msg,proto3" json:"msg"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updatedAt,proto3" json:"updatedAt"`
}

func (x *UploadChainInvoice) Reset() {
	*x = UploadChainInvoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[530]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainInvoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainInvoice) ProtoMessage() {}

func (x *UploadChainInvoice) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[530]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainInvoice.ProtoReflect.Descriptor instead.
func (*UploadChainInvoice) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{530}
}

func (x *UploadChainInvoice) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UploadChainInvoice) GetInvoiceId() int64 {
	if x != nil {
		return x.InvoiceId
	}
	return 0
}

func (x *UploadChainInvoice) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *UploadChainInvoice) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

func (x *UploadChainInvoice) GetInvoiceHash() string {
	if x != nil {
		return x.InvoiceHash
	}
	return ""
}

func (x *UploadChainInvoice) GetInvoiceUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoiceUploadAt
	}
	return nil
}

func (x *UploadChainInvoice) GetReceiveHash() string {
	if x != nil {
		return x.ReceiveHash
	}
	return ""
}

func (x *UploadChainInvoice) GetReceiveUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveUploadAt
	}
	return nil
}

func (x *UploadChainInvoice) GetPayHash() string {
	if x != nil {
		return x.PayHash
	}
	return ""
}

func (x *UploadChainInvoice) GetPayUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PayUploadAt
	}
	return nil
}

func (x *UploadChainInvoice) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UploadChainInvoice) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UploadChainInvoice) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ListInvoiceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId           int64                  `protobuf:"varint,1,opt,name=contractId,proto3" json:"contractId"`
	InvoiceNo            string                 `protobuf:"bytes,2,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	FromOrganizationId   int64                  `protobuf:"varint,3,opt,name=fromOrganizationId,proto3" json:"fromOrganizationId"`
	FromPlatFormType     string                 `protobuf:"bytes,4,opt,name=fromPlatFormType,proto3" json:"fromPlatFormType"`
	ConstructionId       int64                  `protobuf:"varint,5,opt,name=constructionId,proto3" json:"constructionId"`
	InvoiceStatus        string                 `protobuf:"bytes,6,opt,name=invoiceStatus,proto3" json:"invoiceStatus"`
	StartInvoicedDate    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=startInvoicedDate,proto3" json:"startInvoicedDate"`
	EndInvoicedDate      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=endInvoicedDate,proto3" json:"endInvoicedDate"`
	ManagerId            int64                  `protobuf:"varint,9,opt,name=managerId,proto3" json:"managerId"`
	Page                 *Page                  `protobuf:"bytes,10,opt,name=page,proto3" json:"page"`
	ContractName         string                 `protobuf:"bytes,11,opt,name=contractName,proto3" json:"contractName"`
	InvoiceType          string                 `protobuf:"bytes,12,opt,name=invoiceType,proto3" json:"invoiceType"`
	FromOrganizationName string                 `protobuf:"bytes,13,opt,name=fromOrganizationName,proto3" json:"fromOrganizationName"`
	ConstructionName     string                 `protobuf:"bytes,14,opt,name=constructionName,proto3" json:"constructionName"`
	StartReceivedDate    *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=startReceivedDate,proto3" json:"startReceivedDate"`
	EndReceivedDate      *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=endReceivedDate,proto3" json:"endReceivedDate"`
	StartPaidDate        *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=startPaidDate,proto3" json:"startPaidDate"`
	EndPaidDate          *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=endPaidDate,proto3" json:"endPaidDate"`
}

func (x *ListInvoiceReq) Reset() {
	*x = ListInvoiceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[531]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInvoiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInvoiceReq) ProtoMessage() {}

func (x *ListInvoiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[531]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInvoiceReq.ProtoReflect.Descriptor instead.
func (*ListInvoiceReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{531}
}

func (x *ListInvoiceReq) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *ListInvoiceReq) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *ListInvoiceReq) GetFromOrganizationId() int64 {
	if x != nil {
		return x.FromOrganizationId
	}
	return 0
}

func (x *ListInvoiceReq) GetFromPlatFormType() string {
	if x != nil {
		return x.FromPlatFormType
	}
	return ""
}

func (x *ListInvoiceReq) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *ListInvoiceReq) GetInvoiceStatus() string {
	if x != nil {
		return x.InvoiceStatus
	}
	return ""
}

func (x *ListInvoiceReq) GetStartInvoicedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartInvoicedDate
	}
	return nil
}

func (x *ListInvoiceReq) GetEndInvoicedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndInvoicedDate
	}
	return nil
}

func (x *ListInvoiceReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListInvoiceReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListInvoiceReq) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *ListInvoiceReq) GetInvoiceType() string {
	if x != nil {
		return x.InvoiceType
	}
	return ""
}

func (x *ListInvoiceReq) GetFromOrganizationName() string {
	if x != nil {
		return x.FromOrganizationName
	}
	return ""
}

func (x *ListInvoiceReq) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *ListInvoiceReq) GetStartReceivedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartReceivedDate
	}
	return nil
}

func (x *ListInvoiceReq) GetEndReceivedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndReceivedDate
	}
	return nil
}

func (x *ListInvoiceReq) GetStartPaidDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartPaidDate
	}
	return nil
}

func (x *ListInvoiceReq) GetEndPaidDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndPaidDate
	}
	return nil
}

type ListInvoiceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ListInvoiceVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64            `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64            `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64            `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListInvoiceResp) Reset() {
	*x = ListInvoiceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[532]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInvoiceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInvoiceResp) ProtoMessage() {}

func (x *ListInvoiceResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[532]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInvoiceResp.ProtoReflect.Descriptor instead.
func (*ListInvoiceResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{532}
}

func (x *ListInvoiceResp) GetList() []*ListInvoiceVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListInvoiceResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListInvoiceResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListInvoiceResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ListInvoiceVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ProjectId              int64                  `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId"`
	ContractId             int64                  `protobuf:"varint,3,opt,name=contractId,proto3" json:"contractId"`
	FromOrganizationId     int64                  `protobuf:"varint,4,opt,name=fromOrganizationId,proto3" json:"fromOrganizationId"`
	FromPlatFormType       string                 `protobuf:"bytes,5,opt,name=fromPlatFormType,proto3" json:"fromPlatFormType"`
	ConstructionId         int64                  `protobuf:"varint,6,opt,name=constructionId,proto3" json:"constructionId"`
	InvoiceType            string                 `protobuf:"bytes,7,opt,name=invoiceType,proto3" json:"invoiceType"`
	InvoiceNo              string                 `protobuf:"bytes,8,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode            string                 `protobuf:"bytes,9,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	InvoiceMd5             string                 `protobuf:"bytes,10,opt,name=invoiceMd5,proto3" json:"invoiceMd5"`
	InvoiceFilename        string                 `protobuf:"bytes,11,opt,name=invoiceFilename,proto3" json:"invoiceFilename"`
	InvoiceUrl             string                 `protobuf:"bytes,12,opt,name=invoiceUrl,proto3" json:"invoiceUrl"`
	InvoiceAmoumt          int64                  `protobuf:"varint,13,opt,name=invoiceAmoumt,proto3" json:"invoiceAmoumt"`
	InvoiceTax             int64                  `protobuf:"varint,14,opt,name=invoiceTax,proto3" json:"invoiceTax"`
	InvoiceCheckCode       string                 `protobuf:"bytes,15,opt,name=invoiceCheckCode,proto3" json:"invoiceCheckCode"`
	InvoicedDate           *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=invoicedDate,proto3" json:"invoicedDate"`
	InvoiceStatus          string                 `protobuf:"bytes,17,opt,name=invoiceStatus,proto3" json:"invoiceStatus"`
	InvoiceDesc            string                 `protobuf:"bytes,18,opt,name=invoiceDesc,proto3" json:"invoiceDesc"`
	InvoiceBy              int64                  `protobuf:"varint,19,opt,name=invoiceBy,proto3" json:"invoiceBy"`
	InvoiceAt              *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=invoiceAt,proto3" json:"invoiceAt"`
	ReceiveDesc            string                 `protobuf:"bytes,21,opt,name=receiveDesc,proto3" json:"receiveDesc"`
	ReceiveBy              int64                  `protobuf:"varint,22,opt,name=receiveBy,proto3" json:"receiveBy"`
	ReceiveAt              *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=receiveAt,proto3" json:"receiveAt"`
	PayDesc                string                 `protobuf:"bytes,24,opt,name=payDesc,proto3" json:"payDesc"`
	PayBy                  int64                  `protobuf:"varint,25,opt,name=payBy,proto3" json:"payBy"`
	PayAt                  *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=payAt,proto3" json:"payAt"`
	PaymentVoucherFilename string                 `protobuf:"bytes,27,opt,name=paymentVoucherFilename,proto3" json:"paymentVoucherFilename"`
	PaymentVoucherUrl      string                 `protobuf:"bytes,28,opt,name=paymentVoucherUrl,proto3" json:"paymentVoucherUrl"`
	Memo                   string                 `protobuf:"bytes,29,opt,name=memo,proto3" json:"memo"`
	CreatedBy              int64                  `protobuf:"varint,30,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt              *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy              int64                  `protobuf:"varint,32,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt              *timestamppb.Timestamp `protobuf:"bytes,33,opt,name=updatedAt,proto3" json:"updatedAt"`
	ProjectName            string                 `protobuf:"bytes,34,opt,name=projectName,proto3" json:"projectName"`
	ContractName           string                 `protobuf:"bytes,35,opt,name=contractName,proto3" json:"contractName"`
	ConstructionName       string                 `protobuf:"bytes,36,opt,name=constructionName,proto3" json:"constructionName"`
	FromOrganizationName   string                 `protobuf:"bytes,37,opt,name=fromOrganizationName,proto3" json:"fromOrganizationName"`
	ManagerId              int64                  `protobuf:"varint,38,opt,name=managerId,proto3" json:"managerId"`
	ActiveStatus           string                 `protobuf:"bytes,39,opt,name=activeStatus,proto3" json:"activeStatus"`
}

func (x *ListInvoiceVo) Reset() {
	*x = ListInvoiceVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[533]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInvoiceVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInvoiceVo) ProtoMessage() {}

func (x *ListInvoiceVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[533]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInvoiceVo.ProtoReflect.Descriptor instead.
func (*ListInvoiceVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{533}
}

func (x *ListInvoiceVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListInvoiceVo) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListInvoiceVo) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *ListInvoiceVo) GetFromOrganizationId() int64 {
	if x != nil {
		return x.FromOrganizationId
	}
	return 0
}

func (x *ListInvoiceVo) GetFromPlatFormType() string {
	if x != nil {
		return x.FromPlatFormType
	}
	return ""
}

func (x *ListInvoiceVo) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *ListInvoiceVo) GetInvoiceType() string {
	if x != nil {
		return x.InvoiceType
	}
	return ""
}

func (x *ListInvoiceVo) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *ListInvoiceVo) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *ListInvoiceVo) GetInvoiceMd5() string {
	if x != nil {
		return x.InvoiceMd5
	}
	return ""
}

func (x *ListInvoiceVo) GetInvoiceFilename() string {
	if x != nil {
		return x.InvoiceFilename
	}
	return ""
}

func (x *ListInvoiceVo) GetInvoiceUrl() string {
	if x != nil {
		return x.InvoiceUrl
	}
	return ""
}

func (x *ListInvoiceVo) GetInvoiceAmoumt() int64 {
	if x != nil {
		return x.InvoiceAmoumt
	}
	return 0
}

func (x *ListInvoiceVo) GetInvoiceTax() int64 {
	if x != nil {
		return x.InvoiceTax
	}
	return 0
}

func (x *ListInvoiceVo) GetInvoiceCheckCode() string {
	if x != nil {
		return x.InvoiceCheckCode
	}
	return ""
}

func (x *ListInvoiceVo) GetInvoicedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoicedDate
	}
	return nil
}

func (x *ListInvoiceVo) GetInvoiceStatus() string {
	if x != nil {
		return x.InvoiceStatus
	}
	return ""
}

func (x *ListInvoiceVo) GetInvoiceDesc() string {
	if x != nil {
		return x.InvoiceDesc
	}
	return ""
}

func (x *ListInvoiceVo) GetInvoiceBy() int64 {
	if x != nil {
		return x.InvoiceBy
	}
	return 0
}

func (x *ListInvoiceVo) GetInvoiceAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoiceAt
	}
	return nil
}

func (x *ListInvoiceVo) GetReceiveDesc() string {
	if x != nil {
		return x.ReceiveDesc
	}
	return ""
}

func (x *ListInvoiceVo) GetReceiveBy() int64 {
	if x != nil {
		return x.ReceiveBy
	}
	return 0
}

func (x *ListInvoiceVo) GetReceiveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveAt
	}
	return nil
}

func (x *ListInvoiceVo) GetPayDesc() string {
	if x != nil {
		return x.PayDesc
	}
	return ""
}

func (x *ListInvoiceVo) GetPayBy() int64 {
	if x != nil {
		return x.PayBy
	}
	return 0
}

func (x *ListInvoiceVo) GetPayAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PayAt
	}
	return nil
}

func (x *ListInvoiceVo) GetPaymentVoucherFilename() string {
	if x != nil {
		return x.PaymentVoucherFilename
	}
	return ""
}

func (x *ListInvoiceVo) GetPaymentVoucherUrl() string {
	if x != nil {
		return x.PaymentVoucherUrl
	}
	return ""
}

func (x *ListInvoiceVo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *ListInvoiceVo) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *ListInvoiceVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListInvoiceVo) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *ListInvoiceVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ListInvoiceVo) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ListInvoiceVo) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *ListInvoiceVo) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *ListInvoiceVo) GetFromOrganizationName() string {
	if x != nil {
		return x.FromOrganizationName
	}
	return ""
}

func (x *ListInvoiceVo) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListInvoiceVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

type DeleteOneInvoiceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceId int64 `protobuf:"varint,1,opt,name=InvoiceId,proto3" json:"InvoiceId"`
	ManagerId int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *DeleteOneInvoiceReq) Reset() {
	*x = DeleteOneInvoiceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[534]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOneInvoiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOneInvoiceReq) ProtoMessage() {}

func (x *DeleteOneInvoiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[534]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOneInvoiceReq.ProtoReflect.Descriptor instead.
func (*DeleteOneInvoiceReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{534}
}

func (x *DeleteOneInvoiceReq) GetInvoiceId() int64 {
	if x != nil {
		return x.InvoiceId
	}
	return 0
}

func (x *DeleteOneInvoiceReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type DeleteOneInvoiceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteOneInvoiceResp) Reset() {
	*x = DeleteOneInvoiceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[535]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOneInvoiceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOneInvoiceResp) ProtoMessage() {}

func (x *DeleteOneInvoiceResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[535]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOneInvoiceResp.ProtoReflect.Descriptor instead.
func (*DeleteOneInvoiceResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{535}
}

type UpdateInvoiceHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ProjectId              int64                  `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId"`
	ContractId             int64                  `protobuf:"varint,3,opt,name=contractId,proto3" json:"contractId"`
	FromOrganizationId     int64                  `protobuf:"varint,4,opt,name=fromOrganizationId,proto3" json:"fromOrganizationId"`
	FromPlatFormType       string                 `protobuf:"bytes,5,opt,name=fromPlatFormType,proto3" json:"fromPlatFormType"`
	ConstructionId         int64                  `protobuf:"varint,6,opt,name=constructionId,proto3" json:"constructionId"`
	InvoiceType            string                 `protobuf:"bytes,7,opt,name=invoiceType,proto3" json:"invoiceType"`
	InvoiceNo              string                 `protobuf:"bytes,8,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode            string                 `protobuf:"bytes,9,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	InvoiceMd5             string                 `protobuf:"bytes,10,opt,name=invoiceMd5,proto3" json:"invoiceMd5"`
	InvoiceFilename        string                 `protobuf:"bytes,11,opt,name=invoiceFilename,proto3" json:"invoiceFilename"`
	InvoiceUrl             string                 `protobuf:"bytes,12,opt,name=invoiceUrl,proto3" json:"invoiceUrl"`
	InvoiceAmoumt          int64                  `protobuf:"varint,13,opt,name=invoiceAmoumt,proto3" json:"invoiceAmoumt"`
	InvoiceTax             int64                  `protobuf:"varint,14,opt,name=invoiceTax,proto3" json:"invoiceTax"`
	InvoiceCheckCode       string                 `protobuf:"bytes,15,opt,name=invoiceCheckCode,proto3" json:"invoiceCheckCode"`
	InvoicedDate           *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=invoicedDate,proto3" json:"invoicedDate"`
	InvoiceStatus          string                 `protobuf:"bytes,17,opt,name=invoiceStatus,proto3" json:"invoiceStatus"`
	InvoiceDesc            string                 `protobuf:"bytes,18,opt,name=invoiceDesc,proto3" json:"invoiceDesc"`
	InvoiceBy              int64                  `protobuf:"varint,19,opt,name=invoiceBy,proto3" json:"invoiceBy"`
	InvoiceAt              *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=invoiceAt,proto3" json:"invoiceAt"`
	ReceiveDesc            string                 `protobuf:"bytes,21,opt,name=receiveDesc,proto3" json:"receiveDesc"`
	ReceiveBy              int64                  `protobuf:"varint,22,opt,name=receiveBy,proto3" json:"receiveBy"`
	ReceiveAt              *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=receiveAt,proto3" json:"receiveAt"`
	PayDesc                string                 `protobuf:"bytes,24,opt,name=payDesc,proto3" json:"payDesc"`
	PayBy                  int64                  `protobuf:"varint,25,opt,name=payBy,proto3" json:"payBy"`
	PayAt                  *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=payAt,proto3" json:"payAt"`
	PaymentVoucherFilename string                 `protobuf:"bytes,27,opt,name=paymentVoucherFilename,proto3" json:"paymentVoucherFilename"`
	PaymentVoucherUrl      string                 `protobuf:"bytes,28,opt,name=paymentVoucherUrl,proto3" json:"paymentVoucherUrl"`
	Memo                   string                 `protobuf:"bytes,29,opt,name=memo,proto3" json:"memo"`
	UpdatedBy              int64                  `protobuf:"varint,30,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt              *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=updatedAt,proto3" json:"updatedAt"`
	ManagerId              int64                  `protobuf:"varint,32,opt,name=managerId,proto3" json:"managerId"`
	InfoHash               string                 `protobuf:"bytes,33,opt,name=infoHash,proto3" json:"infoHash"`
	ActiveStatus           string                 `protobuf:"bytes,34,opt,name=activeStatus,proto3" json:"activeStatus"`
}

func (x *UpdateInvoiceHashReq) Reset() {
	*x = UpdateInvoiceHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[536]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInvoiceHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInvoiceHashReq) ProtoMessage() {}

func (x *UpdateInvoiceHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[536]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInvoiceHashReq.ProtoReflect.Descriptor instead.
func (*UpdateInvoiceHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{536}
}

func (x *UpdateInvoiceHashReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateInvoiceHashReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateInvoiceHashReq) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *UpdateInvoiceHashReq) GetFromOrganizationId() int64 {
	if x != nil {
		return x.FromOrganizationId
	}
	return 0
}

func (x *UpdateInvoiceHashReq) GetFromPlatFormType() string {
	if x != nil {
		return x.FromPlatFormType
	}
	return ""
}

func (x *UpdateInvoiceHashReq) GetConstructionId() int64 {
	if x != nil {
		return x.ConstructionId
	}
	return 0
}

func (x *UpdateInvoiceHashReq) GetInvoiceType() string {
	if x != nil {
		return x.InvoiceType
	}
	return ""
}

func (x *UpdateInvoiceHashReq) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *UpdateInvoiceHashReq) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *UpdateInvoiceHashReq) GetInvoiceMd5() string {
	if x != nil {
		return x.InvoiceMd5
	}
	return ""
}

func (x *UpdateInvoiceHashReq) GetInvoiceFilename() string {
	if x != nil {
		return x.InvoiceFilename
	}
	return ""
}

func (x *UpdateInvoiceHashReq) GetInvoiceUrl() string {
	if x != nil {
		return x.InvoiceUrl
	}
	return ""
}

func (x *UpdateInvoiceHashReq) GetInvoiceAmoumt() int64 {
	if x != nil {
		return x.InvoiceAmoumt
	}
	return 0
}

func (x *UpdateInvoiceHashReq) GetInvoiceTax() int64 {
	if x != nil {
		return x.InvoiceTax
	}
	return 0
}

func (x *UpdateInvoiceHashReq) GetInvoiceCheckCode() string {
	if x != nil {
		return x.InvoiceCheckCode
	}
	return ""
}

func (x *UpdateInvoiceHashReq) GetInvoicedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoicedDate
	}
	return nil
}

func (x *UpdateInvoiceHashReq) GetInvoiceStatus() string {
	if x != nil {
		return x.InvoiceStatus
	}
	return ""
}

func (x *UpdateInvoiceHashReq) GetInvoiceDesc() string {
	if x != nil {
		return x.InvoiceDesc
	}
	return ""
}

func (x *UpdateInvoiceHashReq) GetInvoiceBy() int64 {
	if x != nil {
		return x.InvoiceBy
	}
	return 0
}

func (x *UpdateInvoiceHashReq) GetInvoiceAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoiceAt
	}
	return nil
}

func (x *UpdateInvoiceHashReq) GetReceiveDesc() string {
	if x != nil {
		return x.ReceiveDesc
	}
	return ""
}

func (x *UpdateInvoiceHashReq) GetReceiveBy() int64 {
	if x != nil {
		return x.ReceiveBy
	}
	return 0
}

func (x *UpdateInvoiceHashReq) GetReceiveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveAt
	}
	return nil
}

func (x *UpdateInvoiceHashReq) GetPayDesc() string {
	if x != nil {
		return x.PayDesc
	}
	return ""
}

func (x *UpdateInvoiceHashReq) GetPayBy() int64 {
	if x != nil {
		return x.PayBy
	}
	return 0
}

func (x *UpdateInvoiceHashReq) GetPayAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PayAt
	}
	return nil
}

func (x *UpdateInvoiceHashReq) GetPaymentVoucherFilename() string {
	if x != nil {
		return x.PaymentVoucherFilename
	}
	return ""
}

func (x *UpdateInvoiceHashReq) GetPaymentVoucherUrl() string {
	if x != nil {
		return x.PaymentVoucherUrl
	}
	return ""
}

func (x *UpdateInvoiceHashReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UpdateInvoiceHashReq) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *UpdateInvoiceHashReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UpdateInvoiceHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *UpdateInvoiceHashReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *UpdateInvoiceHashReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

type UpdateInvoiceHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateInvoiceHashResp) Reset() {
	*x = UpdateInvoiceHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[537]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInvoiceHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInvoiceHashResp) ProtoMessage() {}

func (x *UpdateInvoiceHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[537]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInvoiceHashResp.ProtoReflect.Descriptor instead.
func (*UpdateInvoiceHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{537}
}

func (x *UpdateInvoiceHashResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type ReceiveInvoiceHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ReceiveDesc   string                 `protobuf:"bytes,2,opt,name=receiveDesc,proto3" json:"receiveDesc"`
	ReceiveBy     int64                  `protobuf:"varint,3,opt,name=receiveBy,proto3" json:"receiveBy"`
	ReceiveAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=receiveAt,proto3" json:"receiveAt"`
	InvoiceStatus string                 `protobuf:"bytes,5,opt,name=invoiceStatus,proto3" json:"invoiceStatus"`
	ManagerId     int64                  `protobuf:"varint,6,opt,name=managerId,proto3" json:"managerId"`
	InfoHash      string                 `protobuf:"bytes,7,opt,name=infoHash,proto3" json:"infoHash"`
}

func (x *ReceiveInvoiceHashReq) Reset() {
	*x = ReceiveInvoiceHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[538]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveInvoiceHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveInvoiceHashReq) ProtoMessage() {}

func (x *ReceiveInvoiceHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[538]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveInvoiceHashReq.ProtoReflect.Descriptor instead.
func (*ReceiveInvoiceHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{538}
}

func (x *ReceiveInvoiceHashReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReceiveInvoiceHashReq) GetReceiveDesc() string {
	if x != nil {
		return x.ReceiveDesc
	}
	return ""
}

func (x *ReceiveInvoiceHashReq) GetReceiveBy() int64 {
	if x != nil {
		return x.ReceiveBy
	}
	return 0
}

func (x *ReceiveInvoiceHashReq) GetReceiveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveAt
	}
	return nil
}

func (x *ReceiveInvoiceHashReq) GetInvoiceStatus() string {
	if x != nil {
		return x.InvoiceStatus
	}
	return ""
}

func (x *ReceiveInvoiceHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ReceiveInvoiceHashReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

type ReceiveInvoiceHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *ReceiveInvoiceHashResp) Reset() {
	*x = ReceiveInvoiceHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[539]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveInvoiceHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveInvoiceHashResp) ProtoMessage() {}

func (x *ReceiveInvoiceHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[539]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveInvoiceHashResp.ProtoReflect.Descriptor instead.
func (*ReceiveInvoiceHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{539}
}

func (x *ReceiveInvoiceHashResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type PayInvoiceHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	PayDesc                string                 `protobuf:"bytes,2,opt,name=payDesc,proto3" json:"payDesc"`
	PayBy                  int64                  `protobuf:"varint,3,opt,name=payBy,proto3" json:"payBy"`
	PayAt                  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=payAt,proto3" json:"payAt"`
	PaymentVoucherFilename string                 `protobuf:"bytes,5,opt,name=paymentVoucherFilename,proto3" json:"paymentVoucherFilename"`
	PaymentVoucherUrl      string                 `protobuf:"bytes,6,opt,name=paymentVoucherUrl,proto3" json:"paymentVoucherUrl"`
	InvoiceStatus          string                 `protobuf:"bytes,7,opt,name=invoiceStatus,proto3" json:"invoiceStatus"`
	ManagerId              int64                  `protobuf:"varint,8,opt,name=managerId,proto3" json:"managerId"`
	InfoHash               string                 `protobuf:"bytes,9,opt,name=infoHash,proto3" json:"infoHash"`
}

func (x *PayInvoiceHashReq) Reset() {
	*x = PayInvoiceHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[540]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayInvoiceHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayInvoiceHashReq) ProtoMessage() {}

func (x *PayInvoiceHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[540]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayInvoiceHashReq.ProtoReflect.Descriptor instead.
func (*PayInvoiceHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{540}
}

func (x *PayInvoiceHashReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PayInvoiceHashReq) GetPayDesc() string {
	if x != nil {
		return x.PayDesc
	}
	return ""
}

func (x *PayInvoiceHashReq) GetPayBy() int64 {
	if x != nil {
		return x.PayBy
	}
	return 0
}

func (x *PayInvoiceHashReq) GetPayAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PayAt
	}
	return nil
}

func (x *PayInvoiceHashReq) GetPaymentVoucherFilename() string {
	if x != nil {
		return x.PaymentVoucherFilename
	}
	return ""
}

func (x *PayInvoiceHashReq) GetPaymentVoucherUrl() string {
	if x != nil {
		return x.PaymentVoucherUrl
	}
	return ""
}

func (x *PayInvoiceHashReq) GetInvoiceStatus() string {
	if x != nil {
		return x.InvoiceStatus
	}
	return ""
}

func (x *PayInvoiceHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *PayInvoiceHashReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

type PayInvoiceHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *PayInvoiceHashResp) Reset() {
	*x = PayInvoiceHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[541]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayInvoiceHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayInvoiceHashResp) ProtoMessage() {}

func (x *PayInvoiceHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[541]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayInvoiceHashResp.ProtoReflect.Descriptor instead.
func (*PayInvoiceHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{541}
}

func (x *PayInvoiceHashResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type GetDashboardProjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId  int64   `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ProjectIds []int64 `protobuf:"varint,2,rep,packed,name=projectIds,proto3" json:"projectIds"`
}

func (x *GetDashboardProjectReq) Reset() {
	*x = GetDashboardProjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[542]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardProjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardProjectReq) ProtoMessage() {}

func (x *GetDashboardProjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[542]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardProjectReq.ProtoReflect.Descriptor instead.
func (*GetDashboardProjectReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{542}
}

func (x *GetDashboardProjectReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetDashboardProjectReq) GetProjectIds() []int64 {
	if x != nil {
		return x.ProjectIds
	}
	return nil
}

type DashboardProjectVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId          int64                  `protobuf:"varint,1,opt,name=projectId,proto3" json:"projectId"`
	ProjectCode        string                 `protobuf:"bytes,2,opt,name=projectCode,proto3" json:"projectCode"`
	ProjectName        string                 `protobuf:"bytes,3,opt,name=projectName,proto3" json:"projectName"`
	StartAt            *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=startAt,proto3" json:"startAt"`
	EndAt              *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=endAt,proto3" json:"endAt"`
	BuildingArea       int64                  `protobuf:"varint,6,opt,name=buildingArea,proto3" json:"buildingArea"`
	EngineeringCost    int64                  `protobuf:"varint,7,opt,name=engineeringCost,proto3" json:"engineeringCost"`
	ProjectAddress     string                 `protobuf:"bytes,8,opt,name=projectAddress,proto3" json:"projectAddress"`
	FormType           string                 `protobuf:"bytes,9,opt,name=formType,proto3" json:"formType"`
	ProjectLeader      string                 `protobuf:"bytes,10,opt,name=projectLeader,proto3" json:"projectLeader"`
	ContactMobile      string                 `protobuf:"bytes,11,opt,name=contactMobile,proto3" json:"contactMobile"`
	ContactAddress     string                 `protobuf:"bytes,12,opt,name=contactAddress,proto3" json:"contactAddress"`
	ConstructionName   string                 `protobuf:"bytes,13,opt,name=constructionName,proto3" json:"constructionName"`
	DesignName         string                 `protobuf:"bytes,14,opt,name=designName,proto3" json:"designName"`
	BuildName          string                 `protobuf:"bytes,15,opt,name=buildName,proto3" json:"buildName"`
	SupervisorName     string                 `protobuf:"bytes,16,opt,name=supervisorName,proto3" json:"supervisorName"`
	ActiveStatus       string                 `protobuf:"bytes,17,opt,name=activeStatus,proto3" json:"activeStatus"`
	ProjectDescription string                 `protobuf:"bytes,18,opt,name=projectDescription,proto3" json:"projectDescription"`
	Memo               string                 `protobuf:"bytes,19,opt,name=memo,proto3" json:"memo"`
	ProjectDuration    int64                  `protobuf:"varint,20,opt,name=projectDuration,proto3" json:"projectDuration"`
	Longitude          float32                `protobuf:"fixed32,21,opt,name=longitude,proto3" json:"longitude"`
	Latitude           float32                `protobuf:"fixed32,22,opt,name=latitude,proto3" json:"latitude"`
}

func (x *DashboardProjectVo) Reset() {
	*x = DashboardProjectVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[543]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardProjectVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardProjectVo) ProtoMessage() {}

func (x *DashboardProjectVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[543]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardProjectVo.ProtoReflect.Descriptor instead.
func (*DashboardProjectVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{543}
}

func (x *DashboardProjectVo) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DashboardProjectVo) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *DashboardProjectVo) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *DashboardProjectVo) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *DashboardProjectVo) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *DashboardProjectVo) GetBuildingArea() int64 {
	if x != nil {
		return x.BuildingArea
	}
	return 0
}

func (x *DashboardProjectVo) GetEngineeringCost() int64 {
	if x != nil {
		return x.EngineeringCost
	}
	return 0
}

func (x *DashboardProjectVo) GetProjectAddress() string {
	if x != nil {
		return x.ProjectAddress
	}
	return ""
}

func (x *DashboardProjectVo) GetFormType() string {
	if x != nil {
		return x.FormType
	}
	return ""
}

func (x *DashboardProjectVo) GetProjectLeader() string {
	if x != nil {
		return x.ProjectLeader
	}
	return ""
}

func (x *DashboardProjectVo) GetContactMobile() string {
	if x != nil {
		return x.ContactMobile
	}
	return ""
}

func (x *DashboardProjectVo) GetContactAddress() string {
	if x != nil {
		return x.ContactAddress
	}
	return ""
}

func (x *DashboardProjectVo) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *DashboardProjectVo) GetDesignName() string {
	if x != nil {
		return x.DesignName
	}
	return ""
}

func (x *DashboardProjectVo) GetBuildName() string {
	if x != nil {
		return x.BuildName
	}
	return ""
}

func (x *DashboardProjectVo) GetSupervisorName() string {
	if x != nil {
		return x.SupervisorName
	}
	return ""
}

func (x *DashboardProjectVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *DashboardProjectVo) GetProjectDescription() string {
	if x != nil {
		return x.ProjectDescription
	}
	return ""
}

func (x *DashboardProjectVo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *DashboardProjectVo) GetProjectDuration() int64 {
	if x != nil {
		return x.ProjectDuration
	}
	return 0
}

func (x *DashboardProjectVo) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *DashboardProjectVo) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

type GetDashboardProjectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*DashboardProjectVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
}

func (x *GetDashboardProjectResp) Reset() {
	*x = GetDashboardProjectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[544]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardProjectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardProjectResp) ProtoMessage() {}

func (x *GetDashboardProjectResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[544]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardProjectResp.ProtoReflect.Descriptor instead.
func (*GetDashboardProjectResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{544}
}

func (x *GetDashboardProjectResp) GetList() []*DashboardProjectVo {
	if x != nil {
		return x.List
	}
	return nil
}

type CountDashboardWorkmanAttendanceStatisticsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartAt   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=startAt,proto3" json:"startAt"`
	EndAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=endAt,proto3" json:"endAt"`
	ManagerId int64                  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
	ProjectId int64                  `protobuf:"varint,4,opt,name=projectId,proto3" json:"projectId"`
}

func (x *CountDashboardWorkmanAttendanceStatisticsReq) Reset() {
	*x = CountDashboardWorkmanAttendanceStatisticsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[545]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountDashboardWorkmanAttendanceStatisticsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountDashboardWorkmanAttendanceStatisticsReq) ProtoMessage() {}

func (x *CountDashboardWorkmanAttendanceStatisticsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[545]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountDashboardWorkmanAttendanceStatisticsReq.ProtoReflect.Descriptor instead.
func (*CountDashboardWorkmanAttendanceStatisticsReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{545}
}

func (x *CountDashboardWorkmanAttendanceStatisticsReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *CountDashboardWorkmanAttendanceStatisticsReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *CountDashboardWorkmanAttendanceStatisticsReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CountDashboardWorkmanAttendanceStatisticsReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

type DashboardWorkmanAttendanceStatisticsVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadDate      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=uploadDate,proto3" json:"uploadDate"`
	TotalWorker     int64                  `protobuf:"varint,2,opt,name=totalWorker,proto3" json:"totalWorker"`
	TotalManager    int64                  `protobuf:"varint,3,opt,name=totalManager,proto3" json:"totalManager"`
	TotalAttendance int64                  `protobuf:"varint,4,opt,name=totalAttendance,proto3" json:"totalAttendance"`
}

func (x *DashboardWorkmanAttendanceStatisticsVo) Reset() {
	*x = DashboardWorkmanAttendanceStatisticsVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[546]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardWorkmanAttendanceStatisticsVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardWorkmanAttendanceStatisticsVo) ProtoMessage() {}

func (x *DashboardWorkmanAttendanceStatisticsVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[546]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardWorkmanAttendanceStatisticsVo.ProtoReflect.Descriptor instead.
func (*DashboardWorkmanAttendanceStatisticsVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{546}
}

func (x *DashboardWorkmanAttendanceStatisticsVo) GetUploadDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UploadDate
	}
	return nil
}

func (x *DashboardWorkmanAttendanceStatisticsVo) GetTotalWorker() int64 {
	if x != nil {
		return x.TotalWorker
	}
	return 0
}

func (x *DashboardWorkmanAttendanceStatisticsVo) GetTotalManager() int64 {
	if x != nil {
		return x.TotalManager
	}
	return 0
}

func (x *DashboardWorkmanAttendanceStatisticsVo) GetTotalAttendance() int64 {
	if x != nil {
		return x.TotalAttendance
	}
	return 0
}

type CountDashboardWorkmanAttendanceStatisticsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List         []*DashboardWorkmanAttendanceStatisticsVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	TotalWorkman int64                                     `protobuf:"varint,2,opt,name=totalWorkman,proto3" json:"totalWorkman"`
}

func (x *CountDashboardWorkmanAttendanceStatisticsResp) Reset() {
	*x = CountDashboardWorkmanAttendanceStatisticsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[547]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountDashboardWorkmanAttendanceStatisticsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountDashboardWorkmanAttendanceStatisticsResp) ProtoMessage() {}

func (x *CountDashboardWorkmanAttendanceStatisticsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[547]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountDashboardWorkmanAttendanceStatisticsResp.ProtoReflect.Descriptor instead.
func (*CountDashboardWorkmanAttendanceStatisticsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{547}
}

func (x *CountDashboardWorkmanAttendanceStatisticsResp) GetList() []*DashboardWorkmanAttendanceStatisticsVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CountDashboardWorkmanAttendanceStatisticsResp) GetTotalWorkman() int64 {
	if x != nil {
		return x.TotalWorkman
	}
	return 0
}

type CountDashboardWorkmanEpidemicStatisticsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartAt   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=startAt,proto3" json:"startAt"`
	EndAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=endAt,proto3" json:"endAt"`
	ManagerId int64                  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
	ProjectId int64                  `protobuf:"varint,4,opt,name=projectId,proto3" json:"projectId"`
}

func (x *CountDashboardWorkmanEpidemicStatisticsReq) Reset() {
	*x = CountDashboardWorkmanEpidemicStatisticsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[548]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountDashboardWorkmanEpidemicStatisticsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountDashboardWorkmanEpidemicStatisticsReq) ProtoMessage() {}

func (x *CountDashboardWorkmanEpidemicStatisticsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[548]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountDashboardWorkmanEpidemicStatisticsReq.ProtoReflect.Descriptor instead.
func (*CountDashboardWorkmanEpidemicStatisticsReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{548}
}

func (x *CountDashboardWorkmanEpidemicStatisticsReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *CountDashboardWorkmanEpidemicStatisticsReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *CountDashboardWorkmanEpidemicStatisticsReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CountDashboardWorkmanEpidemicStatisticsReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

type DashboardWorkmanEpidemicStatisticsVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadDate               *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=uploadDate,proto3" json:"uploadDate"`
	TotalNotWearMask         int64                  `protobuf:"varint,2,opt,name=totalNotWearMask,proto3" json:"totalNotWearMask"`
	TotalAbnormalTemperature int64                  `protobuf:"varint,3,opt,name=totalAbnormalTemperature,proto3" json:"totalAbnormalTemperature"`
	TotalAbnormalHealthCode  int64                  `protobuf:"varint,4,opt,name=totalAbnormalHealthCode,proto3" json:"totalAbnormalHealthCode"`
	TotalAbnormalTravelCode  int64                  `protobuf:"varint,5,opt,name=totalAbnormalTravelCode,proto3" json:"totalAbnormalTravelCode"`
	TotalAbnormal            int64                  `protobuf:"varint,6,opt,name=totalAbnormal,proto3" json:"totalAbnormal"`
}

func (x *DashboardWorkmanEpidemicStatisticsVo) Reset() {
	*x = DashboardWorkmanEpidemicStatisticsVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[549]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardWorkmanEpidemicStatisticsVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardWorkmanEpidemicStatisticsVo) ProtoMessage() {}

func (x *DashboardWorkmanEpidemicStatisticsVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[549]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardWorkmanEpidemicStatisticsVo.ProtoReflect.Descriptor instead.
func (*DashboardWorkmanEpidemicStatisticsVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{549}
}

func (x *DashboardWorkmanEpidemicStatisticsVo) GetUploadDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UploadDate
	}
	return nil
}

func (x *DashboardWorkmanEpidemicStatisticsVo) GetTotalNotWearMask() int64 {
	if x != nil {
		return x.TotalNotWearMask
	}
	return 0
}

func (x *DashboardWorkmanEpidemicStatisticsVo) GetTotalAbnormalTemperature() int64 {
	if x != nil {
		return x.TotalAbnormalTemperature
	}
	return 0
}

func (x *DashboardWorkmanEpidemicStatisticsVo) GetTotalAbnormalHealthCode() int64 {
	if x != nil {
		return x.TotalAbnormalHealthCode
	}
	return 0
}

func (x *DashboardWorkmanEpidemicStatisticsVo) GetTotalAbnormalTravelCode() int64 {
	if x != nil {
		return x.TotalAbnormalTravelCode
	}
	return 0
}

func (x *DashboardWorkmanEpidemicStatisticsVo) GetTotalAbnormal() int64 {
	if x != nil {
		return x.TotalAbnormal
	}
	return 0
}

type CountDashboardWorkmanEpidemicStatisticsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*DashboardWorkmanEpidemicStatisticsVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
}

func (x *CountDashboardWorkmanEpidemicStatisticsResp) Reset() {
	*x = CountDashboardWorkmanEpidemicStatisticsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[550]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountDashboardWorkmanEpidemicStatisticsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountDashboardWorkmanEpidemicStatisticsResp) ProtoMessage() {}

func (x *CountDashboardWorkmanEpidemicStatisticsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[550]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountDashboardWorkmanEpidemicStatisticsResp.ProtoReflect.Descriptor instead.
func (*CountDashboardWorkmanEpidemicStatisticsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{550}
}

func (x *CountDashboardWorkmanEpidemicStatisticsResp) GetList() []*DashboardWorkmanEpidemicStatisticsVo {
	if x != nil {
		return x.List
	}
	return nil
}

type CountDashboardProcessCompletionPercentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartAt   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=startAt,proto3" json:"startAt"`
	EndAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=endAt,proto3" json:"endAt"`
	ManagerId int64                  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
	ProjectId int64                  `protobuf:"varint,4,opt,name=projectId,proto3" json:"projectId"`
}

func (x *CountDashboardProcessCompletionPercentReq) Reset() {
	*x = CountDashboardProcessCompletionPercentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[551]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountDashboardProcessCompletionPercentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountDashboardProcessCompletionPercentReq) ProtoMessage() {}

func (x *CountDashboardProcessCompletionPercentReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[551]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountDashboardProcessCompletionPercentReq.ProtoReflect.Descriptor instead.
func (*CountDashboardProcessCompletionPercentReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{551}
}

func (x *CountDashboardProcessCompletionPercentReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *CountDashboardProcessCompletionPercentReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *CountDashboardProcessCompletionPercentReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CountDashboardProcessCompletionPercentReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

type DashboardProcessCompletionPercentVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhaseId           int64   `protobuf:"varint,1,opt,name=phaseId,proto3" json:"phaseId"`
	PhaseName         string  `protobuf:"bytes,2,opt,name=phaseName,proto3" json:"phaseName"`
	PhaseDesc         string  `protobuf:"bytes,3,opt,name=phaseDesc,proto3" json:"phaseDesc"`
	ApprovalDays      int64   `protobuf:"varint,4,opt,name=approvalDays,proto3" json:"approvalDays"`
	CompletionPercent float32 `protobuf:"fixed32,5,opt,name=completionPercent,proto3" json:"completionPercent"`
}

func (x *DashboardProcessCompletionPercentVo) Reset() {
	*x = DashboardProcessCompletionPercentVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[552]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardProcessCompletionPercentVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardProcessCompletionPercentVo) ProtoMessage() {}

func (x *DashboardProcessCompletionPercentVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[552]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardProcessCompletionPercentVo.ProtoReflect.Descriptor instead.
func (*DashboardProcessCompletionPercentVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{552}
}

func (x *DashboardProcessCompletionPercentVo) GetPhaseId() int64 {
	if x != nil {
		return x.PhaseId
	}
	return 0
}

func (x *DashboardProcessCompletionPercentVo) GetPhaseName() string {
	if x != nil {
		return x.PhaseName
	}
	return ""
}

func (x *DashboardProcessCompletionPercentVo) GetPhaseDesc() string {
	if x != nil {
		return x.PhaseDesc
	}
	return ""
}

func (x *DashboardProcessCompletionPercentVo) GetApprovalDays() int64 {
	if x != nil {
		return x.ApprovalDays
	}
	return 0
}

func (x *DashboardProcessCompletionPercentVo) GetCompletionPercent() float32 {
	if x != nil {
		return x.CompletionPercent
	}
	return 0
}

type CountDashboardProcessCompletionPercentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*DashboardProcessCompletionPercentVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
}

func (x *CountDashboardProcessCompletionPercentResp) Reset() {
	*x = CountDashboardProcessCompletionPercentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[553]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountDashboardProcessCompletionPercentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountDashboardProcessCompletionPercentResp) ProtoMessage() {}

func (x *CountDashboardProcessCompletionPercentResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[553]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountDashboardProcessCompletionPercentResp.ProtoReflect.Descriptor instead.
func (*CountDashboardProcessCompletionPercentResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{553}
}

func (x *CountDashboardProcessCompletionPercentResp) GetList() []*DashboardProcessCompletionPercentVo {
	if x != nil {
		return x.List
	}
	return nil
}

type ListDashboardSafetyInspectionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartAt   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=startAt,proto3" json:"startAt"`
	EndAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=endAt,proto3" json:"endAt"`
	ManagerId int64                  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
	ProjectId int64                  `protobuf:"varint,4,opt,name=projectId,proto3" json:"projectId"`
	Page      *Page                  `protobuf:"bytes,5,opt,name=page,proto3" json:"page"`
}

func (x *ListDashboardSafetyInspectionReq) Reset() {
	*x = ListDashboardSafetyInspectionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[554]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDashboardSafetyInspectionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDashboardSafetyInspectionReq) ProtoMessage() {}

func (x *ListDashboardSafetyInspectionReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[554]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDashboardSafetyInspectionReq.ProtoReflect.Descriptor instead.
func (*ListDashboardSafetyInspectionReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{554}
}

func (x *ListDashboardSafetyInspectionReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *ListDashboardSafetyInspectionReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *ListDashboardSafetyInspectionReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListDashboardSafetyInspectionReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListDashboardSafetyInspectionReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type DashboardSafetyInspectionVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	SafetyInspectionCode string                 `protobuf:"bytes,2,opt,name=safetyInspectionCode,proto3" json:"safetyInspectionCode"`
	InspectionDate       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=inspectionDate,proto3" json:"inspectionDate"`
	SafetyInspector      string                 `protobuf:"bytes,4,opt,name=safetyInspector,proto3" json:"safetyInspector"`
	InspectionArea       string                 `protobuf:"bytes,5,opt,name=inspectionArea,proto3" json:"inspectionArea"`
	InspectionSituation  string                 `protobuf:"bytes,6,opt,name=inspectionSituation,proto3" json:"inspectionSituation"`
	InspectionHandle     string                 `protobuf:"bytes,7,opt,name=inspectionHandle,proto3" json:"inspectionHandle"`
	SafetyStatus         string                 `protobuf:"bytes,8,opt,name=safetyStatus,proto3" json:"safetyStatus"`
	SafetyStatusDesc     string                 `protobuf:"bytes,9,opt,name=safetyStatusDesc,proto3" json:"safetyStatusDesc"`
}

func (x *DashboardSafetyInspectionVo) Reset() {
	*x = DashboardSafetyInspectionVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[555]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardSafetyInspectionVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardSafetyInspectionVo) ProtoMessage() {}

func (x *DashboardSafetyInspectionVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[555]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardSafetyInspectionVo.ProtoReflect.Descriptor instead.
func (*DashboardSafetyInspectionVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{555}
}

func (x *DashboardSafetyInspectionVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DashboardSafetyInspectionVo) GetSafetyInspectionCode() string {
	if x != nil {
		return x.SafetyInspectionCode
	}
	return ""
}

func (x *DashboardSafetyInspectionVo) GetInspectionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InspectionDate
	}
	return nil
}

func (x *DashboardSafetyInspectionVo) GetSafetyInspector() string {
	if x != nil {
		return x.SafetyInspector
	}
	return ""
}

func (x *DashboardSafetyInspectionVo) GetInspectionArea() string {
	if x != nil {
		return x.InspectionArea
	}
	return ""
}

func (x *DashboardSafetyInspectionVo) GetInspectionSituation() string {
	if x != nil {
		return x.InspectionSituation
	}
	return ""
}

func (x *DashboardSafetyInspectionVo) GetInspectionHandle() string {
	if x != nil {
		return x.InspectionHandle
	}
	return ""
}

func (x *DashboardSafetyInspectionVo) GetSafetyStatus() string {
	if x != nil {
		return x.SafetyStatus
	}
	return ""
}

func (x *DashboardSafetyInspectionVo) GetSafetyStatusDesc() string {
	if x != nil {
		return x.SafetyStatusDesc
	}
	return ""
}

type ListDashboardSafetyInspectionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*DashboardSafetyInspectionVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                          `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                          `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                          `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListDashboardSafetyInspectionResp) Reset() {
	*x = ListDashboardSafetyInspectionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[556]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDashboardSafetyInspectionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDashboardSafetyInspectionResp) ProtoMessage() {}

func (x *ListDashboardSafetyInspectionResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[556]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDashboardSafetyInspectionResp.ProtoReflect.Descriptor instead.
func (*ListDashboardSafetyInspectionResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{556}
}

func (x *ListDashboardSafetyInspectionResp) GetList() []*DashboardSafetyInspectionVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListDashboardSafetyInspectionResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListDashboardSafetyInspectionResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDashboardSafetyInspectionResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ReportDashboardYearReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId      int64  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	OrganizationId int64  `protobuf:"varint,2,opt,name=organizationId,proto3" json:"organizationId"`
	PlatFormType   string `protobuf:"bytes,3,opt,name=platFormType,proto3" json:"platFormType"`
	ProjectId      int64  `protobuf:"varint,4,opt,name=projectId,proto3" json:"projectId"`
	Year           int64  `protobuf:"varint,5,opt,name=year,proto3" json:"year"`
}

func (x *ReportDashboardYearReq) Reset() {
	*x = ReportDashboardYearReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[557]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDashboardYearReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDashboardYearReq) ProtoMessage() {}

func (x *ReportDashboardYearReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[557]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDashboardYearReq.ProtoReflect.Descriptor instead.
func (*ReportDashboardYearReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{557}
}

func (x *ReportDashboardYearReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ReportDashboardYearReq) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *ReportDashboardYearReq) GetPlatFormType() string {
	if x != nil {
		return x.PlatFormType
	}
	return ""
}

func (x *ReportDashboardYearReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ReportDashboardYearReq) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

type ReportDashboardMonthReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId      int64  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	OrganizationId int64  `protobuf:"varint,2,opt,name=organizationId,proto3" json:"organizationId"`
	PlatFormType   string `protobuf:"bytes,3,opt,name=platFormType,proto3" json:"platFormType"`
	ProjectId      int64  `protobuf:"varint,4,opt,name=projectId,proto3" json:"projectId"`
	Year           int64  `protobuf:"varint,5,opt,name=year,proto3" json:"year"`
	Month          int64  `protobuf:"varint,6,opt,name=month,proto3" json:"month"`
}

func (x *ReportDashboardMonthReq) Reset() {
	*x = ReportDashboardMonthReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[558]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDashboardMonthReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDashboardMonthReq) ProtoMessage() {}

func (x *ReportDashboardMonthReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[558]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDashboardMonthReq.ProtoReflect.Descriptor instead.
func (*ReportDashboardMonthReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{558}
}

func (x *ReportDashboardMonthReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ReportDashboardMonthReq) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *ReportDashboardMonthReq) GetPlatFormType() string {
	if x != nil {
		return x.PlatFormType
	}
	return ""
}

func (x *ReportDashboardMonthReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ReportDashboardMonthReq) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ReportDashboardMonthReq) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

type ReportDashboardInvoiceYearResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year              int64   `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	TotalReceived     int64   `protobuf:"varint,2,opt,name=totalReceived,proto3" json:"totalReceived"`
	TotalPaid         int64   `protobuf:"varint,3,opt,name=totalPaid,proto3" json:"totalPaid"`
	ListMonthReceived []int64 `protobuf:"varint,4,rep,packed,name=listMonthReceived,proto3" json:"listMonthReceived"`
	ListMonthPaid     []int64 `protobuf:"varint,5,rep,packed,name=listMonthPaid,proto3" json:"listMonthPaid"`
}

func (x *ReportDashboardInvoiceYearResp) Reset() {
	*x = ReportDashboardInvoiceYearResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[559]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDashboardInvoiceYearResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDashboardInvoiceYearResp) ProtoMessage() {}

func (x *ReportDashboardInvoiceYearResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[559]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDashboardInvoiceYearResp.ProtoReflect.Descriptor instead.
func (*ReportDashboardInvoiceYearResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{559}
}

func (x *ReportDashboardInvoiceYearResp) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ReportDashboardInvoiceYearResp) GetTotalReceived() int64 {
	if x != nil {
		return x.TotalReceived
	}
	return 0
}

func (x *ReportDashboardInvoiceYearResp) GetTotalPaid() int64 {
	if x != nil {
		return x.TotalPaid
	}
	return 0
}

func (x *ReportDashboardInvoiceYearResp) GetListMonthReceived() []int64 {
	if x != nil {
		return x.ListMonthReceived
	}
	return nil
}

func (x *ReportDashboardInvoiceYearResp) GetListMonthPaid() []int64 {
	if x != nil {
		return x.ListMonthPaid
	}
	return nil
}

type ReportDashboardInvoiceMonthResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year            int64   `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month           int64   `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	TotalReceived   int64   `protobuf:"varint,3,opt,name=totalReceived,proto3" json:"totalReceived"`
	TotalPaid       int64   `protobuf:"varint,4,opt,name=totalPaid,proto3" json:"totalPaid"`
	ListDayReceived []int64 `protobuf:"varint,5,rep,packed,name=listDayReceived,proto3" json:"listDayReceived"`
	ListDayPaid     []int64 `protobuf:"varint,6,rep,packed,name=listDayPaid,proto3" json:"listDayPaid"`
}

func (x *ReportDashboardInvoiceMonthResp) Reset() {
	*x = ReportDashboardInvoiceMonthResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[560]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDashboardInvoiceMonthResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDashboardInvoiceMonthResp) ProtoMessage() {}

func (x *ReportDashboardInvoiceMonthResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[560]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDashboardInvoiceMonthResp.ProtoReflect.Descriptor instead.
func (*ReportDashboardInvoiceMonthResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{560}
}

func (x *ReportDashboardInvoiceMonthResp) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ReportDashboardInvoiceMonthResp) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ReportDashboardInvoiceMonthResp) GetTotalReceived() int64 {
	if x != nil {
		return x.TotalReceived
	}
	return 0
}

func (x *ReportDashboardInvoiceMonthResp) GetTotalPaid() int64 {
	if x != nil {
		return x.TotalPaid
	}
	return 0
}

func (x *ReportDashboardInvoiceMonthResp) GetListDayReceived() []int64 {
	if x != nil {
		return x.ListDayReceived
	}
	return nil
}

func (x *ReportDashboardInvoiceMonthResp) GetListDayPaid() []int64 {
	if x != nil {
		return x.ListDayPaid
	}
	return nil
}

type ReportDashboardInspectionYearResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year               int64   `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Total              int64   `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	TotalQualified     int64   `protobuf:"varint,3,opt,name=totalQualified,proto3" json:"totalQualified"`
	ListMonthTotal     []int64 `protobuf:"varint,4,rep,packed,name=listMonthTotal,proto3" json:"listMonthTotal"`
	ListMonthQualified []int64 `protobuf:"varint,5,rep,packed,name=listMonthQualified,proto3" json:"listMonthQualified"`
}

func (x *ReportDashboardInspectionYearResp) Reset() {
	*x = ReportDashboardInspectionYearResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[561]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDashboardInspectionYearResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDashboardInspectionYearResp) ProtoMessage() {}

func (x *ReportDashboardInspectionYearResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[561]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDashboardInspectionYearResp.ProtoReflect.Descriptor instead.
func (*ReportDashboardInspectionYearResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{561}
}

func (x *ReportDashboardInspectionYearResp) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ReportDashboardInspectionYearResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ReportDashboardInspectionYearResp) GetTotalQualified() int64 {
	if x != nil {
		return x.TotalQualified
	}
	return 0
}

func (x *ReportDashboardInspectionYearResp) GetListMonthTotal() []int64 {
	if x != nil {
		return x.ListMonthTotal
	}
	return nil
}

func (x *ReportDashboardInspectionYearResp) GetListMonthQualified() []int64 {
	if x != nil {
		return x.ListMonthQualified
	}
	return nil
}

type ReportDashboardInspectionMonthResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year             int64   `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month            int64   `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	Total            int64   `protobuf:"varint,3,opt,name=total,proto3" json:"total"`
	TotalQualified   int64   `protobuf:"varint,4,opt,name=totalQualified,proto3" json:"totalQualified"`
	ListDayTotal     []int64 `protobuf:"varint,5,rep,packed,name=listDayTotal,proto3" json:"listDayTotal"`
	ListDayQualified []int64 `protobuf:"varint,6,rep,packed,name=listDayQualified,proto3" json:"listDayQualified"`
}

func (x *ReportDashboardInspectionMonthResp) Reset() {
	*x = ReportDashboardInspectionMonthResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[562]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDashboardInspectionMonthResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDashboardInspectionMonthResp) ProtoMessage() {}

func (x *ReportDashboardInspectionMonthResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[562]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDashboardInspectionMonthResp.ProtoReflect.Descriptor instead.
func (*ReportDashboardInspectionMonthResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{562}
}

func (x *ReportDashboardInspectionMonthResp) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ReportDashboardInspectionMonthResp) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ReportDashboardInspectionMonthResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ReportDashboardInspectionMonthResp) GetTotalQualified() int64 {
	if x != nil {
		return x.TotalQualified
	}
	return 0
}

func (x *ReportDashboardInspectionMonthResp) GetListDayTotal() []int64 {
	if x != nil {
		return x.ListDayTotal
	}
	return nil
}

func (x *ReportDashboardInspectionMonthResp) GetListDayQualified() []int64 {
	if x != nil {
		return x.ListDayQualified
	}
	return nil
}

type ReportDashboardProcessYearResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year              int64   `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	TotalApplied      int64   `protobuf:"varint,2,opt,name=totalApplied,proto3" json:"totalApplied"`
	TotalApproved     int64   `protobuf:"varint,3,opt,name=totalApproved,proto3" json:"totalApproved"`
	ListMonthApplied  []int64 `protobuf:"varint,4,rep,packed,name=listMonthApplied,proto3" json:"listMonthApplied"`
	ListMonthApproved []int64 `protobuf:"varint,5,rep,packed,name=listMonthApproved,proto3" json:"listMonthApproved"`
}

func (x *ReportDashboardProcessYearResp) Reset() {
	*x = ReportDashboardProcessYearResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[563]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDashboardProcessYearResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDashboardProcessYearResp) ProtoMessage() {}

func (x *ReportDashboardProcessYearResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[563]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDashboardProcessYearResp.ProtoReflect.Descriptor instead.
func (*ReportDashboardProcessYearResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{563}
}

func (x *ReportDashboardProcessYearResp) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ReportDashboardProcessYearResp) GetTotalApplied() int64 {
	if x != nil {
		return x.TotalApplied
	}
	return 0
}

func (x *ReportDashboardProcessYearResp) GetTotalApproved() int64 {
	if x != nil {
		return x.TotalApproved
	}
	return 0
}

func (x *ReportDashboardProcessYearResp) GetListMonthApplied() []int64 {
	if x != nil {
		return x.ListMonthApplied
	}
	return nil
}

func (x *ReportDashboardProcessYearResp) GetListMonthApproved() []int64 {
	if x != nil {
		return x.ListMonthApproved
	}
	return nil
}

type ReportDashboardProcessMonthResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year            int64   `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month           int64   `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	TotalApplied    int64   `protobuf:"varint,3,opt,name=totalApplied,proto3" json:"totalApplied"`
	TotalApproved   int64   `protobuf:"varint,4,opt,name=totalApproved,proto3" json:"totalApproved"`
	ListDayApplied  []int64 `protobuf:"varint,5,rep,packed,name=listDayApplied,proto3" json:"listDayApplied"`
	ListDayApproved []int64 `protobuf:"varint,6,rep,packed,name=listDayApproved,proto3" json:"listDayApproved"`
}

func (x *ReportDashboardProcessMonthResp) Reset() {
	*x = ReportDashboardProcessMonthResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[564]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDashboardProcessMonthResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDashboardProcessMonthResp) ProtoMessage() {}

func (x *ReportDashboardProcessMonthResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[564]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDashboardProcessMonthResp.ProtoReflect.Descriptor instead.
func (*ReportDashboardProcessMonthResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{564}
}

func (x *ReportDashboardProcessMonthResp) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ReportDashboardProcessMonthResp) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ReportDashboardProcessMonthResp) GetTotalApplied() int64 {
	if x != nil {
		return x.TotalApplied
	}
	return 0
}

func (x *ReportDashboardProcessMonthResp) GetTotalApproved() int64 {
	if x != nil {
		return x.TotalApproved
	}
	return 0
}

func (x *ReportDashboardProcessMonthResp) GetListDayApplied() []int64 {
	if x != nil {
		return x.ListDayApplied
	}
	return nil
}

func (x *ReportDashboardProcessMonthResp) GetListDayApproved() []int64 {
	if x != nil {
		return x.ListDayApproved
	}
	return nil
}

type ReportDashboardAttendanceYearResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year               int64   `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	TotalWorkerman     int64   `protobuf:"varint,2,opt,name=totalWorkerman,proto3" json:"totalWorkerman"`
	TotalManager       int64   `protobuf:"varint,3,opt,name=totalManager,proto3" json:"totalManager"`
	ListMonthWorkerman []int64 `protobuf:"varint,4,rep,packed,name=listMonthWorkerman,proto3" json:"listMonthWorkerman"`
	ListMonthManager   []int64 `protobuf:"varint,5,rep,packed,name=listMonthManager,proto3" json:"listMonthManager"`
}

func (x *ReportDashboardAttendanceYearResp) Reset() {
	*x = ReportDashboardAttendanceYearResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[565]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDashboardAttendanceYearResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDashboardAttendanceYearResp) ProtoMessage() {}

func (x *ReportDashboardAttendanceYearResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[565]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDashboardAttendanceYearResp.ProtoReflect.Descriptor instead.
func (*ReportDashboardAttendanceYearResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{565}
}

func (x *ReportDashboardAttendanceYearResp) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ReportDashboardAttendanceYearResp) GetTotalWorkerman() int64 {
	if x != nil {
		return x.TotalWorkerman
	}
	return 0
}

func (x *ReportDashboardAttendanceYearResp) GetTotalManager() int64 {
	if x != nil {
		return x.TotalManager
	}
	return 0
}

func (x *ReportDashboardAttendanceYearResp) GetListMonthWorkerman() []int64 {
	if x != nil {
		return x.ListMonthWorkerman
	}
	return nil
}

func (x *ReportDashboardAttendanceYearResp) GetListMonthManager() []int64 {
	if x != nil {
		return x.ListMonthManager
	}
	return nil
}

type ReportDashboardAttendanceMonthResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year             int64   `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month            int64   `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	TotalWorkerman   int64   `protobuf:"varint,3,opt,name=totalWorkerman,proto3" json:"totalWorkerman"`
	TotalManager     int64   `protobuf:"varint,4,opt,name=totalManager,proto3" json:"totalManager"`
	ListDayWorkerman []int64 `protobuf:"varint,5,rep,packed,name=listDayWorkerman,proto3" json:"listDayWorkerman"`
	ListDayManager   []int64 `protobuf:"varint,6,rep,packed,name=listDayManager,proto3" json:"listDayManager"`
}

func (x *ReportDashboardAttendanceMonthResp) Reset() {
	*x = ReportDashboardAttendanceMonthResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[566]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDashboardAttendanceMonthResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDashboardAttendanceMonthResp) ProtoMessage() {}

func (x *ReportDashboardAttendanceMonthResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[566]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDashboardAttendanceMonthResp.ProtoReflect.Descriptor instead.
func (*ReportDashboardAttendanceMonthResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{566}
}

func (x *ReportDashboardAttendanceMonthResp) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ReportDashboardAttendanceMonthResp) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ReportDashboardAttendanceMonthResp) GetTotalWorkerman() int64 {
	if x != nil {
		return x.TotalWorkerman
	}
	return 0
}

func (x *ReportDashboardAttendanceMonthResp) GetTotalManager() int64 {
	if x != nil {
		return x.TotalManager
	}
	return 0
}

func (x *ReportDashboardAttendanceMonthResp) GetListDayWorkerman() []int64 {
	if x != nil {
		return x.ListDayWorkerman
	}
	return nil
}

func (x *ReportDashboardAttendanceMonthResp) GetListDayManager() []int64 {
	if x != nil {
		return x.ListDayManager
	}
	return nil
}

type ReportDashboardRankYearReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ProjectId int64 `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId"`
	Top       int64 `protobuf:"varint,3,opt,name=top,proto3" json:"top"`
	Year      int64 `protobuf:"varint,4,opt,name=year,proto3" json:"year"`
}

func (x *ReportDashboardRankYearReq) Reset() {
	*x = ReportDashboardRankYearReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[567]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDashboardRankYearReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDashboardRankYearReq) ProtoMessage() {}

func (x *ReportDashboardRankYearReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[567]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDashboardRankYearReq.ProtoReflect.Descriptor instead.
func (*ReportDashboardRankYearReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{567}
}

func (x *ReportDashboardRankYearReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ReportDashboardRankYearReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ReportDashboardRankYearReq) GetTop() int64 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *ReportDashboardRankYearReq) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

type ReportDashboardRankMonthReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ProjectId int64 `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId"`
	Top       int64 `protobuf:"varint,3,opt,name=top,proto3" json:"top"`
	Year      int64 `protobuf:"varint,4,opt,name=year,proto3" json:"year"`
	Month     int64 `protobuf:"varint,5,opt,name=month,proto3" json:"month"`
}

func (x *ReportDashboardRankMonthReq) Reset() {
	*x = ReportDashboardRankMonthReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[568]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDashboardRankMonthReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDashboardRankMonthReq) ProtoMessage() {}

func (x *ReportDashboardRankMonthReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[568]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDashboardRankMonthReq.ProtoReflect.Descriptor instead.
func (*ReportDashboardRankMonthReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{568}
}

func (x *ReportDashboardRankMonthReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ReportDashboardRankMonthReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ReportDashboardRankMonthReq) GetTop() int64 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *ReportDashboardRankMonthReq) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ReportDashboardRankMonthReq) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

type DashboardRankMaterialYearVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year              int64   `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Rank              int64   `protobuf:"varint,2,opt,name=rank,proto3" json:"rank"`
	MaterialType      string  `protobuf:"bytes,3,opt,name=materialType,proto3" json:"materialType"`
	MaterialName      string  `protobuf:"bytes,4,opt,name=materialName,proto3" json:"materialName"`
	MaterialUnit      string  `protobuf:"bytes,5,opt,name=materialUnit,proto3" json:"materialUnit"`
	TotalQuantity     int64   `protobuf:"varint,6,opt,name=totalQuantity,proto3" json:"totalQuantity"`
	ListMonthQuantity []int64 `protobuf:"varint,7,rep,packed,name=listMonthQuantity,proto3" json:"listMonthQuantity"`
}

func (x *DashboardRankMaterialYearVo) Reset() {
	*x = DashboardRankMaterialYearVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[569]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardRankMaterialYearVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardRankMaterialYearVo) ProtoMessage() {}

func (x *DashboardRankMaterialYearVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[569]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardRankMaterialYearVo.ProtoReflect.Descriptor instead.
func (*DashboardRankMaterialYearVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{569}
}

func (x *DashboardRankMaterialYearVo) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *DashboardRankMaterialYearVo) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *DashboardRankMaterialYearVo) GetMaterialType() string {
	if x != nil {
		return x.MaterialType
	}
	return ""
}

func (x *DashboardRankMaterialYearVo) GetMaterialName() string {
	if x != nil {
		return x.MaterialName
	}
	return ""
}

func (x *DashboardRankMaterialYearVo) GetMaterialUnit() string {
	if x != nil {
		return x.MaterialUnit
	}
	return ""
}

func (x *DashboardRankMaterialYearVo) GetTotalQuantity() int64 {
	if x != nil {
		return x.TotalQuantity
	}
	return 0
}

func (x *DashboardRankMaterialYearVo) GetListMonthQuantity() []int64 {
	if x != nil {
		return x.ListMonthQuantity
	}
	return nil
}

type ReportDashboardRankMaterialYearResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*DashboardRankMaterialYearVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
}

func (x *ReportDashboardRankMaterialYearResp) Reset() {
	*x = ReportDashboardRankMaterialYearResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[570]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDashboardRankMaterialYearResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDashboardRankMaterialYearResp) ProtoMessage() {}

func (x *ReportDashboardRankMaterialYearResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[570]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDashboardRankMaterialYearResp.ProtoReflect.Descriptor instead.
func (*ReportDashboardRankMaterialYearResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{570}
}

func (x *ReportDashboardRankMaterialYearResp) GetList() []*DashboardRankMaterialYearVo {
	if x != nil {
		return x.List
	}
	return nil
}

type DashboardRankMaterialMonthVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year            int64   `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month           int64   `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	Rank            int64   `protobuf:"varint,3,opt,name=rank,proto3" json:"rank"`
	MaterialType    string  `protobuf:"bytes,4,opt,name=materialType,proto3" json:"materialType"`
	MaterialName    string  `protobuf:"bytes,5,opt,name=materialName,proto3" json:"materialName"`
	MaterialUnit    string  `protobuf:"bytes,6,opt,name=materialUnit,proto3" json:"materialUnit"`
	TotalQuantity   int64   `protobuf:"varint,7,opt,name=totalQuantity,proto3" json:"totalQuantity"`
	ListDayQuantity []int64 `protobuf:"varint,8,rep,packed,name=listDayQuantity,proto3" json:"listDayQuantity"`
}

func (x *DashboardRankMaterialMonthVo) Reset() {
	*x = DashboardRankMaterialMonthVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[571]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardRankMaterialMonthVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardRankMaterialMonthVo) ProtoMessage() {}

func (x *DashboardRankMaterialMonthVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[571]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardRankMaterialMonthVo.ProtoReflect.Descriptor instead.
func (*DashboardRankMaterialMonthVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{571}
}

func (x *DashboardRankMaterialMonthVo) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *DashboardRankMaterialMonthVo) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *DashboardRankMaterialMonthVo) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *DashboardRankMaterialMonthVo) GetMaterialType() string {
	if x != nil {
		return x.MaterialType
	}
	return ""
}

func (x *DashboardRankMaterialMonthVo) GetMaterialName() string {
	if x != nil {
		return x.MaterialName
	}
	return ""
}

func (x *DashboardRankMaterialMonthVo) GetMaterialUnit() string {
	if x != nil {
		return x.MaterialUnit
	}
	return ""
}

func (x *DashboardRankMaterialMonthVo) GetTotalQuantity() int64 {
	if x != nil {
		return x.TotalQuantity
	}
	return 0
}

func (x *DashboardRankMaterialMonthVo) GetListDayQuantity() []int64 {
	if x != nil {
		return x.ListDayQuantity
	}
	return nil
}

type ReportDashboardRankMaterialMonthResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*DashboardRankMaterialMonthVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
}

func (x *ReportDashboardRankMaterialMonthResp) Reset() {
	*x = ReportDashboardRankMaterialMonthResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[572]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDashboardRankMaterialMonthResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDashboardRankMaterialMonthResp) ProtoMessage() {}

func (x *ReportDashboardRankMaterialMonthResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[572]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDashboardRankMaterialMonthResp.ProtoReflect.Descriptor instead.
func (*ReportDashboardRankMaterialMonthResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{572}
}

func (x *ReportDashboardRankMaterialMonthResp) GetList() []*DashboardRankMaterialMonthVo {
	if x != nil {
		return x.List
	}
	return nil
}

type ListDashboardProcessReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartAt        *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=startAt,proto3" json:"startAt"`
	EndAt          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=endAt,proto3" json:"endAt"`
	ManagerId      int64                  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
	ProjectId      int64                  `protobuf:"varint,4,opt,name=projectId,proto3" json:"projectId"`
	ProjectPhaseId int64                  `protobuf:"varint,5,opt,name=projectPhaseId,proto3" json:"projectPhaseId"`
	Page           *Page                  `protobuf:"bytes,6,opt,name=page,proto3" json:"page"`
}

func (x *ListDashboardProcessReq) Reset() {
	*x = ListDashboardProcessReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[573]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDashboardProcessReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDashboardProcessReq) ProtoMessage() {}

func (x *ListDashboardProcessReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[573]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDashboardProcessReq.ProtoReflect.Descriptor instead.
func (*ListDashboardProcessReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{573}
}

func (x *ListDashboardProcessReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *ListDashboardProcessReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *ListDashboardProcessReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListDashboardProcessReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListDashboardProcessReq) GetProjectPhaseId() int64 {
	if x != nil {
		return x.ProjectPhaseId
	}
	return 0
}

func (x *ListDashboardProcessReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ListDashboardProcessResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListMain          []*ListProcessVo `protobuf:"bytes,1,rep,name=listMain,proto3" json:"listMain"`
	ListParallel      []*ListProcessVo `protobuf:"bytes,2,rep,name=listParallel,proto3" json:"listParallel"`
	ListCrossParallel []*ListProcessVo `protobuf:"bytes,3,rep,name=listCrossParallel,proto3" json:"listCrossParallel"`
}

func (x *ListDashboardProcessResp) Reset() {
	*x = ListDashboardProcessResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[574]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDashboardProcessResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDashboardProcessResp) ProtoMessage() {}

func (x *ListDashboardProcessResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[574]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDashboardProcessResp.ProtoReflect.Descriptor instead.
func (*ListDashboardProcessResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{574}
}

func (x *ListDashboardProcessResp) GetListMain() []*ListProcessVo {
	if x != nil {
		return x.ListMain
	}
	return nil
}

func (x *ListDashboardProcessResp) GetListParallel() []*ListProcessVo {
	if x != nil {
		return x.ListParallel
	}
	return nil
}

func (x *ListDashboardProcessResp) GetListCrossParallel() []*ListProcessVo {
	if x != nil {
		return x.ListCrossParallel
	}
	return nil
}

type SafetyInspectionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SafetyInspectionId       int64                  `protobuf:"varint,1,opt,name=safetyInspectionId,proto3" json:"safetyInspectionId"`
	SafetyInspectionCode     string                 `protobuf:"bytes,2,opt,name=safetyInspectionCode,proto3" json:"safetyInspectionCode"`
	ProjectId                int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	FromOrganizationId       int64                  `protobuf:"varint,4,opt,name=fromOrganizationId,proto3" json:"fromOrganizationId"`
	FromPlatFormType         string                 `protobuf:"bytes,5,opt,name=fromPlatFormType,proto3" json:"fromPlatFormType"`
	ToOrganizationId         int64                  `protobuf:"varint,6,opt,name=toOrganizationId,proto3" json:"toOrganizationId"`
	ToPlatFormType           string                 `protobuf:"bytes,7,opt,name=toPlatFormType,proto3" json:"toPlatFormType"`
	SafetyInspector          string                 `protobuf:"bytes,8,opt,name=safetyInspector,proto3" json:"safetyInspector"`
	InspectionDate           *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=inspectionDate,proto3" json:"inspectionDate"`
	InspectionArea           string                 `protobuf:"bytes,10,opt,name=inspectionArea,proto3" json:"inspectionArea"`
	InspectionSituation      string                 `protobuf:"bytes,11,opt,name=inspectionSituation,proto3" json:"inspectionSituation"`
	InspectionHandle         string                 `protobuf:"bytes,12,opt,name=inspectionHandle,proto3" json:"inspectionHandle"`
	InspectionResult         string                 `protobuf:"bytes,13,opt,name=inspectionResult,proto3" json:"inspectionResult"`
	InspectionBy             int64                  `protobuf:"varint,14,opt,name=inspectionBy,proto3" json:"inspectionBy"`
	InspectionAt             *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=inspectionAt,proto3" json:"inspectionAt"`
	SafetyStatus             string                 `protobuf:"bytes,16,opt,name=safetyStatus,proto3" json:"safetyStatus"`
	AssignedPerson           string                 `protobuf:"bytes,17,opt,name=assignedPerson,proto3" json:"assignedPerson"`
	AssignedDate             *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=assignedDate,proto3" json:"assignedDate"`
	AssignedDesc             string                 `protobuf:"bytes,19,opt,name=assignedDesc,proto3" json:"assignedDesc"`
	Duration                 int64                  `protobuf:"varint,20,opt,name=duration,proto3" json:"duration"`
	RectifyDeadline          *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=rectifyDeadline,proto3" json:"rectifyDeadline"`
	RectifyDeadlineWarn      *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=rectifyDeadlineWarn,proto3" json:"rectifyDeadlineWarn"`
	RectifyDate              *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=rectifyDate,proto3" json:"rectifyDate"`
	RectifyPerson            string                 `protobuf:"bytes,24,opt,name=rectifyPerson,proto3" json:"rectifyPerson"`
	RectifyDesc              string                 `protobuf:"bytes,25,opt,name=rectifyDesc,proto3" json:"rectifyDesc"`
	RectifyBy                int64                  `protobuf:"varint,26,opt,name=rectifyBy,proto3" json:"rectifyBy"`
	RectifyAt                *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=rectifyAt,proto3" json:"rectifyAt"`
	ReviewDate               *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=reviewDate,proto3" json:"reviewDate"`
	ReviewPerson             string                 `protobuf:"bytes,29,opt,name=reviewPerson,proto3" json:"reviewPerson"`
	ReviewDesc               string                 `protobuf:"bytes,30,opt,name=reviewDesc,proto3" json:"reviewDesc"`
	ReviewBy                 int64                  `protobuf:"varint,31,opt,name=reviewBy,proto3" json:"reviewBy"`
	ReviewAt                 *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=reviewAt,proto3" json:"reviewAt"`
	MainSafetyInspectionCode string                 `protobuf:"bytes,33,opt,name=mainSafetyInspectionCode,proto3" json:"mainSafetyInspectionCode"`
	ActiveStatus             string                 `protobuf:"bytes,34,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo                     string                 `protobuf:"bytes,35,opt,name=memo,proto3" json:"memo"`
	CreatedBy                int64                  `protobuf:"varint,36,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt                *timestamppb.Timestamp `protobuf:"bytes,37,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy                int64                  `protobuf:"varint,38,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt                *timestamppb.Timestamp `protobuf:"bytes,39,opt,name=updatedAt,proto3" json:"updatedAt"`
	UploadDocument           []*UploadDocumentInfo  `protobuf:"bytes,40,rep,name=uploadDocument,proto3" json:"uploadDocument"`
	InfoHash                 string                 `protobuf:"bytes,41,opt,name=infoHash,proto3" json:"infoHash"`
	ManagerId                int64                  `protobuf:"varint,42,opt,name=managerId,proto3" json:"managerId"`
}

func (x *SafetyInspectionReq) Reset() {
	*x = SafetyInspectionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[575]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafetyInspectionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafetyInspectionReq) ProtoMessage() {}

func (x *SafetyInspectionReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[575]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafetyInspectionReq.ProtoReflect.Descriptor instead.
func (*SafetyInspectionReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{575}
}

func (x *SafetyInspectionReq) GetSafetyInspectionId() int64 {
	if x != nil {
		return x.SafetyInspectionId
	}
	return 0
}

func (x *SafetyInspectionReq) GetSafetyInspectionCode() string {
	if x != nil {
		return x.SafetyInspectionCode
	}
	return ""
}

func (x *SafetyInspectionReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *SafetyInspectionReq) GetFromOrganizationId() int64 {
	if x != nil {
		return x.FromOrganizationId
	}
	return 0
}

func (x *SafetyInspectionReq) GetFromPlatFormType() string {
	if x != nil {
		return x.FromPlatFormType
	}
	return ""
}

func (x *SafetyInspectionReq) GetToOrganizationId() int64 {
	if x != nil {
		return x.ToOrganizationId
	}
	return 0
}

func (x *SafetyInspectionReq) GetToPlatFormType() string {
	if x != nil {
		return x.ToPlatFormType
	}
	return ""
}

func (x *SafetyInspectionReq) GetSafetyInspector() string {
	if x != nil {
		return x.SafetyInspector
	}
	return ""
}

func (x *SafetyInspectionReq) GetInspectionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InspectionDate
	}
	return nil
}

func (x *SafetyInspectionReq) GetInspectionArea() string {
	if x != nil {
		return x.InspectionArea
	}
	return ""
}

func (x *SafetyInspectionReq) GetInspectionSituation() string {
	if x != nil {
		return x.InspectionSituation
	}
	return ""
}

func (x *SafetyInspectionReq) GetInspectionHandle() string {
	if x != nil {
		return x.InspectionHandle
	}
	return ""
}

func (x *SafetyInspectionReq) GetInspectionResult() string {
	if x != nil {
		return x.InspectionResult
	}
	return ""
}

func (x *SafetyInspectionReq) GetInspectionBy() int64 {
	if x != nil {
		return x.InspectionBy
	}
	return 0
}

func (x *SafetyInspectionReq) GetInspectionAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InspectionAt
	}
	return nil
}

func (x *SafetyInspectionReq) GetSafetyStatus() string {
	if x != nil {
		return x.SafetyStatus
	}
	return ""
}

func (x *SafetyInspectionReq) GetAssignedPerson() string {
	if x != nil {
		return x.AssignedPerson
	}
	return ""
}

func (x *SafetyInspectionReq) GetAssignedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.AssignedDate
	}
	return nil
}

func (x *SafetyInspectionReq) GetAssignedDesc() string {
	if x != nil {
		return x.AssignedDesc
	}
	return ""
}

func (x *SafetyInspectionReq) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *SafetyInspectionReq) GetRectifyDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDeadline
	}
	return nil
}

func (x *SafetyInspectionReq) GetRectifyDeadlineWarn() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDeadlineWarn
	}
	return nil
}

func (x *SafetyInspectionReq) GetRectifyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDate
	}
	return nil
}

func (x *SafetyInspectionReq) GetRectifyPerson() string {
	if x != nil {
		return x.RectifyPerson
	}
	return ""
}

func (x *SafetyInspectionReq) GetRectifyDesc() string {
	if x != nil {
		return x.RectifyDesc
	}
	return ""
}

func (x *SafetyInspectionReq) GetRectifyBy() int64 {
	if x != nil {
		return x.RectifyBy
	}
	return 0
}

func (x *SafetyInspectionReq) GetRectifyAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyAt
	}
	return nil
}

func (x *SafetyInspectionReq) GetReviewDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReviewDate
	}
	return nil
}

func (x *SafetyInspectionReq) GetReviewPerson() string {
	if x != nil {
		return x.ReviewPerson
	}
	return ""
}

func (x *SafetyInspectionReq) GetReviewDesc() string {
	if x != nil {
		return x.ReviewDesc
	}
	return ""
}

func (x *SafetyInspectionReq) GetReviewBy() int64 {
	if x != nil {
		return x.ReviewBy
	}
	return 0
}

func (x *SafetyInspectionReq) GetReviewAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReviewAt
	}
	return nil
}

func (x *SafetyInspectionReq) GetMainSafetyInspectionCode() string {
	if x != nil {
		return x.MainSafetyInspectionCode
	}
	return ""
}

func (x *SafetyInspectionReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *SafetyInspectionReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *SafetyInspectionReq) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *SafetyInspectionReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SafetyInspectionReq) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *SafetyInspectionReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SafetyInspectionReq) GetUploadDocument() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocument
	}
	return nil
}

func (x *SafetyInspectionReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *SafetyInspectionReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type SafetyInspectionIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SafetyInspectionIds []int64 `protobuf:"varint,1,rep,packed,name=safetyInspectionIds,proto3" json:"safetyInspectionIds"`
	ManagerId           int64   `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *SafetyInspectionIdsReq) Reset() {
	*x = SafetyInspectionIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[576]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafetyInspectionIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafetyInspectionIdsReq) ProtoMessage() {}

func (x *SafetyInspectionIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[576]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafetyInspectionIdsReq.ProtoReflect.Descriptor instead.
func (*SafetyInspectionIdsReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{576}
}

func (x *SafetyInspectionIdsReq) GetSafetyInspectionIds() []int64 {
	if x != nil {
		return x.SafetyInspectionIds
	}
	return nil
}

func (x *SafetyInspectionIdsReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ListSafetyInspectionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SafetyInspectionId       int64                  `protobuf:"varint,1,opt,name=safetyInspectionId,proto3" json:"safetyInspectionId"`
	SafetyInspectionCode     string                 `protobuf:"bytes,2,opt,name=safetyInspectionCode,proto3" json:"safetyInspectionCode"`
	ProjectId                int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	FromOrganizationId       int64                  `protobuf:"varint,4,opt,name=fromOrganizationId,proto3" json:"fromOrganizationId"`
	FromPlatFormType         string                 `protobuf:"bytes,5,opt,name=fromPlatFormType,proto3" json:"fromPlatFormType"`
	ToOrganizationId         int64                  `protobuf:"varint,6,opt,name=toOrganizationId,proto3" json:"toOrganizationId"`
	ToPlatFormType           string                 `protobuf:"bytes,7,opt,name=toPlatFormType,proto3" json:"toPlatFormType"`
	SafetyInspector          string                 `protobuf:"bytes,8,opt,name=safetyInspector,proto3" json:"safetyInspector"`
	InspectionDate           *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=inspectionDate,proto3" json:"inspectionDate"`
	InspectionArea           string                 `protobuf:"bytes,10,opt,name=inspectionArea,proto3" json:"inspectionArea"`
	InspectionSituation      string                 `protobuf:"bytes,11,opt,name=inspectionSituation,proto3" json:"inspectionSituation"`
	InspectionHandle         string                 `protobuf:"bytes,12,opt,name=inspectionHandle,proto3" json:"inspectionHandle"`
	InspectionResult         string                 `protobuf:"bytes,13,opt,name=inspectionResult,proto3" json:"inspectionResult"`
	InspectionBy             int64                  `protobuf:"varint,14,opt,name=inspectionBy,proto3" json:"inspectionBy"`
	InspectionAt             *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=inspectionAt,proto3" json:"inspectionAt"`
	SafetyStatus             string                 `protobuf:"bytes,16,opt,name=safetyStatus,proto3" json:"safetyStatus"`
	AssignedPerson           string                 `protobuf:"bytes,17,opt,name=assignedPerson,proto3" json:"assignedPerson"`
	AssignedDate             *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=assignedDate,proto3" json:"assignedDate"`
	AssignedDesc             string                 `protobuf:"bytes,19,opt,name=assignedDesc,proto3" json:"assignedDesc"`
	Duration                 int64                  `protobuf:"varint,20,opt,name=duration,proto3" json:"duration"`
	RectifyDeadline          *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=rectifyDeadline,proto3" json:"rectifyDeadline"`
	RectifyDeadlineWarn      *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=rectifyDeadlineWarn,proto3" json:"rectifyDeadlineWarn"`
	RectifyDate              *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=rectifyDate,proto3" json:"rectifyDate"`
	RectifyPerson            string                 `protobuf:"bytes,24,opt,name=rectifyPerson,proto3" json:"rectifyPerson"`
	RectifyDesc              string                 `protobuf:"bytes,25,opt,name=rectifyDesc,proto3" json:"rectifyDesc"`
	RectifyBy                int64                  `protobuf:"varint,26,opt,name=rectifyBy,proto3" json:"rectifyBy"`
	RectifyAt                *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=rectifyAt,proto3" json:"rectifyAt"`
	ReviewDate               *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=reviewDate,proto3" json:"reviewDate"`
	ReviewPerson             string                 `protobuf:"bytes,29,opt,name=reviewPerson,proto3" json:"reviewPerson"`
	ReviewDesc               string                 `protobuf:"bytes,30,opt,name=reviewDesc,proto3" json:"reviewDesc"`
	ReviewBy                 int64                  `protobuf:"varint,31,opt,name=reviewBy,proto3" json:"reviewBy"`
	ReviewAt                 *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=reviewAt,proto3" json:"reviewAt"`
	MainSafetyInspectionCode string                 `protobuf:"bytes,33,opt,name=mainSafetyInspectionCode,proto3" json:"mainSafetyInspectionCode"`
	ActiveStatus             string                 `protobuf:"bytes,34,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo                     string                 `protobuf:"bytes,35,opt,name=memo,proto3" json:"memo"`
	CreatedBy                int64                  `protobuf:"varint,36,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt                *timestamppb.Timestamp `protobuf:"bytes,37,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy                int64                  `protobuf:"varint,38,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt                *timestamppb.Timestamp `protobuf:"bytes,39,opt,name=updatedAt,proto3" json:"updatedAt"`
	ProjectName              string                 `protobuf:"bytes,40,opt,name=projectName,proto3" json:"projectName"`
	FromOrganizationName     string                 `protobuf:"bytes,41,opt,name=fromOrganizationName,proto3" json:"fromOrganizationName"`
	ToOrganizationName       string                 `protobuf:"bytes,42,opt,name=toOrganizationName,proto3" json:"toOrganizationName"`
	ManagerId                int64                  `protobuf:"varint,43,opt,name=managerId,proto3" json:"managerId"`
	Page                     *Page                  `protobuf:"bytes,44,opt,name=page,proto3" json:"page"`
	InspectionStartAt        *timestamppb.Timestamp `protobuf:"bytes,45,opt,name=inspectionStartAt,proto3" json:"inspectionStartAt"`
	InspectionEndAt          *timestamppb.Timestamp `protobuf:"bytes,46,opt,name=inspectionEndAt,proto3" json:"inspectionEndAt"`
	AssignedStartAt          *timestamppb.Timestamp `protobuf:"bytes,47,opt,name=assignedStartAt,proto3" json:"assignedStartAt"`
	AssignedEndAt            *timestamppb.Timestamp `protobuf:"bytes,48,opt,name=assignedEndAt,proto3" json:"assignedEndAt"`
	RectifyDateStartAt       *timestamppb.Timestamp `protobuf:"bytes,49,opt,name=rectifyDateStartAt,proto3" json:"rectifyDateStartAt"`
	RectifyDateEndAt         *timestamppb.Timestamp `protobuf:"bytes,50,opt,name=rectifyDateEndAt,proto3" json:"rectifyDateEndAt"`
}

func (x *ListSafetyInspectionReq) Reset() {
	*x = ListSafetyInspectionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[577]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSafetyInspectionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSafetyInspectionReq) ProtoMessage() {}

func (x *ListSafetyInspectionReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[577]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSafetyInspectionReq.ProtoReflect.Descriptor instead.
func (*ListSafetyInspectionReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{577}
}

func (x *ListSafetyInspectionReq) GetSafetyInspectionId() int64 {
	if x != nil {
		return x.SafetyInspectionId
	}
	return 0
}

func (x *ListSafetyInspectionReq) GetSafetyInspectionCode() string {
	if x != nil {
		return x.SafetyInspectionCode
	}
	return ""
}

func (x *ListSafetyInspectionReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListSafetyInspectionReq) GetFromOrganizationId() int64 {
	if x != nil {
		return x.FromOrganizationId
	}
	return 0
}

func (x *ListSafetyInspectionReq) GetFromPlatFormType() string {
	if x != nil {
		return x.FromPlatFormType
	}
	return ""
}

func (x *ListSafetyInspectionReq) GetToOrganizationId() int64 {
	if x != nil {
		return x.ToOrganizationId
	}
	return 0
}

func (x *ListSafetyInspectionReq) GetToPlatFormType() string {
	if x != nil {
		return x.ToPlatFormType
	}
	return ""
}

func (x *ListSafetyInspectionReq) GetSafetyInspector() string {
	if x != nil {
		return x.SafetyInspector
	}
	return ""
}

func (x *ListSafetyInspectionReq) GetInspectionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InspectionDate
	}
	return nil
}

func (x *ListSafetyInspectionReq) GetInspectionArea() string {
	if x != nil {
		return x.InspectionArea
	}
	return ""
}

func (x *ListSafetyInspectionReq) GetInspectionSituation() string {
	if x != nil {
		return x.InspectionSituation
	}
	return ""
}

func (x *ListSafetyInspectionReq) GetInspectionHandle() string {
	if x != nil {
		return x.InspectionHandle
	}
	return ""
}

func (x *ListSafetyInspectionReq) GetInspectionResult() string {
	if x != nil {
		return x.InspectionResult
	}
	return ""
}

func (x *ListSafetyInspectionReq) GetInspectionBy() int64 {
	if x != nil {
		return x.InspectionBy
	}
	return 0
}

func (x *ListSafetyInspectionReq) GetInspectionAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InspectionAt
	}
	return nil
}

func (x *ListSafetyInspectionReq) GetSafetyStatus() string {
	if x != nil {
		return x.SafetyStatus
	}
	return ""
}

func (x *ListSafetyInspectionReq) GetAssignedPerson() string {
	if x != nil {
		return x.AssignedPerson
	}
	return ""
}

func (x *ListSafetyInspectionReq) GetAssignedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.AssignedDate
	}
	return nil
}

func (x *ListSafetyInspectionReq) GetAssignedDesc() string {
	if x != nil {
		return x.AssignedDesc
	}
	return ""
}

func (x *ListSafetyInspectionReq) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ListSafetyInspectionReq) GetRectifyDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDeadline
	}
	return nil
}

func (x *ListSafetyInspectionReq) GetRectifyDeadlineWarn() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDeadlineWarn
	}
	return nil
}

func (x *ListSafetyInspectionReq) GetRectifyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDate
	}
	return nil
}

func (x *ListSafetyInspectionReq) GetRectifyPerson() string {
	if x != nil {
		return x.RectifyPerson
	}
	return ""
}

func (x *ListSafetyInspectionReq) GetRectifyDesc() string {
	if x != nil {
		return x.RectifyDesc
	}
	return ""
}

func (x *ListSafetyInspectionReq) GetRectifyBy() int64 {
	if x != nil {
		return x.RectifyBy
	}
	return 0
}

func (x *ListSafetyInspectionReq) GetRectifyAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyAt
	}
	return nil
}

func (x *ListSafetyInspectionReq) GetReviewDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReviewDate
	}
	return nil
}

func (x *ListSafetyInspectionReq) GetReviewPerson() string {
	if x != nil {
		return x.ReviewPerson
	}
	return ""
}

func (x *ListSafetyInspectionReq) GetReviewDesc() string {
	if x != nil {
		return x.ReviewDesc
	}
	return ""
}

func (x *ListSafetyInspectionReq) GetReviewBy() int64 {
	if x != nil {
		return x.ReviewBy
	}
	return 0
}

func (x *ListSafetyInspectionReq) GetReviewAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReviewAt
	}
	return nil
}

func (x *ListSafetyInspectionReq) GetMainSafetyInspectionCode() string {
	if x != nil {
		return x.MainSafetyInspectionCode
	}
	return ""
}

func (x *ListSafetyInspectionReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *ListSafetyInspectionReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *ListSafetyInspectionReq) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *ListSafetyInspectionReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListSafetyInspectionReq) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *ListSafetyInspectionReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ListSafetyInspectionReq) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ListSafetyInspectionReq) GetFromOrganizationName() string {
	if x != nil {
		return x.FromOrganizationName
	}
	return ""
}

func (x *ListSafetyInspectionReq) GetToOrganizationName() string {
	if x != nil {
		return x.ToOrganizationName
	}
	return ""
}

func (x *ListSafetyInspectionReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListSafetyInspectionReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListSafetyInspectionReq) GetInspectionStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InspectionStartAt
	}
	return nil
}

func (x *ListSafetyInspectionReq) GetInspectionEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InspectionEndAt
	}
	return nil
}

func (x *ListSafetyInspectionReq) GetAssignedStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AssignedStartAt
	}
	return nil
}

func (x *ListSafetyInspectionReq) GetAssignedEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AssignedEndAt
	}
	return nil
}

func (x *ListSafetyInspectionReq) GetRectifyDateStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDateStartAt
	}
	return nil
}

func (x *ListSafetyInspectionReq) GetRectifyDateEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDateEndAt
	}
	return nil
}

type OperateIntegerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *OperateIntegerResp) Reset() {
	*x = OperateIntegerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[578]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateIntegerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateIntegerResp) ProtoMessage() {}

func (x *OperateIntegerResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[578]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateIntegerResp.ProtoReflect.Descriptor instead.
func (*OperateIntegerResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{578}
}

func (x *OperateIntegerResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type SafetyInspectionsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*SafetyInspectionVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                 `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                 `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *SafetyInspectionsResp) Reset() {
	*x = SafetyInspectionsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[579]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafetyInspectionsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafetyInspectionsResp) ProtoMessage() {}

func (x *SafetyInspectionsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[579]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafetyInspectionsResp.ProtoReflect.Descriptor instead.
func (*SafetyInspectionsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{579}
}

func (x *SafetyInspectionsResp) GetList() []*SafetyInspectionVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *SafetyInspectionsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SafetyInspectionsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SafetyInspectionsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetSafetyInspectionHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*SafetyInspectionHashVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                     `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                     `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                     `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetSafetyInspectionHashResp) Reset() {
	*x = GetSafetyInspectionHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[580]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSafetyInspectionHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSafetyInspectionHashResp) ProtoMessage() {}

func (x *GetSafetyInspectionHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[580]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSafetyInspectionHashResp.ProtoReflect.Descriptor instead.
func (*GetSafetyInspectionHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{580}
}

func (x *GetSafetyInspectionHashResp) GetList() []*SafetyInspectionHashVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetSafetyInspectionHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetSafetyInspectionHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetSafetyInspectionHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type SafetyInspectionVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SafetyInspectionId       int64                   `protobuf:"varint,1,opt,name=safetyInspectionId,proto3" json:"safetyInspectionId"`
	SafetyInspectionCode     string                  `protobuf:"bytes,2,opt,name=safetyInspectionCode,proto3" json:"safetyInspectionCode"`
	ProjectId                int64                   `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	FromOrganizationId       int64                   `protobuf:"varint,4,opt,name=fromOrganizationId,proto3" json:"fromOrganizationId"`
	FromPlatFormType         string                  `protobuf:"bytes,5,opt,name=fromPlatFormType,proto3" json:"fromPlatFormType"`
	ToOrganizationId         int64                   `protobuf:"varint,6,opt,name=toOrganizationId,proto3" json:"toOrganizationId"`
	ToPlatFormType           string                  `protobuf:"bytes,7,opt,name=toPlatFormType,proto3" json:"toPlatFormType"`
	SafetyInspector          string                  `protobuf:"bytes,8,opt,name=safetyInspector,proto3" json:"safetyInspector"`
	InspectionDate           *timestamppb.Timestamp  `protobuf:"bytes,9,opt,name=inspectionDate,proto3" json:"inspectionDate"`
	InspectionArea           string                  `protobuf:"bytes,10,opt,name=inspectionArea,proto3" json:"inspectionArea"`
	InspectionSituation      string                  `protobuf:"bytes,11,opt,name=inspectionSituation,proto3" json:"inspectionSituation"`
	InspectionHandle         string                  `protobuf:"bytes,12,opt,name=inspectionHandle,proto3" json:"inspectionHandle"`
	InspectionResult         string                  `protobuf:"bytes,13,opt,name=inspectionResult,proto3" json:"inspectionResult"`
	InspectionBy             int64                   `protobuf:"varint,14,opt,name=inspectionBy,proto3" json:"inspectionBy"`
	InspectionAt             *timestamppb.Timestamp  `protobuf:"bytes,15,opt,name=inspectionAt,proto3" json:"inspectionAt"`
	SafetyStatus             string                  `protobuf:"bytes,16,opt,name=safetyStatus,proto3" json:"safetyStatus"`
	AssignedPerson           string                  `protobuf:"bytes,17,opt,name=assignedPerson,proto3" json:"assignedPerson"`
	AssignedDate             *timestamppb.Timestamp  `protobuf:"bytes,18,opt,name=assignedDate,proto3" json:"assignedDate"`
	AssignedDesc             string                  `protobuf:"bytes,19,opt,name=assignedDesc,proto3" json:"assignedDesc"`
	Duration                 int64                   `protobuf:"varint,20,opt,name=duration,proto3" json:"duration"`
	RectifyDeadline          *timestamppb.Timestamp  `protobuf:"bytes,21,opt,name=rectifyDeadline,proto3" json:"rectifyDeadline"`
	RectifyDeadlineWarn      *timestamppb.Timestamp  `protobuf:"bytes,22,opt,name=rectifyDeadlineWarn,proto3" json:"rectifyDeadlineWarn"`
	RectifyDate              *timestamppb.Timestamp  `protobuf:"bytes,23,opt,name=rectifyDate,proto3" json:"rectifyDate"`
	RectifyPerson            string                  `protobuf:"bytes,24,opt,name=rectifyPerson,proto3" json:"rectifyPerson"`
	RectifyDesc              string                  `protobuf:"bytes,25,opt,name=rectifyDesc,proto3" json:"rectifyDesc"`
	RectifyBy                int64                   `protobuf:"varint,26,opt,name=rectifyBy,proto3" json:"rectifyBy"`
	RectifyAt                *timestamppb.Timestamp  `protobuf:"bytes,27,opt,name=rectifyAt,proto3" json:"rectifyAt"`
	ReviewDate               *timestamppb.Timestamp  `protobuf:"bytes,28,opt,name=reviewDate,proto3" json:"reviewDate"`
	ReviewPerson             string                  `protobuf:"bytes,29,opt,name=reviewPerson,proto3" json:"reviewPerson"`
	ReviewDesc               string                  `protobuf:"bytes,30,opt,name=reviewDesc,proto3" json:"reviewDesc"`
	ReviewBy                 int64                   `protobuf:"varint,31,opt,name=reviewBy,proto3" json:"reviewBy"`
	ReviewAt                 *timestamppb.Timestamp  `protobuf:"bytes,32,opt,name=reviewAt,proto3" json:"reviewAt"`
	MainSafetyInspectionCode string                  `protobuf:"bytes,33,opt,name=mainSafetyInspectionCode,proto3" json:"mainSafetyInspectionCode"`
	ActiveStatus             string                  `protobuf:"bytes,34,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo                     string                  `protobuf:"bytes,35,opt,name=memo,proto3" json:"memo"`
	CreatedBy                int64                   `protobuf:"varint,36,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt                *timestamppb.Timestamp  `protobuf:"bytes,37,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy                int64                   `protobuf:"varint,38,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt                *timestamppb.Timestamp  `protobuf:"bytes,39,opt,name=updatedAt,proto3" json:"updatedAt"`
	ProjectName              string                  `protobuf:"bytes,40,opt,name=projectName,proto3" json:"projectName"`
	FromOrganizationName     string                  `protobuf:"bytes,41,opt,name=fromOrganizationName,proto3" json:"fromOrganizationName"`
	ToOrganizationName       string                  `protobuf:"bytes,42,opt,name=toOrganizationName,proto3" json:"toOrganizationName"`
	SafetyInspectionHash     *SafetyInspectionHashVo `protobuf:"bytes,43,opt,name=safetyInspectionHash,proto3" json:"safetyInspectionHash"`
	DocumentInspections      []*UploadDocumentInfo   `protobuf:"bytes,44,rep,name=documentInspections,proto3" json:"documentInspections"`
	DocumentRectifys         []*UploadDocumentInfo   `protobuf:"bytes,45,rep,name=documentRectifys,proto3" json:"documentRectifys"`
	DocumentReviews          []*UploadDocumentInfo   `protobuf:"bytes,46,rep,name=documentReviews,proto3" json:"documentReviews"`
}

func (x *SafetyInspectionVo) Reset() {
	*x = SafetyInspectionVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[581]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafetyInspectionVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafetyInspectionVo) ProtoMessage() {}

func (x *SafetyInspectionVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[581]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafetyInspectionVo.ProtoReflect.Descriptor instead.
func (*SafetyInspectionVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{581}
}

func (x *SafetyInspectionVo) GetSafetyInspectionId() int64 {
	if x != nil {
		return x.SafetyInspectionId
	}
	return 0
}

func (x *SafetyInspectionVo) GetSafetyInspectionCode() string {
	if x != nil {
		return x.SafetyInspectionCode
	}
	return ""
}

func (x *SafetyInspectionVo) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *SafetyInspectionVo) GetFromOrganizationId() int64 {
	if x != nil {
		return x.FromOrganizationId
	}
	return 0
}

func (x *SafetyInspectionVo) GetFromPlatFormType() string {
	if x != nil {
		return x.FromPlatFormType
	}
	return ""
}

func (x *SafetyInspectionVo) GetToOrganizationId() int64 {
	if x != nil {
		return x.ToOrganizationId
	}
	return 0
}

func (x *SafetyInspectionVo) GetToPlatFormType() string {
	if x != nil {
		return x.ToPlatFormType
	}
	return ""
}

func (x *SafetyInspectionVo) GetSafetyInspector() string {
	if x != nil {
		return x.SafetyInspector
	}
	return ""
}

func (x *SafetyInspectionVo) GetInspectionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InspectionDate
	}
	return nil
}

func (x *SafetyInspectionVo) GetInspectionArea() string {
	if x != nil {
		return x.InspectionArea
	}
	return ""
}

func (x *SafetyInspectionVo) GetInspectionSituation() string {
	if x != nil {
		return x.InspectionSituation
	}
	return ""
}

func (x *SafetyInspectionVo) GetInspectionHandle() string {
	if x != nil {
		return x.InspectionHandle
	}
	return ""
}

func (x *SafetyInspectionVo) GetInspectionResult() string {
	if x != nil {
		return x.InspectionResult
	}
	return ""
}

func (x *SafetyInspectionVo) GetInspectionBy() int64 {
	if x != nil {
		return x.InspectionBy
	}
	return 0
}

func (x *SafetyInspectionVo) GetInspectionAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InspectionAt
	}
	return nil
}

func (x *SafetyInspectionVo) GetSafetyStatus() string {
	if x != nil {
		return x.SafetyStatus
	}
	return ""
}

func (x *SafetyInspectionVo) GetAssignedPerson() string {
	if x != nil {
		return x.AssignedPerson
	}
	return ""
}

func (x *SafetyInspectionVo) GetAssignedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.AssignedDate
	}
	return nil
}

func (x *SafetyInspectionVo) GetAssignedDesc() string {
	if x != nil {
		return x.AssignedDesc
	}
	return ""
}

func (x *SafetyInspectionVo) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *SafetyInspectionVo) GetRectifyDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDeadline
	}
	return nil
}

func (x *SafetyInspectionVo) GetRectifyDeadlineWarn() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDeadlineWarn
	}
	return nil
}

func (x *SafetyInspectionVo) GetRectifyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDate
	}
	return nil
}

func (x *SafetyInspectionVo) GetRectifyPerson() string {
	if x != nil {
		return x.RectifyPerson
	}
	return ""
}

func (x *SafetyInspectionVo) GetRectifyDesc() string {
	if x != nil {
		return x.RectifyDesc
	}
	return ""
}

func (x *SafetyInspectionVo) GetRectifyBy() int64 {
	if x != nil {
		return x.RectifyBy
	}
	return 0
}

func (x *SafetyInspectionVo) GetRectifyAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyAt
	}
	return nil
}

func (x *SafetyInspectionVo) GetReviewDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReviewDate
	}
	return nil
}

func (x *SafetyInspectionVo) GetReviewPerson() string {
	if x != nil {
		return x.ReviewPerson
	}
	return ""
}

func (x *SafetyInspectionVo) GetReviewDesc() string {
	if x != nil {
		return x.ReviewDesc
	}
	return ""
}

func (x *SafetyInspectionVo) GetReviewBy() int64 {
	if x != nil {
		return x.ReviewBy
	}
	return 0
}

func (x *SafetyInspectionVo) GetReviewAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReviewAt
	}
	return nil
}

func (x *SafetyInspectionVo) GetMainSafetyInspectionCode() string {
	if x != nil {
		return x.MainSafetyInspectionCode
	}
	return ""
}

func (x *SafetyInspectionVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *SafetyInspectionVo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *SafetyInspectionVo) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *SafetyInspectionVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SafetyInspectionVo) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *SafetyInspectionVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SafetyInspectionVo) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *SafetyInspectionVo) GetFromOrganizationName() string {
	if x != nil {
		return x.FromOrganizationName
	}
	return ""
}

func (x *SafetyInspectionVo) GetToOrganizationName() string {
	if x != nil {
		return x.ToOrganizationName
	}
	return ""
}

func (x *SafetyInspectionVo) GetSafetyInspectionHash() *SafetyInspectionHashVo {
	if x != nil {
		return x.SafetyInspectionHash
	}
	return nil
}

func (x *SafetyInspectionVo) GetDocumentInspections() []*UploadDocumentInfo {
	if x != nil {
		return x.DocumentInspections
	}
	return nil
}

func (x *SafetyInspectionVo) GetDocumentRectifys() []*UploadDocumentInfo {
	if x != nil {
		return x.DocumentRectifys
	}
	return nil
}

func (x *SafetyInspectionVo) GetDocumentReviews() []*UploadDocumentInfo {
	if x != nil {
		return x.DocumentReviews
	}
	return nil
}

type SafetyInspectionHashVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	SafetyInspectionId int64                  `protobuf:"varint,2,opt,name=safetyInspectionId,proto3" json:"safetyInspectionId"`
	InfoHash           string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
	InspectionHash     string                 `protobuf:"bytes,5,opt,name=inspectionHash,proto3" json:"inspectionHash"`
	InspectionUploadAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=inspectionUploadAt,proto3" json:"inspectionUploadAt"`
	RectifyHash        string                 `protobuf:"bytes,7,opt,name=rectifyHash,proto3" json:"rectifyHash"`
	RectifyUploadAt    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=rectifyUploadAt,proto3" json:"rectifyUploadAt"`
	ReviewHash         string                 `protobuf:"bytes,9,opt,name=reviewHash,proto3" json:"reviewHash"`
	ReviewUploadAt     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=reviewUploadAt,proto3" json:"reviewUploadAt"`
	Msg                string                 `protobuf:"bytes,11,opt,name=msg,proto3" json:"msg"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updatedAt,proto3" json:"updatedAt"`
}

func (x *SafetyInspectionHashVo) Reset() {
	*x = SafetyInspectionHashVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[582]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafetyInspectionHashVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafetyInspectionHashVo) ProtoMessage() {}

func (x *SafetyInspectionHashVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[582]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafetyInspectionHashVo.ProtoReflect.Descriptor instead.
func (*SafetyInspectionHashVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{582}
}

func (x *SafetyInspectionHashVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SafetyInspectionHashVo) GetSafetyInspectionId() int64 {
	if x != nil {
		return x.SafetyInspectionId
	}
	return 0
}

func (x *SafetyInspectionHashVo) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *SafetyInspectionHashVo) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

func (x *SafetyInspectionHashVo) GetInspectionHash() string {
	if x != nil {
		return x.InspectionHash
	}
	return ""
}

func (x *SafetyInspectionHashVo) GetInspectionUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InspectionUploadAt
	}
	return nil
}

func (x *SafetyInspectionHashVo) GetRectifyHash() string {
	if x != nil {
		return x.RectifyHash
	}
	return ""
}

func (x *SafetyInspectionHashVo) GetRectifyUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyUploadAt
	}
	return nil
}

func (x *SafetyInspectionHashVo) GetReviewHash() string {
	if x != nil {
		return x.ReviewHash
	}
	return ""
}

func (x *SafetyInspectionHashVo) GetReviewUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReviewUploadAt
	}
	return nil
}

func (x *SafetyInspectionHashVo) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SafetyInspectionHashVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SafetyInspectionHashVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type SafetyLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SafetyLogId        int64                  `protobuf:"varint,1,opt,name=safetyLogId,proto3" json:"safetyLogId"`
	SafetyLogCode      string                 `protobuf:"bytes,2,opt,name=safetyLogCode,proto3" json:"safetyLogCode"`
	ProjectId          int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	FromOrganizationId int64                  `protobuf:"varint,4,opt,name=fromOrganizationId,proto3" json:"fromOrganizationId"`
	FromPlatFormType   string                 `protobuf:"bytes,5,opt,name=fromPlatFormType,proto3" json:"fromPlatFormType"`
	AttendanceNumber   int64                  `protobuf:"varint,6,opt,name=attendanceNumber,proto3" json:"attendanceNumber"`
	RecordPerson       string                 `protobuf:"bytes,7,opt,name=recordPerson,proto3" json:"recordPerson"`
	RecordDate         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=recordDate,proto3" json:"recordDate"`
	RecordDept         string                 `protobuf:"bytes,9,opt,name=recordDept,proto3" json:"recordDept"`
	ConstructionArea   string                 `protobuf:"bytes,10,opt,name=constructionArea,proto3" json:"constructionArea"`
	SafetySituation    string                 `protobuf:"bytes,11,opt,name=safetySituation,proto3" json:"safetySituation"`
	SafetyEducation    string                 `protobuf:"bytes,12,opt,name=safetyEducation,proto3" json:"safetyEducation"`
	SafetyMeeting      string                 `protobuf:"bytes,13,opt,name=safetyMeeting,proto3" json:"safetyMeeting"`
	ActiveStatus       string                 `protobuf:"bytes,14,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo               string                 `protobuf:"bytes,15,opt,name=memo,proto3" json:"memo"`
	CreatedBy          int64                  `protobuf:"varint,16,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy          int64                  `protobuf:"varint,18,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=updatedAt,proto3" json:"updatedAt"`
	UploadDocument     []*UploadDocumentInfo  `protobuf:"bytes,20,rep,name=uploadDocument,proto3" json:"uploadDocument"`
	InfoHash           string                 `protobuf:"bytes,21,opt,name=infoHash,proto3" json:"infoHash"`
	ManagerId          int64                  `protobuf:"varint,22,opt,name=managerId,proto3" json:"managerId"`
}

func (x *SafetyLogReq) Reset() {
	*x = SafetyLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[583]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafetyLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafetyLogReq) ProtoMessage() {}

func (x *SafetyLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[583]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafetyLogReq.ProtoReflect.Descriptor instead.
func (*SafetyLogReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{583}
}

func (x *SafetyLogReq) GetSafetyLogId() int64 {
	if x != nil {
		return x.SafetyLogId
	}
	return 0
}

func (x *SafetyLogReq) GetSafetyLogCode() string {
	if x != nil {
		return x.SafetyLogCode
	}
	return ""
}

func (x *SafetyLogReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *SafetyLogReq) GetFromOrganizationId() int64 {
	if x != nil {
		return x.FromOrganizationId
	}
	return 0
}

func (x *SafetyLogReq) GetFromPlatFormType() string {
	if x != nil {
		return x.FromPlatFormType
	}
	return ""
}

func (x *SafetyLogReq) GetAttendanceNumber() int64 {
	if x != nil {
		return x.AttendanceNumber
	}
	return 0
}

func (x *SafetyLogReq) GetRecordPerson() string {
	if x != nil {
		return x.RecordPerson
	}
	return ""
}

func (x *SafetyLogReq) GetRecordDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RecordDate
	}
	return nil
}

func (x *SafetyLogReq) GetRecordDept() string {
	if x != nil {
		return x.RecordDept
	}
	return ""
}

func (x *SafetyLogReq) GetConstructionArea() string {
	if x != nil {
		return x.ConstructionArea
	}
	return ""
}

func (x *SafetyLogReq) GetSafetySituation() string {
	if x != nil {
		return x.SafetySituation
	}
	return ""
}

func (x *SafetyLogReq) GetSafetyEducation() string {
	if x != nil {
		return x.SafetyEducation
	}
	return ""
}

func (x *SafetyLogReq) GetSafetyMeeting() string {
	if x != nil {
		return x.SafetyMeeting
	}
	return ""
}

func (x *SafetyLogReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *SafetyLogReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *SafetyLogReq) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *SafetyLogReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SafetyLogReq) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *SafetyLogReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SafetyLogReq) GetUploadDocument() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocument
	}
	return nil
}

func (x *SafetyLogReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *SafetyLogReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type SafetyLogIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SafetyLogIds []int64 `protobuf:"varint,1,rep,packed,name=safetyLogIds,proto3" json:"safetyLogIds"`
	ManagerId    int64   `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *SafetyLogIdsReq) Reset() {
	*x = SafetyLogIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[584]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafetyLogIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafetyLogIdsReq) ProtoMessage() {}

func (x *SafetyLogIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[584]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafetyLogIdsReq.ProtoReflect.Descriptor instead.
func (*SafetyLogIdsReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{584}
}

func (x *SafetyLogIdsReq) GetSafetyLogIds() []int64 {
	if x != nil {
		return x.SafetyLogIds
	}
	return nil
}

func (x *SafetyLogIdsReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ListSafetyLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SafetyLogId          int64                  `protobuf:"varint,1,opt,name=safetyLogId,proto3" json:"safetyLogId"`
	SafetyLogCode        string                 `protobuf:"bytes,2,opt,name=safetyLogCode,proto3" json:"safetyLogCode"`
	ProjectId            int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	FromOrganizationId   int64                  `protobuf:"varint,4,opt,name=fromOrganizationId,proto3" json:"fromOrganizationId"`
	FromPlatFormType     string                 `protobuf:"bytes,5,opt,name=fromPlatFormType,proto3" json:"fromPlatFormType"`
	AttendanceNumber     int64                  `protobuf:"varint,6,opt,name=attendanceNumber,proto3" json:"attendanceNumber"`
	RecordPerson         string                 `protobuf:"bytes,7,opt,name=recordPerson,proto3" json:"recordPerson"`
	RecordDate           *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=recordDate,proto3" json:"recordDate"`
	RecordDept           string                 `protobuf:"bytes,9,opt,name=recordDept,proto3" json:"recordDept"`
	ConstructionArea     string                 `protobuf:"bytes,10,opt,name=constructionArea,proto3" json:"constructionArea"`
	SafetySituation      string                 `protobuf:"bytes,11,opt,name=safetySituation,proto3" json:"safetySituation"`
	SafetyEducation      string                 `protobuf:"bytes,12,opt,name=safetyEducation,proto3" json:"safetyEducation"`
	SafetyMeeting        string                 `protobuf:"bytes,13,opt,name=safetyMeeting,proto3" json:"safetyMeeting"`
	ActiveStatus         string                 `protobuf:"bytes,14,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo                 string                 `protobuf:"bytes,15,opt,name=memo,proto3" json:"memo"`
	CreatedBy            int64                  `protobuf:"varint,16,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy            int64                  `protobuf:"varint,18,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt            *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=updatedAt,proto3" json:"updatedAt"`
	ProjectName          string                 `protobuf:"bytes,20,opt,name=projectName,proto3" json:"projectName"`
	FromOrganizationName string                 `protobuf:"bytes,21,opt,name=fromOrganizationName,proto3" json:"fromOrganizationName"`
	ManagerId            int64                  `protobuf:"varint,22,opt,name=managerId,proto3" json:"managerId"`
	Page                 *Page                  `protobuf:"bytes,23,opt,name=page,proto3" json:"page"`
	StartAt              *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=startAt,proto3" json:"startAt"`
	EndAt                *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=endAt,proto3" json:"endAt"`
}

func (x *ListSafetyLogReq) Reset() {
	*x = ListSafetyLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[585]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSafetyLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSafetyLogReq) ProtoMessage() {}

func (x *ListSafetyLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[585]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSafetyLogReq.ProtoReflect.Descriptor instead.
func (*ListSafetyLogReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{585}
}

func (x *ListSafetyLogReq) GetSafetyLogId() int64 {
	if x != nil {
		return x.SafetyLogId
	}
	return 0
}

func (x *ListSafetyLogReq) GetSafetyLogCode() string {
	if x != nil {
		return x.SafetyLogCode
	}
	return ""
}

func (x *ListSafetyLogReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListSafetyLogReq) GetFromOrganizationId() int64 {
	if x != nil {
		return x.FromOrganizationId
	}
	return 0
}

func (x *ListSafetyLogReq) GetFromPlatFormType() string {
	if x != nil {
		return x.FromPlatFormType
	}
	return ""
}

func (x *ListSafetyLogReq) GetAttendanceNumber() int64 {
	if x != nil {
		return x.AttendanceNumber
	}
	return 0
}

func (x *ListSafetyLogReq) GetRecordPerson() string {
	if x != nil {
		return x.RecordPerson
	}
	return ""
}

func (x *ListSafetyLogReq) GetRecordDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RecordDate
	}
	return nil
}

func (x *ListSafetyLogReq) GetRecordDept() string {
	if x != nil {
		return x.RecordDept
	}
	return ""
}

func (x *ListSafetyLogReq) GetConstructionArea() string {
	if x != nil {
		return x.ConstructionArea
	}
	return ""
}

func (x *ListSafetyLogReq) GetSafetySituation() string {
	if x != nil {
		return x.SafetySituation
	}
	return ""
}

func (x *ListSafetyLogReq) GetSafetyEducation() string {
	if x != nil {
		return x.SafetyEducation
	}
	return ""
}

func (x *ListSafetyLogReq) GetSafetyMeeting() string {
	if x != nil {
		return x.SafetyMeeting
	}
	return ""
}

func (x *ListSafetyLogReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *ListSafetyLogReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *ListSafetyLogReq) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *ListSafetyLogReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListSafetyLogReq) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *ListSafetyLogReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ListSafetyLogReq) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ListSafetyLogReq) GetFromOrganizationName() string {
	if x != nil {
		return x.FromOrganizationName
	}
	return ""
}

func (x *ListSafetyLogReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListSafetyLogReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListSafetyLogReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *ListSafetyLogReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

type SafetyLogsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*SafetyLogVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64          `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64          `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *SafetyLogsResp) Reset() {
	*x = SafetyLogsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[586]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafetyLogsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafetyLogsResp) ProtoMessage() {}

func (x *SafetyLogsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[586]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafetyLogsResp.ProtoReflect.Descriptor instead.
func (*SafetyLogsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{586}
}

func (x *SafetyLogsResp) GetList() []*SafetyLogVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *SafetyLogsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SafetyLogsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SafetyLogsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetSafetyLogHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*SafetyLogHashVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64              `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64              `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64              `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetSafetyLogHashResp) Reset() {
	*x = GetSafetyLogHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[587]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSafetyLogHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSafetyLogHashResp) ProtoMessage() {}

func (x *GetSafetyLogHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[587]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSafetyLogHashResp.ProtoReflect.Descriptor instead.
func (*GetSafetyLogHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{587}
}

func (x *GetSafetyLogHashResp) GetList() []*SafetyLogHashVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetSafetyLogHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetSafetyLogHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetSafetyLogHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type SafetyLogVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SafetyLogId          int64                  `protobuf:"varint,1,opt,name=safetyLogId,proto3" json:"safetyLogId"`
	SafetyLogCode        string                 `protobuf:"bytes,2,opt,name=safetyLogCode,proto3" json:"safetyLogCode"`
	ProjectId            int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	FromOrganizationId   int64                  `protobuf:"varint,4,opt,name=fromOrganizationId,proto3" json:"fromOrganizationId"`
	FromPlatFormType     string                 `protobuf:"bytes,5,opt,name=fromPlatFormType,proto3" json:"fromPlatFormType"`
	AttendanceNumber     int64                  `protobuf:"varint,6,opt,name=attendanceNumber,proto3" json:"attendanceNumber"`
	RecordPerson         string                 `protobuf:"bytes,7,opt,name=recordPerson,proto3" json:"recordPerson"`
	RecordDate           *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=recordDate,proto3" json:"recordDate"`
	RecordDept           string                 `protobuf:"bytes,9,opt,name=recordDept,proto3" json:"recordDept"`
	ConstructionArea     string                 `protobuf:"bytes,10,opt,name=constructionArea,proto3" json:"constructionArea"`
	SafetySituation      string                 `protobuf:"bytes,11,opt,name=safetySituation,proto3" json:"safetySituation"`
	SafetyEducation      string                 `protobuf:"bytes,12,opt,name=safetyEducation,proto3" json:"safetyEducation"`
	SafetyMeeting        string                 `protobuf:"bytes,13,opt,name=safetyMeeting,proto3" json:"safetyMeeting"`
	ActiveStatus         string                 `protobuf:"bytes,14,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo                 string                 `protobuf:"bytes,15,opt,name=memo,proto3" json:"memo"`
	CreatedBy            int64                  `protobuf:"varint,16,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy            int64                  `protobuf:"varint,18,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt            *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=updatedAt,proto3" json:"updatedAt"`
	ProjectName          string                 `protobuf:"bytes,20,opt,name=projectName,proto3" json:"projectName"`
	FromOrganizationName string                 `protobuf:"bytes,21,opt,name=fromOrganizationName,proto3" json:"fromOrganizationName"`
	SafetyLogHash        *SafetyLogHashVo       `protobuf:"bytes,22,opt,name=safetyLogHash,proto3" json:"safetyLogHash"`
	UploadDocument       []*UploadDocumentInfo  `protobuf:"bytes,23,rep,name=uploadDocument,proto3" json:"uploadDocument"`
}

func (x *SafetyLogVo) Reset() {
	*x = SafetyLogVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[588]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafetyLogVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafetyLogVo) ProtoMessage() {}

func (x *SafetyLogVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[588]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafetyLogVo.ProtoReflect.Descriptor instead.
func (*SafetyLogVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{588}
}

func (x *SafetyLogVo) GetSafetyLogId() int64 {
	if x != nil {
		return x.SafetyLogId
	}
	return 0
}

func (x *SafetyLogVo) GetSafetyLogCode() string {
	if x != nil {
		return x.SafetyLogCode
	}
	return ""
}

func (x *SafetyLogVo) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *SafetyLogVo) GetFromOrganizationId() int64 {
	if x != nil {
		return x.FromOrganizationId
	}
	return 0
}

func (x *SafetyLogVo) GetFromPlatFormType() string {
	if x != nil {
		return x.FromPlatFormType
	}
	return ""
}

func (x *SafetyLogVo) GetAttendanceNumber() int64 {
	if x != nil {
		return x.AttendanceNumber
	}
	return 0
}

func (x *SafetyLogVo) GetRecordPerson() string {
	if x != nil {
		return x.RecordPerson
	}
	return ""
}

func (x *SafetyLogVo) GetRecordDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RecordDate
	}
	return nil
}

func (x *SafetyLogVo) GetRecordDept() string {
	if x != nil {
		return x.RecordDept
	}
	return ""
}

func (x *SafetyLogVo) GetConstructionArea() string {
	if x != nil {
		return x.ConstructionArea
	}
	return ""
}

func (x *SafetyLogVo) GetSafetySituation() string {
	if x != nil {
		return x.SafetySituation
	}
	return ""
}

func (x *SafetyLogVo) GetSafetyEducation() string {
	if x != nil {
		return x.SafetyEducation
	}
	return ""
}

func (x *SafetyLogVo) GetSafetyMeeting() string {
	if x != nil {
		return x.SafetyMeeting
	}
	return ""
}

func (x *SafetyLogVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *SafetyLogVo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *SafetyLogVo) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *SafetyLogVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SafetyLogVo) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *SafetyLogVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SafetyLogVo) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *SafetyLogVo) GetFromOrganizationName() string {
	if x != nil {
		return x.FromOrganizationName
	}
	return ""
}

func (x *SafetyLogVo) GetSafetyLogHash() *SafetyLogHashVo {
	if x != nil {
		return x.SafetyLogHash
	}
	return nil
}

func (x *SafetyLogVo) GetUploadDocument() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocument
	}
	return nil
}

type SafetyLogHashVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	SafetyLogId  int64                  `protobuf:"varint,2,opt,name=safetyLogId,proto3" json:"safetyLogId"`
	InfoHash     string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
	Msg          string                 `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updatedAt,proto3" json:"updatedAt"`
}

func (x *SafetyLogHashVo) Reset() {
	*x = SafetyLogHashVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[589]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafetyLogHashVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafetyLogHashVo) ProtoMessage() {}

func (x *SafetyLogHashVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[589]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafetyLogHashVo.ProtoReflect.Descriptor instead.
func (*SafetyLogHashVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{589}
}

func (x *SafetyLogHashVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SafetyLogHashVo) GetSafetyLogId() int64 {
	if x != nil {
		return x.SafetyLogId
	}
	return 0
}

func (x *SafetyLogHashVo) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *SafetyLogHashVo) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

func (x *SafetyLogHashVo) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SafetyLogHashVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SafetyLogHashVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

//===Workman Proto begin===
type WorkmansReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List      []*WorkmanReq `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	ManagerId int64         `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *WorkmansReq) Reset() {
	*x = WorkmansReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[590]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkmansReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkmansReq) ProtoMessage() {}

func (x *WorkmansReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[590]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkmansReq.ProtoReflect.Descriptor instead.
func (*WorkmansReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{590}
}

func (x *WorkmansReq) GetList() []*WorkmanReq {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *WorkmansReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type WorkmanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkmanId        int64                  `protobuf:"varint,1,opt,name=workmanId,proto3" json:"workmanId"`
	WorkmanCode      string                 `protobuf:"bytes,2,opt,name=workmanCode,proto3" json:"workmanCode"`
	ProjectId        int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	DeptName         string                 `protobuf:"bytes,4,opt,name=deptName,proto3" json:"deptName"`
	FullName         string                 `protobuf:"bytes,5,opt,name=fullName,proto3" json:"fullName"`
	IdCardNo         string                 `protobuf:"bytes,6,opt,name=idCardNo,proto3" json:"idCardNo"`
	Mobile           string                 `protobuf:"bytes,7,opt,name=mobile,proto3" json:"mobile"`
	OrganizationId   int64                  `protobuf:"varint,8,opt,name=organizationId,proto3" json:"organizationId"`
	PlatFormType     string                 `protobuf:"bytes,9,opt,name=platFormType,proto3" json:"platFormType"`
	WorkmanType      string                 `protobuf:"bytes,10,opt,name=workmanType,proto3" json:"workmanType"`
	PhotoUrl         string                 `protobuf:"bytes,11,opt,name=photoUrl,proto3" json:"photoUrl"`
	SourceType       string                 `protobuf:"bytes,12,opt,name=sourceType,proto3" json:"sourceType"`
	ActiveStatus     string                 `protobuf:"bytes,13,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo             string                 `protobuf:"bytes,14,opt,name=memo,proto3" json:"memo"`
	CreatedBy        int64                  `protobuf:"varint,15,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy        int64                  `protobuf:"varint,17,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=updatedAt,proto3" json:"updatedAt"`
	UploadDocument   []*UploadDocumentInfo  `protobuf:"bytes,19,rep,name=uploadDocument,proto3" json:"uploadDocument"`
	InfoHash         string                 `protobuf:"bytes,20,opt,name=infoHash,proto3" json:"infoHash"`
	ManagerId        int64                  `protobuf:"varint,21,opt,name=managerId,proto3" json:"managerId"`
	OrganizationName string                 `protobuf:"bytes,22,opt,name=organizationName,proto3" json:"organizationName"`
}

func (x *WorkmanReq) Reset() {
	*x = WorkmanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[591]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkmanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkmanReq) ProtoMessage() {}

func (x *WorkmanReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[591]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkmanReq.ProtoReflect.Descriptor instead.
func (*WorkmanReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{591}
}

func (x *WorkmanReq) GetWorkmanId() int64 {
	if x != nil {
		return x.WorkmanId
	}
	return 0
}

func (x *WorkmanReq) GetWorkmanCode() string {
	if x != nil {
		return x.WorkmanCode
	}
	return ""
}

func (x *WorkmanReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *WorkmanReq) GetDeptName() string {
	if x != nil {
		return x.DeptName
	}
	return ""
}

func (x *WorkmanReq) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *WorkmanReq) GetIdCardNo() string {
	if x != nil {
		return x.IdCardNo
	}
	return ""
}

func (x *WorkmanReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *WorkmanReq) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *WorkmanReq) GetPlatFormType() string {
	if x != nil {
		return x.PlatFormType
	}
	return ""
}

func (x *WorkmanReq) GetWorkmanType() string {
	if x != nil {
		return x.WorkmanType
	}
	return ""
}

func (x *WorkmanReq) GetPhotoUrl() string {
	if x != nil {
		return x.PhotoUrl
	}
	return ""
}

func (x *WorkmanReq) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *WorkmanReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *WorkmanReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *WorkmanReq) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *WorkmanReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WorkmanReq) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *WorkmanReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *WorkmanReq) GetUploadDocument() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocument
	}
	return nil
}

func (x *WorkmanReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *WorkmanReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *WorkmanReq) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

type WorkmanIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkmanIds []int64 `protobuf:"varint,1,rep,packed,name=workmanIds,proto3" json:"workmanIds"`
	ManagerId  int64   `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *WorkmanIdsReq) Reset() {
	*x = WorkmanIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[592]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkmanIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkmanIdsReq) ProtoMessage() {}

func (x *WorkmanIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[592]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkmanIdsReq.ProtoReflect.Descriptor instead.
func (*WorkmanIdsReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{592}
}

func (x *WorkmanIdsReq) GetWorkmanIds() []int64 {
	if x != nil {
		return x.WorkmanIds
	}
	return nil
}

func (x *WorkmanIdsReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ListWorkmanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkmanId        int64                  `protobuf:"varint,1,opt,name=workmanId,proto3" json:"workmanId"`
	WorkmanCode      string                 `protobuf:"bytes,2,opt,name=workmanCode,proto3" json:"workmanCode"`
	ProjectId        int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	DeptName         string                 `protobuf:"bytes,4,opt,name=deptName,proto3" json:"deptName"`
	FullName         string                 `protobuf:"bytes,5,opt,name=fullName,proto3" json:"fullName"`
	IdCardNo         string                 `protobuf:"bytes,6,opt,name=idCardNo,proto3" json:"idCardNo"`
	Mobile           string                 `protobuf:"bytes,7,opt,name=mobile,proto3" json:"mobile"`
	OrganizationId   int64                  `protobuf:"varint,8,opt,name=organizationId,proto3" json:"organizationId"`
	PlatFormType     string                 `protobuf:"bytes,9,opt,name=platFormType,proto3" json:"platFormType"`
	WorkmanType      string                 `protobuf:"bytes,10,opt,name=workmanType,proto3" json:"workmanType"`
	PhotoUrl         string                 `protobuf:"bytes,11,opt,name=photoUrl,proto3" json:"photoUrl"`
	SourceType       string                 `protobuf:"bytes,12,opt,name=sourceType,proto3" json:"sourceType"`
	ActiveStatus     string                 `protobuf:"bytes,13,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo             string                 `protobuf:"bytes,14,opt,name=memo,proto3" json:"memo"`
	CreatedBy        int64                  `protobuf:"varint,15,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy        int64                  `protobuf:"varint,17,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=updatedAt,proto3" json:"updatedAt"`
	ProjectName      string                 `protobuf:"bytes,19,opt,name=projectName,proto3" json:"projectName"`
	OrganizationName string                 `protobuf:"bytes,20,opt,name=organizationName,proto3" json:"organizationName"`
	ManagerId        int64                  `protobuf:"varint,21,opt,name=managerId,proto3" json:"managerId"`
	Page             *Page                  `protobuf:"bytes,22,opt,name=page,proto3" json:"page"`
}

func (x *ListWorkmanReq) Reset() {
	*x = ListWorkmanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[593]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkmanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkmanReq) ProtoMessage() {}

func (x *ListWorkmanReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[593]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkmanReq.ProtoReflect.Descriptor instead.
func (*ListWorkmanReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{593}
}

func (x *ListWorkmanReq) GetWorkmanId() int64 {
	if x != nil {
		return x.WorkmanId
	}
	return 0
}

func (x *ListWorkmanReq) GetWorkmanCode() string {
	if x != nil {
		return x.WorkmanCode
	}
	return ""
}

func (x *ListWorkmanReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListWorkmanReq) GetDeptName() string {
	if x != nil {
		return x.DeptName
	}
	return ""
}

func (x *ListWorkmanReq) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *ListWorkmanReq) GetIdCardNo() string {
	if x != nil {
		return x.IdCardNo
	}
	return ""
}

func (x *ListWorkmanReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *ListWorkmanReq) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *ListWorkmanReq) GetPlatFormType() string {
	if x != nil {
		return x.PlatFormType
	}
	return ""
}

func (x *ListWorkmanReq) GetWorkmanType() string {
	if x != nil {
		return x.WorkmanType
	}
	return ""
}

func (x *ListWorkmanReq) GetPhotoUrl() string {
	if x != nil {
		return x.PhotoUrl
	}
	return ""
}

func (x *ListWorkmanReq) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *ListWorkmanReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *ListWorkmanReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *ListWorkmanReq) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *ListWorkmanReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListWorkmanReq) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *ListWorkmanReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ListWorkmanReq) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ListWorkmanReq) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

func (x *ListWorkmanReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListWorkmanReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type WorkmansResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*WorkmanVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64        `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64        `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64        `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *WorkmansResp) Reset() {
	*x = WorkmansResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[594]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkmansResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkmansResp) ProtoMessage() {}

func (x *WorkmansResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[594]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkmansResp.ProtoReflect.Descriptor instead.
func (*WorkmansResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{594}
}

func (x *WorkmansResp) GetList() []*WorkmanVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *WorkmansResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *WorkmansResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *WorkmansResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetWorkmanHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*WorkmanHashVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64            `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64            `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64            `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetWorkmanHashResp) Reset() {
	*x = GetWorkmanHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[595]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkmanHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkmanHashResp) ProtoMessage() {}

func (x *GetWorkmanHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[595]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkmanHashResp.ProtoReflect.Descriptor instead.
func (*GetWorkmanHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{595}
}

func (x *GetWorkmanHashResp) GetList() []*WorkmanHashVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetWorkmanHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetWorkmanHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetWorkmanHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type WorkmanVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkmanId        int64                  `protobuf:"varint,1,opt,name=workmanId,proto3" json:"workmanId"`
	WorkmanCode      string                 `protobuf:"bytes,2,opt,name=workmanCode,proto3" json:"workmanCode"`
	ProjectId        int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	DeptName         string                 `protobuf:"bytes,4,opt,name=deptName,proto3" json:"deptName"`
	FullName         string                 `protobuf:"bytes,5,opt,name=fullName,proto3" json:"fullName"`
	IdCardNo         string                 `protobuf:"bytes,6,opt,name=idCardNo,proto3" json:"idCardNo"`
	Mobile           string                 `protobuf:"bytes,7,opt,name=mobile,proto3" json:"mobile"`
	OrganizationId   int64                  `protobuf:"varint,8,opt,name=organizationId,proto3" json:"organizationId"`
	PlatFormType     string                 `protobuf:"bytes,9,opt,name=platFormType,proto3" json:"platFormType"`
	WorkmanType      string                 `protobuf:"bytes,10,opt,name=workmanType,proto3" json:"workmanType"`
	PhotoUrl         string                 `protobuf:"bytes,11,opt,name=photoUrl,proto3" json:"photoUrl"`
	SourceType       string                 `protobuf:"bytes,12,opt,name=sourceType,proto3" json:"sourceType"`
	ActiveStatus     string                 `protobuf:"bytes,13,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo             string                 `protobuf:"bytes,14,opt,name=memo,proto3" json:"memo"`
	CreatedBy        int64                  `protobuf:"varint,15,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy        int64                  `protobuf:"varint,17,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=updatedAt,proto3" json:"updatedAt"`
	ProjectName      string                 `protobuf:"bytes,19,opt,name=projectName,proto3" json:"projectName"`
	OrganizationName string                 `protobuf:"bytes,20,opt,name=organizationName,proto3" json:"organizationName"`
	WorkmanHash      *WorkmanHashVo         `protobuf:"bytes,22,opt,name=workmanHash,proto3" json:"workmanHash"`
	UploadDocument   []*UploadDocumentInfo  `protobuf:"bytes,23,rep,name=uploadDocument,proto3" json:"uploadDocument"`
}

func (x *WorkmanVo) Reset() {
	*x = WorkmanVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[596]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkmanVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkmanVo) ProtoMessage() {}

func (x *WorkmanVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[596]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkmanVo.ProtoReflect.Descriptor instead.
func (*WorkmanVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{596}
}

func (x *WorkmanVo) GetWorkmanId() int64 {
	if x != nil {
		return x.WorkmanId
	}
	return 0
}

func (x *WorkmanVo) GetWorkmanCode() string {
	if x != nil {
		return x.WorkmanCode
	}
	return ""
}

func (x *WorkmanVo) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *WorkmanVo) GetDeptName() string {
	if x != nil {
		return x.DeptName
	}
	return ""
}

func (x *WorkmanVo) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *WorkmanVo) GetIdCardNo() string {
	if x != nil {
		return x.IdCardNo
	}
	return ""
}

func (x *WorkmanVo) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *WorkmanVo) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *WorkmanVo) GetPlatFormType() string {
	if x != nil {
		return x.PlatFormType
	}
	return ""
}

func (x *WorkmanVo) GetWorkmanType() string {
	if x != nil {
		return x.WorkmanType
	}
	return ""
}

func (x *WorkmanVo) GetPhotoUrl() string {
	if x != nil {
		return x.PhotoUrl
	}
	return ""
}

func (x *WorkmanVo) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *WorkmanVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *WorkmanVo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *WorkmanVo) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *WorkmanVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WorkmanVo) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *WorkmanVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *WorkmanVo) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *WorkmanVo) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

func (x *WorkmanVo) GetWorkmanHash() *WorkmanHashVo {
	if x != nil {
		return x.WorkmanHash
	}
	return nil
}

func (x *WorkmanVo) GetUploadDocument() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocument
	}
	return nil
}

type WorkmanHashVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	WorkmanId    int64                  `protobuf:"varint,2,opt,name=workmanId,proto3" json:"workmanId"`
	InfoHash     string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
	Msg          string                 `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updatedAt,proto3" json:"updatedAt"`
}

func (x *WorkmanHashVo) Reset() {
	*x = WorkmanHashVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[597]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkmanHashVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkmanHashVo) ProtoMessage() {}

func (x *WorkmanHashVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[597]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkmanHashVo.ProtoReflect.Descriptor instead.
func (*WorkmanHashVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{597}
}

func (x *WorkmanHashVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WorkmanHashVo) GetWorkmanId() int64 {
	if x != nil {
		return x.WorkmanId
	}
	return 0
}

func (x *WorkmanHashVo) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *WorkmanHashVo) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

func (x *WorkmanHashVo) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *WorkmanHashVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WorkmanHashVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

//===WorkmanAttendance Proto begin===
type WorkmanAttendancesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List      []*WorkmanAttendanceReq `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	ManagerId int64                   `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *WorkmanAttendancesReq) Reset() {
	*x = WorkmanAttendancesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[598]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkmanAttendancesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkmanAttendancesReq) ProtoMessage() {}

func (x *WorkmanAttendancesReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[598]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkmanAttendancesReq.ProtoReflect.Descriptor instead.
func (*WorkmanAttendancesReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{598}
}

func (x *WorkmanAttendancesReq) GetList() []*WorkmanAttendanceReq {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *WorkmanAttendancesReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type WorkmanAttendanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkmanAttendanceId   int64                  `protobuf:"varint,1,opt,name=workmanAttendanceId,proto3" json:"workmanAttendanceId"`
	WorkmanAttendanceCode string                 `protobuf:"bytes,2,opt,name=workmanAttendanceCode,proto3" json:"workmanAttendanceCode"`
	ProjectId             int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	DeptName              string                 `protobuf:"bytes,4,opt,name=deptName,proto3" json:"deptName"`
	FullName              string                 `protobuf:"bytes,5,opt,name=fullName,proto3" json:"fullName"`
	IdCardNo              string                 `protobuf:"bytes,6,opt,name=idCardNo,proto3" json:"idCardNo"`
	Mobile                string                 `protobuf:"bytes,7,opt,name=mobile,proto3" json:"mobile"`
	Temperature           float32                `protobuf:"fixed32,8,opt,name=temperature,proto3" json:"temperature"`
	SafetyHat             string                 `protobuf:"bytes,9,opt,name=safetyHat,proto3" json:"safetyHat"`
	WearMask              string                 `protobuf:"bytes,10,opt,name=wearMask,proto3" json:"wearMask"`
	HealthCode            string                 `protobuf:"bytes,11,opt,name=healthCode,proto3" json:"healthCode"`
	TravelCode            string                 `protobuf:"bytes,12,opt,name=travelCode,proto3" json:"travelCode"`
	OrganizationId        int64                  `protobuf:"varint,13,opt,name=organizationId,proto3" json:"organizationId"`
	PlatFormType          string                 `protobuf:"bytes,14,opt,name=platFormType,proto3" json:"platFormType"`
	WorkmanType           string                 `protobuf:"bytes,15,opt,name=workmanType,proto3" json:"workmanType"`
	SourceType            string                 `protobuf:"bytes,16,opt,name=sourceType,proto3" json:"sourceType"`
	UploadDate            *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=uploadDate,proto3" json:"uploadDate"`
	ActiveStatus          string                 `protobuf:"bytes,18,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo                  string                 `protobuf:"bytes,19,opt,name=memo,proto3" json:"memo"`
	CreatedBy             int64                  `protobuf:"varint,20,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt             *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy             int64                  `protobuf:"varint,22,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt             *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=updatedAt,proto3" json:"updatedAt"`
	UploadDocument        []*UploadDocumentInfo  `protobuf:"bytes,24,rep,name=uploadDocument,proto3" json:"uploadDocument"`
	InfoHash              string                 `protobuf:"bytes,25,opt,name=infoHash,proto3" json:"infoHash"`
	ManagerId             int64                  `protobuf:"varint,26,opt,name=managerId,proto3" json:"managerId"`
	OrganizationName      string                 `protobuf:"bytes,27,opt,name=organizationName,proto3" json:"organizationName"`
}

func (x *WorkmanAttendanceReq) Reset() {
	*x = WorkmanAttendanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[599]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkmanAttendanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkmanAttendanceReq) ProtoMessage() {}

func (x *WorkmanAttendanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[599]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkmanAttendanceReq.ProtoReflect.Descriptor instead.
func (*WorkmanAttendanceReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{599}
}

func (x *WorkmanAttendanceReq) GetWorkmanAttendanceId() int64 {
	if x != nil {
		return x.WorkmanAttendanceId
	}
	return 0
}

func (x *WorkmanAttendanceReq) GetWorkmanAttendanceCode() string {
	if x != nil {
		return x.WorkmanAttendanceCode
	}
	return ""
}

func (x *WorkmanAttendanceReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *WorkmanAttendanceReq) GetDeptName() string {
	if x != nil {
		return x.DeptName
	}
	return ""
}

func (x *WorkmanAttendanceReq) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *WorkmanAttendanceReq) GetIdCardNo() string {
	if x != nil {
		return x.IdCardNo
	}
	return ""
}

func (x *WorkmanAttendanceReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *WorkmanAttendanceReq) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *WorkmanAttendanceReq) GetSafetyHat() string {
	if x != nil {
		return x.SafetyHat
	}
	return ""
}

func (x *WorkmanAttendanceReq) GetWearMask() string {
	if x != nil {
		return x.WearMask
	}
	return ""
}

func (x *WorkmanAttendanceReq) GetHealthCode() string {
	if x != nil {
		return x.HealthCode
	}
	return ""
}

func (x *WorkmanAttendanceReq) GetTravelCode() string {
	if x != nil {
		return x.TravelCode
	}
	return ""
}

func (x *WorkmanAttendanceReq) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *WorkmanAttendanceReq) GetPlatFormType() string {
	if x != nil {
		return x.PlatFormType
	}
	return ""
}

func (x *WorkmanAttendanceReq) GetWorkmanType() string {
	if x != nil {
		return x.WorkmanType
	}
	return ""
}

func (x *WorkmanAttendanceReq) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *WorkmanAttendanceReq) GetUploadDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UploadDate
	}
	return nil
}

func (x *WorkmanAttendanceReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *WorkmanAttendanceReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *WorkmanAttendanceReq) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *WorkmanAttendanceReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WorkmanAttendanceReq) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *WorkmanAttendanceReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *WorkmanAttendanceReq) GetUploadDocument() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocument
	}
	return nil
}

func (x *WorkmanAttendanceReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *WorkmanAttendanceReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *WorkmanAttendanceReq) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

type WorkmanAttendanceIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkmanAttendanceIds []int64 `protobuf:"varint,1,rep,packed,name=workmanAttendanceIds,proto3" json:"workmanAttendanceIds"`
	ManagerId            int64   `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *WorkmanAttendanceIdsReq) Reset() {
	*x = WorkmanAttendanceIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[600]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkmanAttendanceIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkmanAttendanceIdsReq) ProtoMessage() {}

func (x *WorkmanAttendanceIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[600]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkmanAttendanceIdsReq.ProtoReflect.Descriptor instead.
func (*WorkmanAttendanceIdsReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{600}
}

func (x *WorkmanAttendanceIdsReq) GetWorkmanAttendanceIds() []int64 {
	if x != nil {
		return x.WorkmanAttendanceIds
	}
	return nil
}

func (x *WorkmanAttendanceIdsReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ListWorkmanAttendanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkmanAttendanceId   int64                  `protobuf:"varint,1,opt,name=workmanAttendanceId,proto3" json:"workmanAttendanceId"`
	WorkmanAttendanceCode string                 `protobuf:"bytes,2,opt,name=workmanAttendanceCode,proto3" json:"workmanAttendanceCode"`
	ProjectId             int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	DeptName              string                 `protobuf:"bytes,4,opt,name=deptName,proto3" json:"deptName"`
	FullName              string                 `protobuf:"bytes,5,opt,name=fullName,proto3" json:"fullName"`
	IdCardNo              string                 `protobuf:"bytes,6,opt,name=idCardNo,proto3" json:"idCardNo"`
	Mobile                string                 `protobuf:"bytes,7,opt,name=mobile,proto3" json:"mobile"`
	Temperature           float32                `protobuf:"fixed32,8,opt,name=temperature,proto3" json:"temperature"`
	SafetyHat             string                 `protobuf:"bytes,9,opt,name=safetyHat,proto3" json:"safetyHat"`
	WearMask              string                 `protobuf:"bytes,10,opt,name=wearMask,proto3" json:"wearMask"`
	HealthCode            string                 `protobuf:"bytes,11,opt,name=healthCode,proto3" json:"healthCode"`
	TravelCode            string                 `protobuf:"bytes,12,opt,name=travelCode,proto3" json:"travelCode"`
	OrganizationId        int64                  `protobuf:"varint,13,opt,name=organizationId,proto3" json:"organizationId"`
	PlatFormType          string                 `protobuf:"bytes,14,opt,name=platFormType,proto3" json:"platFormType"`
	WorkmanType           string                 `protobuf:"bytes,15,opt,name=workmanType,proto3" json:"workmanType"`
	SourceType            string                 `protobuf:"bytes,16,opt,name=sourceType,proto3" json:"sourceType"`
	UploadDate            *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=uploadDate,proto3" json:"uploadDate"`
	ActiveStatus          string                 `protobuf:"bytes,18,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo                  string                 `protobuf:"bytes,19,opt,name=memo,proto3" json:"memo"`
	CreatedBy             int64                  `protobuf:"varint,20,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt             *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy             int64                  `protobuf:"varint,22,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt             *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=updatedAt,proto3" json:"updatedAt"`
	ProjectName           string                 `protobuf:"bytes,24,opt,name=projectName,proto3" json:"projectName"`
	OrganizationName      string                 `protobuf:"bytes,25,opt,name=organizationName,proto3" json:"organizationName"`
	ManagerId             int64                  `protobuf:"varint,26,opt,name=managerId,proto3" json:"managerId"`
	Page                  *Page                  `protobuf:"bytes,27,opt,name=page,proto3" json:"page"`
}

func (x *ListWorkmanAttendanceReq) Reset() {
	*x = ListWorkmanAttendanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[601]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkmanAttendanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkmanAttendanceReq) ProtoMessage() {}

func (x *ListWorkmanAttendanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[601]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkmanAttendanceReq.ProtoReflect.Descriptor instead.
func (*ListWorkmanAttendanceReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{601}
}

func (x *ListWorkmanAttendanceReq) GetWorkmanAttendanceId() int64 {
	if x != nil {
		return x.WorkmanAttendanceId
	}
	return 0
}

func (x *ListWorkmanAttendanceReq) GetWorkmanAttendanceCode() string {
	if x != nil {
		return x.WorkmanAttendanceCode
	}
	return ""
}

func (x *ListWorkmanAttendanceReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListWorkmanAttendanceReq) GetDeptName() string {
	if x != nil {
		return x.DeptName
	}
	return ""
}

func (x *ListWorkmanAttendanceReq) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *ListWorkmanAttendanceReq) GetIdCardNo() string {
	if x != nil {
		return x.IdCardNo
	}
	return ""
}

func (x *ListWorkmanAttendanceReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *ListWorkmanAttendanceReq) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *ListWorkmanAttendanceReq) GetSafetyHat() string {
	if x != nil {
		return x.SafetyHat
	}
	return ""
}

func (x *ListWorkmanAttendanceReq) GetWearMask() string {
	if x != nil {
		return x.WearMask
	}
	return ""
}

func (x *ListWorkmanAttendanceReq) GetHealthCode() string {
	if x != nil {
		return x.HealthCode
	}
	return ""
}

func (x *ListWorkmanAttendanceReq) GetTravelCode() string {
	if x != nil {
		return x.TravelCode
	}
	return ""
}

func (x *ListWorkmanAttendanceReq) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *ListWorkmanAttendanceReq) GetPlatFormType() string {
	if x != nil {
		return x.PlatFormType
	}
	return ""
}

func (x *ListWorkmanAttendanceReq) GetWorkmanType() string {
	if x != nil {
		return x.WorkmanType
	}
	return ""
}

func (x *ListWorkmanAttendanceReq) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *ListWorkmanAttendanceReq) GetUploadDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UploadDate
	}
	return nil
}

func (x *ListWorkmanAttendanceReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *ListWorkmanAttendanceReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *ListWorkmanAttendanceReq) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *ListWorkmanAttendanceReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListWorkmanAttendanceReq) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *ListWorkmanAttendanceReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ListWorkmanAttendanceReq) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ListWorkmanAttendanceReq) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

func (x *ListWorkmanAttendanceReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListWorkmanAttendanceReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type WorkmanAttendancesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*WorkmanAttendanceVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                  `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                  `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *WorkmanAttendancesResp) Reset() {
	*x = WorkmanAttendancesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[602]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkmanAttendancesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkmanAttendancesResp) ProtoMessage() {}

func (x *WorkmanAttendancesResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[602]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkmanAttendancesResp.ProtoReflect.Descriptor instead.
func (*WorkmanAttendancesResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{602}
}

func (x *WorkmanAttendancesResp) GetList() []*WorkmanAttendanceVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *WorkmanAttendancesResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *WorkmanAttendancesResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *WorkmanAttendancesResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetWorkmanAttendanceHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*WorkmanAttendanceHashVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                      `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                      `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                      `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetWorkmanAttendanceHashResp) Reset() {
	*x = GetWorkmanAttendanceHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[603]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkmanAttendanceHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkmanAttendanceHashResp) ProtoMessage() {}

func (x *GetWorkmanAttendanceHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[603]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkmanAttendanceHashResp.ProtoReflect.Descriptor instead.
func (*GetWorkmanAttendanceHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{603}
}

func (x *GetWorkmanAttendanceHashResp) GetList() []*WorkmanAttendanceHashVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetWorkmanAttendanceHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetWorkmanAttendanceHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetWorkmanAttendanceHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type WorkmanAttendanceVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkmanAttendanceId   int64                    `protobuf:"varint,1,opt,name=workmanAttendanceId,proto3" json:"workmanAttendanceId"`
	WorkmanAttendanceCode string                   `protobuf:"bytes,2,opt,name=workmanAttendanceCode,proto3" json:"workmanAttendanceCode"`
	ProjectId             int64                    `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	DeptName              string                   `protobuf:"bytes,4,opt,name=deptName,proto3" json:"deptName"`
	FullName              string                   `protobuf:"bytes,5,opt,name=fullName,proto3" json:"fullName"`
	IdCardNo              string                   `protobuf:"bytes,6,opt,name=idCardNo,proto3" json:"idCardNo"`
	Mobile                string                   `protobuf:"bytes,7,opt,name=mobile,proto3" json:"mobile"`
	Temperature           float32                  `protobuf:"fixed32,8,opt,name=temperature,proto3" json:"temperature"`
	SafetyHat             string                   `protobuf:"bytes,9,opt,name=safetyHat,proto3" json:"safetyHat"`
	WearMask              string                   `protobuf:"bytes,10,opt,name=wearMask,proto3" json:"wearMask"`
	HealthCode            string                   `protobuf:"bytes,11,opt,name=healthCode,proto3" json:"healthCode"`
	TravelCode            string                   `protobuf:"bytes,12,opt,name=travelCode,proto3" json:"travelCode"`
	OrganizationId        int64                    `protobuf:"varint,13,opt,name=organizationId,proto3" json:"organizationId"`
	PlatFormType          string                   `protobuf:"bytes,14,opt,name=platFormType,proto3" json:"platFormType"`
	WorkmanType           string                   `protobuf:"bytes,15,opt,name=workmanType,proto3" json:"workmanType"`
	SourceType            string                   `protobuf:"bytes,16,opt,name=sourceType,proto3" json:"sourceType"`
	UploadDate            *timestamppb.Timestamp   `protobuf:"bytes,17,opt,name=uploadDate,proto3" json:"uploadDate"`
	ActiveStatus          string                   `protobuf:"bytes,18,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo                  string                   `protobuf:"bytes,19,opt,name=memo,proto3" json:"memo"`
	CreatedBy             int64                    `protobuf:"varint,20,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt             *timestamppb.Timestamp   `protobuf:"bytes,21,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy             int64                    `protobuf:"varint,22,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt             *timestamppb.Timestamp   `protobuf:"bytes,23,opt,name=updatedAt,proto3" json:"updatedAt"`
	ProjectName           string                   `protobuf:"bytes,24,opt,name=projectName,proto3" json:"projectName"`
	OrganizationName      string                   `protobuf:"bytes,25,opt,name=organizationName,proto3" json:"organizationName"`
	WorkmanHash           *WorkmanAttendanceHashVo `protobuf:"bytes,26,opt,name=workmanHash,proto3" json:"workmanHash"`
	UploadDocument        []*UploadDocumentInfo    `protobuf:"bytes,27,rep,name=uploadDocument,proto3" json:"uploadDocument"`
}

func (x *WorkmanAttendanceVo) Reset() {
	*x = WorkmanAttendanceVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[604]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkmanAttendanceVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkmanAttendanceVo) ProtoMessage() {}

func (x *WorkmanAttendanceVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[604]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkmanAttendanceVo.ProtoReflect.Descriptor instead.
func (*WorkmanAttendanceVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{604}
}

func (x *WorkmanAttendanceVo) GetWorkmanAttendanceId() int64 {
	if x != nil {
		return x.WorkmanAttendanceId
	}
	return 0
}

func (x *WorkmanAttendanceVo) GetWorkmanAttendanceCode() string {
	if x != nil {
		return x.WorkmanAttendanceCode
	}
	return ""
}

func (x *WorkmanAttendanceVo) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *WorkmanAttendanceVo) GetDeptName() string {
	if x != nil {
		return x.DeptName
	}
	return ""
}

func (x *WorkmanAttendanceVo) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *WorkmanAttendanceVo) GetIdCardNo() string {
	if x != nil {
		return x.IdCardNo
	}
	return ""
}

func (x *WorkmanAttendanceVo) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *WorkmanAttendanceVo) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *WorkmanAttendanceVo) GetSafetyHat() string {
	if x != nil {
		return x.SafetyHat
	}
	return ""
}

func (x *WorkmanAttendanceVo) GetWearMask() string {
	if x != nil {
		return x.WearMask
	}
	return ""
}

func (x *WorkmanAttendanceVo) GetHealthCode() string {
	if x != nil {
		return x.HealthCode
	}
	return ""
}

func (x *WorkmanAttendanceVo) GetTravelCode() string {
	if x != nil {
		return x.TravelCode
	}
	return ""
}

func (x *WorkmanAttendanceVo) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *WorkmanAttendanceVo) GetPlatFormType() string {
	if x != nil {
		return x.PlatFormType
	}
	return ""
}

func (x *WorkmanAttendanceVo) GetWorkmanType() string {
	if x != nil {
		return x.WorkmanType
	}
	return ""
}

func (x *WorkmanAttendanceVo) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *WorkmanAttendanceVo) GetUploadDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UploadDate
	}
	return nil
}

func (x *WorkmanAttendanceVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *WorkmanAttendanceVo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *WorkmanAttendanceVo) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *WorkmanAttendanceVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WorkmanAttendanceVo) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *WorkmanAttendanceVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *WorkmanAttendanceVo) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *WorkmanAttendanceVo) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

func (x *WorkmanAttendanceVo) GetWorkmanHash() *WorkmanAttendanceHashVo {
	if x != nil {
		return x.WorkmanHash
	}
	return nil
}

func (x *WorkmanAttendanceVo) GetUploadDocument() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocument
	}
	return nil
}

type WorkmanAttendanceHashVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	WorkmanAttendanceId int64                  `protobuf:"varint,2,opt,name=workmanAttendanceId,proto3" json:"workmanAttendanceId"`
	InfoHash            string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
	Msg                 string                 `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedAt           *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updatedAt,proto3" json:"updatedAt"`
}

func (x *WorkmanAttendanceHashVo) Reset() {
	*x = WorkmanAttendanceHashVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[605]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkmanAttendanceHashVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkmanAttendanceHashVo) ProtoMessage() {}

func (x *WorkmanAttendanceHashVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[605]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkmanAttendanceHashVo.ProtoReflect.Descriptor instead.
func (*WorkmanAttendanceHashVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{605}
}

func (x *WorkmanAttendanceHashVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WorkmanAttendanceHashVo) GetWorkmanAttendanceId() int64 {
	if x != nil {
		return x.WorkmanAttendanceId
	}
	return 0
}

func (x *WorkmanAttendanceHashVo) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *WorkmanAttendanceHashVo) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

func (x *WorkmanAttendanceHashVo) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *WorkmanAttendanceHashVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WorkmanAttendanceHashVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

//===Material Proto begin===
type MaterialReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaterialId            int64                  `protobuf:"varint,1,opt,name=materialId,proto3" json:"materialId"`
	MaterialCode          string                 `protobuf:"bytes,2,opt,name=materialCode,proto3" json:"materialCode"`
	ProjectId             int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	FromOrganizationId    int64                  `protobuf:"varint,4,opt,name=fromOrganizationId,proto3" json:"fromOrganizationId"`
	FromPlatFormType      string                 `protobuf:"bytes,5,opt,name=fromPlatFormType,proto3" json:"fromPlatFormType"`
	MaterialName          string                 `protobuf:"bytes,6,opt,name=materialName,proto3" json:"materialName"`
	MaterialType          string                 `protobuf:"bytes,7,opt,name=materialType,proto3" json:"materialType"`
	MaterialSpecification string                 `protobuf:"bytes,8,opt,name=materialSpecification,proto3" json:"materialSpecification"`
	MaterialUnit          string                 `protobuf:"bytes,9,opt,name=materialUnit,proto3" json:"materialUnit"`
	SupplierName          string                 `protobuf:"bytes,10,opt,name=supplierName,proto3" json:"supplierName"`
	Quantity              int64                  `protobuf:"varint,11,opt,name=quantity,proto3" json:"quantity"`
	Amount                int64                  `protobuf:"varint,12,opt,name=amount,proto3" json:"amount"`
	ReceiveName           string                 `protobuf:"bytes,13,opt,name=receiveName,proto3" json:"receiveName"`
	ReceiveDate           *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=receiveDate,proto3" json:"receiveDate"`
	ReceiveBy             int64                  `protobuf:"varint,15,opt,name=receiveBy,proto3" json:"receiveBy"`
	ReceiveAt             *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=receiveAt,proto3" json:"receiveAt"`
	ActiveStatus          string                 `protobuf:"bytes,17,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo                  string                 `protobuf:"bytes,18,opt,name=memo,proto3" json:"memo"`
	CreatedBy             int64                  `protobuf:"varint,19,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt             *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy             int64                  `protobuf:"varint,21,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt             *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=updatedAt,proto3" json:"updatedAt"`
	UploadDocument        []*UploadDocumentInfo  `protobuf:"bytes,23,rep,name=uploadDocument,proto3" json:"uploadDocument"`
	InfoHash              string                 `protobuf:"bytes,24,opt,name=infoHash,proto3" json:"infoHash"`
	ManagerId             int64                  `protobuf:"varint,25,opt,name=managerId,proto3" json:"managerId"`
}

func (x *MaterialReq) Reset() {
	*x = MaterialReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[606]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialReq) ProtoMessage() {}

func (x *MaterialReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[606]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialReq.ProtoReflect.Descriptor instead.
func (*MaterialReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{606}
}

func (x *MaterialReq) GetMaterialId() int64 {
	if x != nil {
		return x.MaterialId
	}
	return 0
}

func (x *MaterialReq) GetMaterialCode() string {
	if x != nil {
		return x.MaterialCode
	}
	return ""
}

func (x *MaterialReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *MaterialReq) GetFromOrganizationId() int64 {
	if x != nil {
		return x.FromOrganizationId
	}
	return 0
}

func (x *MaterialReq) GetFromPlatFormType() string {
	if x != nil {
		return x.FromPlatFormType
	}
	return ""
}

func (x *MaterialReq) GetMaterialName() string {
	if x != nil {
		return x.MaterialName
	}
	return ""
}

func (x *MaterialReq) GetMaterialType() string {
	if x != nil {
		return x.MaterialType
	}
	return ""
}

func (x *MaterialReq) GetMaterialSpecification() string {
	if x != nil {
		return x.MaterialSpecification
	}
	return ""
}

func (x *MaterialReq) GetMaterialUnit() string {
	if x != nil {
		return x.MaterialUnit
	}
	return ""
}

func (x *MaterialReq) GetSupplierName() string {
	if x != nil {
		return x.SupplierName
	}
	return ""
}

func (x *MaterialReq) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *MaterialReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *MaterialReq) GetReceiveName() string {
	if x != nil {
		return x.ReceiveName
	}
	return ""
}

func (x *MaterialReq) GetReceiveDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveDate
	}
	return nil
}

func (x *MaterialReq) GetReceiveBy() int64 {
	if x != nil {
		return x.ReceiveBy
	}
	return 0
}

func (x *MaterialReq) GetReceiveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveAt
	}
	return nil
}

func (x *MaterialReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *MaterialReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *MaterialReq) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *MaterialReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MaterialReq) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *MaterialReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *MaterialReq) GetUploadDocument() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocument
	}
	return nil
}

func (x *MaterialReq) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *MaterialReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type MaterialIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaterialIds []int64 `protobuf:"varint,1,rep,packed,name=materialIds,proto3" json:"materialIds"`
	ManagerId   int64   `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *MaterialIdsReq) Reset() {
	*x = MaterialIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[607]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialIdsReq) ProtoMessage() {}

func (x *MaterialIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[607]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialIdsReq.ProtoReflect.Descriptor instead.
func (*MaterialIdsReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{607}
}

func (x *MaterialIdsReq) GetMaterialIds() []int64 {
	if x != nil {
		return x.MaterialIds
	}
	return nil
}

func (x *MaterialIdsReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ListMaterialReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaterialId            int64                  `protobuf:"varint,1,opt,name=materialId,proto3" json:"materialId"`
	MaterialCode          string                 `protobuf:"bytes,2,opt,name=materialCode,proto3" json:"materialCode"`
	ProjectId             int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	FromOrganizationId    int64                  `protobuf:"varint,4,opt,name=fromOrganizationId,proto3" json:"fromOrganizationId"`
	FromPlatFormType      string                 `protobuf:"bytes,5,opt,name=fromPlatFormType,proto3" json:"fromPlatFormType"`
	MaterialName          string                 `protobuf:"bytes,6,opt,name=materialName,proto3" json:"materialName"`
	MaterialType          string                 `protobuf:"bytes,7,opt,name=materialType,proto3" json:"materialType"`
	MaterialSpecification string                 `protobuf:"bytes,8,opt,name=materialSpecification,proto3" json:"materialSpecification"`
	MaterialUnit          string                 `protobuf:"bytes,9,opt,name=materialUnit,proto3" json:"materialUnit"`
	SupplierName          string                 `protobuf:"bytes,10,opt,name=supplierName,proto3" json:"supplierName"`
	Quantity              int64                  `protobuf:"varint,11,opt,name=quantity,proto3" json:"quantity"`
	Amount                int64                  `protobuf:"varint,12,opt,name=amount,proto3" json:"amount"`
	ReceiveName           string                 `protobuf:"bytes,13,opt,name=receiveName,proto3" json:"receiveName"`
	ReceiveDate           *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=receiveDate,proto3" json:"receiveDate"`
	ReceiveBy             int64                  `protobuf:"varint,15,opt,name=receiveBy,proto3" json:"receiveBy"`
	ReceiveAt             *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=receiveAt,proto3" json:"receiveAt"`
	ActiveStatus          string                 `protobuf:"bytes,17,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo                  string                 `protobuf:"bytes,18,opt,name=memo,proto3" json:"memo"`
	CreatedBy             int64                  `protobuf:"varint,19,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt             *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy             int64                  `protobuf:"varint,21,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt             *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=updatedAt,proto3" json:"updatedAt"`
	ProjectName           string                 `protobuf:"bytes,23,opt,name=projectName,proto3" json:"projectName"`
	FromOrganizationName  string                 `protobuf:"bytes,24,opt,name=fromOrganizationName,proto3" json:"fromOrganizationName"`
	ManagerId             int64                  `protobuf:"varint,25,opt,name=managerId,proto3" json:"managerId"`
	Page                  *Page                  `protobuf:"bytes,26,opt,name=page,proto3" json:"page"`
	StartAt               *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=startAt,proto3" json:"startAt"`
	EndAt                 *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=endAt,proto3" json:"endAt"`
}

func (x *ListMaterialReq) Reset() {
	*x = ListMaterialReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[608]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMaterialReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMaterialReq) ProtoMessage() {}

func (x *ListMaterialReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[608]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMaterialReq.ProtoReflect.Descriptor instead.
func (*ListMaterialReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{608}
}

func (x *ListMaterialReq) GetMaterialId() int64 {
	if x != nil {
		return x.MaterialId
	}
	return 0
}

func (x *ListMaterialReq) GetMaterialCode() string {
	if x != nil {
		return x.MaterialCode
	}
	return ""
}

func (x *ListMaterialReq) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListMaterialReq) GetFromOrganizationId() int64 {
	if x != nil {
		return x.FromOrganizationId
	}
	return 0
}

func (x *ListMaterialReq) GetFromPlatFormType() string {
	if x != nil {
		return x.FromPlatFormType
	}
	return ""
}

func (x *ListMaterialReq) GetMaterialName() string {
	if x != nil {
		return x.MaterialName
	}
	return ""
}

func (x *ListMaterialReq) GetMaterialType() string {
	if x != nil {
		return x.MaterialType
	}
	return ""
}

func (x *ListMaterialReq) GetMaterialSpecification() string {
	if x != nil {
		return x.MaterialSpecification
	}
	return ""
}

func (x *ListMaterialReq) GetMaterialUnit() string {
	if x != nil {
		return x.MaterialUnit
	}
	return ""
}

func (x *ListMaterialReq) GetSupplierName() string {
	if x != nil {
		return x.SupplierName
	}
	return ""
}

func (x *ListMaterialReq) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *ListMaterialReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ListMaterialReq) GetReceiveName() string {
	if x != nil {
		return x.ReceiveName
	}
	return ""
}

func (x *ListMaterialReq) GetReceiveDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveDate
	}
	return nil
}

func (x *ListMaterialReq) GetReceiveBy() int64 {
	if x != nil {
		return x.ReceiveBy
	}
	return 0
}

func (x *ListMaterialReq) GetReceiveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveAt
	}
	return nil
}

func (x *ListMaterialReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *ListMaterialReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *ListMaterialReq) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *ListMaterialReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListMaterialReq) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *ListMaterialReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ListMaterialReq) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ListMaterialReq) GetFromOrganizationName() string {
	if x != nil {
		return x.FromOrganizationName
	}
	return ""
}

func (x *ListMaterialReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListMaterialReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListMaterialReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *ListMaterialReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

type MaterialsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*MaterialVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64         `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64         `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64         `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *MaterialsResp) Reset() {
	*x = MaterialsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[609]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialsResp) ProtoMessage() {}

func (x *MaterialsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[609]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialsResp.ProtoReflect.Descriptor instead.
func (*MaterialsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{609}
}

func (x *MaterialsResp) GetList() []*MaterialVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *MaterialsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MaterialsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *MaterialsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetMaterialHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*MaterialHashVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64             `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64             `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetMaterialHashResp) Reset() {
	*x = GetMaterialHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[610]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMaterialHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMaterialHashResp) ProtoMessage() {}

func (x *GetMaterialHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[610]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMaterialHashResp.ProtoReflect.Descriptor instead.
func (*GetMaterialHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{610}
}

func (x *GetMaterialHashResp) GetList() []*MaterialHashVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetMaterialHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetMaterialHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetMaterialHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type MaterialVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaterialId            int64                  `protobuf:"varint,1,opt,name=materialId,proto3" json:"materialId"`
	MaterialCode          string                 `protobuf:"bytes,2,opt,name=materialCode,proto3" json:"materialCode"`
	ProjectId             int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	FromOrganizationId    int64                  `protobuf:"varint,4,opt,name=fromOrganizationId,proto3" json:"fromOrganizationId"`
	FromPlatFormType      string                 `protobuf:"bytes,5,opt,name=fromPlatFormType,proto3" json:"fromPlatFormType"`
	MaterialName          string                 `protobuf:"bytes,6,opt,name=materialName,proto3" json:"materialName"`
	MaterialType          string                 `protobuf:"bytes,7,opt,name=materialType,proto3" json:"materialType"`
	MaterialSpecification string                 `protobuf:"bytes,8,opt,name=materialSpecification,proto3" json:"materialSpecification"`
	MaterialUnit          string                 `protobuf:"bytes,9,opt,name=materialUnit,proto3" json:"materialUnit"`
	SupplierName          string                 `protobuf:"bytes,10,opt,name=supplierName,proto3" json:"supplierName"`
	Quantity              int64                  `protobuf:"varint,11,opt,name=quantity,proto3" json:"quantity"`
	Amount                int64                  `protobuf:"varint,12,opt,name=amount,proto3" json:"amount"`
	ReceiveName           string                 `protobuf:"bytes,13,opt,name=receiveName,proto3" json:"receiveName"`
	ReceiveDate           *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=receiveDate,proto3" json:"receiveDate"`
	ReceiveBy             int64                  `protobuf:"varint,15,opt,name=receiveBy,proto3" json:"receiveBy"`
	ReceiveAt             *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=receiveAt,proto3" json:"receiveAt"`
	ActiveStatus          string                 `protobuf:"bytes,17,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo                  string                 `protobuf:"bytes,18,opt,name=memo,proto3" json:"memo"`
	CreatedBy             int64                  `protobuf:"varint,19,opt,name=createdBy,proto3" json:"createdBy"`
	CreatedAt             *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedBy             int64                  `protobuf:"varint,21,opt,name=updatedBy,proto3" json:"updatedBy"`
	UpdatedAt             *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=updatedAt,proto3" json:"updatedAt"`
	ProjectName           string                 `protobuf:"bytes,23,opt,name=projectName,proto3" json:"projectName"`
	FromOrganizationName  string                 `protobuf:"bytes,24,opt,name=fromOrganizationName,proto3" json:"fromOrganizationName"`
	MaterialHash          *MaterialHashVo        `protobuf:"bytes,25,opt,name=materialHash,proto3" json:"materialHash"`
	UploadDocument        []*UploadDocumentInfo  `protobuf:"bytes,26,rep,name=uploadDocument,proto3" json:"uploadDocument"`
}

func (x *MaterialVo) Reset() {
	*x = MaterialVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[611]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialVo) ProtoMessage() {}

func (x *MaterialVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[611]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialVo.ProtoReflect.Descriptor instead.
func (*MaterialVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{611}
}

func (x *MaterialVo) GetMaterialId() int64 {
	if x != nil {
		return x.MaterialId
	}
	return 0
}

func (x *MaterialVo) GetMaterialCode() string {
	if x != nil {
		return x.MaterialCode
	}
	return ""
}

func (x *MaterialVo) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *MaterialVo) GetFromOrganizationId() int64 {
	if x != nil {
		return x.FromOrganizationId
	}
	return 0
}

func (x *MaterialVo) GetFromPlatFormType() string {
	if x != nil {
		return x.FromPlatFormType
	}
	return ""
}

func (x *MaterialVo) GetMaterialName() string {
	if x != nil {
		return x.MaterialName
	}
	return ""
}

func (x *MaterialVo) GetMaterialType() string {
	if x != nil {
		return x.MaterialType
	}
	return ""
}

func (x *MaterialVo) GetMaterialSpecification() string {
	if x != nil {
		return x.MaterialSpecification
	}
	return ""
}

func (x *MaterialVo) GetMaterialUnit() string {
	if x != nil {
		return x.MaterialUnit
	}
	return ""
}

func (x *MaterialVo) GetSupplierName() string {
	if x != nil {
		return x.SupplierName
	}
	return ""
}

func (x *MaterialVo) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *MaterialVo) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *MaterialVo) GetReceiveName() string {
	if x != nil {
		return x.ReceiveName
	}
	return ""
}

func (x *MaterialVo) GetReceiveDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveDate
	}
	return nil
}

func (x *MaterialVo) GetReceiveBy() int64 {
	if x != nil {
		return x.ReceiveBy
	}
	return 0
}

func (x *MaterialVo) GetReceiveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveAt
	}
	return nil
}

func (x *MaterialVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *MaterialVo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *MaterialVo) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *MaterialVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MaterialVo) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *MaterialVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *MaterialVo) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *MaterialVo) GetFromOrganizationName() string {
	if x != nil {
		return x.FromOrganizationName
	}
	return ""
}

func (x *MaterialVo) GetMaterialHash() *MaterialHashVo {
	if x != nil {
		return x.MaterialHash
	}
	return nil
}

func (x *MaterialVo) GetUploadDocument() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocument
	}
	return nil
}

type MaterialHashVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	MaterialId   int64                  `protobuf:"varint,2,opt,name=materialId,proto3" json:"materialId"`
	InfoHash     string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
	Msg          string                 `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updatedAt,proto3" json:"updatedAt"`
}

func (x *MaterialHashVo) Reset() {
	*x = MaterialHashVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[612]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialHashVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialHashVo) ProtoMessage() {}

func (x *MaterialHashVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[612]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialHashVo.ProtoReflect.Descriptor instead.
func (*MaterialHashVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{612}
}

func (x *MaterialHashVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MaterialHashVo) GetMaterialId() int64 {
	if x != nil {
		return x.MaterialId
	}
	return 0
}

func (x *MaterialHashVo) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *MaterialHashVo) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

func (x *MaterialHashVo) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *MaterialHashVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MaterialHashVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ListMaterialDistinctNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaterialName string `protobuf:"bytes,1,opt,name=materialName,proto3" json:"materialName"`
	ManagerId    int64  `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
	Page         *Page  `protobuf:"bytes,3,opt,name=page,proto3" json:"page"`
}

func (x *ListMaterialDistinctNameReq) Reset() {
	*x = ListMaterialDistinctNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[613]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMaterialDistinctNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMaterialDistinctNameReq) ProtoMessage() {}

func (x *ListMaterialDistinctNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[613]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMaterialDistinctNameReq.ProtoReflect.Descriptor instead.
func (*ListMaterialDistinctNameReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{613}
}

func (x *ListMaterialDistinctNameReq) GetMaterialName() string {
	if x != nil {
		return x.MaterialName
	}
	return ""
}

func (x *ListMaterialDistinctNameReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListMaterialDistinctNameReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type MaterialDistinctNameVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaterialName string `protobuf:"bytes,1,opt,name=materialName,proto3" json:"materialName"`
}

func (x *MaterialDistinctNameVo) Reset() {
	*x = MaterialDistinctNameVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[614]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialDistinctNameVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialDistinctNameVo) ProtoMessage() {}

func (x *MaterialDistinctNameVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[614]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialDistinctNameVo.ProtoReflect.Descriptor instead.
func (*MaterialDistinctNameVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{614}
}

func (x *MaterialDistinctNameVo) GetMaterialName() string {
	if x != nil {
		return x.MaterialName
	}
	return ""
}

type ListMaterialDistinctNameResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*MaterialDistinctNameVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                     `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                     `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                     `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListMaterialDistinctNameResp) Reset() {
	*x = ListMaterialDistinctNameResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[615]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMaterialDistinctNameResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMaterialDistinctNameResp) ProtoMessage() {}

func (x *ListMaterialDistinctNameResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[615]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMaterialDistinctNameResp.ProtoReflect.Descriptor instead.
func (*ListMaterialDistinctNameResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{615}
}

func (x *ListMaterialDistinctNameResp) GetList() []*MaterialDistinctNameVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListMaterialDistinctNameResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListMaterialDistinctNameResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMaterialDistinctNameResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

var File_ManagerService_proto protoreflect.FileDescriptor

var file_ManagerService_proto_rawDesc = []byte{
	0x0a, 0x14, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x42, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0xfe, 0x03, 0x0a, 0x0e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xcd, 0x01, 0x0a, 0x17, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xa0, 0x01, 0x0a, 0x18, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x16, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6e, 0x61, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6e, 0x61,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6e, 0x61, 0x70, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x6f, 0x0a, 0x0b, 0x43, 0x6e, 0x61, 0x70, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6e, 0x61, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6e, 0x61, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6e, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6e, 0x61, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6e, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6e,
	0x61, 0x70, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x61, 0x67, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x41, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x67,
	0x56, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xeb, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x2c, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x6d,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x31, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x8b, 0x03, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34,
	0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2c,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x97, 0x01, 0x0a,
	0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x22, 0x32, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x55, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x2c, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x58, 0x0a, 0x18, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x61, 0x67, 0x42, 0x79, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x19, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x54, 0x61, 0x67, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0x62, 0x0a, 0x1c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x1d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x8e,
	0x01, 0x0a, 0x0b, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2d,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x55, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x60, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x5c, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x27, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x42, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x0f, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x70, 0x0a,
	0x10, 0x54, 0x61, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22,
	0x96, 0x01, 0x0a, 0x11, 0x54, 0x61, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x97, 0x02, 0x0a, 0x0b, 0x54, 0x61, 0x67,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x22, 0x6a, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61,
	0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2f,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x6a, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x94, 0x01, 0x0a,
	0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61,
	0x67, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x77, 0x0a, 0x0d, 0x54, 0x61, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x56, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x09, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x69, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x22, 0x8c, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x69, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x69, 0x56, 0x6f, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xe0, 0x02, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x69, 0x56, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61,
	0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61,
	0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x22, 0xa9, 0x01, 0x0a, 0x0b, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x49, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6d, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x4d, 0x49, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x4d, 0x49, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x49, 0x56, 0x6f,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x4d, 0x49, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x4d, 0x49, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x50, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x49, 0x56,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x69, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6e, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d,
	0x49, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c,
	0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f,
	0x67, 0x6f, 0x55, 0x72, 0x6c, 0x22, 0x9c, 0x02, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x6e, 0x65, 0x4d, 0x49, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f,
	0x48, 0x61, 0x73, 0x68, 0x22, 0x29, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e,
	0x65, 0x4d, 0x49, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x95, 0x02, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d,
	0x69, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x69, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x22, 0x26, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x69, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xe0, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x8d, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x56, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x22,
	0x96, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x6f,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xef, 0x04, 0x0a, 0x0d, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62,
	0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x54, 0x6f, 0x69, 0x62, 0x6b, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x6f, 0x69, 0x62, 0x6b, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x6e, 0x6b,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e,
	0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x58, 0x0a, 0x14, 0x53, 0x65,
	0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x15, 0x53, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x8e, 0x02, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x22, 0x96, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xeb, 0x02, 0x0a,
	0x0d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x56, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61,
	0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61,
	0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x22, 0x9d, 0x02, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52,
	0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x22, 0x2e, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xbb, 0x02, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52,
	0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x22, 0x2e, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb4, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x72, 0x72, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x9a, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x72,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x45,
	0x72, 0x72, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xe7, 0x03, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x72, 0x72, 0x56, 0x6f,
	0x12, 0x32, 0x0a, 0x14, 0x74, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x74, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34,
	0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x70, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x74, 0x70, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x74, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x64, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x72, 0x72, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x70, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x70,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x19,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x99, 0x04, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x70, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x70,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x01,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x72, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x9d, 0x0a, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x72, 0x56, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x70, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x70, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x44,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x44,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53,
	0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x56, 0x0a, 0x16, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x17, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x18, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc5, 0x03, 0x0a, 0x17, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x5b, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x5e, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x46,
	0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0xa4, 0x03, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x70, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x74, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d,
	0x69, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x6d, 0x0a, 0x15, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x69, 0x74,
	0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x77, 0x61, 0x69, 0x74, 0x4e,
	0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x94,
	0x05, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x64,
	0x35, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x4d, 0x64, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x54, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x4e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x41, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x41, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x22, 0xa4, 0x04, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e,
	0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x44, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xc7, 0x03, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x56, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09,
	0x73, 0x65, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x65, 0x6e,
	0x64, 0x4f, 0x75, 0x74, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x76, 0x0a, 0x16, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7e, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x6b, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x40, 0x0a, 0x18, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x22, 0x5e, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x42, 0x79, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x61, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x42, 0x79, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x4e, 0x6f, 0x22, 0x68, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22,
	0xc9, 0x02, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x79, 0x70,
	0x65, 0x54, 0x77, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65,
	0x54, 0x77, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64,
	0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x10,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65,
	0x54, 0x77, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x54,
	0x77, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65,
	0x22, 0xe4, 0x02, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x54,
	0x77, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x54, 0x77,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x12,
	0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xdc, 0x02, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x6e,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x54, 0x77, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x54, 0x77, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x79,
	0x70, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x79, 0x70, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34,
	0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x2a, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x2b, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x2b, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x93, 0x01, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x6a, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x6d, 0x69, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xe4,
	0x06, 0x0a, 0x08, 0x4d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x69, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x69, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x61,
	0x72, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x54, 0x6f, 0x69, 0x62, 0x6b, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x6f, 0x69, 0x62, 0x6b, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12,
	0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x54, 0x6f, 0x69, 0x62, 0x6b, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x6f, 0x69, 0x62, 0x6b, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x72,
	0x64, 0x4e, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x6f, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa3, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d,
	0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x9d, 0x03,
	0x0a, 0x0f, 0x4d, 0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72,
	0x64, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x4e,
	0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x69, 0x62, 0x6b,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x69, 0x62, 0x6b, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x72, 0x64, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x9f, 0x01,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x9e, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x6f, 0x6c, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0xc2, 0x01, 0x0a, 0x18, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x79, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x79,
	0x41, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x79, 0x59, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62,
	0x79, 0x59, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x44, 0x61, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x79, 0x44, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x79, 0x4d, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x79, 0x4d, 0x69, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x79, 0x43, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x62, 0x79, 0x43, 0x6f, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x79, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61,
	0x67, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64,
	0x22, 0x91, 0x03, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x56, 0x0a, 0x12, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x64, 0x12, 0x56, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x7a, 0x6f, 0x6e, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x0a, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x56, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x86, 0x03, 0x0a, 0x10, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xf2, 0x06, 0x0a, 0x15, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x56, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x06, 0x6d,
	0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0c, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a,
	0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74,
	0x53, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f,
	0x74, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0xe2, 0x06, 0x0a, 0x17, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69,
	0x62, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x56, 0x6f, 0x52, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x56, 0x6f, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2e, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34,
	0x0a, 0x15, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42,
	0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3a, 0x0a, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0xcb, 0x06, 0x0a,
	0x16, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x59, 0x65, 0x61,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x69, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49,
	0x64, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f,
	0x52, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f,
	0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e,
	0x0a, 0x12, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3a, 0x0a, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a,
	0x0a, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f,
	0x74, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f,
	0x74, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f,
	0x74, 0x53, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a,
	0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xb0, 0x01, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xae, 0x01, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa3, 0x01,
	0x0a, 0x19, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x79, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x79, 0x41, 0x6c,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x62, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x79, 0x59, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x79, 0x59,
	0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x44, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x62, 0x79, 0x44, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x79, 0x4d,
	0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x79, 0x4d, 0x69, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x79, 0x43, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x79,
	0x43, 0x6f, 0x6d, 0x22, 0x79, 0x0a, 0x17, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x6d,
	0x69, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc0,
	0x03, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x69, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x57,
	0x0a, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6f, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x22, 0x9b, 0x07, 0x0a, 0x16, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x56, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x06, 0x6d,
	0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x36, 0x0a, 0x16, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x61, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x16, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1d, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50,
	0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a,
	0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50,
	0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22,
	0x8b, 0x07, 0x0a, 0x18, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x6d,
	0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x38, 0x0a, 0x17, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x17, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x44, 0x0a, 0x1d, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x61,
	0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50,
	0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x40, 0x0a, 0x1b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3e, 0x0a, 0x1a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf4, 0x06,
	0x0a, 0x17, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x59,
	0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x3a, 0x0a,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12,
	0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x06,
	0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x36, 0x0a, 0x16, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x16, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x61, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1d, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1d, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42,
	0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x50, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xb2, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xb0, 0x01, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x59,
	0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa7, 0x01,
	0x0a, 0x1d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x79, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x62, 0x79, 0x41, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x79, 0x59, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x62, 0x79, 0x59, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x44, 0x61, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x79, 0x44, 0x61, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x79, 0x4d, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x79, 0x4d,
	0x69, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x43, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x62, 0x79, 0x43, 0x6f, 0x6d, 0x22, 0x7d, 0x0a, 0x1b, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9d, 0x03, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64,
	0x41, 0x74, 0x12, 0x5b, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x12,
	0x5b, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xde, 0x05, 0x0a, 0x17, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d,
	0x69, 0x62, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x56, 0x6f, 0x52, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a,
	0x13, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2e, 0x0a, 0x12, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x32, 0x0a, 0x14, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x24, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4e,
	0x6f, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x24, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x23, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x23, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xce, 0x05, 0x0a, 0x19, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x6d,
	0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x28, 0x0a, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x61,
	0x69, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x14, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x24, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x24, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4e,
	0x6f, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a,
	0x23, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x23, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x21,
	0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x3d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0xb7, 0x05, 0x0a, 0x18, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x69, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x56, 0x6f, 0x52, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30,
	0x0a, 0x13, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2e, 0x0a, 0x12, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x14, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x24, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x4e, 0x6f, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x24, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x23, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x23, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4e,
	0x6f, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb2, 0x01, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x3c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x59,
	0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0xb4, 0x03, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x49,
	0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x61, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x12, 0x46, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x45, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x22, 0x8e, 0x02, 0x0a, 0x20, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x79, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x79,
	0x41, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x79, 0x59, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62,
	0x79, 0x59, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x44, 0x61, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x79, 0x44, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x79, 0x4d, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x79, 0x4d, 0x69, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x79, 0x43, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x62, 0x79, 0x43, 0x6f, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x79, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x4d, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x22, 0xa1, 0x03, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e,
	0x64, 0x41, 0x74, 0x12, 0x5e, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x64, 0x12, 0x5e, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6f, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xb2, 0x02,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x56, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64,
	0x41, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d,
	0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x69, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x6d, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x22, 0xae, 0x08, 0x0a, 0x15, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x69, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x56, 0x6f, 0x52, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x56, 0x6f, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x34, 0x0a, 0x15, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x42, 0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42,
	0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f,
	0x74, 0x53, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xac, 0x01, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x9e, 0x08, 0x0a, 0x17, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12,
	0x4a, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x69, 0x62, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49,
	0x64, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f,
	0x52, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f,
	0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e,
	0x0a, 0x12, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3a, 0x0a, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a,
	0x0a, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f,
	0x74, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f,
	0x74, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f,
	0x74, 0x53, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb0, 0x01, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x87, 0x08,
	0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x59, 0x65,
	0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x44, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x56, 0x6f, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d,
	0x69, 0x62, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x56, 0x6f, 0x52, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0c, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x56, 0x6f, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x15, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x42, 0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a,
	0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74,
	0x53, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xf8, 0x03, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x26,
	0x0a, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x56, 0x6f, 0x52, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0c, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x56, 0x6f, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x56, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x97, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x53, 0x75, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x61, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64,
	0x22, 0x5e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65,
	0x65, 0x64, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64,
	0x22, 0x7c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x13,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3d,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x65, 0x64,
	0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x50,
	0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6e, 0x65, 0x65, 0x64, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5b, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x6d, 0x69, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x42,
	0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d,
	0x69, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x69, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x69, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x62, 0x61,
	0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x0c,
	0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xa0, 0x02, 0x0a,
	0x2a, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e,
	0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x6e,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x61,
	0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6d,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x22,
	0x88, 0x02, 0x0a, 0x26, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x79, 0x0a, 0x2b, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xdd, 0x01, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61,
	0x6e, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65,
	0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x65, 0x6e, 0x64, 0x41, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x25, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x79, 0x0a, 0x2c, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x59,
	0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d,
	0x69, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x22, 0x52, 0x0a, 0x16, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x56, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52,
	0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x8f, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d,
	0x69, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x13, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x22, 0xa9, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x79, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x5f, 0x0a, 0x17, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e,
	0x6b, 0x56, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0xa9, 0x01, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x02, 0x76, 0x6f,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x56, 0x6f, 0x52,
	0x02, 0x76, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x8c, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x6d, 0x69, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x22, 0xd2, 0x02, 0x0a, 0x10, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x56, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e,
	0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x3c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x95, 0x01,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72,
	0x64, 0x4e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x72, 0x64,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x0e,
	0x70, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x69, 0x74, 0x4e, 0x75,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x61, 0x69, 0x74, 0x4e, 0x75, 0x6d,
	0x22, 0x75, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0xa9, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a,
	0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x22, 0x5c, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x69, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x49, 0x64,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x06,
	0x4d, 0x69, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e,
	0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x22, 0x8d,
	0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x69, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x76,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x7a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c,
	0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x22, 0x99, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x9e, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4d, 0x69, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x6d, 0x69, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x0a, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b,
	0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e,
	0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x22, 0x95,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x9c, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x22, 0x9c, 0x05, 0x0a, 0x10, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x42, 0x0a, 0x0e, 0x71, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x71, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x50, 0x0a, 0x15, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x13,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x54,
	0x0a, 0x17, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x50, 0x0a, 0x15, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x85, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x73,
	0x22, 0xc9, 0x04, 0x0a, 0x11, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x42, 0x0a, 0x0e, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x50, 0x0a, 0x15, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x54, 0x0a, 0x17, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x17, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x50, 0x0a, 0x15, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x22, 0xa3, 0x01, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0xb5, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x13, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x0f, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28,
	0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x11, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x11, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x73, 0x22, 0x9b, 0x03, 0x0a, 0x15, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2a,
	0x0a, 0x10, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x40, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61,
	0x79, 0x42, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x61, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x44, 0x0a, 0x0f,
	0x70, 0x61, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0xf2, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x6d, 0x69, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x1c, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb9,
	0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61,
	0x6e, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65,
	0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61,
	0x6e, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65,
	0x61, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x97, 0x02, 0x0a, 0x21, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d,
	0x69, 0x62, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e,
	0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x6d, 0x69, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x1b, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa4, 0x02, 0x0a, 0x1b, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a,
	0x6f, 0x6e, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x22, 0xb7,
	0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61,
	0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e,
	0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x8b, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x69, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x59, 0x65, 0x61,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x79, 0x65, 0x61, 0x72,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x79, 0x65,
	0x61, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x61, 0x6e,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe7, 0x01, 0x0a, 0x11, 0x52, 0x61, 0x6e, 0x6b, 0x4d,
	0x69, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x66, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x22, 0xa3, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x69, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x61, 0x6e,
	0x6b, 0x4d, 0x69, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x59, 0x65, 0x61, 0x72, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x8c, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x59, 0x65, 0x61, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x79, 0x65, 0x61,
	0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x12, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f,
	0x6d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a,
	0x0a, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f,
	0x74, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f,
	0x74, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x59, 0x65, 0x61, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x88, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x69,
	0x50, 0x61, 0x69, 0x64, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x80, 0x02,
	0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x69, 0x50, 0x61, 0x69, 0x64, 0x59, 0x65, 0x61, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1d, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1d, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x9d, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x69, 0x50, 0x61,
	0x69, 0x64, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x69,
	0x50, 0x61, 0x69, 0x64, 0x59, 0x65, 0x61, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x8a, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8e, 0x01,
	0x0a, 0x10, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x59, 0x65,
	0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa1,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x59, 0x65, 0x61, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x49, 0x42, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x22, 0x86, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4d, 0x49, 0x42,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x03, 0x6d, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x69, 0x56, 0x6f, 0x52, 0x03, 0x6d, 0x69,
	0x73, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x56, 0x6f, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x22, 0x9b,
	0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x90, 0x01, 0x0a,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x6c, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x4a, 0x73, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x4a, 0x73, 0x6f,
	0x6e, 0x56, 0x6f, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x5c, 0x0a,
	0x0a, 0x42, 0x69, 0x6e, 0x64, 0x4a, 0x73, 0x6f, 0x6e, 0x56, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x69, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x69, 0x6e,
	0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x58, 0x0a, 0x07, 0x42,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x6f, 0x0a, 0x09, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x22, 0x0a, 0x08, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9e, 0x04, 0x0a, 0x10, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x6c, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x12, 0x24, 0x0a,
	0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12,
	0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x9e, 0x01, 0x0a, 0x12,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x65,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x22, 0x2b, 0x0a, 0x11,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x94, 0x02, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x22, 0x92, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xc5, 0x04, 0x0a, 0x0b, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12,
	0x0e, 0x0a, 0x02, 0x6d, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6d, 0x69, 0x12,
	0x20, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x70,
	0x61, 0x79, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x70, 0x61, 0x79, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x20, 0x0a,
	0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62,
	0x61, 0x6e, 0x6b, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x22, 0xb9, 0x01,
	0x0a, 0x0b, 0x50, 0x61, 0x79, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0xcc, 0x01, 0x0a, 0x12, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x14, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9e, 0x01,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x25,
	0x0a, 0x0b, 0x4f, 0x70, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x65, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc1, 0x02, 0x0a, 0x0b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x6e,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x6b, 0x12, 0x26, 0x0a,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x69, 0x62, 0x6b, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x69, 0x62, 0x6b, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x61, 0x72, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x61, 0x72, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x66,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2c, 0x0a, 0x11, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x62, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x22, 0x2f, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9c,
	0x01, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x12,
	0x34, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x98, 0x02,
	0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x3a, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x27, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xcb, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22,
	0xb0, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x3e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0xca, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xc0, 0x01, 0x0a, 0x1a, 0x4d, 0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x28,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69,
	0x49, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x1b, 0x4d, 0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x3d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4d, 0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xbf, 0x01, 0x0a, 0x19, 0x4d, 0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x69, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x18, 0x43, 0x6f, 0x6d,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xd6, 0x01,
	0x0a, 0x16, 0x4d, 0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x62, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x17, 0x4d, 0x69, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf7, 0x01, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x44,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x4f, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8c, 0x02, 0x0a, 0x14, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x74, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x72,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xd5, 0x01,
	0x0a, 0x13, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6e, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x6b, 0x0a, 0x17, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x04,
	0x72, 0x65, 0x71, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x72, 0x65,
	0x71, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x18, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x72, 0x65, 0x70, 0x73, 0x22, 0x99, 0x02, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69,
	0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0xbc, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xa4, 0x02, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d,
	0x65, 0x64, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xd7, 0x01, 0x0a, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4d, 0x69, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4d, 0x69, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x2d, 0x0a, 0x13, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4d, 0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf9, 0x01, 0x0a, 0x0f, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4d, 0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x2a, 0x0a,
	0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x17, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x32, 0x0a, 0x18, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xfe, 0x01,
	0x0a, 0x14, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc2,
	0x03, 0x0a, 0x16, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4d, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x12, 0x30, 0x0a,
	0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x17, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x39, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x69, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xd7, 0x02, 0x0a,
	0x15, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x69,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x14, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75,
	0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x15, 0x52, 0x65,
	0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xcd, 0x04, 0x0a,
	0x13, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x0e,
	0x0a, 0x02, 0x6d, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6d, 0x69, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x4f, 0x72, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x90, 0x01, 0x0a,
	0x1a, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x43, 0x0a, 0x1b, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x22, 0xbd, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x57, 0x73, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0xa0, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x57, 0x73, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x74, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x74, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x74, 0x6e, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x74, 0x6e,
	0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x74, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x74, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x04, 0x72, 0x65, 0x73, 0x75, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x70, 0x73,
	0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x6f, 0x52, 0x04, 0x72, 0x65, 0x73, 0x75, 0x22, 0xb6, 0x01, 0x0a, 0x14, 0x54, 0x70, 0x73, 0x79,
	0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x48, 0x54, 0x4c, 0x53, 0x48, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x48, 0x54, 0x4c, 0x53, 0x48, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x50, 0x42, 0x48, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x59, 0x50, 0x42, 0x48, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x59,
	0x42, 0x48, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x59, 0x59, 0x42, 0x48, 0x12, 0x16,
	0x0a, 0x06, 0x50, 0x53, 0x51, 0x59, 0x42, 0x48, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x50, 0x53, 0x51, 0x59, 0x42, 0x48, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x47, 0x4c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x43, 0x47, 0x4c, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x54, 0x50, 0x52,
	0x49, 0x43, 0x45, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x48, 0x54, 0x50, 0x52, 0x49,
	0x43, 0x45, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x54, 0x55, 0x53, 0x45, 0x44, 0x41, 0x54, 0x45, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x54, 0x55, 0x53, 0x45, 0x44, 0x41, 0x54, 0x45,
	0x22, 0x59, 0x0a, 0x13, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x42, 0x0a, 0x0d, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x0d, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0x2e, 0x0a, 0x14, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x13,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x4e, 0x4c, 0x53, 0x48, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x4c, 0x41, 0x4e, 0x4c, 0x53, 0x48, 0x12, 0x12, 0x0a,
	0x04, 0x59, 0x50, 0x42, 0x48, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x59, 0x50, 0x42,
	0x48, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x53, 0x51, 0x59, 0x42, 0x48, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x50, 0x53, 0x51, 0x59, 0x42, 0x48, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x59, 0x42,
	0x48, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x59, 0x59, 0x42, 0x48, 0x12, 0x1c, 0x0a,
	0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50,
	0x53, 0x4e, 0x55, 0x4d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x50, 0x53, 0x4e, 0x55,
	0x4d, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x53, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x53, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x22, 0x61, 0x0a,
	0x15, 0x54, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x48, 0x0a, 0x0f, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x0f, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x22, 0x30, 0x0a, 0x16, 0x54, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xf9, 0x02, 0x0a, 0x0e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8e,
	0x02, 0x0a, 0x0c, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x4d, 0x69, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x51, 0x0a, 0x17, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f,
	0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67,
	0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x32, 0x0a, 0x18, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4c, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x4d, 0x69, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x69,
	0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x54, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x8f, 0x01, 0x0a, 0x11, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c,
	0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x22, 0x57, 0x0a, 0x17,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0xae, 0x03, 0x0a, 0x18, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x50, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x40, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x49, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf5, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x4d, 0x49, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x69, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x22, 0x4f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x80, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x7a, 0x6f, 0x6e, 0x65, 0x22, 0xc7, 0x02, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x9c,
	0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xe4, 0x04,
	0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f,
	0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67,
	0x6f, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x85, 0x02, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x2a,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0xa4, 0x01, 0x0a,
	0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xb0, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x22, 0xb4, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xe8, 0x04,
	0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x56, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa3, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xda,
	0x02, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d,
	0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xf7, 0x02, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x2a,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x1a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x82, 0x03, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a,
	0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9f, 0x03, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x34, 0x0a, 0x1a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x56, 0x0a, 0x1c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x52,
	0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x1d, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x5d, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x60, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0xa3,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0xc4, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x56, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69,
	0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69,
	0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x22, 0x96, 0x02, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x6f, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa5, 0x04, 0x0a, 0x07, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x56,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd4, 0x01,
	0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x7f, 0x0a,
	0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x22, 0x91,
	0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x22, 0xa9, 0x04, 0x0a, 0x0b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x56, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x95,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x6f, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa9, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x6e, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x2c, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xc6, 0x02, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc3, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2c,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xe0, 0x02, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a,
	0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x2d, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4f,
	0x0a, 0x15, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x67,
	0x6f, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x30, 0x0a, 0x16, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f,
	0x67, 0x6f, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x48, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x11, 0x0a, 0x0f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4b,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x48, 0x61, 0x73, 0x68, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xa1, 0x01, 0x0a, 0x0b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x48, 0x61, 0x73,
	0x68, 0x56, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x22, 0xb9, 0x02, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a,
	0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x49, 0x64, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xd2,
	0x04, 0x0a, 0x0c, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x56, 0x6f, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67,
	0x6f, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f,
	0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0xf7, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x22, 0xa0, 0x01,
	0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0xa2, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x56, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c,
	0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f,
	0x67, 0x6f, 0x55, 0x72, 0x6c, 0x22, 0xaa, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x22, 0xd6, 0x04, 0x0a, 0x10, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9f, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xcc, 0x02,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xe9, 0x02, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x18, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xf0, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x31, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8d, 0x03, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x32, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x54, 0x0a, 0x1a, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4c, 0x6f, 0x67,
	0x6f, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x35, 0x0a, 0x1b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x57, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x5a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x49, 0x64, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x48, 0x61, 0x73, 0x68, 0x56, 0x6f, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xba, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x48, 0x61, 0x73, 0x68, 0x56, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x74, 0x22, 0xb2, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x67, 0x6f, 0x76, 0x65, 0x72,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x6f, 0x76,
	0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0xc9, 0x04, 0x0a, 0x0b, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f,
	0x12, 0x20, 0x0a, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65,
	0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xf0, 0x01, 0x0a,
	0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f, 0x76, 0x65,
	0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x76,
	0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67,
	0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0c, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22,
	0x9e, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x47, 0x6f, 0x76,
	0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x9b, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x6f, 0x76,
	0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65,
	0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x22, 0xa5,
	0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x6f, 0x76,
	0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65,
	0x72, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xcd, 0x04, 0x0a, 0x0f, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x6f,
	0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65,
	0x72, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61,
	0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61,
	0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9d, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x6f,
	0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x6f, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xc5, 0x02, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x6e, 0x65, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67,
	0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x30,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xe2, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d, 0x67,
	0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xe7, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f, 0x76,
	0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f,
	0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x30, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x84, 0x03, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x20, 0x0a, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f,
	0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x31, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x53,
	0x0a, 0x19, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6c,
	0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f,
	0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x1a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x6f, 0x76,
	0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x54, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x20, 0x0a, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x15, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x57, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x76,
	0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x67,
	0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0c, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22,
	0x9d, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0xb5, 0x01, 0x0a, 0x0f, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x56, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f,
	0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x22, 0xd0, 0x07, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x6f, 0x76, 0x65,
	0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x44, 0x61, 0x79, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x69, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x44, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4c, 0x0a,
	0x13, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x57, 0x61, 0x72, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x53, 0x0a, 0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52,
	0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x42,
	0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x79,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x73, 0x22, 0x71, 0x0a, 0x11, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12,
	0x22, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22, 0x2e, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4f, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf4,
	0x06, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x67,
	0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d,
	0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x44, 0x0a,
	0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x72,
	0x6e, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x49, 0x64, 0x73, 0x44, 0x65, 0x73, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64,
	0x73, 0x44, 0x65, 0x73, 0x63, 0x22, 0xed, 0x07, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44,
	0x61, 0x79, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x69, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x44, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4c, 0x0a, 0x13,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57,
	0x61, 0x72, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x53, 0x0a, 0x13, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x13, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x79, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x49, 0x64, 0x73, 0x22, 0x2f, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xab, 0x07, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x12, 0x44, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x13, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x53, 0x0a,
	0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x13, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x73, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x49, 0x64, 0x73, 0x22, 0x2b, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xcb, 0x07, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x12, 0x44, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x13, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x53, 0x0a, 0x13, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x42, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x42, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x73, 0x22,
	0x2f, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x4e, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x13, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x60, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb0, 0x05, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a,
	0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x45, 0x6e, 0x64, 0x41,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x45, 0x6e, 0x64, 0x41,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x6f,
	0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x49, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x69, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x22, 0x96, 0x01, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x31, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0xd5, 0x08, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c,
	0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6c, 0x6c, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x44,
	0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61,
	0x72, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x3a, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x12, 0x2a, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65,
	0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x73, 0x44, 0x65, 0x73,
	0x63, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x73, 0x44, 0x65, 0x73, 0x63, 0x22, 0x70, 0x0a, 0x10,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xd1,
	0x06, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x6f,
	0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c,
	0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x44, 0x0a, 0x0f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e,
	0x12, 0x38, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x24, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x73,
	0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x73, 0x44, 0x65, 0x73, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x73, 0x44, 0x65,
	0x73, 0x63, 0x22, 0x92, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0x86, 0x07, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30,
	0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x65, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x41, 0x72, 0x65, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x12, 0x4a, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xed, 0x07, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x65, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x65, 0x61, 0x12, 0x28, 0x0a, 0x0f,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x73, 0x69, 0x67, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x4a, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x8f, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0xc8, 0x06, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x41, 0x72, 0x65, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x65, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x4a, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe6, 0x06,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30,
	0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x65, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x41, 0x72, 0x65, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x12, 0x4a, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x22, 0xab, 0x01, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x56, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xd7, 0x05, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x69, 0x6c,
	0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d,
	0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x4a, 0x0a,
	0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66,
	0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66,
	0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8a, 0x07,
	0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x56, 0x6f,
	0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64,
	0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x69, 0x6c,
	0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x4a, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x24,
	0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x99, 0x01, 0x0a, 0x11, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x56, 0x6f, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x95, 0x05, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65,
	0x6e, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d,
	0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x4a, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x95,
	0x05, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c,
	0x61, 0x6e, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e,
	0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f,
	0x6d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x12, 0x4a, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x56, 0x6f, 0x12,
	0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x22,
	0xa3, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50,
	0x6c, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x56, 0x6f, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xdd, 0x04, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x4a, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb2, 0x06, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x56, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x24,
	0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9d, 0x01, 0x0a, 0x13, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xbd, 0x04, 0x0a, 0x1b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x4a, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0xbd, 0x04, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x4a, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x11, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x49,
	0x64, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x56, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x41, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x48,
	0x61, 0x73, 0x68, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xc8, 0x13,
	0x0a, 0x14, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x13, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c,
	0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x6f, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x50,
	0x0a, 0x15, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x12, 0x4c, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x13, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44,
	0x0a, 0x0f, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61,
	0x72, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x4a, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x10,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x10, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x66, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x73, 0x63, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x42, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x66, 0x79, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x48, 0x0a, 0x11, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65,
	0x73, 0x63, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x79,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x79,
	0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x74, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x6d, 0x61, 0x69, 0x6e,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6d, 0x61, 0x69,
	0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x4a,
	0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x48, 0x61, 0x73, 0x68, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x61, 0x73, 0x68, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0xeb, 0x0f, 0x0a, 0x13, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f,
	0x12, 0x30, 0x0a, 0x13, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d,
	0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61,
	0x12, 0x30, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66,
	0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x13, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x57, 0x61, 0x72, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x66, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x66, 0x79, 0x44, 0x65, 0x73, 0x63, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x66, 0x79, 0x42, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x66, 0x79, 0x41, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79,
	0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x73, 0x63,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x79, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x79, 0x12, 0x36,
	0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x41, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x6d, 0x61, 0x69, 0x6e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6d, 0x61, 0x69, 0x6e, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x4a, 0x0a, 0x0e,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x24,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x48,
	0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x48, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26,
	0x0a, 0x0e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x61,
	0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa3, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xb6, 0x0d, 0x0a,
	0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12,
	0x34, 0x0a, 0x15, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66,
	0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74,
	0x6f, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x42, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x72, 0x65, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x12, 0x30, 0x0a, 0x13, 0x69,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x10, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x12, 0x3e, 0x0a,
	0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0f, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x66, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x12,
	0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65,
	0x73, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66,
	0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79,
	0x42, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66,
	0x79, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x12, 0x3a, 0x0a,
	0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x73, 0x63, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x79, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x41, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41,
	0x74, 0x12, 0x3c, 0x0a, 0x19, 0x6d, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6d, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x4a, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0xaa, 0x0e, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x13, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c,
	0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x6f, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66,
	0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4c, 0x0a, 0x13,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57,
	0x61, 0x72, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x66, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x73, 0x63, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x42, 0x79, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x42, 0x79, 0x12, 0x38,
	0x0a, 0x09, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x44, 0x65, 0x73, 0x63, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x42, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x42, 0x79, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x74,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x74, 0x12, 0x3c, 0x0a, 0x19,
	0x6d, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x19, 0x6d, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x12, 0x4a, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x6f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x14, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x14, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x73, 0x22, 0x9d, 0x04, 0x0a, 0x17, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x56, 0x6f, 0x12,
	0x30, 0x0a, 0x13, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x15, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x4a, 0x0a, 0x12, 0x69,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x66, 0x79, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x66, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x66, 0x79, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x42, 0x0a, 0x0e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x41, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x51, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x91, 0x02, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x56, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c,
	0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x46,
	0x0a, 0x11, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x22, 0xae, 0x07, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x6f, 0x76, 0x65,
	0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67,
	0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34,
	0x0a, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x44, 0x61, 0x79, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x44, 0x0a, 0x0f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x4c, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x38,
	0x0a, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72,
	0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x59, 0x0a, 0x15, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x52, 0x15, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x42, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x42, 0x79, 0x22, 0x73, 0x0a, 0x13, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22, 0x79, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xda, 0x0a, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x6f, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x6f, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d,
	0x6f, 0x12, 0x44, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x13, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x4a, 0x0a, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x4e, 0x0a, 0x13, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x3a, 0x0a, 0x18, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f, 0x76, 0x65,
	0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x61, 0x73, 0x68, 0x56, 0x6f, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x49, 0x64, 0x73, 0x44, 0x65, 0x73, 0x63, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x73,
	0x44, 0x65, 0x73, 0x63, 0x22, 0xeb, 0x03, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x40, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x44, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xe9,
	0x03, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f,
	0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30,
	0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74,
	0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xd6, 0x06, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x6f, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x68, 0x69, 0x72, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x68, 0x69, 0x72, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e,
	0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa3,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x74, 0x6f, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0xb4, 0x07, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x50, 0x6c,
	0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68,
	0x69, 0x72, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x1a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc6, 0x06, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74,
	0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x69, 0x72,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x1a, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x1a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x22, 0x74, 0x0a, 0x14, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22, 0x2f, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xee, 0x05, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74,
	0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x69, 0x72,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x1a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x1a, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x2f, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xe3, 0x06, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x50, 0x6c,
	0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68,
	0x69, 0x72, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x64,
	0x0a, 0x1a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x1a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68,
	0x22, 0x30, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x8b, 0x06, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f,
	0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x69, 0x72, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x69, 0x72, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30,
	0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x64,
	0x0a, 0x1a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x1a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68,
	0x22, 0x30, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x54, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x55, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xb4, 0x01, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x56, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x22, 0xe2, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x73, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x56, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7d, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x9e,
	0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x22,
	0x51, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x74, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x59, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67,
	0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x5c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x93, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x92, 0x0a, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e,
	0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x64,
	0x35, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x4d, 0x64, 0x35, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a,
	0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6d, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6d, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x61,
	0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x54, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x42, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x41, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x79, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x79, 0x12,
	0x38, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x44, 0x65, 0x73, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x42, 0x79, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x79, 0x42, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x79,
	0x41, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x70, 0x61, 0x79, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x55, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2f, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf5, 0x09, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72,
	0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6d, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6d, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x54, 0x61, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x42, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x44, 0x65, 0x73, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x42,
	0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x79, 0x42, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x70, 0x61, 0x79, 0x41, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x70, 0x61, 0x79, 0x41, 0x74,
	0x12, 0x36, 0x0a, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x2e, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e,
	0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x91, 0x0a, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x72,
	0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x72,
	0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x64, 0x35,
	0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6d, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6d, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x61, 0x78, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x61, 0x78,
	0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0c,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42,
	0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x44, 0x65, 0x73,
	0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x42, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x70, 0x61, 0x79, 0x42, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x41, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x05, 0x70, 0x61, 0x79, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2e, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf5, 0x09, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c,
	0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e,
	0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d,
	0x64, 0x35, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x4d, 0x64, 0x35, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x24,
	0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6d, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6d, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54,
	0x61, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x54, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x42, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x41, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x79, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x79,
	0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x44, 0x65, 0x73, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x42, 0x79, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x79, 0x42, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61,
	0x79, 0x41, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x70, 0x61, 0x79, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x16,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x46, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x55,
	0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x2e, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x78, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x31, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x6f, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xc1, 0x0c, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x28, 0x0a, 0x0f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6d, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6d, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x61, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x79, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x79, 0x12, 0x38, 0x0a,
	0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x42, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x41, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x44, 0x65, 0x73, 0x63, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x61, 0x79, 0x42, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x79, 0x42,
	0x79, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x41, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x70, 0x61,
	0x79, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x55, 0x72, 0x6c,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d,
	0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x14, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66,
	0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x12, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xcc, 0x04, 0x0a, 0x12, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e,
	0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e,
	0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x44, 0x0a, 0x0f,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x48, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x86, 0x07, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x72, 0x6f,
	0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x72, 0x6f,
	0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a,
	0x0f, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x48, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0f, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x69, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x69, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x69, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x69, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x22, 0x96, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xed, 0x0b, 0x0a, 0x0d, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x72,
	0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x72,
	0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x64, 0x35,
	0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6d, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6d, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x61, 0x78, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x61, 0x78,
	0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0c,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42,
	0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x44, 0x65, 0x73,
	0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x42, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x70, 0x61, 0x79, 0x42, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x41, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x05, 0x70, 0x61, 0x79, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x51, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x16, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x92, 0x0a, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12,
	0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x64, 0x35,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d,
	0x64, 0x35, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6d, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6d, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x61, 0x78,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54,
	0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e,
	0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x42, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x79, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x79, 0x12, 0x38,
	0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x44,
	0x65, 0x73, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x42, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x70, 0x61, 0x79, 0x42, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x41,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x70, 0x61, 0x79, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x55, 0x72, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2f, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x81, 0x02, 0x0a, 0x15,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x42, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x22,
	0x30, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xcb, 0x02, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x44, 0x65,
	0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x42, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x70, 0x61, 0x79, 0x42, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x41, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x05, 0x70, 0x61, 0x79, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12,
	0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x22,
	0x2c, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x56, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x73, 0x22, 0xc2, 0x06, 0x0a, 0x12, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x41, 0x72, 0x65, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x65, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x73, 0x69, 0x67, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xd2, 0x01,
	0x0a, 0x2c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x12, 0x34,
	0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x26, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x6f, 0x12, 0x3a, 0x0a,
	0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12,
	0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x2d, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x57, 0x6f, 0x72, 0x6b,
	0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56,
	0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x22, 0xd0, 0x01, 0x0a, 0x2a,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x57, 0x6f,
	0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x45, 0x70, 0x69, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xe4,
	0x02, 0x0a, 0x24, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x57, 0x6f, 0x72, 0x6b,
	0x6d, 0x61, 0x6e, 0x45, 0x70, 0x69, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x6f, 0x12, 0x3a, 0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x57,
	0x65, 0x61, 0x72, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x57, 0x65, 0x61, 0x72, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x3a, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x62,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x62, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x62, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x22, 0x77, 0x0a, 0x2b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x45, 0x70,
	0x69, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x57, 0x6f, 0x72,
	0x6b, 0x6d, 0x61, 0x6e, 0x45, 0x70, 0x69, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xcf,
	0x01, 0x0a, 0x29, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65,
	0x6e, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x22, 0xcd, 0x01, 0x0a, 0x23, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61,
	0x79, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x22, 0x75, 0x0a, 0x2a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x56,
	0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xf0, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65,
	0x6e, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xa5, 0x03, 0x0a, 0x1b, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x61,
	0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x42,
	0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x61, 0x66,
	0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e,
	0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x72, 0x65, 0x61, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x74,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65,
	0x73, 0x63, 0x22, 0xb6, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xb4, 0x01, 0x0a, 0x16,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x59,
	0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x22, 0xcb, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x22, 0xcc, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x59, 0x65, 0x61, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6c,
	0x69, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x69, 0x73,
	0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x50, 0x61, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x50, 0x61, 0x69, 0x64, 0x22,
	0xdb, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x24, 0x0a,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x79, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x79, 0x50, 0x61, 0x69, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x79, 0x50, 0x61, 0x69, 0x64, 0x22, 0xcd, 0x01,
	0x0a, 0x21, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x6c,
	0x69, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a,
	0x12, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0xdc, 0x01,
	0x0a, 0x22, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x79, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x79, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0xd8, 0x01, 0x0a,
	0x1e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x69, 0x73,
	0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x22, 0xe7, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x79,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x64, 0x22, 0xdf, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x59,
	0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x22, 0xee, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x12, 0x26, 0x0a, 0x0e,
	0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x79, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x22, 0x7e, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x59, 0x65, 0x61, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x6f, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x79, 0x65, 0x61, 0x72, 0x22, 0x95, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74,
	0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0x85, 0x02, 0x0a,
	0x1b, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x22, 0x66, 0x0a, 0x23, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x59, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x98, 0x02, 0x0a,
	0x1c, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x56, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x55,
	0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a,
	0x0f, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x79, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x79, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x68, 0x0a, 0x24, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x40, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x8f, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x39, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x56,
	0x6f, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x0c, 0x6c,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x56, 0x6f,
	0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x12, 0x4b,
	0x0a, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x56, 0x6f, 0x52, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x72,
	0x6f, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x22, 0x87, 0x0f, 0x0a, 0x13,
	0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x42, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x72, 0x65, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x12, 0x30, 0x0a, 0x13, 0x69,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x10, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x61, 0x66,
	0x65, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x44, 0x65, 0x73, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79,
	0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x66, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61,
	0x72, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x66, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x73, 0x63, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x42, 0x79, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x42, 0x79, 0x12, 0x38, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x44, 0x65, 0x73, 0x63, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x42, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x42, 0x79, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x74, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x4a, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x16, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x30, 0x0a, 0x13, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13, 0x73, 0x61,
	0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xff, 0x12, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x12, 0x73,
	0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x73,
	0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x61, 0x66, 0x65, 0x74,
	0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x6f, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x69, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x72, 0x65, 0x61, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x74, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x3e, 0x0a,
	0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a,
	0x0f, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x72,
	0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79,
	0x44, 0x65, 0x73, 0x63, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x66, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x66, 0x79, 0x42, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x66, 0x79, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79,
	0x41, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x12,
	0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x73, 0x63, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x79, 0x12, 0x36, 0x0a, 0x08, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x61, 0x66, 0x65, 0x74,
	0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x61, 0x66, 0x65, 0x74,
	0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x72, 0x6f,
	0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x6f, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x69, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12,
	0x44, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64,
	0x41, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x4a, 0x0a,
	0x12, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x10, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x41,
	0x74, 0x22, 0x2c, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xa1, 0x01, 0x0a, 0x15, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xab, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x61, 0x66, 0x65, 0x74,
	0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0xd6, 0x11, 0x0a, 0x12, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x61, 0x66, 0x65,
	0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x61, 0x66, 0x65,
	0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x72,
	0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x72,
	0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x50, 0x6c,
	0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x61,
	0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61,
	0x12, 0x30, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x12, 0x3e,
	0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0f, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x4c, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x66, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x3c,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x73,
	0x63, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x42,
	0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79,
	0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x73, 0x63, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x79, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x41, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x74,
	0x12, 0x3a, 0x0a, 0x18, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x14, 0x73, 0x61,
	0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x56, 0x6f,
	0x52, 0x14, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x54, 0x0a, 0x13, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x2c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x10,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x73,
	0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x73, 0x12, 0x4c, 0x0a, 0x0f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18,
	0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0xfa, 0x04, 0x0a, 0x16, 0x53,
	0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x4a, 0x0a, 0x12, 0x69, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x66, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x66, 0x79, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x66, 0x79, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x61, 0x73, 0x68, 0x12, 0x42, 0x0a,
	0x0e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x90, 0x07, 0x0a, 0x0c, 0x53, 0x61, 0x66, 0x65,
	0x74, 0x79, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x61, 0x66, 0x65,
	0x74, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73,
	0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x61,
	0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c,
	0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x44, 0x65, 0x70, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x44, 0x65, 0x70, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72,
	0x65, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x53, 0x69, 0x74, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x61, 0x66,
	0x65, 0x74, 0x79, 0x53, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x45, 0x64, 0x75,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79,
	0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x61, 0x66, 0x65, 0x74, 0x79, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x4a, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x0f, 0x53, 0x61,
	0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x64,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x94, 0x08, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f,
	0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x61, 0x66, 0x65, 0x74,
	0x79, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79,
	0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x72,
	0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x72,
	0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x70, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65,
	0x70, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x12, 0x28,
	0x0a, 0x0f, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x53, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x53,
	0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x61, 0x66, 0x65,
	0x74, 0x79, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x61, 0x66, 0x65, 0x74,
	0x79, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x34,
	0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x0e, 0x53, 0x61, 0x66, 0x65, 0x74,
	0x79, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c,
	0x6f, 0x67, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x9d, 0x01, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x48, 0x61,
	0x73, 0x68, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xf2, 0x07, 0x0a,
	0x0b, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x56, 0x6f, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72,
	0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x3a,
	0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x70, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x70, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79,
	0x53, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x53, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x61, 0x66, 0x65, 0x74,
	0x79, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x61,
	0x66, 0x65, 0x74, 0x79, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x72,
	0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45,
	0x0a, 0x0d, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67,
	0x48, 0x61, 0x73, 0x68, 0x56, 0x6f, 0x52, 0x0d, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f,
	0x67, 0x48, 0x61, 0x73, 0x68, 0x12, 0x4a, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xa5, 0x02, 0x0a, 0x0f, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x48,
	0x61, 0x73, 0x68, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c,
	0x6f, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x61, 0x66, 0x65,
	0x74, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x5b, 0x0a, 0x0b, 0x57, 0x6f, 0x72,
	0x6b, 0x6d, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x52,
	0x65, 0x71, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9a, 0x06, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x6d,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61,
	0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x4a, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x49, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x49,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61,
	0x6e, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x82, 0x06, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6d,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61,
	0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b,
	0x6d, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x56,
	0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x99, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x31, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x56, 0x6f, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xc2, 0x06, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61,
	0x6e, 0x56, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x6d, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x56,
	0x6f, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x4a,
	0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x9f, 0x02, 0x0a, 0x0d, 0x57,
	0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x6f, 0x0a, 0x15,
	0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65,
	0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x88, 0x08,
	0x0a, 0x14, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61,
	0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65,
	0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b,
	0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e,
	0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x61,
	0x66, 0x65, 0x74, 0x79, 0x48, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x61, 0x66, 0x65, 0x74, 0x79, 0x48, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x65, 0x61, 0x72,
	0x4d, 0x61, 0x73, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x65, 0x61, 0x72,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4a, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6b, 0x0a, 0x17, 0x57, 0x6f, 0x72, 0x6b,
	0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74,
	0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf0, 0x07, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x30, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74,
	0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41,
	0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65,
	0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x70, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79,
	0x48, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x61, 0x66, 0x65, 0x74,
	0x79, 0x48, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x65, 0x61, 0x72, 0x4d, 0x61, 0x73, 0x6b,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x65, 0x61, 0x72, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a,
	0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x16, 0x57, 0x6f, 0x72,
	0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xad,
	0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74,
	0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xba,
	0x08, 0x0a, 0x13, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x56, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61,
	0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65,
	0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b,
	0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e,
	0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x61,
	0x66, 0x65, 0x74, 0x79, 0x48, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x61, 0x66, 0x65, 0x74, 0x79, 0x48, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x65, 0x61, 0x72,
	0x4d, 0x61, 0x73, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x65, 0x61, 0x72,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6d,
	0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x56, 0x6f, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x4a, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xbd, 0x02, 0x0a, 0x17,
	0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x6d,
	0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74,
	0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66,
	0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66,
	0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xeb, 0x07, 0x0a, 0x0b,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42,
	0x79, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x4a, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x0e, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0b, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0xef, 0x08, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66,
	0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x6f,
	0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x42, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x72, 0x6f,
	0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65,
	0x6e, 0x64, 0x41, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x22, 0x91, 0x01,
	0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x9b, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x48, 0x61, 0x73, 0x68, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0xca, 0x08, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x56, 0x6f, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x72,
	0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d,
	0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x42, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x72, 0x6f, 0x6d,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0c,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68,
	0x56, 0x6f, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x4a, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa2, 0x02, 0x0a,
	0x0e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x56, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69,
	0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69,
	0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x3c, 0x0a,
	0x16, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x1c,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x32, 0xf3, 0xae, 0x01, 0x0a, 0x0e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x12, 0x1f,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x69, 0x0a, 0x14, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x0f,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6e, 0x61, 0x70, 0x73, 0x12,
	0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6e, 0x61, 0x70, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6e, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x67, 0x12, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57,
	0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x12, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x12, 0x26,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x57, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x12, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x69, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6c, 0x0a, 0x15,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x61, 0x67, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x61, 0x67,
	0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x61, 0x67, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x78, 0x0a, 0x19, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x6d, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x67, 0x0a, 0x12, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x79, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x79, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x07,
	0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x48, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x1c, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61,
	0x67, 0x12, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x1a,
	0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54,
	0x0a, 0x0d, 0x54, 0x61, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x54, 0x61, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61,
	0x67, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x61, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x12, 0x24, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x3f, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x69, 0x12, 0x19, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x69, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x69, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x45, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x49, 0x12, 0x1b, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x49, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4d, 0x49, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4d, 0x49, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x4d, 0x49, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x4d, 0x49, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x4d, 0x49, 0x12, 0x1e, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x6e, 0x65, 0x4d, 0x49, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x6e, 0x65, 0x4d, 0x49, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x08, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x12, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x69, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x5a, 0x0a, 0x0f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x69, 0x4c, 0x6f,
	0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x69, 0x4c,
	0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x4d, 0x69, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x49, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x49, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x0b,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1e, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12,
	0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0d, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x20, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x53, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x11, 0x53, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6e, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x61,
	0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x69, 0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12,
	0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x6f,
	0x67, 0x6f, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x58, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x73, 0x42, 0x79, 0x49, 0x64, 0x12, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0d,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x72, 0x72, 0x12, 0x20, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x72, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x72, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x6c, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x28, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x5d, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x12, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x60, 0x0a, 0x11, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x69, 0x0a, 0x14, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x13,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x75, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x2b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x46,
	0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x25,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x63, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x69, 0x0a, 0x14, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x7e, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x42, 0x79, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x42, 0x79, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x42, 0x79, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a,
	0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1e,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1f,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x48, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0d,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x20, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x54, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x12, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x17, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x18,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x69, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x3b, 0x0a, 0x06, 0x4d, 0x69, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x17, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69,
	0x6e, 0x64, 0x12, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a,
	0x0c, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x17, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x48, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x12, 0x1c, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x08, 0x50, 0x61,
	0x79, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x12, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x52, 0x65, 0x69, 0x6d, 0x62,
	0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x52, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x12, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x69, 0x6d, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52,
	0x65, 0x69, 0x6d, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a,
	0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4f, 0x70, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x69, 0x6d, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x63, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x1a, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6c, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x25,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x69, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x5d, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x12, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x69,
	0x0a, 0x14, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x65, 0x0a, 0x10, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x71, 0x0a, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4d, 0x65, 0x64, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4d, 0x65, 0x64, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x17, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4d, 0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x22,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4d, 0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x1a, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4d, 0x69, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x71, 0x0a, 0x1c, 0x53, 0x79, 0x6e, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x1a, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6b, 0x0a, 0x18, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x69, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x69, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x12, 0x52, 0x65, 0x69, 0x6d, 0x62,
	0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x24, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x72, 0x0a, 0x17, 0x52, 0x65,
	0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x2a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x1a, 0x2b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x69,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x57, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x73, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x57, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x10, 0x53, 0x61, 0x76,
	0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x23, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x67, 0x0a, 0x16, 0x53, 0x61, 0x76, 0x65,
	0x54, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x5d, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x63, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6c, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6f, 0x0a, 0x16, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x2a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6c, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6f, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x2a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x78, 0x0a, 0x19, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x6f,
	0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x63, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x09, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x12, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x6e, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x6e, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x5a, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x12, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x0e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x21,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x63, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x26,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x67, 0x6f, 0x55,
	0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x5d, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x12, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x66, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x6e, 0x65, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x69, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x26, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x6e, 0x65, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x69, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x72, 0x0a, 0x17, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72,
	0x6c, 0x12, 0x2a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4c,
	0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x23,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0d, 0x4c, 0x69, 0x73,
	0x74, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x5a, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x47, 0x6f,
	0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x63, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x6e, 0x65, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x66, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x47, 0x6f, 0x76,
	0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x63, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x6e, 0x65, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x6f, 0x0a, 0x16, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x6f,
	0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x29,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x4e, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x54, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x24, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x20, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x60, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x5b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x65, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x27, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x6f,
	0x72, 0x74, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x21, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x24, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x63, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x63, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x60, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x63, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x25, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x69, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x6d, 0x0a, 0x16, 0x47, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x28,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x6c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x76,
	0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x27,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x76, 0x65,
	0x72, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x4e, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x12, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x54, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x12, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x1a, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x1a, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x23, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x63, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a,
	0x0e, 0x50, 0x61, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x61, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x52, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x52, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x52,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x22,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x49, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a,
	0x0b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50,
	0x6c, 0x61, 0x6e, 0x12, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x58, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1f, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x67, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x6c, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x67, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x12, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x17,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5e,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x12, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6b, 0x0a, 0x18,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6b, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x6e, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66,
	0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x6e, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x67,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x65, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x71,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x71, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x2e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x63, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e,
	0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6e, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66,
	0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x64, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x4f, 0x6e, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x62, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x63, 0x74, 0x69, 0x66, 0x79, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x24, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6d, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x2e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x63, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x24, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x64,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x53, 0x61, 0x66, 0x65, 0x74,
	0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x66,
	0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x64, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e,
	0x65, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x67, 0x0a, 0x19, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x67, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x53, 0x61, 0x66,
	0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x65, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61,
	0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x65, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x74,
	0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x22,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x62, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x61, 0x66, 0x65,
	0x74, 0x79, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6e, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x12,
	0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x56, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x53, 0x61,
	0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x12, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x12,
	0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x52, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x53, 0x61,
	0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x12, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c,
	0x6f, 0x67, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79,
	0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x12, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x66,
	0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x61,
	0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x66,
	0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x67,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x52, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x12, 0x1a, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x52, 0x0a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e,
	0x12, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x55, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x6d, 0x61, 0x6e, 0x12, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4f, 0x6e,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x12, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61,
	0x6e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x6d, 0x61, 0x6e, 0x12, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x53, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x6d, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x50, 0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6d,
	0x61, 0x6e, 0x12, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b,
	0x6d, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65,
	0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41,
	0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x66, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x69, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65,
	0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41,
	0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x6a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e,
	0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x69, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74,
	0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x67, 0x0a, 0x1b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6d,
	0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x67, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x71, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61,
	0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x2c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74,
	0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x64, 0x0a, 0x17, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e,
	0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x67, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x57, 0x6f,
	0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65,
	0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x12, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e,
	0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12,
	0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x55, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x55, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x22,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x56, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x75, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x32, 0x96, 0x04, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x12,
	0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x75, 0x0a, 0x18,
	0x43, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x69, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x27, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x72,
	0x0a, 0x17, 0x4d, 0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x66, 0x0a, 0x13, 0x4d, 0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4d, 0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x32, 0x88, 0x0e, 0x0a, 0x11, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x75, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x29, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x79, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x2f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x77, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x59, 0x65, 0x61, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x78, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x7c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x30, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x7a, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x2a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2f,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x7b, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2b,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x7f, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2b, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x7d, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2b, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x59, 0x65, 0x61,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x75, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44,
	0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x79, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x77,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x69, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4e, 0x65, 0x65, 0x64, 0x50, 0x61, 0x79, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x25,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x50, 0x61,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x32, 0xdc, 0x0c, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x68, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x69, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a,
	0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x60, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d,
	0x69, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4d, 0x69, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x54, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x69, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x1a, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x63, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x75, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x51, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x1a, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x60, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x76,
	0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x24,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x32, 0xbb, 0x06, 0x0a, 0x0b, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x12, 0x32, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x87, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x59, 0x65, 0x61, 0x72, 0x12, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x69, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x69, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x59,
	0x65, 0x61, 0x72, 0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x69, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x69, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x59, 0x65,
	0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e,
	0x6b, 0x43, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12,
	0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x59, 0x65, 0x61, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d,
	0x69, 0x50, 0x61, 0x69, 0x64, 0x59, 0x65, 0x61, 0x72, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x6e, 0x6b, 0x4d, 0x69, 0x50, 0x61, 0x69, 0x64, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x69, 0x50, 0x61, 0x69, 0x64, 0x59, 0x65,
	0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e,
	0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x26, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x59, 0x65,
	0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x72,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x49, 0x42, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x49,
	0x42, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x49, 0x42, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x32, 0xe6, 0x19, 0x0a, 0x10, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x69,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x12, 0xa2, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x12, 0x3a, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x3b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61,
	0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0xa5, 0x01, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61,
	0x6e, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65,
	0x61, 0x72, 0x12, 0x3b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x3c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x7a, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x2a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x75, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x75, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x2b, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52,
	0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x26, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0xa8, 0x01,
	0x0a, 0x29, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x3c, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6d,
	0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x3d, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e,
	0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0xa2, 0x01, 0x0a, 0x27, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6d,
	0x61, 0x6e, 0x45, 0x70, 0x69, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x3a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x45, 0x70, 0x69, 0x64, 0x65,
	0x6d, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x3b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x61, 0x6e, 0x45, 0x70, 0x69, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x9f, 0x01,
	0x0a, 0x26, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x3a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x84, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x74, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x59, 0x65, 0x61, 0x72, 0x12, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x77, 0x0a, 0x1b,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x27, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x81, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x12, 0x26,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x59,
	0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x84, 0x01, 0x0a, 0x25, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x80, 0x01, 0x0a, 0x23, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x12, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x83, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x27, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x74, 0x0a, 0x1a, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x59, 0x65, 0x61, 0x72, 0x12, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x2e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x77, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x27,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x7a, 0x0a, 0x1d, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x74, 0x74, 0x65, 0x6e,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x59, 0x65, 0x61, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x7d, 0x0a, 0x1e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x71, 0x1a,
	0x32, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x82, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x12, 0x2a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x59, 0x65, 0x61, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x85, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x2b, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x61,
	0x6e, 0x6b, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x34, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x69, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x42, 0x27, 0x5a, 0x25, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x3b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x00, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ManagerService_proto_rawDescOnce sync.Once
	file_ManagerService_proto_rawDescData = file_ManagerService_proto_rawDesc
)

func file_ManagerService_proto_rawDescGZIP() []byte {
	file_ManagerService_proto_rawDescOnce.Do(func() {
		file_ManagerService_proto_rawDescData = protoimpl.X.CompressGZIP(file_ManagerService_proto_rawDescData)
	})
	return file_ManagerService_proto_rawDescData
}

var file_ManagerService_proto_msgTypes = make([]protoimpl.MessageInfo, 616)
var file_ManagerService_proto_goTypes = []interface{}{
	(*Page)(nil),                                          // 0: ManagerService.Page
	(*MedicineListReq)(nil),                               // 1: ManagerService.MedicineListReq
	(*MedicineListResp)(nil),                              // 2: ManagerService.MedicineListResp
	(*MedicineListVo)(nil),                                // 3: ManagerService.MedicineListVo
	(*MedicineListForQueryReq)(nil),                       // 4: ManagerService.MedicineListForQueryReq
	(*MedicineListForQueryResp)(nil),                      // 5: ManagerService.MedicineListForQueryResp
	(*MedicineListForQueryVo)(nil),                        // 6: ManagerService.MedicineListForQueryVo
	(*CommonListCnapsReq)(nil),                            // 7: ManagerService.CommonListCnapsReq
	(*CnapsListVo)(nil),                                   // 8: ManagerService.CnapsListVo
	(*CommonListCnapsResp)(nil),                           // 9: ManagerService.CommonListCnapsResp
	(*CommonListTagReq)(nil),                              // 10: ManagerService.CommonListTagReq
	(*CommonListTagResp)(nil),                             // 11: ManagerService.CommonListTagResp
	(*CommonListTagVo)(nil),                               // 12: ManagerService.CommonListTagVo
	(*CreateMedicineReq)(nil),                             // 13: ManagerService.CreateMedicineReq
	(*CreateMedicineResp)(nil),                            // 14: ManagerService.CreateMedicineResp
	(*CreateBatchMedicineReq)(nil),                        // 15: ManagerService.CreateBatchMedicineReq
	(*CreateBatchMedicineResp)(nil),                       // 16: ManagerService.CreateBatchMedicineResp
	(*UpdateMedicineReq)(nil),                             // 17: ManagerService.UpdateMedicineReq
	(*UpdateMedicineResp)(nil),                            // 18: ManagerService.UpdateMedicineResp
	(*UpdateMedicineActiveReq)(nil),                       // 19: ManagerService.UpdateMedicineActiveReq
	(*UpdateMedicineActiveResp)(nil),                      // 20: ManagerService.UpdateMedicineActiveResp
	(*DeleteMedicineReq)(nil),                             // 21: ManagerService.DeleteMedicineReq
	(*DeleteMedicineResp)(nil),                            // 22: ManagerService.DeleteMedicineResp
	(*SelectTagByMedicineIdReq)(nil),                      // 23: ManagerService.SelectTagByMedicineIdReq
	(*SelectTagByMedicineIdResp)(nil),                     // 24: ManagerService.SelectTagByMedicineIdResp
	(*SelectInfoByMedicineNamesReq)(nil),                  // 25: ManagerService.SelectInfoByMedicineNamesReq
	(*SelectInfoByMedicineNamesResp)(nil),                 // 26: ManagerService.SelectInfoByMedicineNamesResp
	(*TagListReq)(nil),                                    // 27: ManagerService.TagListReq
	(*TagListResp)(nil),                                   // 28: ManagerService.TagListResp
	(*TagListVo)(nil),                                     // 29: ManagerService.TagListVo
	(*CreateTagReq)(nil),                                  // 30: ManagerService.CreateTagReq
	(*CreateTagResp)(nil),                                 // 31: ManagerService.CreateTagResp
	(*UpdateTagReq)(nil),                                  // 32: ManagerService.UpdateTagReq
	(*UpdateTagResp)(nil),                                 // 33: ManagerService.UpdateTagResp
	(*DeleteTagReq)(nil),                                  // 34: ManagerService.DeleteTagReq
	(*DeleteTagResp)(nil),                                 // 35: ManagerService.DeleteTagResp
	(*TagDetailListReq)(nil),                              // 36: ManagerService.TagDetailListReq
	(*TagDetailListResp)(nil),                             // 37: ManagerService.TagDetailListResp
	(*TagDetailVo)(nil),                                   // 38: ManagerService.TagDetailVo
	(*DeleteTagMedicineReq)(nil),                          // 39: ManagerService.DeleteTagMedicineReq
	(*DeleteTagMedicineResp)(nil),                         // 40: ManagerService.DeleteTagMedicineResp
	(*CreateTagMedicineReq)(nil),                          // 41: ManagerService.CreateTagMedicineReq
	(*CreateTagMedicineResp)(nil),                         // 42: ManagerService.CreateTagMedicineResp
	(*CommonMedicineQueryReq)(nil),                        // 43: ManagerService.CommonMedicineQueryReq
	(*CommonMedicineQueryResp)(nil),                       // 44: ManagerService.CommonMedicineQueryResp
	(*TagMedicineVo)(nil),                                 // 45: ManagerService.TagMedicineVo
	(*ListMiReq)(nil),                                     // 46: ManagerService.ListMiReq
	(*ListMiResp)(nil),                                    // 47: ManagerService.ListMiResp
	(*ListMiVo)(nil),                                      // 48: ManagerService.ListMiVo
	(*CommonMIReq)(nil),                                   // 49: ManagerService.CommonMIReq
	(*CommonMIInfoReq)(nil),                               // 50: ManagerService.CommonMIInfoReq
	(*CommonMIResp)(nil),                                  // 51: ManagerService.CommonMIResp
	(*CommonMIInfoResp)(nil),                              // 52: ManagerService.CommonMIInfoResp
	(*CommonMIVo)(nil),                                    // 53: ManagerService.CommonMIVo
	(*CommonMIInfoVo)(nil),                                // 54: ManagerService.CommonMIInfoVo
	(*CreateOneMIReq)(nil),                                // 55: ManagerService.CreateOneMIReq
	(*CreateOneMIResp)(nil),                               // 56: ManagerService.CreateOneMIResp
	(*UpdateMiReq)(nil),                                   // 57: ManagerService.UpdateMiReq
	(*UpdateMiResp)(nil),                                  // 58: ManagerService.UpdateMiResp
	(*CommonCompanyReq)(nil),                              // 59: ManagerService.CommonCompanyReq
	(*CommonCompanyResp)(nil),                             // 60: ManagerService.CommonCompanyResp
	(*CommonCompanyVo)(nil),                               // 61: ManagerService.CommonCompanyVo
	(*CompanyInfoResp)(nil),                               // 62: ManagerService.CompanyInfoResp
	(*CompanyInfoVo)(nil),                                 // 63: ManagerService.CompanyInfoVo
	(*SelCompanyByNamesReq)(nil),                          // 64: ManagerService.SelCompanyByNamesReq
	(*SelCompanyByNamesResp)(nil),                         // 65: ManagerService.SelCompanyByNamesResp
	(*ListCompanyReq)(nil),                                // 66: ManagerService.ListCompanyReq
	(*ListCompanyResp)(nil),                               // 67: ManagerService.ListCompanyResp
	(*ListCompanyVo)(nil),                                 // 68: ManagerService.ListCompanyVo
	(*CreateOneCompanyReq)(nil),                           // 69: ManagerService.CreateOneCompanyReq
	(*CreateOneCompanyResp)(nil),                          // 70: ManagerService.CreateOneCompanyResp
	(*UpdateOneCompanyReq)(nil),                           // 71: ManagerService.UpdateOneCompanyReq
	(*UpdateOneCompanyResp)(nil),                          // 72: ManagerService.UpdateOneCompanyResp
	(*ListTpPlanErrReq)(nil),                              // 73: ManagerService.ListTpPlanErrReq
	(*ListTpPlanErrResp)(nil),                             // 74: ManagerService.ListTpPlanErrResp
	(*ListTpPlanErrVo)(nil),                               // 75: ManagerService.ListTpPlanErrVo
	(*UpdateErrShipmentPlanReq)(nil),                      // 76: ManagerService.UpdateErrShipmentPlanReq
	(*UpdateErrShipmentPlanResp)(nil),                     // 77: ManagerService.UpdateErrShipmentPlanResp
	(*ListShipmentPlanReq)(nil),                           // 78: ManagerService.ListShipmentPlanReq
	(*ListShipmentPlanResp)(nil),                          // 79: ManagerService.ListShipmentPlanResp
	(*ListShipmentPlanrVo)(nil),                           // 80: ManagerService.ListShipmentPlanrVo
	(*DetailShipmentOrderReq)(nil),                        // 81: ManagerService.DetailShipmentOrderReq
	(*ShipmentReceiveOrderReq)(nil),                       // 82: ManagerService.ShipmentReceiveOrderReq
	(*ShipmentReceiveOrderResp)(nil),                      // 83: ManagerService.ShipmentReceiveOrderResp
	(*DetailShipmentOrderResp)(nil),                       // 84: ManagerService.DetailShipmentOrderResp
	(*ListShipmentPlanForOrderReq)(nil),                   // 85: ManagerService.ListShipmentPlanForOrderReq
	(*ListShipmentPlanForOrderResp)(nil),                  // 86: ManagerService.ListShipmentPlanForOrderResp
	(*ListShipmentPlanForOrderVo)(nil),                    // 87: ManagerService.ListShipmentPlanForOrderVo
	(*CountShipmentPlanReq)(nil),                          // 88: ManagerService.CountShipmentPlanReq
	(*CountShipmentPlanResp)(nil),                         // 89: ManagerService.CountShipmentPlanResp
	(*CreateShipmentOrderReq)(nil),                        // 90: ManagerService.CreateShipmentOrderReq
	(*CreateShipmentOrderResp)(nil),                       // 91: ManagerService.CreateShipmentOrderResp
	(*ListShipmentOrderReq)(nil),                          // 92: ManagerService.ListShipmentOrderReq
	(*ListShipmentOrderResp)(nil),                         // 93: ManagerService.ListShipmentOrderResp
	(*ListShipmentOrderVo)(nil),                           // 94: ManagerService.ListShipmentOrderVo
	(*CountShipmentOrderReq)(nil),                         // 95: ManagerService.CountShipmentOrderReq
	(*CountShipmentOrderResp)(nil),                        // 96: ManagerService.CountShipmentOrderResp
	(*UpdateShipmentOrderReq)(nil),                        // 97: ManagerService.UpdateShipmentOrderReq
	(*UpdateShipmentOrderResp)(nil),                       // 98: ManagerService.UpdateShipmentOrderResp
	(*ReceiveShipmentOrderReq)(nil),                       // 99: ManagerService.ReceiveShipmentOrderReq
	(*ReceiveShipmentOrderResp)(nil),                      // 100: ManagerService.ReceiveShipmentOrderResp
	(*GetContractByShipmentPlanIdReq)(nil),                // 101: ManagerService.GetContractByShipmentPlanIdReq
	(*GetContractByShipmentPlanIdResp)(nil),               // 102: ManagerService.GetContractByShipmentPlanIdResp
	(*InsertConfigsReq)(nil),                              // 103: ManagerService.InsertConfigsReq
	(*UpdateConfigReq)(nil),                               // 104: ManagerService.UpdateConfigReq
	(*DeleteConfigsReq)(nil),                              // 105: ManagerService.DeleteConfigsReq
	(*GetConfigReq)(nil),                                  // 106: ManagerService.GetConfigReq
	(*CommonConfig)(nil),                                  // 107: ManagerService.CommonConfig
	(*UpdateConfigResp)(nil),                              // 108: ManagerService.UpdateConfigResp
	(*InsertConfigsResp)(nil),                             // 109: ManagerService.InsertConfigsResp
	(*DeleteConfigsResp)(nil),                             // 110: ManagerService.DeleteConfigsResp
	(*GetConfigResp)(nil),                                 // 111: ManagerService.GetConfigResp
	(*GetMiInfoReq)(nil),                                  // 112: ManagerService.GetMiInfoReq
	(*MiInfoVo)(nil),                                      // 113: ManagerService.MiInfoVo
	(*GetMiInfoResp)(nil),                                 // 114: ManagerService.GetMiInfoResp
	(*GetMiSpecialConfigReq)(nil),                         // 115: ManagerService.GetMiSpecialConfigReq
	(*MiSpecialConfig)(nil),                               // 116: ManagerService.MiSpecialConfig
	(*GetMiSpecialConfigResp)(nil),                        // 117: ManagerService.GetMiSpecialConfigResp
	(*UpdateMiSpecialConfigReq)(nil),                      // 118: ManagerService.UpdateMiSpecialConfigReq
	(*PlanReportGroupCondition)(nil),                      // 119: ManagerService.PlanReportGroupCondition
	(*PlanReportGetCondition)(nil),                        // 120: ManagerService.PlanReportGetCondition
	(*GetShipmentPlanReportsReq)(nil),                     // 121: ManagerService.GetShipmentPlanReportsReq
	(*CompanyReportVo)(nil),                               // 122: ManagerService.CompanyReportVo
	(*MiReportVo)(nil),                                    // 123: ManagerService.MiReportVo
	(*MedicineReportVo)(nil),                              // 124: ManagerService.MedicineReportVo
	(*ShipmentPlanDayReport)(nil),                         // 125: ManagerService.ShipmentPlanDayReport
	(*ShipmentPlanMonthReport)(nil),                       // 126: ManagerService.ShipmentPlanMonthReport
	(*ShipmentPlanYearReport)(nil),                        // 127: ManagerService.ShipmentPlanYearReport
	(*GetShipmentPlanDayReportsResp)(nil),                 // 128: ManagerService.GetShipmentPlanDayReportsResp
	(*GetShipmentPlanMonthReportsResp)(nil),               // 129: ManagerService.GetShipmentPlanMonthReportsResp
	(*GetShipmentPlanYearReportsResp)(nil),                // 130: ManagerService.GetShipmentPlanYearReportsResp
	(*OrderReportGroupCondition)(nil),                     // 131: ManagerService.OrderReportGroupCondition
	(*OrderReportGetCondition)(nil),                       // 132: ManagerService.OrderReportGetCondition
	(*GetShipmentOrderReportsReq)(nil),                    // 133: ManagerService.GetShipmentOrderReportsReq
	(*ShipmentOrderDayReport)(nil),                        // 134: ManagerService.ShipmentOrderDayReport
	(*ShipmentOrderMonthReport)(nil),                      // 135: ManagerService.ShipmentOrderMonthReport
	(*ShipmentOrderYearReport)(nil),                       // 136: ManagerService.ShipmentOrderYearReport
	(*GetShipmentOrderDayReportsResp)(nil),                // 137: ManagerService.GetShipmentOrderDayReportsResp
	(*GetShipmentOrderMonthReportsResp)(nil),              // 138: ManagerService.GetShipmentOrderMonthReportsResp
	(*GetShipmentOrderYearReportsResp)(nil),               // 139: ManagerService.GetShipmentOrderYearReportsResp
	(*FactoringReportGroupCondition)(nil),                 // 140: ManagerService.FactoringReportGroupCondition
	(*FactoringReportGetCondition)(nil),                   // 141: ManagerService.FactoringReportGetCondition
	(*GetFactoringOrderReportsReq)(nil),                   // 142: ManagerService.GetFactoringOrderReportsReq
	(*FactoringOrderDayReport)(nil),                       // 143: ManagerService.FactoringOrderDayReport
	(*GetFactoringOrderDayReportsResp)(nil),               // 144: ManagerService.GetFactoringOrderDayReportsResp
	(*FactoringOrderMonthReport)(nil),                     // 145: ManagerService.FactoringOrderMonthReport
	(*GetFactoringOrderMonthReportsResp)(nil),             // 146: ManagerService.GetFactoringOrderMonthReportsResp
	(*FactoringOrderYearReport)(nil),                      // 147: ManagerService.FactoringOrderYearReport
	(*GetFactoringOrderYearReportsResp)(nil),              // 148: ManagerService.GetFactoringOrderYearReportsResp
	(*ContractPlanReportGetCondition)(nil),                // 149: ManagerService.ContractPlanReportGetCondition
	(*ContractPlanReportGroupCondition)(nil),              // 150: ManagerService.ContractPlanReportGroupCondition
	(*GetContractPlanReportsReq)(nil),                     // 151: ManagerService.GetContractPlanReportsReq
	(*ContractReportVo)(nil),                              // 152: ManagerService.ContractReportVo
	(*ContractMiReportVo)(nil),                            // 153: ManagerService.ContractMiReportVo
	(*ContractPlanDayReport)(nil),                         // 154: ManagerService.ContractPlanDayReport
	(*GetContractPlanDayReportsResp)(nil),                 // 155: ManagerService.GetContractPlanDayReportsResp
	(*ContractPlanMonthReport)(nil),                       // 156: ManagerService.ContractPlanMonthReport
	(*GetContractPlanMonthReportsResp)(nil),               // 157: ManagerService.GetContractPlanMonthReportsResp
	(*ContractPlanYearReport)(nil),                        // 158: ManagerService.ContractPlanYearReport
	(*GetContractPlanYearReportsResp)(nil),                // 159: ManagerService.GetContractPlanYearReportsResp
	(*ContractSum)(nil),                                   // 160: ManagerService.ContractSum
	(*GetContractSumResp)(nil),                            // 161: ManagerService.GetContractSumResp
	(*GetValidContractInfoReq)(nil),                       // 162: ManagerService.GetValidContractInfoReq
	(*GetCurrentNeedPayReq)(nil),                          // 163: ManagerService.GetCurrentNeedPayReq
	(*GetValidContractInfoResp)(nil),                      // 164: ManagerService.GetValidContractInfoResp
	(*GetCurrentNeedPayResp)(nil),                         // 165: ManagerService.GetCurrentNeedPayResp
	(*GetMiDashboardReq)(nil),                             // 166: ManagerService.GetMiDashboardReq
	(*BankAccounts)(nil),                                  // 167: ManagerService.BankAccounts
	(*GetMiDashboardBaseInfoResp)(nil),                    // 168: ManagerService.GetMiDashboardBaseInfoResp
	(*GetDashboardShipmentRankCompanyDataYearReq)(nil),    // 169: ManagerService.GetDashboardShipmentRankCompanyDataYearReq
	(*DashboardShipmentRankCompanyDataYearVo)(nil),        // 170: ManagerService.DashboardShipmentRankCompanyDataYearVo
	(*GetDashboardShipmentRankCompanyDataYearResp)(nil),   // 171: ManagerService.GetDashboardShipmentRankCompanyDataYearResp
	(*GetDashboardShipmentRankMedicineDataYearReq)(nil),   // 172: ManagerService.GetDashboardShipmentRankMedicineDataYearReq
	(*DashboardShipmentRankMedicineDataYear)(nil),         // 173: ManagerService.DashboardShipmentRankMedicineDataYear
	(*GetDashboardShipmentRankMedicineDataYearResp)(nil),  // 174: ManagerService.GetDashboardShipmentRankMedicineDataYearResp
	(*GetDashboardCompanyRankReq)(nil),                    // 175: ManagerService.GetDashboardCompanyRankReq
	(*DashboardCompanyRankVo)(nil),                        // 176: ManagerService.DashboardCompanyRankVo
	(*GetDashboardCompanyRankResp)(nil),                   // 177: ManagerService.GetDashboardCompanyRankResp
	(*GetDashboardShipmentListReq)(nil),                   // 178: ManagerService.GetDashboardShipmentListReq
	(*DashboardShipmentVo)(nil),                           // 179: ManagerService.DashboardShipmentVo
	(*GetDashboardShipmentListResp)(nil),                  // 180: ManagerService.GetDashboardShipmentListResp
	(*GetDashboardMedicineRankReq)(nil),                   // 181: ManagerService.GetDashboardMedicineRankReq
	(*DashboardMedicineRankVo)(nil),                       // 182: ManagerService.DashboardMedicineRankVo
	(*GetDashboardMedicineRankResp)(nil),                  // 183: ManagerService.GetDashboardMedicineRankResp
	(*GetDashboardStockListReq)(nil),                      // 184: ManagerService.GetDashboardStockListReq
	(*DashboardStockVo)(nil),                              // 185: ManagerService.DashboardStockVo
	(*GetDashboardStockListResp)(nil),                     // 186: ManagerService.GetDashboardStockListResp
	(*GetCompanyBankAccountReq)(nil),                      // 187: ManagerService.GetCompanyBankAccountReq
	(*GetCompanyBankAccountResp)(nil),                     // 188: ManagerService.GetCompanyBankAccountResp
	(*GetPayOrderReq)(nil),                                // 189: ManagerService.GetPayOrderReq
	(*GetPayOrderResp)(nil),                               // 190: ManagerService.GetPayOrderResp
	(*GetCompanyHashReq)(nil),                             // 191: ManagerService.GetCompanyHashReq
	(*GetCompanyHashResp)(nil),                            // 192: ManagerService.GetCompanyHashResp
	(*CompanyHash)(nil),                                   // 193: ManagerService.CompanyHash
	(*GetMiHashReq)(nil),                                  // 194: ManagerService.GetMiHashReq
	(*MiHash)(nil),                                        // 195: ManagerService.MiHash
	(*GetMiHashResp)(nil),                                 // 196: ManagerService.GetMiHashResp
	(*GetMedicineReq)(nil),                                // 197: ManagerService.GetMedicineReq
	(*MedicineHash)(nil),                                  // 198: ManagerService.MedicineHash
	(*GetMedicineResp)(nil),                               // 199: ManagerService.GetMedicineResp
	(*GetContractHashReq)(nil),                            // 200: ManagerService.GetContractHashReq
	(*ContractHash)(nil),                                  // 201: ManagerService.ContractHash
	(*GetContractHashResp)(nil),                           // 202: ManagerService.GetContractHashResp
	(*GetContractMiHashReq)(nil),                          // 203: ManagerService.GetContractMiHashReq
	(*ContractMiHash)(nil),                                // 204: ManagerService.ContractMiHash
	(*GetContractMiHashResp)(nil),                         // 205: ManagerService.GetContractMiHashResp
	(*GetConfigHashReq)(nil),                              // 206: ManagerService.GetConfigHashReq
	(*ConfigHash)(nil),                                    // 207: ManagerService.ConfigHash
	(*GetConfigHashResp)(nil),                             // 208: ManagerService.GetConfigHashResp
	(*GetShipmentPlanHashReq)(nil),                        // 209: ManagerService.GetShipmentPlanHashReq
	(*ShipmentPlanHash)(nil),                              // 210: ManagerService.ShipmentPlanHash
	(*GetShipmentPlanHashResp)(nil),                       // 211: ManagerService.GetShipmentPlanHashResp
	(*GetShipmentOrderHashReq)(nil),                       // 212: ManagerService.GetShipmentOrderHashReq
	(*ShipmentOrderHash)(nil),                             // 213: ManagerService.ShipmentOrderHash
	(*GetShipmentOrderHashResp)(nil),                      // 214: ManagerService.GetShipmentOrderHashResp
	(*GetShipmentPayHashReq)(nil),                         // 215: ManagerService.GetShipmentPayHashReq
	(*ShipmentPayHash)(nil),                               // 216: ManagerService.ShipmentPayHash
	(*GetShipmentPayHashResp)(nil),                        // 217: ManagerService.GetShipmentPayHashResp
	(*GetShipmentFactoringHashReq)(nil),                   // 218: ManagerService.GetShipmentFactoringHashReq
	(*ShipmentFactoringHash)(nil),                         // 219: ManagerService.ShipmentFactoringHash
	(*GetShipmentFactoringHashResp)(nil),                  // 220: ManagerService.GetShipmentFactoringHashResp
	(*GetShipmentRankMedicineDataYearReq)(nil),            // 221: ManagerService.GetShipmentRankMedicineDataYearReq
	(*ShipmentRankMedicineDataYear)(nil),                  // 222: ManagerService.ShipmentRankMedicineDataYear
	(*GetShipmentRankMedicineDataYearResp)(nil),           // 223: ManagerService.GetShipmentRankMedicineDataYearResp
	(*GetShipmentRankCompanyDataYearReq)(nil),             // 224: ManagerService.GetShipmentRankCompanyDataYearReq
	(*ShipmentRankCompanyMedicine)(nil),                   // 225: ManagerService.ShipmentRankCompanyMedicine
	(*ShipmentRankCompanyDataYear)(nil),                   // 226: ManagerService.ShipmentRankCompanyDataYear
	(*GetShipmentRankCompanyDataYearResp)(nil),            // 227: ManagerService.GetShipmentRankCompanyDataYearResp
	(*GetRankMiReceiveYearReq)(nil),                       // 228: ManagerService.GetRankMiReceiveYearReq
	(*RankMiReceiveYear)(nil),                             // 229: ManagerService.RankMiReceiveYear
	(*GetRankMiReceiveYearResp)(nil),                      // 230: ManagerService.GetRankMiReceiveYearResp
	(*GetRankComReceiveYearReq)(nil),                      // 231: ManagerService.GetRankComReceiveYearReq
	(*RankComReceiveYear)(nil),                            // 232: ManagerService.RankComReceiveYear
	(*GetRankComReceiveYearResp)(nil),                     // 233: ManagerService.GetRankComReceiveYearResp
	(*GetRankMiPaidYearReq)(nil),                          // 234: ManagerService.GetRankMiPaidYearReq
	(*RankMiPaidYear)(nil),                                // 235: ManagerService.RankMiPaidYear
	(*GetRankMiPaidYearResp)(nil),                         // 236: ManagerService.GetRankMiPaidYearResp
	(*GetRankMedicineYearReq)(nil),                        // 237: ManagerService.GetRankMedicineYearReq
	(*RankMedicineYear)(nil),                              // 238: ManagerService.RankMedicineYear
	(*GetRankMedicineYearResp)(nil),                       // 239: ManagerService.GetRankMedicineYearResp
	(*GetMIBDashboardBaseInfoReq)(nil),                    // 240: ManagerService.GetMIBDashboardBaseInfoReq
	(*GetMIBDashboardBaseInfoResp)(nil),                   // 241: ManagerService.GetMIBDashboardBaseInfoResp
	(*ListBindReq)(nil),                                   // 242: ManagerService.ListBindReq
	(*ListBindResp)(nil),                                  // 243: ManagerService.ListBindResp
	(*ListBindVo)(nil),                                    // 244: ManagerService.ListBindVo
	(*BindJsonVo)(nil),                                    // 245: ManagerService.BindJsonVo
	(*BindReq)(nil),                                       // 246: ManagerService.BindReq
	(*BindParam)(nil),                                     // 247: ManagerService.BindParam
	(*BindResp)(nil),                                      // 248: ManagerService.BindResp
	(*ResetContractReq)(nil),                              // 249: ManagerService.ResetContractReq
	(*ResetContractParam)(nil),                            // 250: ManagerService.ResetContractParam
	(*ResetContractResp)(nil),                             // 251: ManagerService.ResetContractResp
	(*ListReimbReq)(nil),                                  // 252: ManagerService.ListReimbReq
	(*ListReimbResp)(nil),                                 // 253: ManagerService.ListReimbResp
	(*ReimbListVo)(nil),                                   // 254: ManagerService.ReimbListVo
	(*PayReimbReq)(nil),                                   // 255: ManagerService.PayReimbReq
	(*ApplyReimbQuotaReq)(nil),                            // 256: ManagerService.ApplyReimbQuotaReq
	(*ApproveReimbQuotaReq)(nil),                          // 257: ManagerService.ApproveReimbQuotaReq
	(*UpdateReimbReportReq)(nil),                          // 258: ManagerService.UpdateReimbReportReq
	(*OpReimbResp)(nil),                                   // 259: ManagerService.OpReimbResp
	(*UpdateMiSpecialConfigResp)(nil),                     // 260: ManagerService.UpdateMiSpecialConfigResp
	(*CreateBankAccountReq)(nil),                          // 261: ManagerService.CreateBankAccountReq
	(*AccountInfo)(nil),                                   // 262: ManagerService.AccountInfo
	(*CreateBankAccountResp)(nil),                         // 263: ManagerService.CreateBankAccountResp
	(*StockSyncReq)(nil),                                  // 264: ManagerService.StockSyncReq
	(*StockSyncParam)(nil),                                // 265: ManagerService.StockSyncParam
	(*StockSyncResp)(nil),                                 // 266: ManagerService.StockSyncResp
	(*ComStockMedicineBindListReq)(nil),                   // 267: ManagerService.ComStockMedicineBindListReq
	(*ComStockMedicineBindListResp)(nil),                  // 268: ManagerService.ComStockMedicineBindListResp
	(*ComStockMedicineBindListVo)(nil),                    // 269: ManagerService.ComStockMedicineBindListVo
	(*MiStockMedicineBindListReq)(nil),                    // 270: ManagerService.MiStockMedicineBindListReq
	(*MiStockMedicineBindListResp)(nil),                   // 271: ManagerService.MiStockMedicineBindListResp
	(*MiStockMedicineBindListVo)(nil),                     // 272: ManagerService.MiStockMedicineBindListVo
	(*ComStockMedicineBindReq)(nil),                       // 273: ManagerService.ComStockMedicineBindReq
	(*ComStockMedicineBindResp)(nil),                      // 274: ManagerService.ComStockMedicineBindResp
	(*MiStockMedicineBindReq)(nil),                        // 275: ManagerService.MiStockMedicineBindReq
	(*MiStockMedicineBindResp)(nil),                       // 276: ManagerService.MiStockMedicineBindResp
	(*CreateMiDevelopUserReq)(nil),                        // 277: ManagerService.CreateMiDevelopUserReq
	(*CreateMiDevelopUserResp)(nil),                       // 278: ManagerService.CreateMiDevelopUserResp
	(*ClientPermissionReq)(nil),                           // 279: ManagerService.ClientPermissionReq
	(*ClientPermissionResp)(nil),                          // 280: ManagerService.ClientPermissionResp
	(*ClientPermission)(nil),                              // 281: ManagerService.ClientPermission
	(*SetClientDevelopReq)(nil),                           // 282: ManagerService.SetClientDevelopReq
	(*SetClientDevelopResp)(nil),                          // 283: ManagerService.SetClientDevelopResp
	(*SaveClientPermissionReq)(nil),                       // 284: ManagerService.SaveClientPermissionReq
	(*SaveClientPermissionResp)(nil),                      // 285: ManagerService.SaveClientPermissionResp
	(*ListMedicineBindListReq)(nil),                       // 286: ManagerService.ListMedicineBindListReq
	(*ListMedicineBindListResp)(nil),                      // 287: ManagerService.ListMedicineBindListResp
	(*ListMedicineBindListVo)(nil),                        // 288: ManagerService.ListMedicineBindListVo
	(*CreateStockMedcineCodeBindReq)(nil),                 // 289: ManagerService.CreateStockMedcineCodeBindReq
	(*CreateStockMedcineCodeBindResp)(nil),                // 290: ManagerService.CreateStockMedcineCodeBindResp
	(*MedicineMiStockReq)(nil),                            // 291: ManagerService.MedicineMiStockReq
	(*MedicineMiStockResp)(nil),                           // 292: ManagerService.MedicineMiStockResp
	(*MedicineMiStock)(nil),                               // 293: ManagerService.MedicineMiStock
	(*MedicineCompanyStockReq)(nil),                       // 294: ManagerService.MedicineCompanyStockReq
	(*MedicineCompanyStockResp)(nil),                      // 295: ManagerService.MedicineCompanyStockResp
	(*MedicineCompanyStock)(nil),                          // 296: ManagerService.MedicineCompanyStock
	(*MedicineStockMiListReq)(nil),                        // 297: ManagerService.MedicineStockMiListReq
	(*MedicineStockMiListResp)(nil),                       // 298: ManagerService.MedicineStockMiListResp
	(*MedicineStockMiListVo)(nil),                         // 299: ManagerService.MedicineStockMiListVo
	(*ReimbursementListReq)(nil),                          // 300: ManagerService.ReimbursementListReq
	(*ReimbursementListResp)(nil),                         // 301: ManagerService.ReimbursementListResp
	(*ReimbursementListVo)(nil),                           // 302: ManagerService.ReimbursementListVo
	(*ReimbursementApplyQuotaReq)(nil),                    // 303: ManagerService.ReimbursementApplyQuotaReq
	(*ReimbursementApplyQuotaResp)(nil),                   // 304: ManagerService.ReimbursementApplyQuotaResp
	(*GetWsGetContractListReq)(nil),                       // 305: ManagerService.GetWsGetContractListReq
	(*GetWsGetContractListResp)(nil),                      // 306: ManagerService.GetWsGetContractListResp
	(*TpsyncContractListVo)(nil),                          // 307: ManagerService.TpsyncContractListVo
	(*ShipmentPlanListReq)(nil),                           // 308: ManagerService.ShipmentPlanListReq
	(*ShipmentPlanListResp)(nil),                          // 309: ManagerService.ShipmentPlanListResp
	(*ShipmentPlaneListVo)(nil),                           // 310: ManagerService.ShipmentPlaneListVo
	(*TenderContractInfoReq)(nil),                         // 311: ManagerService.TenderContractInfoReq
	(*TenderContractInfoResp)(nil),                        // 312: ManagerService.TenderContractInfoResp
	(*TenderContract)(nil),                                // 313: ManagerService.tenderContract
	(*ShipmentPlan)(nil),                                  // 314: ManagerService.ShipmentPlan
	(*UploadCompanyLogoUrlReq)(nil),                       // 315: ManagerService.UploadCompanyLogoUrlReq
	(*UploadCompanyLogoUrlResp)(nil),                      // 316: ManagerService.UploadCompanyLogoUrlResp
	(*UploadMiLogoUrlReq)(nil),                            // 317: ManagerService.UploadMiLogoUrlReq
	(*UploadMiLogoUrlResp)(nil),                           // 318: ManagerService.UploadMiLogoUrlResp
	(*GetMedicineHashReq)(nil),                            // 319: ManagerService.GetMedicineHashReq
	(*GetMedicineHashResp)(nil),                           // 320: ManagerService.GetMedicineHashResp
	(*MedicineChainHash)(nil),                             // 321: ManagerService.MedicineChainHash
	(*MedicineByMedicineIdReq)(nil),                       // 322: ManagerService.MedicineByMedicineIdReq
	(*MedicineByMedicineIdResp)(nil),                      // 323: ManagerService.MedicineByMedicineIdResp
	(*GetMICodeReq)(nil),                                  // 324: ManagerService.GetMICodeReq
	(*GetMICodeResp)(nil),                                 // 325: ManagerService.GetMICodeResp
	(*GetCompanyInfoReq)(nil),                             // 326: ManagerService.GetCompanyInfoReq
	(*GetCompanyInfoResp)(nil),                            // 327: ManagerService.GetCompanyInfoResp
	(*ListConstructionReq)(nil),                           // 328: ManagerService.ListConstructionReq
	(*ListConstructionResp)(nil),                          // 329: ManagerService.ListConstructionResp
	(*ConstructionVo)(nil),                                // 330: ManagerService.ConstructionVo
	(*CommonConstructionReq)(nil),                         // 331: ManagerService.CommonConstructionReq
	(*CommonConstructionResp)(nil),                        // 332: ManagerService.CommonConstructionResp
	(*CommonConstructionVo)(nil),                          // 333: ManagerService.CommonConstructionVo
	(*GetConstructionInfoReq)(nil),                        // 334: ManagerService.GetConstructionInfoReq
	(*ConstructionInfoVo)(nil),                            // 335: ManagerService.ConstructionInfoVo
	(*GetConstructionInfoResp)(nil),                       // 336: ManagerService.GetConstructionInfoResp
	(*CreateOneConstructionReq)(nil),                      // 337: ManagerService.CreateOneConstructionReq
	(*CreateOneConstructionResp)(nil),                     // 338: ManagerService.CreateOneConstructionResp
	(*CreateHashConstructionReq)(nil),                     // 339: ManagerService.CreateHashConstructionReq
	(*CreateHashConstructionResp)(nil),                    // 340: ManagerService.CreateHashConstructionResp
	(*UpdateOneConstructionReq)(nil),                      // 341: ManagerService.UpdateOneConstructionReq
	(*UpdateOneConstructionResp)(nil),                     // 342: ManagerService.UpdateOneConstructionResp
	(*UpdateHashConstructionReq)(nil),                     // 343: ManagerService.UpdateHashConstructionReq
	(*UpdateHashConstructionResp)(nil),                    // 344: ManagerService.UpdateHashConstructionResp
	(*UploadConstructionLogoUrlReq)(nil),                  // 345: ManagerService.UploadConstructionLogoUrlReq
	(*UploadConstructionLogoUrlResp)(nil),                 // 346: ManagerService.UploadConstructionLogoUrlResp
	(*DeleteConstructionReq)(nil),                         // 347: ManagerService.DeleteConstructionReq
	(*DeleteConstructionResp)(nil),                        // 348: ManagerService.DeleteConstructionResp
	(*GetConstructionHashReq)(nil),                        // 349: ManagerService.GetConstructionHashReq
	(*GetConstructionHashResp)(nil),                       // 350: ManagerService.GetConstructionHashResp
	(*ConstructionHashVo)(nil),                            // 351: ManagerService.ConstructionHashVo
	(*ListBuildReq)(nil),                                  // 352: ManagerService.ListBuildReq
	(*ListBuildResp)(nil),                                 // 353: ManagerService.ListBuildResp
	(*BuildVo)(nil),                                       // 354: ManagerService.BuildVo
	(*CommonBuildReq)(nil),                                // 355: ManagerService.CommonBuildReq
	(*CommonBuildResp)(nil),                               // 356: ManagerService.CommonBuildResp
	(*CommonBuildVo)(nil),                                 // 357: ManagerService.CommonBuildVo
	(*GetBuildInfoReq)(nil),                               // 358: ManagerService.GetBuildInfoReq
	(*BuildInfoVo)(nil),                                   // 359: ManagerService.BuildInfoVo
	(*GetBuildInfoResp)(nil),                              // 360: ManagerService.GetBuildInfoResp
	(*CreateOneBuildReq)(nil),                             // 361: ManagerService.CreateOneBuildReq
	(*CreateOneBuildResp)(nil),                            // 362: ManagerService.CreateOneBuildResp
	(*CreateHashBuildReq)(nil),                            // 363: ManagerService.CreateHashBuildReq
	(*CreateHashBuildResp)(nil),                           // 364: ManagerService.CreateHashBuildResp
	(*UpdateOneBuildReq)(nil),                             // 365: ManagerService.UpdateOneBuildReq
	(*UpdateOneBuildResp)(nil),                            // 366: ManagerService.UpdateOneBuildResp
	(*UpdateHashBuildReq)(nil),                            // 367: ManagerService.UpdateHashBuildReq
	(*UpdateHashBuildResp)(nil),                           // 368: ManagerService.UpdateHashBuildResp
	(*UploadBuildLogoUrlReq)(nil),                         // 369: ManagerService.UploadBuildLogoUrlReq
	(*UploadBuildLogoUrlResp)(nil),                        // 370: ManagerService.UploadBuildLogoUrlResp
	(*DeleteBuildReq)(nil),                                // 371: ManagerService.DeleteBuildReq
	(*DeleteBuildResp)(nil),                               // 372: ManagerService.DeleteBuildResp
	(*GetBuildHashReq)(nil),                               // 373: ManagerService.GetBuildHashReq
	(*GetBuildHashResp)(nil),                              // 374: ManagerService.GetBuildHashResp
	(*BuildHashVo)(nil),                                   // 375: ManagerService.BuildHashVo
	(*ListSupervisorReq)(nil),                             // 376: ManagerService.ListSupervisorReq
	(*ListSupervisorResp)(nil),                            // 377: ManagerService.ListSupervisorResp
	(*SupervisorVo)(nil),                                  // 378: ManagerService.SupervisorVo
	(*CommonSupervisorReq)(nil),                           // 379: ManagerService.CommonSupervisorReq
	(*CommonSupervisorResp)(nil),                          // 380: ManagerService.CommonSupervisorResp
	(*CommonSupervisorVo)(nil),                            // 381: ManagerService.CommonSupervisorVo
	(*GetSupervisorInfoReq)(nil),                          // 382: ManagerService.GetSupervisorInfoReq
	(*SupervisorInfoVo)(nil),                              // 383: ManagerService.SupervisorInfoVo
	(*GetSupervisorInfoResp)(nil),                         // 384: ManagerService.GetSupervisorInfoResp
	(*CreateOneSupervisorReq)(nil),                        // 385: ManagerService.CreateOneSupervisorReq
	(*CreateOneSupervisorResp)(nil),                       // 386: ManagerService.CreateOneSupervisorResp
	(*CreateHashSupervisorReq)(nil),                       // 387: ManagerService.CreateHashSupervisorReq
	(*CreateHashSupervisorResp)(nil),                      // 388: ManagerService.CreateHashSupervisorResp
	(*UpdateOneSupervisorReq)(nil),                        // 389: ManagerService.UpdateOneSupervisorReq
	(*UpdateOneSupervisorResp)(nil),                       // 390: ManagerService.UpdateOneSupervisorResp
	(*UpdateHashSupervisorReq)(nil),                       // 391: ManagerService.UpdateHashSupervisorReq
	(*UpdateHashSupervisorResp)(nil),                      // 392: ManagerService.UpdateHashSupervisorResp
	(*UploadSupervisorLogoUrlReq)(nil),                    // 393: ManagerService.UploadSupervisorLogoUrlReq
	(*UploadSupervisorLogoUrlResp)(nil),                   // 394: ManagerService.UploadSupervisorLogoUrlResp
	(*DeleteSupervisorReq)(nil),                           // 395: ManagerService.DeleteSupervisorReq
	(*DeleteSupervisorResp)(nil),                          // 396: ManagerService.DeleteSupervisorResp
	(*GetSupervisorHashReq)(nil),                          // 397: ManagerService.GetSupervisorHashReq
	(*GetSupervisorHashResp)(nil),                         // 398: ManagerService.GetSupervisorHashResp
	(*SupervisorHashVo)(nil),                              // 399: ManagerService.SupervisorHashVo
	(*ListGovermentReq)(nil),                              // 400: ManagerService.ListGovermentReq
	(*ListGovermentResp)(nil),                             // 401: ManagerService.ListGovermentResp
	(*GovermentVo)(nil),                                   // 402: ManagerService.GovermentVo
	(*CommonGovermentReq)(nil),                            // 403: ManagerService.CommonGovermentReq
	(*CommonGovermentResp)(nil),                           // 404: ManagerService.CommonGovermentResp
	(*CommonGovermentVo)(nil),                             // 405: ManagerService.CommonGovermentVo
	(*GetGovermentInfoReq)(nil),                           // 406: ManagerService.GetGovermentInfoReq
	(*GovermentInfoVo)(nil),                               // 407: ManagerService.GovermentInfoVo
	(*GetGovermentInfoResp)(nil),                          // 408: ManagerService.GetGovermentInfoResp
	(*CreateOneGovermentReq)(nil),                         // 409: ManagerService.CreateOneGovermentReq
	(*CreateOneGovermentResp)(nil),                        // 410: ManagerService.CreateOneGovermentResp
	(*CreateHashGovermentReq)(nil),                        // 411: ManagerService.CreateHashGovermentReq
	(*CreateHashGovermentResp)(nil),                       // 412: ManagerService.CreateHashGovermentResp
	(*UpdateOneGovermentReq)(nil),                         // 413: ManagerService.UpdateOneGovermentReq
	(*UpdateOneGovermentResp)(nil),                        // 414: ManagerService.UpdateOneGovermentResp
	(*UpdateHashGovermentReq)(nil),                        // 415: ManagerService.UpdateHashGovermentReq
	(*UpdateHashGovermentResp)(nil),                       // 416: ManagerService.UpdateHashGovermentResp
	(*UploadGovermentLogoUrlReq)(nil),                     // 417: ManagerService.UploadGovermentLogoUrlReq
	(*UploadGovermentLogoUrlResp)(nil),                    // 418: ManagerService.UploadGovermentLogoUrlResp
	(*DeleteGovermentReq)(nil),                            // 419: ManagerService.DeleteGovermentReq
	(*DeleteGovermentResp)(nil),                           // 420: ManagerService.DeleteGovermentResp
	(*GetGovermentHashReq)(nil),                           // 421: ManagerService.GetGovermentHashReq
	(*GetGovermentHashResp)(nil),                          // 422: ManagerService.GetGovermentHashResp
	(*GovermentHashVo)(nil),                               // 423: ManagerService.GovermentHashVo
	(*CreateOneProcessReq)(nil),                           // 424: ManagerService.CreateOneProcessReq
	(*DocumentInfoApply)(nil),                             // 425: ManagerService.DocumentInfoApply
	(*CreateOneProcessResp)(nil),                          // 426: ManagerService.CreateOneProcessResp
	(*GetProcessCodeReq)(nil),                             // 427: ManagerService.GetProcessCodeReq
	(*GetProcessCodeResp)(nil),                            // 428: ManagerService.GetProcessCodeResp
	(*CreateHashProcessReq)(nil),                          // 429: ManagerService.CreateHashProcessReq
	(*CreateHashProcessResp)(nil),                         // 430: ManagerService.CreateHashProcessResp
	(*UpdateProcessReq)(nil),                              // 431: ManagerService.UpdateProcessReq
	(*UpdateProcessResp)(nil),                             // 432: ManagerService.UpdateProcessResp
	(*UpdateHashProcessReq)(nil),                          // 433: ManagerService.UpdateHashProcessReq
	(*UpdateHashProcessResp)(nil),                         // 434: ManagerService.UpdateHashProcessResp
	(*DeleteProcessReq)(nil),                              // 435: ManagerService.DeleteProcessReq
	(*DeleteProcessResp)(nil),                             // 436: ManagerService.DeleteProcessResp
	(*UpdateProcessSortReq)(nil),                          // 437: ManagerService.UpdateProcessSortReq
	(*UpdateProcessSortResp)(nil),                         // 438: ManagerService.UpdateProcessSortResp
	(*ListProcessReq)(nil),                                // 439: ManagerService.ListProcessReq
	(*ListProcessResp)(nil),                               // 440: ManagerService.ListProcessResp
	(*ListProcessVo)(nil),                                 // 441: ManagerService.ListProcessVo
	(*CommonProcessReq)(nil),                              // 442: ManagerService.CommonProcessReq
	(*CommonProcessResp)(nil),                             // 443: ManagerService.CommonProcessResp
	(*UploadDocumentInfo)(nil),                            // 444: ManagerService.UploadDocumentInfo
	(*ProjectReq)(nil),                                    // 445: ManagerService.ProjectReq
	(*ProjectVo)(nil),                                     // 446: ManagerService.ProjectVo
	(*ProjectsResp)(nil),                                  // 447: ManagerService.ProjectsResp
	(*CreateProjectHashReq)(nil),                          // 448: ManagerService.CreateProjectHashReq
	(*UpdateProjectHashReq)(nil),                          // 449: ManagerService.UpdateProjectHashReq
	(*GetProjectHashReq)(nil),                             // 450: ManagerService.GetProjectHashReq
	(*ProjectHashVo)(nil),                                 // 451: ManagerService.ProjectHashVo
	(*GetProjectHashResp)(nil),                            // 452: ManagerService.GetProjectHashResp
	(*ProgressPlanReq)(nil),                               // 453: ManagerService.ProgressPlanReq
	(*ProgressPlanVo)(nil),                                // 454: ManagerService.ProgressPlanVo
	(*ProgressPlansResp)(nil),                             // 455: ManagerService.ProgressPlansResp
	(*CreateProgressPlanHashReq)(nil),                     // 456: ManagerService.CreateProgressPlanHashReq
	(*UpdateProgressPlanHashReq)(nil),                     // 457: ManagerService.UpdateProgressPlanHashReq
	(*GetProgressPlanHashReq)(nil),                        // 458: ManagerService.GetProgressPlanHashReq
	(*ProgressPlanHashVo)(nil),                            // 459: ManagerService.ProgressPlanHashVo
	(*GetProgressPlanHashResp)(nil),                       // 460: ManagerService.GetProgressPlanHashResp
	(*ProgressActualReq)(nil),                             // 461: ManagerService.ProgressActualReq
	(*ProgressActualVo)(nil),                              // 462: ManagerService.ProgressActualVo
	(*ProgressActualsResp)(nil),                           // 463: ManagerService.ProgressActualsResp
	(*CreateProgressActualHashReq)(nil),                   // 464: ManagerService.CreateProgressActualHashReq
	(*UpdateProgressActualHashReq)(nil),                   // 465: ManagerService.UpdateProgressActualHashReq
	(*GetProgressActualHashReq)(nil),                      // 466: ManagerService.GetProgressActualHashReq
	(*ProgressActualHashVo)(nil),                          // 467: ManagerService.ProgressActualHashVo
	(*GetProgressActualHashResp)(nil),                     // 468: ManagerService.GetProgressActualHashResp
	(*QualityInspectionReq)(nil),                          // 469: ManagerService.QualityInspectionReq
	(*QualityInspectionVo)(nil),                           // 470: ManagerService.QualityInspectionVo
	(*QualityInspectionsResp)(nil),                        // 471: ManagerService.QualityInspectionsResp
	(*CreateQualityInspectionHashReq)(nil),                // 472: ManagerService.CreateQualityInspectionHashReq
	(*UpdateQualityInspectionHashReq)(nil),                // 473: ManagerService.UpdateQualityInspectionHashReq
	(*GetQualityInspectionHashReq)(nil),                   // 474: ManagerService.GetQualityInspectionHashReq
	(*QualityInspectionHashVo)(nil),                       // 475: ManagerService.QualityInspectionHashVo
	(*GetQualityInspectionHashResp)(nil),                  // 476: ManagerService.GetQualityInspectionHashResp
	(*GetProcessHashReq)(nil),                             // 477: ManagerService.GetProcessHashReq
	(*GetProcessHashResp)(nil),                            // 478: ManagerService.GetProcessHashResp
	(*ProcessHashVo)(nil),                                 // 479: ManagerService.ProcessHashVo
	(*UpdateProcessApproveReq)(nil),                       // 480: ManagerService.UpdateProcessApproveReq
	(*DocumentInfoApprove)(nil),                           // 481: ManagerService.DocumentInfoApprove
	(*GetProcessInfoReq)(nil),                             // 482: ManagerService.GetProcessInfoReq
	(*ProcessInfoVo)(nil),                                 // 483: ManagerService.ProcessInfoVo
	(*ProcessInfoHashVo)(nil),                             // 484: ManagerService.ProcessInfoHashVo
	(*GetProcessInfoResp)(nil),                            // 485: ManagerService.GetProcessInfoResp
	(*ListContractReq)(nil),                               // 486: ManagerService.ListContractReq
	(*ListContractResp)(nil),                              // 487: ManagerService.ListContractResp
	(*ListContractVo)(nil),                                // 488: ManagerService.ListContractVo
	(*GetOneContractReq)(nil),                             // 489: ManagerService.GetOneContractReq
	(*GetOneContractResp)(nil),                            // 490: ManagerService.GetOneContractResp
	(*ContractInfoVo)(nil),                                // 491: ManagerService.ContractInfoVo
	(*CreateOneContractReq)(nil),                          // 492: ManagerService.CreateOneContractReq
	(*DocumentInfoContract)(nil),                          // 493: ManagerService.DocumentInfoContract
	(*CreateOneContractResp)(nil),                         // 494: ManagerService.CreateOneContractResp
	(*UpdateOneContractReq)(nil),                          // 495: ManagerService.UpdateOneContractReq
	(*UpdateOneContractResp)(nil),                         // 496: ManagerService.UpdateOneContractResp
	(*CreateContractHashReq)(nil),                         // 497: ManagerService.CreateContractHashReq
	(*CreateContractHashResp)(nil),                        // 498: ManagerService.CreateContractHashResp
	(*UpdateContractHashReq)(nil),                         // 499: ManagerService.UpdateContractHashReq
	(*UpdateContractHashResp)(nil),                        // 500: ManagerService.UpdateContractHashResp
	(*DeleteOneContractReq)(nil),                          // 501: ManagerService.DeleteOneContractReq
	(*DeleteOneContractResp)(nil),                         // 502: ManagerService.DeleteOneContractResp
	(*ListContractHashReq)(nil),                           // 503: ManagerService.ListContractHashReq
	(*ListContractHashResp)(nil),                          // 504: ManagerService.ListContractHashResp
	(*ListContractHashVo)(nil),                            // 505: ManagerService.ListContractHashVo
	(*DocumentInfo)(nil),                                  // 506: ManagerService.DocumentInfo
	(*CommonProjectReq)(nil),                              // 507: ManagerService.CommonProjectReq
	(*CommonProjectResp)(nil),                             // 508: ManagerService.CommonProjectResp
	(*CommonProjectVo)(nil),                               // 509: ManagerService.CommonProjectVo
	(*CommonProjectPhaseReq)(nil),                         // 510: ManagerService.CommonProjectPhaseReq
	(*CommonProjectPhaseResp)(nil),                        // 511: ManagerService.CommonProjectPhaseResp
	(*CommonProjectPhaseVo)(nil),                          // 512: ManagerService.CommonProjectPhaseVo
	(*GetBuildInfoCodeByIdReq)(nil),                       // 513: ManagerService.GetBuildInfoCodeByIdReq
	(*GetBuildInfoCodeByIdResp)(nil),                      // 514: ManagerService.GetBuildInfoCodeByIdResp
	(*GetGovermentCodeByIdReq)(nil),                       // 515: ManagerService.GetGovermentCodeByIdReq
	(*GetGovermentCodeByIdResp)(nil),                      // 516: ManagerService.GetGovermentCodeByIdResp
	(*GetSupervisorCodeByIdReq)(nil),                      // 517: ManagerService.GetSupervisorCodeByIdReq
	(*GetSupervisorCodeByIdResp)(nil),                     // 518: ManagerService.GetSupervisorCodeByIdResp
	(*CreateInvoiceHashReq)(nil),                          // 519: ManagerService.CreateInvoiceHashReq
	(*CreateInvoiceHashResp)(nil),                         // 520: ManagerService.CreateInvoiceHashResp
	(*CreateOneInvoiceReq)(nil),                           // 521: ManagerService.CreateOneInvoiceReq
	(*CreateOneInvoiceResp)(nil),                          // 522: ManagerService.CreateOneInvoiceResp
	(*UpdateInvoiceHasReq)(nil),                           // 523: ManagerService.UpdateInvoiceHasReq
	(*UpdateInvoiceHasResp)(nil),                          // 524: ManagerService.UpdateInvoiceHasResp
	(*UpdateOneInvoiceReq)(nil),                           // 525: ManagerService.UpdateOneInvoiceReq
	(*UpdateOneInvoiceResp)(nil),                          // 526: ManagerService.UpdateOneInvoiceResp
	(*GetOneInvoiceReq)(nil),                              // 527: ManagerService.GetOneInvoiceReq
	(*GetOneInvoiceResp)(nil),                             // 528: ManagerService.GetOneInvoiceResp
	(*InvoiceInfoVo)(nil),                                 // 529: ManagerService.InvoiceInfoVo
	(*UploadChainInvoice)(nil),                            // 530: ManagerService.UploadChainInvoice
	(*ListInvoiceReq)(nil),                                // 531: ManagerService.ListInvoiceReq
	(*ListInvoiceResp)(nil),                               // 532: ManagerService.ListInvoiceResp
	(*ListInvoiceVo)(nil),                                 // 533: ManagerService.ListInvoiceVo
	(*DeleteOneInvoiceReq)(nil),                           // 534: ManagerService.DeleteOneInvoiceReq
	(*DeleteOneInvoiceResp)(nil),                          // 535: ManagerService.DeleteOneInvoiceResp
	(*UpdateInvoiceHashReq)(nil),                          // 536: ManagerService.UpdateInvoiceHashReq
	(*UpdateInvoiceHashResp)(nil),                         // 537: ManagerService.UpdateInvoiceHashResp
	(*ReceiveInvoiceHashReq)(nil),                         // 538: ManagerService.ReceiveInvoiceHashReq
	(*ReceiveInvoiceHashResp)(nil),                        // 539: ManagerService.ReceiveInvoiceHashResp
	(*PayInvoiceHashReq)(nil),                             // 540: ManagerService.PayInvoiceHashReq
	(*PayInvoiceHashResp)(nil),                            // 541: ManagerService.PayInvoiceHashResp
	(*GetDashboardProjectReq)(nil),                        // 542: ManagerService.GetDashboardProjectReq
	(*DashboardProjectVo)(nil),                            // 543: ManagerService.DashboardProjectVo
	(*GetDashboardProjectResp)(nil),                       // 544: ManagerService.GetDashboardProjectResp
	(*CountDashboardWorkmanAttendanceStatisticsReq)(nil),  // 545: ManagerService.CountDashboardWorkmanAttendanceStatisticsReq
	(*DashboardWorkmanAttendanceStatisticsVo)(nil),        // 546: ManagerService.DashboardWorkmanAttendanceStatisticsVo
	(*CountDashboardWorkmanAttendanceStatisticsResp)(nil), // 547: ManagerService.CountDashboardWorkmanAttendanceStatisticsResp
	(*CountDashboardWorkmanEpidemicStatisticsReq)(nil),    // 548: ManagerService.CountDashboardWorkmanEpidemicStatisticsReq
	(*DashboardWorkmanEpidemicStatisticsVo)(nil),          // 549: ManagerService.DashboardWorkmanEpidemicStatisticsVo
	(*CountDashboardWorkmanEpidemicStatisticsResp)(nil),   // 550: ManagerService.CountDashboardWorkmanEpidemicStatisticsResp
	(*CountDashboardProcessCompletionPercentReq)(nil),     // 551: ManagerService.CountDashboardProcessCompletionPercentReq
	(*DashboardProcessCompletionPercentVo)(nil),           // 552: ManagerService.DashboardProcessCompletionPercentVo
	(*CountDashboardProcessCompletionPercentResp)(nil),    // 553: ManagerService.CountDashboardProcessCompletionPercentResp
	(*ListDashboardSafetyInspectionReq)(nil),              // 554: ManagerService.ListDashboardSafetyInspectionReq
	(*DashboardSafetyInspectionVo)(nil),                   // 555: ManagerService.DashboardSafetyInspectionVo
	(*ListDashboardSafetyInspectionResp)(nil),             // 556: ManagerService.ListDashboardSafetyInspectionResp
	(*ReportDashboardYearReq)(nil),                        // 557: ManagerService.ReportDashboardYearReq
	(*ReportDashboardMonthReq)(nil),                       // 558: ManagerService.ReportDashboardMonthReq
	(*ReportDashboardInvoiceYearResp)(nil),                // 559: ManagerService.ReportDashboardInvoiceYearResp
	(*ReportDashboardInvoiceMonthResp)(nil),               // 560: ManagerService.ReportDashboardInvoiceMonthResp
	(*ReportDashboardInspectionYearResp)(nil),             // 561: ManagerService.ReportDashboardInspectionYearResp
	(*ReportDashboardInspectionMonthResp)(nil),            // 562: ManagerService.ReportDashboardInspectionMonthResp
	(*ReportDashboardProcessYearResp)(nil),                // 563: ManagerService.ReportDashboardProcessYearResp
	(*ReportDashboardProcessMonthResp)(nil),               // 564: ManagerService.ReportDashboardProcessMonthResp
	(*ReportDashboardAttendanceYearResp)(nil),             // 565: ManagerService.ReportDashboardAttendanceYearResp
	(*ReportDashboardAttendanceMonthResp)(nil),            // 566: ManagerService.ReportDashboardAttendanceMonthResp
	(*ReportDashboardRankYearReq)(nil),                    // 567: ManagerService.ReportDashboardRankYearReq
	(*ReportDashboardRankMonthReq)(nil),                   // 568: ManagerService.ReportDashboardRankMonthReq
	(*DashboardRankMaterialYearVo)(nil),                   // 569: ManagerService.DashboardRankMaterialYearVo
	(*ReportDashboardRankMaterialYearResp)(nil),           // 570: ManagerService.ReportDashboardRankMaterialYearResp
	(*DashboardRankMaterialMonthVo)(nil),                  // 571: ManagerService.DashboardRankMaterialMonthVo
	(*ReportDashboardRankMaterialMonthResp)(nil),          // 572: ManagerService.ReportDashboardRankMaterialMonthResp
	(*ListDashboardProcessReq)(nil),                       // 573: ManagerService.ListDashboardProcessReq
	(*ListDashboardProcessResp)(nil),                      // 574: ManagerService.ListDashboardProcessResp
	(*SafetyInspectionReq)(nil),                           // 575: ManagerService.SafetyInspectionReq
	(*SafetyInspectionIdsReq)(nil),                        // 576: ManagerService.SafetyInspectionIdsReq
	(*ListSafetyInspectionReq)(nil),                       // 577: ManagerService.ListSafetyInspectionReq
	(*OperateIntegerResp)(nil),                            // 578: ManagerService.OperateIntegerResp
	(*SafetyInspectionsResp)(nil),                         // 579: ManagerService.SafetyInspectionsResp
	(*GetSafetyInspectionHashResp)(nil),                   // 580: ManagerService.GetSafetyInspectionHashResp
	(*SafetyInspectionVo)(nil),                            // 581: ManagerService.SafetyInspectionVo
	(*SafetyInspectionHashVo)(nil),                        // 582: ManagerService.SafetyInspectionHashVo
	(*SafetyLogReq)(nil),                                  // 583: ManagerService.SafetyLogReq
	(*SafetyLogIdsReq)(nil),                               // 584: ManagerService.SafetyLogIdsReq
	(*ListSafetyLogReq)(nil),                              // 585: ManagerService.ListSafetyLogReq
	(*SafetyLogsResp)(nil),                                // 586: ManagerService.SafetyLogsResp
	(*GetSafetyLogHashResp)(nil),                          // 587: ManagerService.GetSafetyLogHashResp
	(*SafetyLogVo)(nil),                                   // 588: ManagerService.SafetyLogVo
	(*SafetyLogHashVo)(nil),                               // 589: ManagerService.SafetyLogHashVo
	(*WorkmansReq)(nil),                                   // 590: ManagerService.WorkmansReq
	(*WorkmanReq)(nil),                                    // 591: ManagerService.WorkmanReq
	(*WorkmanIdsReq)(nil),                                 // 592: ManagerService.WorkmanIdsReq
	(*ListWorkmanReq)(nil),                                // 593: ManagerService.ListWorkmanReq
	(*WorkmansResp)(nil),                                  // 594: ManagerService.WorkmansResp
	(*GetWorkmanHashResp)(nil),                            // 595: ManagerService.GetWorkmanHashResp
	(*WorkmanVo)(nil),                                     // 596: ManagerService.WorkmanVo
	(*WorkmanHashVo)(nil),                                 // 597: ManagerService.WorkmanHashVo
	(*WorkmanAttendancesReq)(nil),                         // 598: ManagerService.WorkmanAttendancesReq
	(*WorkmanAttendanceReq)(nil),                          // 599: ManagerService.WorkmanAttendanceReq
	(*WorkmanAttendanceIdsReq)(nil),                       // 600: ManagerService.WorkmanAttendanceIdsReq
	(*ListWorkmanAttendanceReq)(nil),                      // 601: ManagerService.ListWorkmanAttendanceReq
	(*WorkmanAttendancesResp)(nil),                        // 602: ManagerService.WorkmanAttendancesResp
	(*GetWorkmanAttendanceHashResp)(nil),                  // 603: ManagerService.GetWorkmanAttendanceHashResp
	(*WorkmanAttendanceVo)(nil),                           // 604: ManagerService.WorkmanAttendanceVo
	(*WorkmanAttendanceHashVo)(nil),                       // 605: ManagerService.WorkmanAttendanceHashVo
	(*MaterialReq)(nil),                                   // 606: ManagerService.MaterialReq
	(*MaterialIdsReq)(nil),                                // 607: ManagerService.MaterialIdsReq
	(*ListMaterialReq)(nil),                               // 608: ManagerService.ListMaterialReq
	(*MaterialsResp)(nil),                                 // 609: ManagerService.MaterialsResp
	(*GetMaterialHashResp)(nil),                           // 610: ManagerService.GetMaterialHashResp
	(*MaterialVo)(nil),                                    // 611: ManagerService.MaterialVo
	(*MaterialHashVo)(nil),                                // 612: ManagerService.MaterialHashVo
	(*ListMaterialDistinctNameReq)(nil),                   // 613: ManagerService.ListMaterialDistinctNameReq
	(*MaterialDistinctNameVo)(nil),                        // 614: ManagerService.MaterialDistinctNameVo
	(*ListMaterialDistinctNameResp)(nil),                  // 615: ManagerService.ListMaterialDistinctNameResp
	(*timestamppb.Timestamp)(nil),                         // 616: google.protobuf.Timestamp
}
var file_ManagerService_proto_depIdxs = []int32{
	0,    // 0: ManagerService.MedicineListReq.page:type_name -> ManagerService.Page
	3,    // 1: ManagerService.MedicineListResp.list:type_name -> ManagerService.MedicineListVo
	616,  // 2: ManagerService.MedicineListVo.createdAt:type_name -> google.protobuf.Timestamp
	0,    // 3: ManagerService.MedicineListForQueryReq.page:type_name -> ManagerService.Page
	3,    // 4: ManagerService.MedicineListForQueryResp.list:type_name -> ManagerService.MedicineListVo
	0,    // 5: ManagerService.CommonListCnapsReq.page:type_name -> ManagerService.Page
	8,    // 6: ManagerService.CommonListCnapsResp.list:type_name -> ManagerService.CnapsListVo
	0,    // 7: ManagerService.CommonListTagReq.page:type_name -> ManagerService.Page
	12,   // 8: ManagerService.CommonListTagResp.list:type_name -> ManagerService.CommonListTagVo
	13,   // 9: ManagerService.CreateBatchMedicineReq.list:type_name -> ManagerService.CreateMedicineReq
	6,    // 10: ManagerService.SelectInfoByMedicineNamesResp.list:type_name -> ManagerService.MedicineListForQueryVo
	0,    // 11: ManagerService.TagListReq.page:type_name -> ManagerService.Page
	29,   // 12: ManagerService.TagListResp.list:type_name -> ManagerService.TagListVo
	0,    // 13: ManagerService.TagDetailListReq.page:type_name -> ManagerService.Page
	38,   // 14: ManagerService.TagDetailListResp.list:type_name -> ManagerService.TagDetailVo
	45,   // 15: ManagerService.CommonMedicineQueryResp.list:type_name -> ManagerService.TagMedicineVo
	0,    // 16: ManagerService.ListMiReq.page:type_name -> ManagerService.Page
	48,   // 17: ManagerService.ListMiResp.list:type_name -> ManagerService.ListMiVo
	616,  // 18: ManagerService.ListMiVo.createdAt:type_name -> google.protobuf.Timestamp
	0,    // 19: ManagerService.CommonMIReq.page:type_name -> ManagerService.Page
	0,    // 20: ManagerService.CommonMIInfoReq.page:type_name -> ManagerService.Page
	53,   // 21: ManagerService.CommonMIResp.list:type_name -> ManagerService.CommonMIVo
	54,   // 22: ManagerService.CommonMIInfoResp.list:type_name -> ManagerService.CommonMIInfoVo
	0,    // 23: ManagerService.CommonCompanyReq.page:type_name -> ManagerService.Page
	61,   // 24: ManagerService.CommonCompanyResp.list:type_name -> ManagerService.CommonCompanyVo
	63,   // 25: ManagerService.CompanyInfoResp.list:type_name -> ManagerService.CompanyInfoVo
	616,  // 26: ManagerService.CompanyInfoVo.createdAt:type_name -> google.protobuf.Timestamp
	61,   // 27: ManagerService.SelCompanyByNamesResp.list:type_name -> ManagerService.CommonCompanyVo
	0,    // 28: ManagerService.ListCompanyReq.page:type_name -> ManagerService.Page
	68,   // 29: ManagerService.ListCompanyResp.list:type_name -> ManagerService.ListCompanyVo
	616,  // 30: ManagerService.ListCompanyVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 31: ManagerService.ListTpPlanErrReq.startDate:type_name -> google.protobuf.Timestamp
	616,  // 32: ManagerService.ListTpPlanErrReq.endDate:type_name -> google.protobuf.Timestamp
	0,    // 33: ManagerService.ListTpPlanErrReq.page:type_name -> ManagerService.Page
	75,   // 34: ManagerService.ListTpPlanErrResp.list:type_name -> ManagerService.ListTpPlanErrVo
	616,  // 35: ManagerService.ListTpPlanErrVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 36: ManagerService.ListShipmentPlanReq.startDate:type_name -> google.protobuf.Timestamp
	616,  // 37: ManagerService.ListShipmentPlanReq.endDate:type_name -> google.protobuf.Timestamp
	0,    // 38: ManagerService.ListShipmentPlanReq.page:type_name -> ManagerService.Page
	80,   // 39: ManagerService.ListShipmentPlanResp.list:type_name -> ManagerService.ListShipmentPlanrVo
	616,  // 40: ManagerService.ListShipmentPlanrVo.tpCreatedAt:type_name -> google.protobuf.Timestamp
	616,  // 41: ManagerService.ListShipmentPlanrVo.receiveAt:type_name -> google.protobuf.Timestamp
	616,  // 42: ManagerService.ListShipmentPlanrVo.sendDeadline:type_name -> google.protobuf.Timestamp
	616,  // 43: ManagerService.ListShipmentPlanrVo.startSendAt:type_name -> google.protobuf.Timestamp
	616,  // 44: ManagerService.ListShipmentPlanrVo.receiveDeadline:type_name -> google.protobuf.Timestamp
	616,  // 45: ManagerService.ListShipmentPlanrVo.createdAt:type_name -> google.protobuf.Timestamp
	87,   // 46: ManagerService.ListShipmentPlanForOrderResp.list:type_name -> ManagerService.ListShipmentPlanForOrderVo
	616,  // 47: ManagerService.ListShipmentPlanForOrderVo.tpCreatedAt:type_name -> google.protobuf.Timestamp
	616,  // 48: ManagerService.CountShipmentPlanReq.startDate:type_name -> google.protobuf.Timestamp
	616,  // 49: ManagerService.CountShipmentPlanReq.endDate:type_name -> google.protobuf.Timestamp
	616,  // 50: ManagerService.CreateShipmentOrderReq.invoiceDate:type_name -> google.protobuf.Timestamp
	616,  // 51: ManagerService.CreateShipmentOrderReq.sendOutAt:type_name -> google.protobuf.Timestamp
	616,  // 52: ManagerService.ListShipmentOrderReq.startDate:type_name -> google.protobuf.Timestamp
	616,  // 53: ManagerService.ListShipmentOrderReq.endDate:type_name -> google.protobuf.Timestamp
	0,    // 54: ManagerService.ListShipmentOrderReq.page:type_name -> ManagerService.Page
	616,  // 55: ManagerService.ListShipmentOrderReq.receiveDeadline:type_name -> google.protobuf.Timestamp
	94,   // 56: ManagerService.ListShipmentOrderResp.list:type_name -> ManagerService.ListShipmentOrderVo
	616,  // 57: ManagerService.ListShipmentOrderVo.sendOutAt:type_name -> google.protobuf.Timestamp
	616,  // 58: ManagerService.ListShipmentOrderVo.receiveDeadline:type_name -> google.protobuf.Timestamp
	616,  // 59: ManagerService.CountShipmentOrderReq.startDate:type_name -> google.protobuf.Timestamp
	616,  // 60: ManagerService.CountShipmentOrderReq.endDate:type_name -> google.protobuf.Timestamp
	107,  // 61: ManagerService.InsertConfigsReq.configs:type_name -> ManagerService.CommonConfig
	616,  // 62: ManagerService.UpdateConfigReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 63: ManagerService.UpdateConfigReq.endAt:type_name -> google.protobuf.Timestamp
	0,    // 64: ManagerService.GetConfigReq.page:type_name -> ManagerService.Page
	616,  // 65: ManagerService.GetConfigReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 66: ManagerService.GetConfigReq.endAt:type_name -> google.protobuf.Timestamp
	616,  // 67: ManagerService.GetConfigReq.validateTime:type_name -> google.protobuf.Timestamp
	616,  // 68: ManagerService.CommonConfig.startAt:type_name -> google.protobuf.Timestamp
	616,  // 69: ManagerService.CommonConfig.endAt:type_name -> google.protobuf.Timestamp
	616,  // 70: ManagerService.CommonConfig.created:type_name -> google.protobuf.Timestamp
	107,  // 71: ManagerService.GetConfigResp.list:type_name -> ManagerService.CommonConfig
	0,    // 72: ManagerService.GetMiInfoReq.page:type_name -> ManagerService.Page
	616,  // 73: ManagerService.MiInfoVo.createdAt:type_name -> google.protobuf.Timestamp
	113,  // 74: ManagerService.GetMiInfoResp.list:type_name -> ManagerService.MiInfoVo
	0,    // 75: ManagerService.GetMiSpecialConfigReq.page:type_name -> ManagerService.Page
	616,  // 76: ManagerService.MiSpecialConfig.createdAt:type_name -> google.protobuf.Timestamp
	116,  // 77: ManagerService.GetMiSpecialConfigResp.list:type_name -> ManagerService.MiSpecialConfig
	616,  // 78: ManagerService.GetShipmentPlanReportsReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 79: ManagerService.GetShipmentPlanReportsReq.endAt:type_name -> google.protobuf.Timestamp
	120,  // 80: ManagerService.GetShipmentPlanReportsReq.optionalFilterCond:type_name -> ManagerService.PlanReportGetCondition
	119,  // 81: ManagerService.GetShipmentPlanReportsReq.optionalGroupCond:type_name -> ManagerService.PlanReportGroupCondition
	0,    // 82: ManagerService.GetShipmentPlanReportsReq.page:type_name -> ManagerService.Page
	122,  // 83: ManagerService.ShipmentPlanDayReport.companyInfo:type_name -> ManagerService.CompanyReportVo
	123,  // 84: ManagerService.ShipmentPlanDayReport.miInfo:type_name -> ManagerService.MiReportVo
	124,  // 85: ManagerService.ShipmentPlanDayReport.medicineInfo:type_name -> ManagerService.MedicineReportVo
	616,  // 86: ManagerService.ShipmentPlanDayReport.reportDate:type_name -> google.protobuf.Timestamp
	122,  // 87: ManagerService.ShipmentPlanMonthReport.companyInfo:type_name -> ManagerService.CompanyReportVo
	123,  // 88: ManagerService.ShipmentPlanMonthReport.miInfo:type_name -> ManagerService.MiReportVo
	124,  // 89: ManagerService.ShipmentPlanMonthReport.medicineInfo:type_name -> ManagerService.MedicineReportVo
	616,  // 90: ManagerService.ShipmentPlanMonthReport.reportDate:type_name -> google.protobuf.Timestamp
	122,  // 91: ManagerService.ShipmentPlanYearReport.companyInfo:type_name -> ManagerService.CompanyReportVo
	123,  // 92: ManagerService.ShipmentPlanYearReport.miInfo:type_name -> ManagerService.MiReportVo
	124,  // 93: ManagerService.ShipmentPlanYearReport.medicineInfo:type_name -> ManagerService.MedicineReportVo
	616,  // 94: ManagerService.ShipmentPlanYearReport.reportDate:type_name -> google.protobuf.Timestamp
	125,  // 95: ManagerService.GetShipmentPlanDayReportsResp.list:type_name -> ManagerService.ShipmentPlanDayReport
	126,  // 96: ManagerService.GetShipmentPlanMonthReportsResp.list:type_name -> ManagerService.ShipmentPlanMonthReport
	127,  // 97: ManagerService.GetShipmentPlanYearReportsResp.list:type_name -> ManagerService.ShipmentPlanYearReport
	616,  // 98: ManagerService.GetShipmentOrderReportsReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 99: ManagerService.GetShipmentOrderReportsReq.endAt:type_name -> google.protobuf.Timestamp
	132,  // 100: ManagerService.GetShipmentOrderReportsReq.optionalFilterCond:type_name -> ManagerService.OrderReportGetCondition
	131,  // 101: ManagerService.GetShipmentOrderReportsReq.optionalGroupCond:type_name -> ManagerService.OrderReportGroupCondition
	0,    // 102: ManagerService.GetShipmentOrderReportsReq.page:type_name -> ManagerService.Page
	122,  // 103: ManagerService.ShipmentOrderDayReport.companyInfo:type_name -> ManagerService.CompanyReportVo
	123,  // 104: ManagerService.ShipmentOrderDayReport.miInfo:type_name -> ManagerService.MiReportVo
	616,  // 105: ManagerService.ShipmentOrderDayReport.reportDate:type_name -> google.protobuf.Timestamp
	616,  // 106: ManagerService.ShipmentOrderMonthReport.reportDate:type_name -> google.protobuf.Timestamp
	122,  // 107: ManagerService.ShipmentOrderMonthReport.companyInfo:type_name -> ManagerService.CompanyReportVo
	123,  // 108: ManagerService.ShipmentOrderMonthReport.miInfo:type_name -> ManagerService.MiReportVo
	616,  // 109: ManagerService.ShipmentOrderYearReport.reportDate:type_name -> google.protobuf.Timestamp
	122,  // 110: ManagerService.ShipmentOrderYearReport.companyInfo:type_name -> ManagerService.CompanyReportVo
	123,  // 111: ManagerService.ShipmentOrderYearReport.miInfo:type_name -> ManagerService.MiReportVo
	134,  // 112: ManagerService.GetShipmentOrderDayReportsResp.list:type_name -> ManagerService.ShipmentOrderDayReport
	135,  // 113: ManagerService.GetShipmentOrderMonthReportsResp.list:type_name -> ManagerService.ShipmentOrderMonthReport
	136,  // 114: ManagerService.GetShipmentOrderYearReportsResp.list:type_name -> ManagerService.ShipmentOrderYearReport
	616,  // 115: ManagerService.GetFactoringOrderReportsReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 116: ManagerService.GetFactoringOrderReportsReq.endAt:type_name -> google.protobuf.Timestamp
	141,  // 117: ManagerService.GetFactoringOrderReportsReq.optionalFilterCond:type_name -> ManagerService.FactoringReportGetCondition
	140,  // 118: ManagerService.GetFactoringOrderReportsReq.optionalGroupCond:type_name -> ManagerService.FactoringReportGroupCondition
	0,    // 119: ManagerService.GetFactoringOrderReportsReq.page:type_name -> ManagerService.Page
	122,  // 120: ManagerService.FactoringOrderDayReport.companyInfo:type_name -> ManagerService.CompanyReportVo
	123,  // 121: ManagerService.FactoringOrderDayReport.miInfo:type_name -> ManagerService.MiReportVo
	616,  // 122: ManagerService.FactoringOrderDayReport.reportDate:type_name -> google.protobuf.Timestamp
	143,  // 123: ManagerService.GetFactoringOrderDayReportsResp.list:type_name -> ManagerService.FactoringOrderDayReport
	122,  // 124: ManagerService.FactoringOrderMonthReport.companyInfo:type_name -> ManagerService.CompanyReportVo
	123,  // 125: ManagerService.FactoringOrderMonthReport.miInfo:type_name -> ManagerService.MiReportVo
	616,  // 126: ManagerService.FactoringOrderMonthReport.reportDate:type_name -> google.protobuf.Timestamp
	145,  // 127: ManagerService.GetFactoringOrderMonthReportsResp.list:type_name -> ManagerService.FactoringOrderMonthReport
	616,  // 128: ManagerService.FactoringOrderYearReport.reportDate:type_name -> google.protobuf.Timestamp
	122,  // 129: ManagerService.FactoringOrderYearReport.companyInfo:type_name -> ManagerService.CompanyReportVo
	123,  // 130: ManagerService.FactoringOrderYearReport.miInfo:type_name -> ManagerService.MiReportVo
	147,  // 131: ManagerService.GetFactoringOrderYearReportsResp.list:type_name -> ManagerService.FactoringOrderYearReport
	616,  // 132: ManagerService.ContractPlanReportGetCondition.contractStartBegin:type_name -> google.protobuf.Timestamp
	616,  // 133: ManagerService.ContractPlanReportGetCondition.contractStartEnd:type_name -> google.protobuf.Timestamp
	616,  // 134: ManagerService.GetContractPlanReportsReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 135: ManagerService.GetContractPlanReportsReq.endAt:type_name -> google.protobuf.Timestamp
	149,  // 136: ManagerService.GetContractPlanReportsReq.optionalFilterCond:type_name -> ManagerService.ContractPlanReportGetCondition
	150,  // 137: ManagerService.GetContractPlanReportsReq.optionalGroupCond:type_name -> ManagerService.ContractPlanReportGroupCondition
	0,    // 138: ManagerService.GetContractPlanReportsReq.page:type_name -> ManagerService.Page
	616,  // 139: ManagerService.ContractReportVo.startAt:type_name -> google.protobuf.Timestamp
	616,  // 140: ManagerService.ContractReportVo.endAt:type_name -> google.protobuf.Timestamp
	122,  // 141: ManagerService.ContractPlanDayReport.companyInfo:type_name -> ManagerService.CompanyReportVo
	123,  // 142: ManagerService.ContractPlanDayReport.miInfo:type_name -> ManagerService.MiReportVo
	124,  // 143: ManagerService.ContractPlanDayReport.medicineInfo:type_name -> ManagerService.MedicineReportVo
	616,  // 144: ManagerService.ContractPlanDayReport.reportDate:type_name -> google.protobuf.Timestamp
	152,  // 145: ManagerService.ContractPlanDayReport.contractInfo:type_name -> ManagerService.ContractReportVo
	153,  // 146: ManagerService.ContractPlanDayReport.contractMiInfo:type_name -> ManagerService.ContractMiReportVo
	154,  // 147: ManagerService.GetContractPlanDayReportsResp.list:type_name -> ManagerService.ContractPlanDayReport
	153,  // 148: ManagerService.ContractPlanMonthReport.contractMiInfo:type_name -> ManagerService.ContractMiReportVo
	122,  // 149: ManagerService.ContractPlanMonthReport.companyInfo:type_name -> ManagerService.CompanyReportVo
	123,  // 150: ManagerService.ContractPlanMonthReport.miInfo:type_name -> ManagerService.MiReportVo
	124,  // 151: ManagerService.ContractPlanMonthReport.medicineInfo:type_name -> ManagerService.MedicineReportVo
	616,  // 152: ManagerService.ContractPlanMonthReport.reportDate:type_name -> google.protobuf.Timestamp
	152,  // 153: ManagerService.ContractPlanMonthReport.contractInfo:type_name -> ManagerService.ContractReportVo
	156,  // 154: ManagerService.GetContractPlanMonthReportsResp.list:type_name -> ManagerService.ContractPlanMonthReport
	152,  // 155: ManagerService.ContractPlanYearReport.contractInfo:type_name -> ManagerService.ContractReportVo
	153,  // 156: ManagerService.ContractPlanYearReport.contractMiInfo:type_name -> ManagerService.ContractMiReportVo
	122,  // 157: ManagerService.ContractPlanYearReport.companyInfo:type_name -> ManagerService.CompanyReportVo
	123,  // 158: ManagerService.ContractPlanYearReport.miInfo:type_name -> ManagerService.MiReportVo
	124,  // 159: ManagerService.ContractPlanYearReport.medicineInfo:type_name -> ManagerService.MedicineReportVo
	616,  // 160: ManagerService.ContractPlanYearReport.reportDate:type_name -> google.protobuf.Timestamp
	158,  // 161: ManagerService.GetContractPlanYearReportsResp.list:type_name -> ManagerService.ContractPlanYearReport
	122,  // 162: ManagerService.ContractSum.companyInfo:type_name -> ManagerService.CompanyReportVo
	123,  // 163: ManagerService.ContractSum.miInfo:type_name -> ManagerService.MiReportVo
	124,  // 164: ManagerService.ContractSum.medicineInfo:type_name -> ManagerService.MedicineReportVo
	152,  // 165: ManagerService.ContractSum.contractInfo:type_name -> ManagerService.ContractReportVo
	153,  // 166: ManagerService.ContractSum.contractMiInfo:type_name -> ManagerService.ContractMiReportVo
	160,  // 167: ManagerService.GetContractSumResp.list:type_name -> ManagerService.ContractSum
	167,  // 168: ManagerService.GetMiDashboardBaseInfoResp.bankAccounts:type_name -> ManagerService.BankAccounts
	616,  // 169: ManagerService.GetDashboardShipmentRankCompanyDataYearReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 170: ManagerService.GetDashboardShipmentRankCompanyDataYearReq.endAt:type_name -> google.protobuf.Timestamp
	170,  // 171: ManagerService.GetDashboardShipmentRankCompanyDataYearResp.list:type_name -> ManagerService.DashboardShipmentRankCompanyDataYearVo
	616,  // 172: ManagerService.GetDashboardShipmentRankMedicineDataYearReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 173: ManagerService.GetDashboardShipmentRankMedicineDataYearReq.endAt:type_name -> google.protobuf.Timestamp
	173,  // 174: ManagerService.GetDashboardShipmentRankMedicineDataYearResp.list:type_name -> ManagerService.DashboardShipmentRankMedicineDataYear
	0,    // 175: ManagerService.GetDashboardCompanyRankReq.page:type_name -> ManagerService.Page
	176,  // 176: ManagerService.GetDashboardCompanyRankResp.vo:type_name -> ManagerService.DashboardCompanyRankVo
	0,    // 177: ManagerService.GetDashboardShipmentListReq.page:type_name -> ManagerService.Page
	616,  // 178: ManagerService.DashboardShipmentVo.receiveDeadline:type_name -> google.protobuf.Timestamp
	179,  // 179: ManagerService.GetDashboardShipmentListResp.list:type_name -> ManagerService.DashboardShipmentVo
	0,    // 180: ManagerService.GetDashboardMedicineRankReq.page:type_name -> ManagerService.Page
	182,  // 181: ManagerService.GetDashboardMedicineRankResp.vo:type_name -> ManagerService.DashboardMedicineRankVo
	0,    // 182: ManagerService.GetDashboardStockListReq.page:type_name -> ManagerService.Page
	185,  // 183: ManagerService.GetDashboardStockListResp.list:type_name -> ManagerService.DashboardStockVo
	193,  // 184: ManagerService.GetCompanyHashResp.list:type_name -> ManagerService.CompanyHash
	616,  // 185: ManagerService.CompanyHash.infoUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 186: ManagerService.MiHash.infoUploadAt:type_name -> google.protobuf.Timestamp
	195,  // 187: ManagerService.GetMiHashResp.list:type_name -> ManagerService.MiHash
	616,  // 188: ManagerService.MedicineHash.infoUploadAt:type_name -> google.protobuf.Timestamp
	198,  // 189: ManagerService.GetMedicineResp.list:type_name -> ManagerService.MedicineHash
	616,  // 190: ManagerService.ContractHash.infoUploadAt:type_name -> google.protobuf.Timestamp
	201,  // 191: ManagerService.GetContractHashResp.list:type_name -> ManagerService.ContractHash
	616,  // 192: ManagerService.ContractMiHash.infoUploadAt:type_name -> google.protobuf.Timestamp
	204,  // 193: ManagerService.GetContractMiHashResp.list:type_name -> ManagerService.ContractMiHash
	616,  // 194: ManagerService.ConfigHash.infoUploadAt:type_name -> google.protobuf.Timestamp
	207,  // 195: ManagerService.GetConfigHashResp.list:type_name -> ManagerService.ConfigHash
	616,  // 196: ManagerService.ShipmentPlanHash.infoUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 197: ManagerService.ShipmentPlanHash.qrCodeUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 198: ManagerService.ShipmentPlanHash.shipmentStartUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 199: ManagerService.ShipmentPlanHash.shipmentReceiveUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 200: ManagerService.ShipmentPlanHash.shipmentEnterUploadAt:type_name -> google.protobuf.Timestamp
	210,  // 201: ManagerService.GetShipmentPlanHashResp.list:type_name -> ManagerService.ShipmentPlanHash
	616,  // 202: ManagerService.ShipmentOrderHash.qrCodeUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 203: ManagerService.ShipmentOrderHash.shipmentStartUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 204: ManagerService.ShipmentOrderHash.shipmentReceiveUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 205: ManagerService.ShipmentOrderHash.shipmentEnterUploadAt:type_name -> google.protobuf.Timestamp
	213,  // 206: ManagerService.GetShipmentOrderHashResp.list:type_name -> ManagerService.ShipmentOrderHash
	616,  // 207: ManagerService.ShipmentPayHash.infoUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 208: ManagerService.ShipmentPayHash.resultUploadAt:type_name -> google.protobuf.Timestamp
	216,  // 209: ManagerService.GetShipmentPayHashResp.list:type_name -> ManagerService.ShipmentPayHash
	616,  // 210: ManagerService.ShipmentFactoringHash.applyUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 211: ManagerService.ShipmentFactoringHash.resultUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 212: ManagerService.ShipmentFactoringHash.payBackUploadAt:type_name -> google.protobuf.Timestamp
	219,  // 213: ManagerService.GetShipmentFactoringHashResp.list:type_name -> ManagerService.ShipmentFactoringHash
	616,  // 214: ManagerService.GetShipmentRankMedicineDataYearReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 215: ManagerService.GetShipmentRankMedicineDataYearReq.endAt:type_name -> google.protobuf.Timestamp
	222,  // 216: ManagerService.GetShipmentRankMedicineDataYearResp.list:type_name -> ManagerService.ShipmentRankMedicineDataYear
	616,  // 217: ManagerService.GetShipmentRankCompanyDataYearReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 218: ManagerService.GetShipmentRankCompanyDataYearReq.endAt:type_name -> google.protobuf.Timestamp
	225,  // 219: ManagerService.ShipmentRankCompanyDataYear.medicines:type_name -> ManagerService.ShipmentRankCompanyMedicine
	226,  // 220: ManagerService.GetShipmentRankCompanyDataYearResp.list:type_name -> ManagerService.ShipmentRankCompanyDataYear
	135,  // 221: ManagerService.RankMiReceiveYear.shipmentOrderMonthReports:type_name -> ManagerService.ShipmentOrderMonthReport
	229,  // 222: ManagerService.GetRankMiReceiveYearResp.list:type_name -> ManagerService.RankMiReceiveYear
	232,  // 223: ManagerService.GetRankComReceiveYearResp.list:type_name -> ManagerService.RankComReceiveYear
	235,  // 224: ManagerService.GetRankMiPaidYearResp.list:type_name -> ManagerService.RankMiPaidYear
	238,  // 225: ManagerService.GetRankMedicineYearResp.list:type_name -> ManagerService.RankMedicineYear
	48,   // 226: ManagerService.GetMIBDashboardBaseInfoResp.mis:type_name -> ManagerService.ListMiVo
	68,   // 227: ManagerService.GetMIBDashboardBaseInfoResp.companies:type_name -> ManagerService.ListCompanyVo
	0,    // 228: ManagerService.ListBindReq.page:type_name -> ManagerService.Page
	244,  // 229: ManagerService.ListBindResp.list:type_name -> ManagerService.ListBindVo
	245,  // 230: ManagerService.ListBindVo.bindJson:type_name -> ManagerService.BindJsonVo
	247,  // 231: ManagerService.BindReq.param:type_name -> ManagerService.BindParam
	250,  // 232: ManagerService.ResetContractReq.param:type_name -> ManagerService.ResetContractParam
	616,  // 233: ManagerService.ResetContractReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 234: ManagerService.ResetContractReq.endAt:type_name -> google.protobuf.Timestamp
	0,    // 235: ManagerService.ListReimbReq.page:type_name -> ManagerService.Page
	254,  // 236: ManagerService.ListReimbResp.list:type_name -> ManagerService.ReimbListVo
	616,  // 237: ManagerService.ReimbListVo.paySuccessTime:type_name -> google.protobuf.Timestamp
	262,  // 238: ManagerService.CreateBankAccountReq.list:type_name -> ManagerService.AccountInfo
	265,  // 239: ManagerService.StockSyncReq.param:type_name -> ManagerService.StockSyncParam
	616,  // 240: ManagerService.StockSyncParam.changeTime:type_name -> google.protobuf.Timestamp
	0,    // 241: ManagerService.ComStockMedicineBindListReq.page:type_name -> ManagerService.Page
	269,  // 242: ManagerService.ComStockMedicineBindListResp.list:type_name -> ManagerService.ComStockMedicineBindListVo
	0,    // 243: ManagerService.MiStockMedicineBindListReq.page:type_name -> ManagerService.Page
	272,  // 244: ManagerService.MiStockMedicineBindListResp.list:type_name -> ManagerService.MiStockMedicineBindListVo
	281,  // 245: ManagerService.ClientPermissionResp.list:type_name -> ManagerService.ClientPermission
	281,  // 246: ManagerService.SaveClientPermissionReq.reqs:type_name -> ManagerService.ClientPermission
	281,  // 247: ManagerService.SaveClientPermissionResp.reps:type_name -> ManagerService.ClientPermission
	0,    // 248: ManagerService.ListMedicineBindListReq.page:type_name -> ManagerService.Page
	288,  // 249: ManagerService.ListMedicineBindListResp.list:type_name -> ManagerService.ListMedicineBindListVo
	293,  // 250: ManagerService.MedicineMiStockReq.list:type_name -> ManagerService.MedicineMiStock
	616,  // 251: ManagerService.MedicineMiStock.changeTime:type_name -> google.protobuf.Timestamp
	296,  // 252: ManagerService.MedicineCompanyStockReq.list:type_name -> ManagerService.MedicineCompanyStock
	616,  // 253: ManagerService.MedicineCompanyStock.changeTime:type_name -> google.protobuf.Timestamp
	616,  // 254: ManagerService.MedicineStockMiListReq.endAt:type_name -> google.protobuf.Timestamp
	616,  // 255: ManagerService.MedicineStockMiListReq.startAt:type_name -> google.protobuf.Timestamp
	0,    // 256: ManagerService.MedicineStockMiListReq.page:type_name -> ManagerService.Page
	299,  // 257: ManagerService.MedicineStockMiListResp.list:type_name -> ManagerService.MedicineStockMiListVo
	302,  // 258: ManagerService.ReimbursementListResp.list:type_name -> ManagerService.ReimbursementListVo
	616,  // 259: ManagerService.ReimbursementListVo.paySuccessTime:type_name -> google.protobuf.Timestamp
	307,  // 260: ManagerService.GetWsGetContractListResp.resu:type_name -> ManagerService.TpsyncContractListVo
	314,  // 261: ManagerService.ShipmentPlanListReq.ShipmentPlans:type_name -> ManagerService.ShipmentPlan
	313,  // 262: ManagerService.TenderContractInfoReq.tenderContracts:type_name -> ManagerService.tenderContract
	616,  // 263: ManagerService.tenderContract.startAt:type_name -> google.protobuf.Timestamp
	616,  // 264: ManagerService.tenderContract.endAt:type_name -> google.protobuf.Timestamp
	321,  // 265: ManagerService.GetMedicineHashResp.list:type_name -> ManagerService.MedicineChainHash
	616,  // 266: ManagerService.MedicineChainHash.infoUploadAt:type_name -> google.protobuf.Timestamp
	0,    // 267: ManagerService.ListConstructionReq.page:type_name -> ManagerService.Page
	330,  // 268: ManagerService.ListConstructionResp.list:type_name -> ManagerService.ConstructionVo
	616,  // 269: ManagerService.ConstructionVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 270: ManagerService.ConstructionVo.updatedAt:type_name -> google.protobuf.Timestamp
	0,    // 271: ManagerService.CommonConstructionReq.page:type_name -> ManagerService.Page
	333,  // 272: ManagerService.CommonConstructionResp.list:type_name -> ManagerService.CommonConstructionVo
	0,    // 273: ManagerService.GetConstructionInfoReq.page:type_name -> ManagerService.Page
	616,  // 274: ManagerService.ConstructionInfoVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 275: ManagerService.ConstructionInfoVo.updatedAt:type_name -> google.protobuf.Timestamp
	335,  // 276: ManagerService.GetConstructionInfoResp.list:type_name -> ManagerService.ConstructionInfoVo
	351,  // 277: ManagerService.GetConstructionHashResp.list:type_name -> ManagerService.ConstructionHashVo
	616,  // 278: ManagerService.ConstructionHashVo.infoUploadAt:type_name -> google.protobuf.Timestamp
	0,    // 279: ManagerService.ListBuildReq.page:type_name -> ManagerService.Page
	354,  // 280: ManagerService.ListBuildResp.list:type_name -> ManagerService.BuildVo
	616,  // 281: ManagerService.BuildVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 282: ManagerService.BuildVo.updatedAt:type_name -> google.protobuf.Timestamp
	0,    // 283: ManagerService.CommonBuildReq.page:type_name -> ManagerService.Page
	357,  // 284: ManagerService.CommonBuildResp.list:type_name -> ManagerService.CommonBuildVo
	0,    // 285: ManagerService.GetBuildInfoReq.page:type_name -> ManagerService.Page
	616,  // 286: ManagerService.BuildInfoVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 287: ManagerService.BuildInfoVo.updatedAt:type_name -> google.protobuf.Timestamp
	359,  // 288: ManagerService.GetBuildInfoResp.list:type_name -> ManagerService.BuildInfoVo
	375,  // 289: ManagerService.GetBuildHashResp.list:type_name -> ManagerService.BuildHashVo
	616,  // 290: ManagerService.BuildHashVo.infoUploadAt:type_name -> google.protobuf.Timestamp
	0,    // 291: ManagerService.ListSupervisorReq.page:type_name -> ManagerService.Page
	378,  // 292: ManagerService.ListSupervisorResp.list:type_name -> ManagerService.SupervisorVo
	616,  // 293: ManagerService.SupervisorVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 294: ManagerService.SupervisorVo.updatedAt:type_name -> google.protobuf.Timestamp
	0,    // 295: ManagerService.CommonSupervisorReq.page:type_name -> ManagerService.Page
	381,  // 296: ManagerService.CommonSupervisorResp.list:type_name -> ManagerService.CommonSupervisorVo
	0,    // 297: ManagerService.GetSupervisorInfoReq.page:type_name -> ManagerService.Page
	616,  // 298: ManagerService.SupervisorInfoVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 299: ManagerService.SupervisorInfoVo.updatedAt:type_name -> google.protobuf.Timestamp
	383,  // 300: ManagerService.GetSupervisorInfoResp.list:type_name -> ManagerService.SupervisorInfoVo
	399,  // 301: ManagerService.GetSupervisorHashResp.list:type_name -> ManagerService.SupervisorHashVo
	616,  // 302: ManagerService.SupervisorHashVo.infoUploadAt:type_name -> google.protobuf.Timestamp
	0,    // 303: ManagerService.ListGovermentReq.page:type_name -> ManagerService.Page
	402,  // 304: ManagerService.ListGovermentResp.list:type_name -> ManagerService.GovermentVo
	616,  // 305: ManagerService.GovermentVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 306: ManagerService.GovermentVo.updatedAt:type_name -> google.protobuf.Timestamp
	0,    // 307: ManagerService.CommonGovermentReq.page:type_name -> ManagerService.Page
	405,  // 308: ManagerService.CommonGovermentResp.list:type_name -> ManagerService.CommonGovermentVo
	0,    // 309: ManagerService.GetGovermentInfoReq.page:type_name -> ManagerService.Page
	616,  // 310: ManagerService.GovermentInfoVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 311: ManagerService.GovermentInfoVo.updatedAt:type_name -> google.protobuf.Timestamp
	407,  // 312: ManagerService.GetGovermentInfoResp.list:type_name -> ManagerService.GovermentInfoVo
	423,  // 313: ManagerService.GetGovermentHashResp.list:type_name -> ManagerService.GovermentHashVo
	616,  // 314: ManagerService.GovermentHashVo.infoUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 315: ManagerService.CreateOneProcessReq.applyDate:type_name -> google.protobuf.Timestamp
	616,  // 316: ManagerService.CreateOneProcessReq.approveDeadline:type_name -> google.protobuf.Timestamp
	616,  // 317: ManagerService.CreateOneProcessReq.approveDeadlineWarn:type_name -> google.protobuf.Timestamp
	616,  // 318: ManagerService.CreateOneProcessReq.approveAt:type_name -> google.protobuf.Timestamp
	425,  // 319: ManagerService.CreateOneProcessReq.uploadDocumentApply:type_name -> ManagerService.DocumentInfoApply
	616,  // 320: ManagerService.GetProcessCodeResp.applyDate:type_name -> google.protobuf.Timestamp
	616,  // 321: ManagerService.GetProcessCodeResp.approveDeadline:type_name -> google.protobuf.Timestamp
	616,  // 322: ManagerService.GetProcessCodeResp.approveDeadlineWarn:type_name -> google.protobuf.Timestamp
	616,  // 323: ManagerService.GetProcessCodeResp.approveAt:type_name -> google.protobuf.Timestamp
	616,  // 324: ManagerService.CreateHashProcessReq.applyDate:type_name -> google.protobuf.Timestamp
	616,  // 325: ManagerService.CreateHashProcessReq.approveDeadline:type_name -> google.protobuf.Timestamp
	616,  // 326: ManagerService.CreateHashProcessReq.approveDeadlineWarn:type_name -> google.protobuf.Timestamp
	616,  // 327: ManagerService.CreateHashProcessReq.approveAt:type_name -> google.protobuf.Timestamp
	425,  // 328: ManagerService.CreateHashProcessReq.uploadDocumentApply:type_name -> ManagerService.DocumentInfoApply
	616,  // 329: ManagerService.UpdateProcessReq.applyDate:type_name -> google.protobuf.Timestamp
	616,  // 330: ManagerService.UpdateProcessReq.approveDeadline:type_name -> google.protobuf.Timestamp
	616,  // 331: ManagerService.UpdateProcessReq.approveDeadlineWarn:type_name -> google.protobuf.Timestamp
	616,  // 332: ManagerService.UpdateProcessReq.approveAt:type_name -> google.protobuf.Timestamp
	425,  // 333: ManagerService.UpdateProcessReq.uploadDocumentApply:type_name -> ManagerService.DocumentInfoApply
	616,  // 334: ManagerService.UpdateHashProcessReq.applyDate:type_name -> google.protobuf.Timestamp
	616,  // 335: ManagerService.UpdateHashProcessReq.approveDeadline:type_name -> google.protobuf.Timestamp
	616,  // 336: ManagerService.UpdateHashProcessReq.approveDeadlineWarn:type_name -> google.protobuf.Timestamp
	616,  // 337: ManagerService.UpdateHashProcessReq.approveAt:type_name -> google.protobuf.Timestamp
	425,  // 338: ManagerService.UpdateHashProcessReq.uploadDocumentApply:type_name -> ManagerService.DocumentInfoApply
	0,    // 339: ManagerService.ListProcessReq.page:type_name -> ManagerService.Page
	616,  // 340: ManagerService.ListProcessReq.applyStartAt:type_name -> google.protobuf.Timestamp
	616,  // 341: ManagerService.ListProcessReq.applyEndAt:type_name -> google.protobuf.Timestamp
	616,  // 342: ManagerService.ListProcessReq.approveStartAt:type_name -> google.protobuf.Timestamp
	616,  // 343: ManagerService.ListProcessReq.approveEndAt:type_name -> google.protobuf.Timestamp
	441,  // 344: ManagerService.ListProcessResp.list:type_name -> ManagerService.ListProcessVo
	616,  // 345: ManagerService.ListProcessVo.applyDate:type_name -> google.protobuf.Timestamp
	616,  // 346: ManagerService.ListProcessVo.approveDeadline:type_name -> google.protobuf.Timestamp
	616,  // 347: ManagerService.ListProcessVo.approveDeadlineWarn:type_name -> google.protobuf.Timestamp
	616,  // 348: ManagerService.ListProcessVo.approveAt:type_name -> google.protobuf.Timestamp
	616,  // 349: ManagerService.CommonProcessResp.applyDate:type_name -> google.protobuf.Timestamp
	616,  // 350: ManagerService.CommonProcessResp.approveDeadline:type_name -> google.protobuf.Timestamp
	616,  // 351: ManagerService.CommonProcessResp.approveDeadlineWarn:type_name -> google.protobuf.Timestamp
	616,  // 352: ManagerService.CommonProcessResp.approveAt:type_name -> google.protobuf.Timestamp
	616,  // 353: ManagerService.ProjectReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 354: ManagerService.ProjectReq.endAt:type_name -> google.protobuf.Timestamp
	444,  // 355: ManagerService.ProjectReq.uploadDocument:type_name -> ManagerService.UploadDocumentInfo
	0,    // 356: ManagerService.ProjectReq.page:type_name -> ManagerService.Page
	616,  // 357: ManagerService.ProjectVo.startAt:type_name -> google.protobuf.Timestamp
	616,  // 358: ManagerService.ProjectVo.endAt:type_name -> google.protobuf.Timestamp
	444,  // 359: ManagerService.ProjectVo.uploadDocument:type_name -> ManagerService.UploadDocumentInfo
	616,  // 360: ManagerService.ProjectVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 361: ManagerService.ProjectVo.updatedAt:type_name -> google.protobuf.Timestamp
	446,  // 362: ManagerService.ProjectsResp.list:type_name -> ManagerService.ProjectVo
	616,  // 363: ManagerService.CreateProjectHashReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 364: ManagerService.CreateProjectHashReq.endAt:type_name -> google.protobuf.Timestamp
	444,  // 365: ManagerService.CreateProjectHashReq.uploadDocument:type_name -> ManagerService.UploadDocumentInfo
	616,  // 366: ManagerService.UpdateProjectHashReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 367: ManagerService.UpdateProjectHashReq.endAt:type_name -> google.protobuf.Timestamp
	444,  // 368: ManagerService.UpdateProjectHashReq.uploadDocument:type_name -> ManagerService.UploadDocumentInfo
	616,  // 369: ManagerService.ProjectHashVo.infoUploadAt:type_name -> google.protobuf.Timestamp
	451,  // 370: ManagerService.GetProjectHashResp.list:type_name -> ManagerService.ProjectHashVo
	616,  // 371: ManagerService.ProgressPlanReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 372: ManagerService.ProgressPlanReq.endAt:type_name -> google.protobuf.Timestamp
	616,  // 373: ManagerService.ProgressPlanReq.actualDate:type_name -> google.protobuf.Timestamp
	444,  // 374: ManagerService.ProgressPlanReq.uploadDocument:type_name -> ManagerService.UploadDocumentInfo
	0,    // 375: ManagerService.ProgressPlanReq.page:type_name -> ManagerService.Page
	616,  // 376: ManagerService.ProgressPlanVo.startAt:type_name -> google.protobuf.Timestamp
	616,  // 377: ManagerService.ProgressPlanVo.endAt:type_name -> google.protobuf.Timestamp
	616,  // 378: ManagerService.ProgressPlanVo.actualDate:type_name -> google.protobuf.Timestamp
	444,  // 379: ManagerService.ProgressPlanVo.uploadDocument:type_name -> ManagerService.UploadDocumentInfo
	616,  // 380: ManagerService.ProgressPlanVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 381: ManagerService.ProgressPlanVo.updatedAt:type_name -> google.protobuf.Timestamp
	454,  // 382: ManagerService.ProgressPlansResp.list:type_name -> ManagerService.ProgressPlanVo
	616,  // 383: ManagerService.CreateProgressPlanHashReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 384: ManagerService.CreateProgressPlanHashReq.endAt:type_name -> google.protobuf.Timestamp
	616,  // 385: ManagerService.CreateProgressPlanHashReq.actualDate:type_name -> google.protobuf.Timestamp
	444,  // 386: ManagerService.CreateProgressPlanHashReq.uploadDocument:type_name -> ManagerService.UploadDocumentInfo
	616,  // 387: ManagerService.UpdateProgressPlanHashReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 388: ManagerService.UpdateProgressPlanHashReq.endAt:type_name -> google.protobuf.Timestamp
	616,  // 389: ManagerService.UpdateProgressPlanHashReq.actualDate:type_name -> google.protobuf.Timestamp
	444,  // 390: ManagerService.UpdateProgressPlanHashReq.uploadDocument:type_name -> ManagerService.UploadDocumentInfo
	616,  // 391: ManagerService.ProgressPlanHashVo.infoUploadAt:type_name -> google.protobuf.Timestamp
	459,  // 392: ManagerService.GetProgressPlanHashResp.list:type_name -> ManagerService.ProgressPlanHashVo
	616,  // 393: ManagerService.ProgressActualReq.actualDate:type_name -> google.protobuf.Timestamp
	444,  // 394: ManagerService.ProgressActualReq.uploadDocument:type_name -> ManagerService.UploadDocumentInfo
	0,    // 395: ManagerService.ProgressActualReq.page:type_name -> ManagerService.Page
	616,  // 396: ManagerService.ProgressActualVo.actualDate:type_name -> google.protobuf.Timestamp
	444,  // 397: ManagerService.ProgressActualVo.uploadDocument:type_name -> ManagerService.UploadDocumentInfo
	616,  // 398: ManagerService.ProgressActualVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 399: ManagerService.ProgressActualVo.updatedAt:type_name -> google.protobuf.Timestamp
	462,  // 400: ManagerService.ProgressActualsResp.list:type_name -> ManagerService.ProgressActualVo
	616,  // 401: ManagerService.CreateProgressActualHashReq.actualDate:type_name -> google.protobuf.Timestamp
	444,  // 402: ManagerService.CreateProgressActualHashReq.uploadDocument:type_name -> ManagerService.UploadDocumentInfo
	616,  // 403: ManagerService.UpdateProgressActualHashReq.actualDate:type_name -> google.protobuf.Timestamp
	444,  // 404: ManagerService.UpdateProgressActualHashReq.uploadDocument:type_name -> ManagerService.UploadDocumentInfo
	616,  // 405: ManagerService.ProgressActualHashVo.infoUploadAt:type_name -> google.protobuf.Timestamp
	467,  // 406: ManagerService.GetProgressActualHashResp.list:type_name -> ManagerService.ProgressActualHashVo
	616,  // 407: ManagerService.QualityInspectionReq.inspectionDate:type_name -> google.protobuf.Timestamp
	616,  // 408: ManagerService.QualityInspectionReq.inspectionDateStartAt:type_name -> google.protobuf.Timestamp
	616,  // 409: ManagerService.QualityInspectionReq.inspectionDateEndAt:type_name -> google.protobuf.Timestamp
	616,  // 410: ManagerService.QualityInspectionReq.inspectionAt:type_name -> google.protobuf.Timestamp
	616,  // 411: ManagerService.QualityInspectionReq.assignedDate:type_name -> google.protobuf.Timestamp
	616,  // 412: ManagerService.QualityInspectionReq.assignedDateStartAt:type_name -> google.protobuf.Timestamp
	616,  // 413: ManagerService.QualityInspectionReq.assignedDateEndAt:type_name -> google.protobuf.Timestamp
	616,  // 414: ManagerService.QualityInspectionReq.rectifyDeadline:type_name -> google.protobuf.Timestamp
	616,  // 415: ManagerService.QualityInspectionReq.rectifyDeadlineWarn:type_name -> google.protobuf.Timestamp
	616,  // 416: ManagerService.QualityInspectionReq.rectifyDate:type_name -> google.protobuf.Timestamp
	616,  // 417: ManagerService.QualityInspectionReq.rectifyDateStartAt:type_name -> google.protobuf.Timestamp
	616,  // 418: ManagerService.QualityInspectionReq.rectifyDateEndAt:type_name -> google.protobuf.Timestamp
	616,  // 419: ManagerService.QualityInspectionReq.rectifyAt:type_name -> google.protobuf.Timestamp
	616,  // 420: ManagerService.QualityInspectionReq.reviewDate:type_name -> google.protobuf.Timestamp
	616,  // 421: ManagerService.QualityInspectionReq.reviewDateStartAt:type_name -> google.protobuf.Timestamp
	616,  // 422: ManagerService.QualityInspectionReq.reviewDateEndAt:type_name -> google.protobuf.Timestamp
	616,  // 423: ManagerService.QualityInspectionReq.reviewAt:type_name -> google.protobuf.Timestamp
	444,  // 424: ManagerService.QualityInspectionReq.uploadDocument:type_name -> ManagerService.UploadDocumentInfo
	0,    // 425: ManagerService.QualityInspectionReq.page:type_name -> ManagerService.Page
	616,  // 426: ManagerService.QualityInspectionVo.inspectionDate:type_name -> google.protobuf.Timestamp
	616,  // 427: ManagerService.QualityInspectionVo.inspectionAt:type_name -> google.protobuf.Timestamp
	616,  // 428: ManagerService.QualityInspectionVo.assignedDate:type_name -> google.protobuf.Timestamp
	616,  // 429: ManagerService.QualityInspectionVo.rectifyDeadline:type_name -> google.protobuf.Timestamp
	616,  // 430: ManagerService.QualityInspectionVo.rectifyDeadlineWarn:type_name -> google.protobuf.Timestamp
	616,  // 431: ManagerService.QualityInspectionVo.rectifyDate:type_name -> google.protobuf.Timestamp
	616,  // 432: ManagerService.QualityInspectionVo.rectifyAt:type_name -> google.protobuf.Timestamp
	616,  // 433: ManagerService.QualityInspectionVo.reviewDate:type_name -> google.protobuf.Timestamp
	616,  // 434: ManagerService.QualityInspectionVo.reviewAt:type_name -> google.protobuf.Timestamp
	444,  // 435: ManagerService.QualityInspectionVo.uploadDocument:type_name -> ManagerService.UploadDocumentInfo
	616,  // 436: ManagerService.QualityInspectionVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 437: ManagerService.QualityInspectionVo.updatedAt:type_name -> google.protobuf.Timestamp
	470,  // 438: ManagerService.QualityInspectionsResp.list:type_name -> ManagerService.QualityInspectionVo
	616,  // 439: ManagerService.CreateQualityInspectionHashReq.inspectionDate:type_name -> google.protobuf.Timestamp
	616,  // 440: ManagerService.CreateQualityInspectionHashReq.inspectionAt:type_name -> google.protobuf.Timestamp
	616,  // 441: ManagerService.CreateQualityInspectionHashReq.assignedDate:type_name -> google.protobuf.Timestamp
	616,  // 442: ManagerService.CreateQualityInspectionHashReq.rectifyDeadline:type_name -> google.protobuf.Timestamp
	616,  // 443: ManagerService.CreateQualityInspectionHashReq.rectifyDeadlineWarn:type_name -> google.protobuf.Timestamp
	616,  // 444: ManagerService.CreateQualityInspectionHashReq.rectifyDate:type_name -> google.protobuf.Timestamp
	616,  // 445: ManagerService.CreateQualityInspectionHashReq.rectifyAt:type_name -> google.protobuf.Timestamp
	616,  // 446: ManagerService.CreateQualityInspectionHashReq.reviewDate:type_name -> google.protobuf.Timestamp
	616,  // 447: ManagerService.CreateQualityInspectionHashReq.reviewAt:type_name -> google.protobuf.Timestamp
	444,  // 448: ManagerService.CreateQualityInspectionHashReq.uploadDocument:type_name -> ManagerService.UploadDocumentInfo
	616,  // 449: ManagerService.UpdateQualityInspectionHashReq.inspectionDate:type_name -> google.protobuf.Timestamp
	616,  // 450: ManagerService.UpdateQualityInspectionHashReq.inspectionAt:type_name -> google.protobuf.Timestamp
	616,  // 451: ManagerService.UpdateQualityInspectionHashReq.assignedDate:type_name -> google.protobuf.Timestamp
	616,  // 452: ManagerService.UpdateQualityInspectionHashReq.rectifyDeadline:type_name -> google.protobuf.Timestamp
	616,  // 453: ManagerService.UpdateQualityInspectionHashReq.rectifyDeadlineWarn:type_name -> google.protobuf.Timestamp
	616,  // 454: ManagerService.UpdateQualityInspectionHashReq.rectifyDate:type_name -> google.protobuf.Timestamp
	616,  // 455: ManagerService.UpdateQualityInspectionHashReq.rectifyAt:type_name -> google.protobuf.Timestamp
	616,  // 456: ManagerService.UpdateQualityInspectionHashReq.reviewDate:type_name -> google.protobuf.Timestamp
	616,  // 457: ManagerService.UpdateQualityInspectionHashReq.reviewAt:type_name -> google.protobuf.Timestamp
	444,  // 458: ManagerService.UpdateQualityInspectionHashReq.uploadDocument:type_name -> ManagerService.UploadDocumentInfo
	616,  // 459: ManagerService.QualityInspectionHashVo.infoUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 460: ManagerService.QualityInspectionHashVo.inspectionUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 461: ManagerService.QualityInspectionHashVo.rectifyUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 462: ManagerService.QualityInspectionHashVo.reviewUploadAt:type_name -> google.protobuf.Timestamp
	475,  // 463: ManagerService.GetQualityInspectionHashResp.list:type_name -> ManagerService.QualityInspectionHashVo
	479,  // 464: ManagerService.GetProcessHashResp.list:type_name -> ManagerService.ProcessHashVo
	616,  // 465: ManagerService.ProcessHashVo.infoUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 466: ManagerService.ProcessHashVo.approve_upload_at:type_name -> google.protobuf.Timestamp
	616,  // 467: ManagerService.UpdateProcessApproveReq.applyDate:type_name -> google.protobuf.Timestamp
	616,  // 468: ManagerService.UpdateProcessApproveReq.approveDeadline:type_name -> google.protobuf.Timestamp
	616,  // 469: ManagerService.UpdateProcessApproveReq.approveDeadlineWarn:type_name -> google.protobuf.Timestamp
	616,  // 470: ManagerService.UpdateProcessApproveReq.approveAt:type_name -> google.protobuf.Timestamp
	481,  // 471: ManagerService.UpdateProcessApproveReq.uploadDocumentApprove:type_name -> ManagerService.DocumentInfoApprove
	0,    // 472: ManagerService.GetProcessInfoReq.page:type_name -> ManagerService.Page
	616,  // 473: ManagerService.ProcessInfoVo.applyDate:type_name -> google.protobuf.Timestamp
	616,  // 474: ManagerService.ProcessInfoVo.approveDeadline:type_name -> google.protobuf.Timestamp
	616,  // 475: ManagerService.ProcessInfoVo.approveDeadlineWarn:type_name -> google.protobuf.Timestamp
	616,  // 476: ManagerService.ProcessInfoVo.approveAt:type_name -> google.protobuf.Timestamp
	506,  // 477: ManagerService.ProcessInfoVo.documentInfoApply:type_name -> ManagerService.DocumentInfo
	506,  // 478: ManagerService.ProcessInfoVo.documentInfoApprove:type_name -> ManagerService.DocumentInfo
	484,  // 479: ManagerService.ProcessInfoVo.processInfoHash:type_name -> ManagerService.ProcessInfoHashVo
	616,  // 480: ManagerService.ProcessInfoHashVo.infoUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 481: ManagerService.ProcessInfoHashVo.applyUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 482: ManagerService.ProcessInfoHashVo.approveUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 483: ManagerService.ProcessInfoHashVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 484: ManagerService.ProcessInfoHashVo.updatedAt:type_name -> google.protobuf.Timestamp
	483,  // 485: ManagerService.GetProcessInfoResp.list:type_name -> ManagerService.ProcessInfoVo
	616,  // 486: ManagerService.ListContractReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 487: ManagerService.ListContractReq.endAt:type_name -> google.protobuf.Timestamp
	0,    // 488: ManagerService.ListContractReq.page:type_name -> ManagerService.Page
	488,  // 489: ManagerService.ListContractResp.list:type_name -> ManagerService.ListContractVo
	616,  // 490: ManagerService.ListContractVo.startAt:type_name -> google.protobuf.Timestamp
	616,  // 491: ManagerService.ListContractVo.endAt:type_name -> google.protobuf.Timestamp
	616,  // 492: ManagerService.ListContractVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 493: ManagerService.ListContractVo.updatedAt:type_name -> google.protobuf.Timestamp
	0,    // 494: ManagerService.GetOneContractReq.page:type_name -> ManagerService.Page
	491,  // 495: ManagerService.GetOneContractResp.list:type_name -> ManagerService.ContractInfoVo
	616,  // 496: ManagerService.ContractInfoVo.startAt:type_name -> google.protobuf.Timestamp
	616,  // 497: ManagerService.ContractInfoVo.endAt:type_name -> google.protobuf.Timestamp
	616,  // 498: ManagerService.ContractInfoVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 499: ManagerService.ContractInfoVo.updatedAt:type_name -> google.protobuf.Timestamp
	506,  // 500: ManagerService.ContractInfoVo.uploadDocumentInfoContract:type_name -> ManagerService.DocumentInfo
	616,  // 501: ManagerService.CreateOneContractReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 502: ManagerService.CreateOneContractReq.endAt:type_name -> google.protobuf.Timestamp
	616,  // 503: ManagerService.CreateOneContractReq.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 504: ManagerService.CreateOneContractReq.updatedAt:type_name -> google.protobuf.Timestamp
	493,  // 505: ManagerService.CreateOneContractReq.uploadDocumentInfoContract:type_name -> ManagerService.DocumentInfoContract
	616,  // 506: ManagerService.UpdateOneContractReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 507: ManagerService.UpdateOneContractReq.endAt:type_name -> google.protobuf.Timestamp
	616,  // 508: ManagerService.UpdateOneContractReq.updatedAt:type_name -> google.protobuf.Timestamp
	493,  // 509: ManagerService.UpdateOneContractReq.uploadDocumentInfoContract:type_name -> ManagerService.DocumentInfoContract
	616,  // 510: ManagerService.CreateContractHashReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 511: ManagerService.CreateContractHashReq.endAt:type_name -> google.protobuf.Timestamp
	616,  // 512: ManagerService.CreateContractHashReq.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 513: ManagerService.CreateContractHashReq.updatedAt:type_name -> google.protobuf.Timestamp
	493,  // 514: ManagerService.CreateContractHashReq.uploadDocumentInfoContract:type_name -> ManagerService.DocumentInfoContract
	616,  // 515: ManagerService.UpdateContractHashReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 516: ManagerService.UpdateContractHashReq.endAt:type_name -> google.protobuf.Timestamp
	616,  // 517: ManagerService.UpdateContractHashReq.updatedAt:type_name -> google.protobuf.Timestamp
	493,  // 518: ManagerService.UpdateContractHashReq.uploadDocumentInfoContract:type_name -> ManagerService.DocumentInfoContract
	505,  // 519: ManagerService.ListContractHashResp.list:type_name -> ManagerService.ListContractHashVo
	616,  // 520: ManagerService.ListContractHashVo.infoUploadAt:type_name -> google.protobuf.Timestamp
	0,    // 521: ManagerService.CommonProjectReq.page:type_name -> ManagerService.Page
	509,  // 522: ManagerService.CommonProjectResp.list:type_name -> ManagerService.CommonProjectVo
	0,    // 523: ManagerService.CommonProjectPhaseReq.page:type_name -> ManagerService.Page
	512,  // 524: ManagerService.CommonProjectPhaseResp.list:type_name -> ManagerService.CommonProjectPhaseVo
	616,  // 525: ManagerService.CreateInvoiceHashReq.invoicedDate:type_name -> google.protobuf.Timestamp
	616,  // 526: ManagerService.CreateInvoiceHashReq.invoiceAt:type_name -> google.protobuf.Timestamp
	616,  // 527: ManagerService.CreateInvoiceHashReq.receiveAt:type_name -> google.protobuf.Timestamp
	616,  // 528: ManagerService.CreateInvoiceHashReq.payAt:type_name -> google.protobuf.Timestamp
	616,  // 529: ManagerService.CreateInvoiceHashReq.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 530: ManagerService.CreateOneInvoiceReq.invoicedDate:type_name -> google.protobuf.Timestamp
	616,  // 531: ManagerService.CreateOneInvoiceReq.invoiceAt:type_name -> google.protobuf.Timestamp
	616,  // 532: ManagerService.CreateOneInvoiceReq.receiveAt:type_name -> google.protobuf.Timestamp
	616,  // 533: ManagerService.CreateOneInvoiceReq.payAt:type_name -> google.protobuf.Timestamp
	616,  // 534: ManagerService.CreateOneInvoiceReq.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 535: ManagerService.UpdateInvoiceHasReq.invoicedDate:type_name -> google.protobuf.Timestamp
	616,  // 536: ManagerService.UpdateInvoiceHasReq.invoiceAt:type_name -> google.protobuf.Timestamp
	616,  // 537: ManagerService.UpdateInvoiceHasReq.receiveAt:type_name -> google.protobuf.Timestamp
	616,  // 538: ManagerService.UpdateInvoiceHasReq.payAt:type_name -> google.protobuf.Timestamp
	616,  // 539: ManagerService.UpdateInvoiceHasReq.updatedAt:type_name -> google.protobuf.Timestamp
	616,  // 540: ManagerService.UpdateOneInvoiceReq.invoicedDate:type_name -> google.protobuf.Timestamp
	616,  // 541: ManagerService.UpdateOneInvoiceReq.invoiceAt:type_name -> google.protobuf.Timestamp
	616,  // 542: ManagerService.UpdateOneInvoiceReq.receiveAt:type_name -> google.protobuf.Timestamp
	616,  // 543: ManagerService.UpdateOneInvoiceReq.payAt:type_name -> google.protobuf.Timestamp
	616,  // 544: ManagerService.UpdateOneInvoiceReq.updatedAt:type_name -> google.protobuf.Timestamp
	0,    // 545: ManagerService.GetOneInvoiceReq.page:type_name -> ManagerService.Page
	529,  // 546: ManagerService.GetOneInvoiceResp.list:type_name -> ManagerService.InvoiceInfoVo
	616,  // 547: ManagerService.InvoiceInfoVo.invoicedDate:type_name -> google.protobuf.Timestamp
	616,  // 548: ManagerService.InvoiceInfoVo.invoiceAt:type_name -> google.protobuf.Timestamp
	616,  // 549: ManagerService.InvoiceInfoVo.receiveAt:type_name -> google.protobuf.Timestamp
	616,  // 550: ManagerService.InvoiceInfoVo.payAt:type_name -> google.protobuf.Timestamp
	616,  // 551: ManagerService.InvoiceInfoVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 552: ManagerService.InvoiceInfoVo.updatedAt:type_name -> google.protobuf.Timestamp
	530,  // 553: ManagerService.InvoiceInfoVo.uploadChainInvoice:type_name -> ManagerService.UploadChainInvoice
	616,  // 554: ManagerService.UploadChainInvoice.infoUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 555: ManagerService.UploadChainInvoice.invoiceUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 556: ManagerService.UploadChainInvoice.receiveUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 557: ManagerService.UploadChainInvoice.payUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 558: ManagerService.UploadChainInvoice.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 559: ManagerService.UploadChainInvoice.updatedAt:type_name -> google.protobuf.Timestamp
	616,  // 560: ManagerService.ListInvoiceReq.startInvoicedDate:type_name -> google.protobuf.Timestamp
	616,  // 561: ManagerService.ListInvoiceReq.endInvoicedDate:type_name -> google.protobuf.Timestamp
	0,    // 562: ManagerService.ListInvoiceReq.page:type_name -> ManagerService.Page
	616,  // 563: ManagerService.ListInvoiceReq.startReceivedDate:type_name -> google.protobuf.Timestamp
	616,  // 564: ManagerService.ListInvoiceReq.endReceivedDate:type_name -> google.protobuf.Timestamp
	616,  // 565: ManagerService.ListInvoiceReq.startPaidDate:type_name -> google.protobuf.Timestamp
	616,  // 566: ManagerService.ListInvoiceReq.endPaidDate:type_name -> google.protobuf.Timestamp
	533,  // 567: ManagerService.ListInvoiceResp.list:type_name -> ManagerService.ListInvoiceVo
	616,  // 568: ManagerService.ListInvoiceVo.invoicedDate:type_name -> google.protobuf.Timestamp
	616,  // 569: ManagerService.ListInvoiceVo.invoiceAt:type_name -> google.protobuf.Timestamp
	616,  // 570: ManagerService.ListInvoiceVo.receiveAt:type_name -> google.protobuf.Timestamp
	616,  // 571: ManagerService.ListInvoiceVo.payAt:type_name -> google.protobuf.Timestamp
	616,  // 572: ManagerService.ListInvoiceVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 573: ManagerService.ListInvoiceVo.updatedAt:type_name -> google.protobuf.Timestamp
	616,  // 574: ManagerService.UpdateInvoiceHashReq.invoicedDate:type_name -> google.protobuf.Timestamp
	616,  // 575: ManagerService.UpdateInvoiceHashReq.invoiceAt:type_name -> google.protobuf.Timestamp
	616,  // 576: ManagerService.UpdateInvoiceHashReq.receiveAt:type_name -> google.protobuf.Timestamp
	616,  // 577: ManagerService.UpdateInvoiceHashReq.payAt:type_name -> google.protobuf.Timestamp
	616,  // 578: ManagerService.UpdateInvoiceHashReq.updatedAt:type_name -> google.protobuf.Timestamp
	616,  // 579: ManagerService.ReceiveInvoiceHashReq.receiveAt:type_name -> google.protobuf.Timestamp
	616,  // 580: ManagerService.PayInvoiceHashReq.payAt:type_name -> google.protobuf.Timestamp
	616,  // 581: ManagerService.DashboardProjectVo.startAt:type_name -> google.protobuf.Timestamp
	616,  // 582: ManagerService.DashboardProjectVo.endAt:type_name -> google.protobuf.Timestamp
	543,  // 583: ManagerService.GetDashboardProjectResp.list:type_name -> ManagerService.DashboardProjectVo
	616,  // 584: ManagerService.CountDashboardWorkmanAttendanceStatisticsReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 585: ManagerService.CountDashboardWorkmanAttendanceStatisticsReq.endAt:type_name -> google.protobuf.Timestamp
	616,  // 586: ManagerService.DashboardWorkmanAttendanceStatisticsVo.uploadDate:type_name -> google.protobuf.Timestamp
	546,  // 587: ManagerService.CountDashboardWorkmanAttendanceStatisticsResp.list:type_name -> ManagerService.DashboardWorkmanAttendanceStatisticsVo
	616,  // 588: ManagerService.CountDashboardWorkmanEpidemicStatisticsReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 589: ManagerService.CountDashboardWorkmanEpidemicStatisticsReq.endAt:type_name -> google.protobuf.Timestamp
	616,  // 590: ManagerService.DashboardWorkmanEpidemicStatisticsVo.uploadDate:type_name -> google.protobuf.Timestamp
	549,  // 591: ManagerService.CountDashboardWorkmanEpidemicStatisticsResp.list:type_name -> ManagerService.DashboardWorkmanEpidemicStatisticsVo
	616,  // 592: ManagerService.CountDashboardProcessCompletionPercentReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 593: ManagerService.CountDashboardProcessCompletionPercentReq.endAt:type_name -> google.protobuf.Timestamp
	552,  // 594: ManagerService.CountDashboardProcessCompletionPercentResp.list:type_name -> ManagerService.DashboardProcessCompletionPercentVo
	616,  // 595: ManagerService.ListDashboardSafetyInspectionReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 596: ManagerService.ListDashboardSafetyInspectionReq.endAt:type_name -> google.protobuf.Timestamp
	0,    // 597: ManagerService.ListDashboardSafetyInspectionReq.page:type_name -> ManagerService.Page
	616,  // 598: ManagerService.DashboardSafetyInspectionVo.inspectionDate:type_name -> google.protobuf.Timestamp
	555,  // 599: ManagerService.ListDashboardSafetyInspectionResp.list:type_name -> ManagerService.DashboardSafetyInspectionVo
	569,  // 600: ManagerService.ReportDashboardRankMaterialYearResp.list:type_name -> ManagerService.DashboardRankMaterialYearVo
	571,  // 601: ManagerService.ReportDashboardRankMaterialMonthResp.list:type_name -> ManagerService.DashboardRankMaterialMonthVo
	616,  // 602: ManagerService.ListDashboardProcessReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 603: ManagerService.ListDashboardProcessReq.endAt:type_name -> google.protobuf.Timestamp
	0,    // 604: ManagerService.ListDashboardProcessReq.page:type_name -> ManagerService.Page
	441,  // 605: ManagerService.ListDashboardProcessResp.listMain:type_name -> ManagerService.ListProcessVo
	441,  // 606: ManagerService.ListDashboardProcessResp.listParallel:type_name -> ManagerService.ListProcessVo
	441,  // 607: ManagerService.ListDashboardProcessResp.listCrossParallel:type_name -> ManagerService.ListProcessVo
	616,  // 608: ManagerService.SafetyInspectionReq.inspectionDate:type_name -> google.protobuf.Timestamp
	616,  // 609: ManagerService.SafetyInspectionReq.inspectionAt:type_name -> google.protobuf.Timestamp
	616,  // 610: ManagerService.SafetyInspectionReq.assignedDate:type_name -> google.protobuf.Timestamp
	616,  // 611: ManagerService.SafetyInspectionReq.rectifyDeadline:type_name -> google.protobuf.Timestamp
	616,  // 612: ManagerService.SafetyInspectionReq.rectifyDeadlineWarn:type_name -> google.protobuf.Timestamp
	616,  // 613: ManagerService.SafetyInspectionReq.rectifyDate:type_name -> google.protobuf.Timestamp
	616,  // 614: ManagerService.SafetyInspectionReq.rectifyAt:type_name -> google.protobuf.Timestamp
	616,  // 615: ManagerService.SafetyInspectionReq.reviewDate:type_name -> google.protobuf.Timestamp
	616,  // 616: ManagerService.SafetyInspectionReq.reviewAt:type_name -> google.protobuf.Timestamp
	616,  // 617: ManagerService.SafetyInspectionReq.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 618: ManagerService.SafetyInspectionReq.updatedAt:type_name -> google.protobuf.Timestamp
	444,  // 619: ManagerService.SafetyInspectionReq.uploadDocument:type_name -> ManagerService.UploadDocumentInfo
	616,  // 620: ManagerService.ListSafetyInspectionReq.inspectionDate:type_name -> google.protobuf.Timestamp
	616,  // 621: ManagerService.ListSafetyInspectionReq.inspectionAt:type_name -> google.protobuf.Timestamp
	616,  // 622: ManagerService.ListSafetyInspectionReq.assignedDate:type_name -> google.protobuf.Timestamp
	616,  // 623: ManagerService.ListSafetyInspectionReq.rectifyDeadline:type_name -> google.protobuf.Timestamp
	616,  // 624: ManagerService.ListSafetyInspectionReq.rectifyDeadlineWarn:type_name -> google.protobuf.Timestamp
	616,  // 625: ManagerService.ListSafetyInspectionReq.rectifyDate:type_name -> google.protobuf.Timestamp
	616,  // 626: ManagerService.ListSafetyInspectionReq.rectifyAt:type_name -> google.protobuf.Timestamp
	616,  // 627: ManagerService.ListSafetyInspectionReq.reviewDate:type_name -> google.protobuf.Timestamp
	616,  // 628: ManagerService.ListSafetyInspectionReq.reviewAt:type_name -> google.protobuf.Timestamp
	616,  // 629: ManagerService.ListSafetyInspectionReq.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 630: ManagerService.ListSafetyInspectionReq.updatedAt:type_name -> google.protobuf.Timestamp
	0,    // 631: ManagerService.ListSafetyInspectionReq.page:type_name -> ManagerService.Page
	616,  // 632: ManagerService.ListSafetyInspectionReq.inspectionStartAt:type_name -> google.protobuf.Timestamp
	616,  // 633: ManagerService.ListSafetyInspectionReq.inspectionEndAt:type_name -> google.protobuf.Timestamp
	616,  // 634: ManagerService.ListSafetyInspectionReq.assignedStartAt:type_name -> google.protobuf.Timestamp
	616,  // 635: ManagerService.ListSafetyInspectionReq.assignedEndAt:type_name -> google.protobuf.Timestamp
	616,  // 636: ManagerService.ListSafetyInspectionReq.rectifyDateStartAt:type_name -> google.protobuf.Timestamp
	616,  // 637: ManagerService.ListSafetyInspectionReq.rectifyDateEndAt:type_name -> google.protobuf.Timestamp
	581,  // 638: ManagerService.SafetyInspectionsResp.list:type_name -> ManagerService.SafetyInspectionVo
	582,  // 639: ManagerService.GetSafetyInspectionHashResp.list:type_name -> ManagerService.SafetyInspectionHashVo
	616,  // 640: ManagerService.SafetyInspectionVo.inspectionDate:type_name -> google.protobuf.Timestamp
	616,  // 641: ManagerService.SafetyInspectionVo.inspectionAt:type_name -> google.protobuf.Timestamp
	616,  // 642: ManagerService.SafetyInspectionVo.assignedDate:type_name -> google.protobuf.Timestamp
	616,  // 643: ManagerService.SafetyInspectionVo.rectifyDeadline:type_name -> google.protobuf.Timestamp
	616,  // 644: ManagerService.SafetyInspectionVo.rectifyDeadlineWarn:type_name -> google.protobuf.Timestamp
	616,  // 645: ManagerService.SafetyInspectionVo.rectifyDate:type_name -> google.protobuf.Timestamp
	616,  // 646: ManagerService.SafetyInspectionVo.rectifyAt:type_name -> google.protobuf.Timestamp
	616,  // 647: ManagerService.SafetyInspectionVo.reviewDate:type_name -> google.protobuf.Timestamp
	616,  // 648: ManagerService.SafetyInspectionVo.reviewAt:type_name -> google.protobuf.Timestamp
	616,  // 649: ManagerService.SafetyInspectionVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 650: ManagerService.SafetyInspectionVo.updatedAt:type_name -> google.protobuf.Timestamp
	582,  // 651: ManagerService.SafetyInspectionVo.safetyInspectionHash:type_name -> ManagerService.SafetyInspectionHashVo
	444,  // 652: ManagerService.SafetyInspectionVo.documentInspections:type_name -> ManagerService.UploadDocumentInfo
	444,  // 653: ManagerService.SafetyInspectionVo.documentRectifys:type_name -> ManagerService.UploadDocumentInfo
	444,  // 654: ManagerService.SafetyInspectionVo.documentReviews:type_name -> ManagerService.UploadDocumentInfo
	616,  // 655: ManagerService.SafetyInspectionHashVo.infoUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 656: ManagerService.SafetyInspectionHashVo.inspectionUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 657: ManagerService.SafetyInspectionHashVo.rectifyUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 658: ManagerService.SafetyInspectionHashVo.reviewUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 659: ManagerService.SafetyInspectionHashVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 660: ManagerService.SafetyInspectionHashVo.updatedAt:type_name -> google.protobuf.Timestamp
	616,  // 661: ManagerService.SafetyLogReq.recordDate:type_name -> google.protobuf.Timestamp
	616,  // 662: ManagerService.SafetyLogReq.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 663: ManagerService.SafetyLogReq.updatedAt:type_name -> google.protobuf.Timestamp
	444,  // 664: ManagerService.SafetyLogReq.uploadDocument:type_name -> ManagerService.UploadDocumentInfo
	616,  // 665: ManagerService.ListSafetyLogReq.recordDate:type_name -> google.protobuf.Timestamp
	616,  // 666: ManagerService.ListSafetyLogReq.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 667: ManagerService.ListSafetyLogReq.updatedAt:type_name -> google.protobuf.Timestamp
	0,    // 668: ManagerService.ListSafetyLogReq.page:type_name -> ManagerService.Page
	616,  // 669: ManagerService.ListSafetyLogReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 670: ManagerService.ListSafetyLogReq.endAt:type_name -> google.protobuf.Timestamp
	588,  // 671: ManagerService.SafetyLogsResp.list:type_name -> ManagerService.SafetyLogVo
	589,  // 672: ManagerService.GetSafetyLogHashResp.list:type_name -> ManagerService.SafetyLogHashVo
	616,  // 673: ManagerService.SafetyLogVo.recordDate:type_name -> google.protobuf.Timestamp
	616,  // 674: ManagerService.SafetyLogVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 675: ManagerService.SafetyLogVo.updatedAt:type_name -> google.protobuf.Timestamp
	589,  // 676: ManagerService.SafetyLogVo.safetyLogHash:type_name -> ManagerService.SafetyLogHashVo
	444,  // 677: ManagerService.SafetyLogVo.uploadDocument:type_name -> ManagerService.UploadDocumentInfo
	616,  // 678: ManagerService.SafetyLogHashVo.infoUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 679: ManagerService.SafetyLogHashVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 680: ManagerService.SafetyLogHashVo.updatedAt:type_name -> google.protobuf.Timestamp
	591,  // 681: ManagerService.WorkmansReq.list:type_name -> ManagerService.WorkmanReq
	616,  // 682: ManagerService.WorkmanReq.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 683: ManagerService.WorkmanReq.updatedAt:type_name -> google.protobuf.Timestamp
	444,  // 684: ManagerService.WorkmanReq.uploadDocument:type_name -> ManagerService.UploadDocumentInfo
	616,  // 685: ManagerService.ListWorkmanReq.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 686: ManagerService.ListWorkmanReq.updatedAt:type_name -> google.protobuf.Timestamp
	0,    // 687: ManagerService.ListWorkmanReq.page:type_name -> ManagerService.Page
	596,  // 688: ManagerService.WorkmansResp.list:type_name -> ManagerService.WorkmanVo
	597,  // 689: ManagerService.GetWorkmanHashResp.list:type_name -> ManagerService.WorkmanHashVo
	616,  // 690: ManagerService.WorkmanVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 691: ManagerService.WorkmanVo.updatedAt:type_name -> google.protobuf.Timestamp
	597,  // 692: ManagerService.WorkmanVo.workmanHash:type_name -> ManagerService.WorkmanHashVo
	444,  // 693: ManagerService.WorkmanVo.uploadDocument:type_name -> ManagerService.UploadDocumentInfo
	616,  // 694: ManagerService.WorkmanHashVo.infoUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 695: ManagerService.WorkmanHashVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 696: ManagerService.WorkmanHashVo.updatedAt:type_name -> google.protobuf.Timestamp
	599,  // 697: ManagerService.WorkmanAttendancesReq.list:type_name -> ManagerService.WorkmanAttendanceReq
	616,  // 698: ManagerService.WorkmanAttendanceReq.uploadDate:type_name -> google.protobuf.Timestamp
	616,  // 699: ManagerService.WorkmanAttendanceReq.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 700: ManagerService.WorkmanAttendanceReq.updatedAt:type_name -> google.protobuf.Timestamp
	444,  // 701: ManagerService.WorkmanAttendanceReq.uploadDocument:type_name -> ManagerService.UploadDocumentInfo
	616,  // 702: ManagerService.ListWorkmanAttendanceReq.uploadDate:type_name -> google.protobuf.Timestamp
	616,  // 703: ManagerService.ListWorkmanAttendanceReq.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 704: ManagerService.ListWorkmanAttendanceReq.updatedAt:type_name -> google.protobuf.Timestamp
	0,    // 705: ManagerService.ListWorkmanAttendanceReq.page:type_name -> ManagerService.Page
	604,  // 706: ManagerService.WorkmanAttendancesResp.list:type_name -> ManagerService.WorkmanAttendanceVo
	605,  // 707: ManagerService.GetWorkmanAttendanceHashResp.list:type_name -> ManagerService.WorkmanAttendanceHashVo
	616,  // 708: ManagerService.WorkmanAttendanceVo.uploadDate:type_name -> google.protobuf.Timestamp
	616,  // 709: ManagerService.WorkmanAttendanceVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 710: ManagerService.WorkmanAttendanceVo.updatedAt:type_name -> google.protobuf.Timestamp
	605,  // 711: ManagerService.WorkmanAttendanceVo.workmanHash:type_name -> ManagerService.WorkmanAttendanceHashVo
	444,  // 712: ManagerService.WorkmanAttendanceVo.uploadDocument:type_name -> ManagerService.UploadDocumentInfo
	616,  // 713: ManagerService.WorkmanAttendanceHashVo.infoUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 714: ManagerService.WorkmanAttendanceHashVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 715: ManagerService.WorkmanAttendanceHashVo.updatedAt:type_name -> google.protobuf.Timestamp
	616,  // 716: ManagerService.MaterialReq.receiveDate:type_name -> google.protobuf.Timestamp
	616,  // 717: ManagerService.MaterialReq.receiveAt:type_name -> google.protobuf.Timestamp
	616,  // 718: ManagerService.MaterialReq.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 719: ManagerService.MaterialReq.updatedAt:type_name -> google.protobuf.Timestamp
	444,  // 720: ManagerService.MaterialReq.uploadDocument:type_name -> ManagerService.UploadDocumentInfo
	616,  // 721: ManagerService.ListMaterialReq.receiveDate:type_name -> google.protobuf.Timestamp
	616,  // 722: ManagerService.ListMaterialReq.receiveAt:type_name -> google.protobuf.Timestamp
	616,  // 723: ManagerService.ListMaterialReq.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 724: ManagerService.ListMaterialReq.updatedAt:type_name -> google.protobuf.Timestamp
	0,    // 725: ManagerService.ListMaterialReq.page:type_name -> ManagerService.Page
	616,  // 726: ManagerService.ListMaterialReq.startAt:type_name -> google.protobuf.Timestamp
	616,  // 727: ManagerService.ListMaterialReq.endAt:type_name -> google.protobuf.Timestamp
	611,  // 728: ManagerService.MaterialsResp.list:type_name -> ManagerService.MaterialVo
	612,  // 729: ManagerService.GetMaterialHashResp.list:type_name -> ManagerService.MaterialHashVo
	616,  // 730: ManagerService.MaterialVo.receiveDate:type_name -> google.protobuf.Timestamp
	616,  // 731: ManagerService.MaterialVo.receiveAt:type_name -> google.protobuf.Timestamp
	616,  // 732: ManagerService.MaterialVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 733: ManagerService.MaterialVo.updatedAt:type_name -> google.protobuf.Timestamp
	612,  // 734: ManagerService.MaterialVo.materialHash:type_name -> ManagerService.MaterialHashVo
	444,  // 735: ManagerService.MaterialVo.uploadDocument:type_name -> ManagerService.UploadDocumentInfo
	616,  // 736: ManagerService.MaterialHashVo.infoUploadAt:type_name -> google.protobuf.Timestamp
	616,  // 737: ManagerService.MaterialHashVo.createdAt:type_name -> google.protobuf.Timestamp
	616,  // 738: ManagerService.MaterialHashVo.updatedAt:type_name -> google.protobuf.Timestamp
	0,    // 739: ManagerService.ListMaterialDistinctNameReq.page:type_name -> ManagerService.Page
	614,  // 740: ManagerService.ListMaterialDistinctNameResp.list:type_name -> ManagerService.MaterialDistinctNameVo
	1,    // 741: ManagerService.ManagerService.ListMedicine:input_type -> ManagerService.MedicineListReq
	4,    // 742: ManagerService.ManagerService.MedicineListForQuery:input_type -> ManagerService.MedicineListForQueryReq
	7,    // 743: ManagerService.ManagerService.CommonListCnaps:input_type -> ManagerService.CommonListCnapsReq
	10,   // 744: ManagerService.ManagerService.CommonListTag:input_type -> ManagerService.CommonListTagReq
	13,   // 745: ManagerService.ManagerService.CreateMedicine:input_type -> ManagerService.CreateMedicineReq
	15,   // 746: ManagerService.ManagerService.CreateBatchMedicine:input_type -> ManagerService.CreateBatchMedicineReq
	17,   // 747: ManagerService.ManagerService.UpdateMedicine:input_type -> ManagerService.UpdateMedicineReq
	19,   // 748: ManagerService.ManagerService.UpdateMedicineActive:input_type -> ManagerService.UpdateMedicineActiveReq
	21,   // 749: ManagerService.ManagerService.DeleteMedicine:input_type -> ManagerService.DeleteMedicineReq
	23,   // 750: ManagerService.ManagerService.SelectTagByMedicineId:input_type -> ManagerService.SelectTagByMedicineIdReq
	25,   // 751: ManagerService.ManagerService.SelectInfoByMedicineNames:input_type -> ManagerService.SelectInfoByMedicineNamesReq
	19,   // 752: ManagerService.ManagerService.UpdateMedicineActiveHash:input_type -> ManagerService.UpdateMedicineActiveReq
	322,  // 753: ManagerService.ManagerService.SelectByMedicineId:input_type -> ManagerService.MedicineByMedicineIdReq
	27,   // 754: ManagerService.ManagerService.TagList:input_type -> ManagerService.TagListReq
	30,   // 755: ManagerService.ManagerService.CreateTag:input_type -> ManagerService.CreateTagReq
	32,   // 756: ManagerService.ManagerService.UpdateTag:input_type -> ManagerService.UpdateTagReq
	34,   // 757: ManagerService.ManagerService.DeleteTag:input_type -> ManagerService.DeleteTagReq
	36,   // 758: ManagerService.ManagerService.TagDetailList:input_type -> ManagerService.TagDetailListReq
	39,   // 759: ManagerService.ManagerService.DeleteTagMedicine:input_type -> ManagerService.DeleteTagMedicineReq
	41,   // 760: ManagerService.ManagerService.CreateTagMedicine:input_type -> ManagerService.CreateTagMedicineReq
	43,   // 761: ManagerService.ManagerService.CommonMedicineQuery:input_type -> ManagerService.CommonMedicineQueryReq
	46,   // 762: ManagerService.ManagerService.ListMi:input_type -> ManagerService.ListMiReq
	49,   // 763: ManagerService.ManagerService.CommonMI:input_type -> ManagerService.CommonMIReq
	50,   // 764: ManagerService.ManagerService.CommonMIInfo:input_type -> ManagerService.CommonMIInfoReq
	55,   // 765: ManagerService.ManagerService.CreateOneMI:input_type -> ManagerService.CreateOneMIReq
	57,   // 766: ManagerService.ManagerService.UpdateMi:input_type -> ManagerService.UpdateMiReq
	317,  // 767: ManagerService.ManagerService.UploadMiLogoUrl:input_type -> ManagerService.UploadMiLogoUrlReq
	324,  // 768: ManagerService.ManagerService.GetMiCodeById:input_type -> ManagerService.GetMICodeReq
	66,   // 769: ManagerService.ManagerService.ListCompany:input_type -> ManagerService.ListCompanyReq
	69,   // 770: ManagerService.ManagerService.CreateOneCompany:input_type -> ManagerService.CreateOneCompanyReq
	71,   // 771: ManagerService.ManagerService.UpdateOneCompany:input_type -> ManagerService.UpdateOneCompanyReq
	59,   // 772: ManagerService.ManagerService.CommonCompany:input_type -> ManagerService.CommonCompanyReq
	59,   // 773: ManagerService.ManagerService.GetCompanyInfo:input_type -> ManagerService.CommonCompanyReq
	64,   // 774: ManagerService.ManagerService.SelCompanyByNames:input_type -> ManagerService.SelCompanyByNamesReq
	187,  // 775: ManagerService.ManagerService.QueryCompanyBankAccount:input_type -> ManagerService.GetCompanyBankAccountReq
	315,  // 776: ManagerService.ManagerService.UploadCompanyLogoUrl:input_type -> ManagerService.UploadCompanyLogoUrlReq
	326,  // 777: ManagerService.ManagerService.GetCompanysById:input_type -> ManagerService.GetCompanyInfoReq
	73,   // 778: ManagerService.ManagerService.ListTpPlanErr:input_type -> ManagerService.ListTpPlanErrReq
	76,   // 779: ManagerService.ManagerService.UpdateErrShipmentPlan:input_type -> ManagerService.UpdateErrShipmentPlanReq
	78,   // 780: ManagerService.ManagerService.ListShipmentPlan:input_type -> ManagerService.ListShipmentPlanReq
	88,   // 781: ManagerService.ManagerService.CountShipmentPlan:input_type -> ManagerService.CountShipmentPlanReq
	82,   // 782: ManagerService.ManagerService.ShipmentReceiveOrder:input_type -> ManagerService.ShipmentReceiveOrderReq
	81,   // 783: ManagerService.ManagerService.DetailShipmentOrder:input_type -> ManagerService.DetailShipmentOrderReq
	85,   // 784: ManagerService.ManagerService.ListShipmentPlanForOrder:input_type -> ManagerService.ListShipmentPlanForOrderReq
	90,   // 785: ManagerService.ManagerService.CreateShipmentOrder:input_type -> ManagerService.CreateShipmentOrderReq
	92,   // 786: ManagerService.ManagerService.ListShipmentOrder:input_type -> ManagerService.ListShipmentOrderReq
	95,   // 787: ManagerService.ManagerService.CountShipmentOrder:input_type -> ManagerService.CountShipmentOrderReq
	99,   // 788: ManagerService.ManagerService.ReceiveShipmentOrder:input_type -> ManagerService.ReceiveShipmentOrderReq
	101,  // 789: ManagerService.ManagerService.GetContractByShipmentPlanId:input_type -> ManagerService.GetContractByShipmentPlanIdReq
	97,   // 790: ManagerService.ManagerService.UpdateShipmentOrder:input_type -> ManagerService.UpdateShipmentOrderReq
	189,  // 791: ManagerService.ManagerService.CountPayOrder:input_type -> ManagerService.GetPayOrderReq
	106,  // 792: ManagerService.ManagerService.GetConfig:input_type -> ManagerService.GetConfigReq
	104,  // 793: ManagerService.ManagerService.UpdateConfig:input_type -> ManagerService.UpdateConfigReq
	103,  // 794: ManagerService.ManagerService.InsertConfigs:input_type -> ManagerService.InsertConfigsReq
	105,  // 795: ManagerService.ManagerService.DeleteConfigs:input_type -> ManagerService.DeleteConfigsReq
	242,  // 796: ManagerService.ManagerService.ListCompanyBind:input_type -> ManagerService.ListBindReq
	246,  // 797: ManagerService.ManagerService.CompanyBind:input_type -> ManagerService.BindReq
	242,  // 798: ManagerService.ManagerService.ListMiBind:input_type -> ManagerService.ListBindReq
	246,  // 799: ManagerService.ManagerService.MiBind:input_type -> ManagerService.BindReq
	242,  // 800: ManagerService.ManagerService.ListMedicineBind:input_type -> ManagerService.ListBindReq
	246,  // 801: ManagerService.ManagerService.MedicineBind:input_type -> ManagerService.BindReq
	252,  // 802: ManagerService.ManagerService.ListReimb:input_type -> ManagerService.ListReimbReq
	255,  // 803: ManagerService.ManagerService.PayReimb:input_type -> ManagerService.PayReimbReq
	256,  // 804: ManagerService.ManagerService.ApplyReimbQuota:input_type -> ManagerService.ApplyReimbQuotaReq
	257,  // 805: ManagerService.ManagerService.ApproveReimbQuota:input_type -> ManagerService.ApproveReimbQuotaReq
	258,  // 806: ManagerService.ManagerService.UpdateReimbReport:input_type -> ManagerService.UpdateReimbReportReq
	115,  // 807: ManagerService.ManagerService.GetMiSpecialConfig:input_type -> ManagerService.GetMiSpecialConfigReq
	118,  // 808: ManagerService.ManagerService.UpdateMiSpecialConfig:input_type -> ManagerService.UpdateMiSpecialConfigReq
	112,  // 809: ManagerService.ManagerService.QueryMiInfo:input_type -> ManagerService.GetMiInfoReq
	261,  // 810: ManagerService.ManagerService.CreateBankAccount:input_type -> ManagerService.CreateBankAccountReq
	277,  // 811: ManagerService.ManagerService.CreateMiDevelopUser:input_type -> ManagerService.CreateMiDevelopUserReq
	279,  // 812: ManagerService.ManagerService.GetClientPermission:input_type -> ManagerService.ClientPermissionReq
	282,  // 813: ManagerService.ManagerService.SetClientDevelop:input_type -> ManagerService.SetClientDevelopReq
	284,  // 814: ManagerService.ManagerService.SaveClientPermission:input_type -> ManagerService.SaveClientPermissionReq
	286,  // 815: ManagerService.ManagerService.MedicineBindList:input_type -> ManagerService.ListMedicineBindListReq
	289,  // 816: ManagerService.ManagerService.MedicineBindCode:input_type -> ManagerService.CreateStockMedcineCodeBindReq
	291,  // 817: ManagerService.ManagerService.SyncInfoMedicineMiStock:input_type -> ManagerService.MedicineMiStockReq
	294,  // 818: ManagerService.ManagerService.SyncInfoMedicineCompanyStock:input_type -> ManagerService.MedicineCompanyStockReq
	297,  // 819: ManagerService.ManagerService.MedicineStockMiListStock:input_type -> ManagerService.MedicineStockMiListReq
	300,  // 820: ManagerService.ManagerService.ReimbursementLists:input_type -> ManagerService.ReimbursementListReq
	303,  // 821: ManagerService.ManagerService.ReimbursementApplyQuota:input_type -> ManagerService.ReimbursementApplyQuotaReq
	305,  // 822: ManagerService.ManagerService.GetWsGetContractList:input_type -> ManagerService.GetWsGetContractListReq
	308,  // 823: ManagerService.ManagerService.SaveShipmentplan:input_type -> ManagerService.ShipmentPlanListReq
	311,  // 824: ManagerService.ManagerService.SaveTenderContractInfo:input_type -> ManagerService.TenderContractInfoReq
	328,  // 825: ManagerService.ManagerService.ListConstruction:input_type -> ManagerService.ListConstructionReq
	331,  // 826: ManagerService.ManagerService.CommonConstruction:input_type -> ManagerService.CommonConstructionReq
	334,  // 827: ManagerService.ManagerService.GetConstructionInfo:input_type -> ManagerService.GetConstructionInfoReq
	337,  // 828: ManagerService.ManagerService.CreateOneConstruction:input_type -> ManagerService.CreateOneConstructionReq
	339,  // 829: ManagerService.ManagerService.CreateHashConstruction:input_type -> ManagerService.CreateHashConstructionReq
	341,  // 830: ManagerService.ManagerService.UpdateOneConstruction:input_type -> ManagerService.UpdateOneConstructionReq
	343,  // 831: ManagerService.ManagerService.UpdateHashConstruction:input_type -> ManagerService.UpdateHashConstructionReq
	345,  // 832: ManagerService.ManagerService.UploadConstructionLogoUrl:input_type -> ManagerService.UploadConstructionLogoUrlReq
	347,  // 833: ManagerService.ManagerService.DeleteConstruction:input_type -> ManagerService.DeleteConstructionReq
	352,  // 834: ManagerService.ManagerService.ListBuild:input_type -> ManagerService.ListBuildReq
	355,  // 835: ManagerService.ManagerService.CommonBuild:input_type -> ManagerService.CommonBuildReq
	358,  // 836: ManagerService.ManagerService.GetBuildInfo:input_type -> ManagerService.GetBuildInfoReq
	361,  // 837: ManagerService.ManagerService.CreateOneBuild:input_type -> ManagerService.CreateOneBuildReq
	363,  // 838: ManagerService.ManagerService.CreateHashBuild:input_type -> ManagerService.CreateHashBuildReq
	365,  // 839: ManagerService.ManagerService.UpdateOneBuild:input_type -> ManagerService.UpdateOneBuildReq
	367,  // 840: ManagerService.ManagerService.UpdateHashBuild:input_type -> ManagerService.UpdateHashBuildReq
	369,  // 841: ManagerService.ManagerService.UploadBuildLogoUrl:input_type -> ManagerService.UploadBuildLogoUrlReq
	371,  // 842: ManagerService.ManagerService.DeleteBuild:input_type -> ManagerService.DeleteBuildReq
	376,  // 843: ManagerService.ManagerService.ListSupervisor:input_type -> ManagerService.ListSupervisorReq
	379,  // 844: ManagerService.ManagerService.CommonSupervisor:input_type -> ManagerService.CommonSupervisorReq
	382,  // 845: ManagerService.ManagerService.GetSupervisorInfo:input_type -> ManagerService.GetSupervisorInfoReq
	385,  // 846: ManagerService.ManagerService.CreateOneSupervisor:input_type -> ManagerService.CreateOneSupervisorReq
	387,  // 847: ManagerService.ManagerService.CreateHashSupervisor:input_type -> ManagerService.CreateHashSupervisorReq
	389,  // 848: ManagerService.ManagerService.UpdateOneSupervisor:input_type -> ManagerService.UpdateOneSupervisorReq
	391,  // 849: ManagerService.ManagerService.UpdateHashSupervisor:input_type -> ManagerService.UpdateHashSupervisorReq
	393,  // 850: ManagerService.ManagerService.UploadSupervisorLogoUrl:input_type -> ManagerService.UploadSupervisorLogoUrlReq
	395,  // 851: ManagerService.ManagerService.DeleteSupervisor:input_type -> ManagerService.DeleteSupervisorReq
	400,  // 852: ManagerService.ManagerService.ListGoverment:input_type -> ManagerService.ListGovermentReq
	403,  // 853: ManagerService.ManagerService.CommonGoverment:input_type -> ManagerService.CommonGovermentReq
	406,  // 854: ManagerService.ManagerService.GetGovermentInfo:input_type -> ManagerService.GetGovermentInfoReq
	409,  // 855: ManagerService.ManagerService.CreateOneGoverment:input_type -> ManagerService.CreateOneGovermentReq
	411,  // 856: ManagerService.ManagerService.CreateHashGoverment:input_type -> ManagerService.CreateHashGovermentReq
	413,  // 857: ManagerService.ManagerService.UpdateOneGoverment:input_type -> ManagerService.UpdateOneGovermentReq
	415,  // 858: ManagerService.ManagerService.UpdateHashGoverment:input_type -> ManagerService.UpdateHashGovermentReq
	417,  // 859: ManagerService.ManagerService.UploadGovermentLogoUrl:input_type -> ManagerService.UploadGovermentLogoUrlReq
	419,  // 860: ManagerService.ManagerService.DeleteGoverment:input_type -> ManagerService.DeleteGovermentReq
	439,  // 861: ManagerService.ManagerService.ListProcess:input_type -> ManagerService.ListProcessReq
	442,  // 862: ManagerService.ManagerService.CommonProcess:input_type -> ManagerService.CommonProcessReq
	424,  // 863: ManagerService.ManagerService.CreateOneProcess:input_type -> ManagerService.CreateOneProcessReq
	429,  // 864: ManagerService.ManagerService.CreateHashProcess:input_type -> ManagerService.CreateHashProcessReq
	431,  // 865: ManagerService.ManagerService.UpdateOneProcess:input_type -> ManagerService.UpdateProcessReq
	433,  // 866: ManagerService.ManagerService.UpdateHashProcess:input_type -> ManagerService.UpdateHashProcessReq
	427,  // 867: ManagerService.ManagerService.GetProcessCodeById:input_type -> ManagerService.GetProcessCodeReq
	480,  // 868: ManagerService.ManagerService.UpdateOneProcessApprove:input_type -> ManagerService.UpdateProcessApproveReq
	435,  // 869: ManagerService.ManagerService.DeleteProcess:input_type -> ManagerService.DeleteProcessReq
	437,  // 870: ManagerService.ManagerService.UpdateProcessSort:input_type -> ManagerService.UpdateProcessSortReq
	482,  // 871: ManagerService.ManagerService.GetProcessInfo:input_type -> ManagerService.GetProcessInfoReq
	486,  // 872: ManagerService.ManagerService.ListContract:input_type -> ManagerService.ListContractReq
	489,  // 873: ManagerService.ManagerService.GetOneContract:input_type -> ManagerService.GetOneContractReq
	492,  // 874: ManagerService.ManagerService.CreateOneContract:input_type -> ManagerService.CreateOneContractReq
	495,  // 875: ManagerService.ManagerService.UpdateOneContract:input_type -> ManagerService.UpdateOneContractReq
	497,  // 876: ManagerService.ManagerService.CreateContractHash:input_type -> ManagerService.CreateContractHashReq
	499,  // 877: ManagerService.ManagerService.UpdateContractHash:input_type -> ManagerService.UpdateContractHashReq
	501,  // 878: ManagerService.ManagerService.DeleteOneContract:input_type -> ManagerService.DeleteOneContractReq
	510,  // 879: ManagerService.ManagerService.CommonProjectPhase:input_type -> ManagerService.CommonProjectPhaseReq
	513,  // 880: ManagerService.ManagerService.GetBuildInfoCodeById:input_type -> ManagerService.GetBuildInfoCodeByIdReq
	517,  // 881: ManagerService.ManagerService.GGetSupervisorCodeById:input_type -> ManagerService.GetSupervisorCodeByIdReq
	515,  // 882: ManagerService.ManagerService.GetGetGovermentCodeById:input_type -> ManagerService.GetGovermentCodeByIdReq
	531,  // 883: ManagerService.ManagerService.ListInvoice:input_type -> ManagerService.ListInvoiceReq
	527,  // 884: ManagerService.ManagerService.GetOneInvoice:input_type -> ManagerService.GetOneInvoiceReq
	521,  // 885: ManagerService.ManagerService.CreateOneInvoice:input_type -> ManagerService.CreateOneInvoiceReq
	525,  // 886: ManagerService.ManagerService.UpdateOneInvoice:input_type -> ManagerService.UpdateOneInvoiceReq
	519,  // 887: ManagerService.ManagerService.CreateInvoiceHash:input_type -> ManagerService.CreateInvoiceHashReq
	536,  // 888: ManagerService.ManagerService.UpdateInvoiceHash:input_type -> ManagerService.UpdateInvoiceHashReq
	534,  // 889: ManagerService.ManagerService.DeleteOneInvoice:input_type -> ManagerService.DeleteOneInvoiceReq
	538,  // 890: ManagerService.ManagerService.ReceiveInvoiceHash:input_type -> ManagerService.ReceiveInvoiceHashReq
	540,  // 891: ManagerService.ManagerService.PayInvoiceHash:input_type -> ManagerService.PayInvoiceHashReq
	445,  // 892: ManagerService.ManagerService.CreateOneProject:input_type -> ManagerService.ProjectReq
	445,  // 893: ManagerService.ManagerService.UpdateOneProject:input_type -> ManagerService.ProjectReq
	445,  // 894: ManagerService.ManagerService.DeleteOneProject:input_type -> ManagerService.ProjectReq
	445,  // 895: ManagerService.ManagerService.GetOneProject:input_type -> ManagerService.ProjectReq
	445,  // 896: ManagerService.ManagerService.ListProject:input_type -> ManagerService.ProjectReq
	448,  // 897: ManagerService.ManagerService.CreateProjectHash:input_type -> ManagerService.CreateProjectHashReq
	449,  // 898: ManagerService.ManagerService.UpdateProjectHash:input_type -> ManagerService.UpdateProjectHashReq
	507,  // 899: ManagerService.ManagerService.CommonProject:input_type -> ManagerService.CommonProjectReq
	453,  // 900: ManagerService.ManagerService.CreateOneProgressPlan:input_type -> ManagerService.ProgressPlanReq
	453,  // 901: ManagerService.ManagerService.UpdateOneProgressPlan:input_type -> ManagerService.ProgressPlanReq
	453,  // 902: ManagerService.ManagerService.DeleteOneProgressPlan:input_type -> ManagerService.ProgressPlanReq
	453,  // 903: ManagerService.ManagerService.GetOneProgressPlan:input_type -> ManagerService.ProgressPlanReq
	453,  // 904: ManagerService.ManagerService.ListProgressPlan:input_type -> ManagerService.ProgressPlanReq
	456,  // 905: ManagerService.ManagerService.CreateProgressPlanHash:input_type -> ManagerService.CreateProgressPlanHashReq
	457,  // 906: ManagerService.ManagerService.UpdateProgressPlanHash:input_type -> ManagerService.UpdateProgressPlanHashReq
	461,  // 907: ManagerService.ManagerService.CreateOneProgressActual:input_type -> ManagerService.ProgressActualReq
	461,  // 908: ManagerService.ManagerService.UpdateOneProgressActual:input_type -> ManagerService.ProgressActualReq
	461,  // 909: ManagerService.ManagerService.DeleteOneProgressActual:input_type -> ManagerService.ProgressActualReq
	461,  // 910: ManagerService.ManagerService.GetOneProgressActual:input_type -> ManagerService.ProgressActualReq
	461,  // 911: ManagerService.ManagerService.ListProgressActual:input_type -> ManagerService.ProgressActualReq
	464,  // 912: ManagerService.ManagerService.CreateProgressActualHash:input_type -> ManagerService.CreateProgressActualHashReq
	465,  // 913: ManagerService.ManagerService.UpdateProgressActualHash:input_type -> ManagerService.UpdateProgressActualHashReq
	469,  // 914: ManagerService.ManagerService.CreateOneQualityInspection:input_type -> ManagerService.QualityInspectionReq
	469,  // 915: ManagerService.ManagerService.UpdateOneQualityInspection:input_type -> ManagerService.QualityInspectionReq
	469,  // 916: ManagerService.ManagerService.DeleteOneQualityInspection:input_type -> ManagerService.QualityInspectionReq
	469,  // 917: ManagerService.ManagerService.GetOneQualityInspection:input_type -> ManagerService.QualityInspectionReq
	469,  // 918: ManagerService.ManagerService.ListQualityInspection:input_type -> ManagerService.QualityInspectionReq
	472,  // 919: ManagerService.ManagerService.CreateQualityInspectionHash:input_type -> ManagerService.CreateQualityInspectionHashReq
	473,  // 920: ManagerService.ManagerService.UpdateQualityInspectionHash:input_type -> ManagerService.UpdateQualityInspectionHashReq
	469,  // 921: ManagerService.ManagerService.UpdateOneQualityRectify:input_type -> ManagerService.QualityInspectionReq
	473,  // 922: ManagerService.ManagerService.UpdateQualityRectifyHash:input_type -> ManagerService.UpdateQualityInspectionHashReq
	469,  // 923: ManagerService.ManagerService.GetOneQualityRectify:input_type -> ManagerService.QualityInspectionReq
	469,  // 924: ManagerService.ManagerService.ListQualityRectify:input_type -> ManagerService.QualityInspectionReq
	469,  // 925: ManagerService.ManagerService.UpdateOneQualityReview:input_type -> ManagerService.QualityInspectionReq
	473,  // 926: ManagerService.ManagerService.UpdateQualityReviewHash:input_type -> ManagerService.UpdateQualityInspectionHashReq
	469,  // 927: ManagerService.ManagerService.GetOneQualityReview:input_type -> ManagerService.QualityInspectionReq
	469,  // 928: ManagerService.ManagerService.ListQualityReview:input_type -> ManagerService.QualityInspectionReq
	575,  // 929: ManagerService.ManagerService.CreateOneSafetyInspection:input_type -> ManagerService.SafetyInspectionReq
	575,  // 930: ManagerService.ManagerService.UpdateOneSafetyInspection:input_type -> ManagerService.SafetyInspectionReq
	576,  // 931: ManagerService.ManagerService.DeleteOneSafetyInspection:input_type -> ManagerService.SafetyInspectionIdsReq
	576,  // 932: ManagerService.ManagerService.GetOneSafetyInspection:input_type -> ManagerService.SafetyInspectionIdsReq
	577,  // 933: ManagerService.ManagerService.ListSafetyInspection:input_type -> ManagerService.ListSafetyInspectionReq
	575,  // 934: ManagerService.ManagerService.CreateSafetyInspectionHash:input_type -> ManagerService.SafetyInspectionReq
	575,  // 935: ManagerService.ManagerService.UpdateSafetyInspectionHash:input_type -> ManagerService.SafetyInspectionReq
	575,  // 936: ManagerService.ManagerService.UpdateSafetyRectifyHash:input_type -> ManagerService.SafetyInspectionReq
	575,  // 937: ManagerService.ManagerService.UpdateSafetyReviewHash:input_type -> ManagerService.SafetyInspectionReq
	576,  // 938: ManagerService.ManagerService.GetSafetyInspectionHash:input_type -> ManagerService.SafetyInspectionIdsReq
	583,  // 939: ManagerService.ManagerService.CreateOneSafetyLog:input_type -> ManagerService.SafetyLogReq
	583,  // 940: ManagerService.ManagerService.UpdateOneSafetyLog:input_type -> ManagerService.SafetyLogReq
	584,  // 941: ManagerService.ManagerService.DeleteOneSafetyLog:input_type -> ManagerService.SafetyLogIdsReq
	584,  // 942: ManagerService.ManagerService.GetOneSafetyLog:input_type -> ManagerService.SafetyLogIdsReq
	585,  // 943: ManagerService.ManagerService.ListSafetyLog:input_type -> ManagerService.ListSafetyLogReq
	583,  // 944: ManagerService.ManagerService.CreateSafetyLogHash:input_type -> ManagerService.SafetyLogReq
	583,  // 945: ManagerService.ManagerService.UpdateSafetyLogHash:input_type -> ManagerService.SafetyLogReq
	584,  // 946: ManagerService.ManagerService.GetSafetyLogHash:input_type -> ManagerService.SafetyLogIdsReq
	591,  // 947: ManagerService.ManagerService.CreateOneWorkman:input_type -> ManagerService.WorkmanReq
	591,  // 948: ManagerService.ManagerService.UpdateOneWorkman:input_type -> ManagerService.WorkmanReq
	592,  // 949: ManagerService.ManagerService.DeleteOneWorkman:input_type -> ManagerService.WorkmanIdsReq
	592,  // 950: ManagerService.ManagerService.GetOneWorkman:input_type -> ManagerService.WorkmanIdsReq
	593,  // 951: ManagerService.ManagerService.ListWorkman:input_type -> ManagerService.ListWorkmanReq
	591,  // 952: ManagerService.ManagerService.CreateWorkmanHash:input_type -> ManagerService.WorkmanReq
	591,  // 953: ManagerService.ManagerService.UpdateWorkmanHash:input_type -> ManagerService.WorkmanReq
	592,  // 954: ManagerService.ManagerService.GetWorkmanHash:input_type -> ManagerService.WorkmanIdsReq
	590,  // 955: ManagerService.ManagerService.ImportWorkman:input_type -> ManagerService.WorkmansReq
	590,  // 956: ManagerService.ManagerService.BatchWorkmanHash:input_type -> ManagerService.WorkmansReq
	599,  // 957: ManagerService.ManagerService.CreateOneWorkmanAttendance:input_type -> ManagerService.WorkmanAttendanceReq
	599,  // 958: ManagerService.ManagerService.UpdateOneWorkmanAttendance:input_type -> ManagerService.WorkmanAttendanceReq
	600,  // 959: ManagerService.ManagerService.DeleteOneWorkmanAttendance:input_type -> ManagerService.WorkmanAttendanceIdsReq
	600,  // 960: ManagerService.ManagerService.GetOneWorkmanAttendance:input_type -> ManagerService.WorkmanAttendanceIdsReq
	601,  // 961: ManagerService.ManagerService.ListWorkmanAttendance:input_type -> ManagerService.ListWorkmanAttendanceReq
	599,  // 962: ManagerService.ManagerService.CreateWorkmanAttendanceHash:input_type -> ManagerService.WorkmanAttendanceReq
	599,  // 963: ManagerService.ManagerService.UpdateWorkmanAttendanceHash:input_type -> ManagerService.WorkmanAttendanceReq
	600,  // 964: ManagerService.ManagerService.GetWorkmanAttendanceHash:input_type -> ManagerService.WorkmanAttendanceIdsReq
	598,  // 965: ManagerService.ManagerService.ImportWorkmanAttendance:input_type -> ManagerService.WorkmanAttendancesReq
	598,  // 966: ManagerService.ManagerService.BatchWorkmanAttendanceHash:input_type -> ManagerService.WorkmanAttendancesReq
	606,  // 967: ManagerService.ManagerService.CreateOneMaterial:input_type -> ManagerService.MaterialReq
	606,  // 968: ManagerService.ManagerService.UpdateOneMaterial:input_type -> ManagerService.MaterialReq
	607,  // 969: ManagerService.ManagerService.DeleteOneMaterial:input_type -> ManagerService.MaterialIdsReq
	607,  // 970: ManagerService.ManagerService.GetOneMaterial:input_type -> ManagerService.MaterialIdsReq
	608,  // 971: ManagerService.ManagerService.ListMaterial:input_type -> ManagerService.ListMaterialReq
	606,  // 972: ManagerService.ManagerService.CreateMaterialHash:input_type -> ManagerService.MaterialReq
	606,  // 973: ManagerService.ManagerService.UpdateMaterialHash:input_type -> ManagerService.MaterialReq
	607,  // 974: ManagerService.ManagerService.GetMaterialHash:input_type -> ManagerService.MaterialIdsReq
	613,  // 975: ManagerService.ManagerService.ListMaterialDistinctName:input_type -> ManagerService.ListMaterialDistinctNameReq
	264,  // 976: ManagerService.StockService.StockSync:input_type -> ManagerService.StockSyncReq
	267,  // 977: ManagerService.StockService.ComStockMedicineBindList:input_type -> ManagerService.ComStockMedicineBindListReq
	273,  // 978: ManagerService.StockService.ComStockMedicineBind:input_type -> ManagerService.ComStockMedicineBindReq
	270,  // 979: ManagerService.StockService.MiStockMedicineBindList:input_type -> ManagerService.MiStockMedicineBindListReq
	275,  // 980: ManagerService.StockService.MiStockMedicineBind:input_type -> ManagerService.MiStockMedicineBindReq
	121,  // 981: ManagerService.DataReportService.GetShipmentPlanDayReports:input_type -> ManagerService.GetShipmentPlanReportsReq
	121,  // 982: ManagerService.DataReportService.GetShipmentPlanMonthReports:input_type -> ManagerService.GetShipmentPlanReportsReq
	121,  // 983: ManagerService.DataReportService.GetShipmentPlanYearReports:input_type -> ManagerService.GetShipmentPlanReportsReq
	133,  // 984: ManagerService.DataReportService.GetShipmentOrderDayReports:input_type -> ManagerService.GetShipmentOrderReportsReq
	133,  // 985: ManagerService.DataReportService.GetShipmentOrderMonthReports:input_type -> ManagerService.GetShipmentOrderReportsReq
	133,  // 986: ManagerService.DataReportService.GetShipmentOrderYearReports:input_type -> ManagerService.GetShipmentOrderReportsReq
	142,  // 987: ManagerService.DataReportService.GetFactoringOrderDayReports:input_type -> ManagerService.GetFactoringOrderReportsReq
	142,  // 988: ManagerService.DataReportService.GetFactoringOrderMonthReports:input_type -> ManagerService.GetFactoringOrderReportsReq
	142,  // 989: ManagerService.DataReportService.GetFactoringOrderYearReports:input_type -> ManagerService.GetFactoringOrderReportsReq
	151,  // 990: ManagerService.DataReportService.GetContractPlanDayReports:input_type -> ManagerService.GetContractPlanReportsReq
	151,  // 991: ManagerService.DataReportService.GetContractPlanMonthReports:input_type -> ManagerService.GetContractPlanReportsReq
	151,  // 992: ManagerService.DataReportService.GetContractPlanYearReports:input_type -> ManagerService.GetContractPlanReportsReq
	151,  // 993: ManagerService.DataReportService.GetContractSum:input_type -> ManagerService.GetContractPlanReportsReq
	162,  // 994: ManagerService.DataReportService.GetValidContractInfo:input_type -> ManagerService.GetValidContractInfoReq
	163,  // 995: ManagerService.DataReportService.GetCurrentNeedPay:input_type -> ManagerService.GetCurrentNeedPayReq
	191,  // 996: ManagerService.HashService.GetCompanyHash:input_type -> ManagerService.GetCompanyHashReq
	194,  // 997: ManagerService.HashService.GetMiHash:input_type -> ManagerService.GetMiHashReq
	319,  // 998: ManagerService.HashService.GetMedicineHash:input_type -> ManagerService.GetMedicineHashReq
	200,  // 999: ManagerService.HashService.GetContractHash:input_type -> ManagerService.GetContractHashReq
	203,  // 1000: ManagerService.HashService.GetContractMiHash:input_type -> ManagerService.GetContractMiHashReq
	206,  // 1001: ManagerService.HashService.GetConfigHash:input_type -> ManagerService.GetConfigHashReq
	209,  // 1002: ManagerService.HashService.GetShipmentPlanHash:input_type -> ManagerService.GetShipmentPlanHashReq
	212,  // 1003: ManagerService.HashService.GetShipmentOrderHash:input_type -> ManagerService.GetShipmentOrderHashReq
	215,  // 1004: ManagerService.HashService.GetShipmentPayHash:input_type -> ManagerService.GetShipmentPayHashReq
	218,  // 1005: ManagerService.HashService.GetShipmentFactoringHash:input_type -> ManagerService.GetShipmentFactoringHashReq
	349,  // 1006: ManagerService.HashService.GetConstructionHash:input_type -> ManagerService.GetConstructionHashReq
	373,  // 1007: ManagerService.HashService.GetBuildHash:input_type -> ManagerService.GetBuildHashReq
	397,  // 1008: ManagerService.HashService.GetSupervisorHash:input_type -> ManagerService.GetSupervisorHashReq
	421,  // 1009: ManagerService.HashService.GetGovermentHash:input_type -> ManagerService.GetGovermentHashReq
	477,  // 1010: ManagerService.HashService.GetProcessHash:input_type -> ManagerService.GetProcessHashReq
	450,  // 1011: ManagerService.HashService.GetProjectHash:input_type -> ManagerService.GetProjectHashReq
	503,  // 1012: ManagerService.HashService.ListContractHash:input_type -> ManagerService.ListContractHashReq
	221,  // 1013: ManagerService.RankService.GetShipmentRankMedicineDataYear:input_type -> ManagerService.GetShipmentRankMedicineDataYearReq
	224,  // 1014: ManagerService.RankService.GetShipmentRankCompanyDataYear:input_type -> ManagerService.GetShipmentRankCompanyDataYearReq
	228,  // 1015: ManagerService.RankService.GetRankMiReceiveYear:input_type -> ManagerService.GetRankMiReceiveYearReq
	231,  // 1016: ManagerService.RankService.GetRankComReceiveYear:input_type -> ManagerService.GetRankComReceiveYearReq
	234,  // 1017: ManagerService.RankService.GetRankMiPaidYear:input_type -> ManagerService.GetRankMiPaidYearReq
	237,  // 1018: ManagerService.RankService.GetRankMedicineYear:input_type -> ManagerService.GetRankMedicineYearReq
	240,  // 1019: ManagerService.RankService.GetMIBDashboardBaseInfo:input_type -> ManagerService.GetMIBDashboardBaseInfoReq
	166,  // 1020: ManagerService.DashboardService.GetMiDashboardBaseInfo:input_type -> ManagerService.GetMiDashboardReq
	169,  // 1021: ManagerService.DashboardService.GetDashboardShipmentRankCompanyDataYear:input_type -> ManagerService.GetDashboardShipmentRankCompanyDataYearReq
	172,  // 1022: ManagerService.DashboardService.GetDashboardShipmentRankMedicineDataYear:input_type -> ManagerService.GetDashboardShipmentRankMedicineDataYearReq
	175,  // 1023: ManagerService.DashboardService.GetDashboardShipmentCompanyRank:input_type -> ManagerService.GetDashboardCompanyRankReq
	178,  // 1024: ManagerService.DashboardService.GetDashboardShipmentList:input_type -> ManagerService.GetDashboardShipmentListReq
	181,  // 1025: ManagerService.DashboardService.GetDashboardMedicineRank:input_type -> ManagerService.GetDashboardMedicineRankReq
	184,  // 1026: ManagerService.DashboardService.GetDashboardStockList:input_type -> ManagerService.GetDashboardStockListReq
	542,  // 1027: ManagerService.DashboardService.GetDashboardProject:input_type -> ManagerService.GetDashboardProjectReq
	545,  // 1028: ManagerService.DashboardService.CountDashboardWorkmanAttendanceStatistics:input_type -> ManagerService.CountDashboardWorkmanAttendanceStatisticsReq
	548,  // 1029: ManagerService.DashboardService.CountDashboardWorkmanEpidemicStatistics:input_type -> ManagerService.CountDashboardWorkmanEpidemicStatisticsReq
	551,  // 1030: ManagerService.DashboardService.CountDashboardProcessCompletionPercent:input_type -> ManagerService.CountDashboardProcessCompletionPercentReq
	554,  // 1031: ManagerService.DashboardService.ListDashboardSafetyInspection:input_type -> ManagerService.ListDashboardSafetyInspectionReq
	557,  // 1032: ManagerService.DashboardService.ReportDashboardInvoiceYear:input_type -> ManagerService.ReportDashboardYearReq
	558,  // 1033: ManagerService.DashboardService.ReportDashboardInvoiceMonth:input_type -> ManagerService.ReportDashboardMonthReq
	557,  // 1034: ManagerService.DashboardService.ReportDashboardQualityInspectionYear:input_type -> ManagerService.ReportDashboardYearReq
	558,  // 1035: ManagerService.DashboardService.ReportDashboardQualityInspectionMonth:input_type -> ManagerService.ReportDashboardMonthReq
	557,  // 1036: ManagerService.DashboardService.ReportDashboardSafetyInspectionYear:input_type -> ManagerService.ReportDashboardYearReq
	558,  // 1037: ManagerService.DashboardService.ReportDashboardSafetyInspectionMonth:input_type -> ManagerService.ReportDashboardMonthReq
	557,  // 1038: ManagerService.DashboardService.ReportDashboardProcessYear:input_type -> ManagerService.ReportDashboardYearReq
	558,  // 1039: ManagerService.DashboardService.ReportDashboardProcessMonth:input_type -> ManagerService.ReportDashboardMonthReq
	557,  // 1040: ManagerService.DashboardService.ReportDashboardAttendanceYear:input_type -> ManagerService.ReportDashboardYearReq
	558,  // 1041: ManagerService.DashboardService.ReportDashboardAttendanceMonth:input_type -> ManagerService.ReportDashboardMonthReq
	567,  // 1042: ManagerService.DashboardService.ReportDashboardRankMaterialYear:input_type -> ManagerService.ReportDashboardRankYearReq
	568,  // 1043: ManagerService.DashboardService.ReportDashboardRankMaterialMonth:input_type -> ManagerService.ReportDashboardRankMonthReq
	573,  // 1044: ManagerService.DashboardService.ListDashboardProcess:input_type -> ManagerService.ListDashboardProcessReq
	2,    // 1045: ManagerService.ManagerService.ListMedicine:output_type -> ManagerService.MedicineListResp
	5,    // 1046: ManagerService.ManagerService.MedicineListForQuery:output_type -> ManagerService.MedicineListForQueryResp
	9,    // 1047: ManagerService.ManagerService.CommonListCnaps:output_type -> ManagerService.CommonListCnapsResp
	11,   // 1048: ManagerService.ManagerService.CommonListTag:output_type -> ManagerService.CommonListTagResp
	14,   // 1049: ManagerService.ManagerService.CreateMedicine:output_type -> ManagerService.CreateMedicineResp
	16,   // 1050: ManagerService.ManagerService.CreateBatchMedicine:output_type -> ManagerService.CreateBatchMedicineResp
	18,   // 1051: ManagerService.ManagerService.UpdateMedicine:output_type -> ManagerService.UpdateMedicineResp
	20,   // 1052: ManagerService.ManagerService.UpdateMedicineActive:output_type -> ManagerService.UpdateMedicineActiveResp
	22,   // 1053: ManagerService.ManagerService.DeleteMedicine:output_type -> ManagerService.DeleteMedicineResp
	24,   // 1054: ManagerService.ManagerService.SelectTagByMedicineId:output_type -> ManagerService.SelectTagByMedicineIdResp
	26,   // 1055: ManagerService.ManagerService.SelectInfoByMedicineNames:output_type -> ManagerService.SelectInfoByMedicineNamesResp
	20,   // 1056: ManagerService.ManagerService.UpdateMedicineActiveHash:output_type -> ManagerService.UpdateMedicineActiveResp
	323,  // 1057: ManagerService.ManagerService.SelectByMedicineId:output_type -> ManagerService.MedicineByMedicineIdResp
	28,   // 1058: ManagerService.ManagerService.TagList:output_type -> ManagerService.TagListResp
	31,   // 1059: ManagerService.ManagerService.CreateTag:output_type -> ManagerService.CreateTagResp
	33,   // 1060: ManagerService.ManagerService.UpdateTag:output_type -> ManagerService.UpdateTagResp
	35,   // 1061: ManagerService.ManagerService.DeleteTag:output_type -> ManagerService.DeleteTagResp
	37,   // 1062: ManagerService.ManagerService.TagDetailList:output_type -> ManagerService.TagDetailListResp
	40,   // 1063: ManagerService.ManagerService.DeleteTagMedicine:output_type -> ManagerService.DeleteTagMedicineResp
	42,   // 1064: ManagerService.ManagerService.CreateTagMedicine:output_type -> ManagerService.CreateTagMedicineResp
	44,   // 1065: ManagerService.ManagerService.CommonMedicineQuery:output_type -> ManagerService.CommonMedicineQueryResp
	47,   // 1066: ManagerService.ManagerService.ListMi:output_type -> ManagerService.ListMiResp
	51,   // 1067: ManagerService.ManagerService.CommonMI:output_type -> ManagerService.CommonMIResp
	52,   // 1068: ManagerService.ManagerService.CommonMIInfo:output_type -> ManagerService.CommonMIInfoResp
	56,   // 1069: ManagerService.ManagerService.CreateOneMI:output_type -> ManagerService.CreateOneMIResp
	58,   // 1070: ManagerService.ManagerService.UpdateMi:output_type -> ManagerService.UpdateMiResp
	318,  // 1071: ManagerService.ManagerService.UploadMiLogoUrl:output_type -> ManagerService.UploadMiLogoUrlResp
	325,  // 1072: ManagerService.ManagerService.GetMiCodeById:output_type -> ManagerService.GetMICodeResp
	67,   // 1073: ManagerService.ManagerService.ListCompany:output_type -> ManagerService.ListCompanyResp
	70,   // 1074: ManagerService.ManagerService.CreateOneCompany:output_type -> ManagerService.CreateOneCompanyResp
	72,   // 1075: ManagerService.ManagerService.UpdateOneCompany:output_type -> ManagerService.UpdateOneCompanyResp
	60,   // 1076: ManagerService.ManagerService.CommonCompany:output_type -> ManagerService.CommonCompanyResp
	62,   // 1077: ManagerService.ManagerService.GetCompanyInfo:output_type -> ManagerService.CompanyInfoResp
	65,   // 1078: ManagerService.ManagerService.SelCompanyByNames:output_type -> ManagerService.SelCompanyByNamesResp
	188,  // 1079: ManagerService.ManagerService.QueryCompanyBankAccount:output_type -> ManagerService.GetCompanyBankAccountResp
	316,  // 1080: ManagerService.ManagerService.UploadCompanyLogoUrl:output_type -> ManagerService.UploadCompanyLogoUrlResp
	327,  // 1081: ManagerService.ManagerService.GetCompanysById:output_type -> ManagerService.GetCompanyInfoResp
	74,   // 1082: ManagerService.ManagerService.ListTpPlanErr:output_type -> ManagerService.ListTpPlanErrResp
	77,   // 1083: ManagerService.ManagerService.UpdateErrShipmentPlan:output_type -> ManagerService.UpdateErrShipmentPlanResp
	79,   // 1084: ManagerService.ManagerService.ListShipmentPlan:output_type -> ManagerService.ListShipmentPlanResp
	89,   // 1085: ManagerService.ManagerService.CountShipmentPlan:output_type -> ManagerService.CountShipmentPlanResp
	83,   // 1086: ManagerService.ManagerService.ShipmentReceiveOrder:output_type -> ManagerService.ShipmentReceiveOrderResp
	84,   // 1087: ManagerService.ManagerService.DetailShipmentOrder:output_type -> ManagerService.DetailShipmentOrderResp
	86,   // 1088: ManagerService.ManagerService.ListShipmentPlanForOrder:output_type -> ManagerService.ListShipmentPlanForOrderResp
	91,   // 1089: ManagerService.ManagerService.CreateShipmentOrder:output_type -> ManagerService.CreateShipmentOrderResp
	93,   // 1090: ManagerService.ManagerService.ListShipmentOrder:output_type -> ManagerService.ListShipmentOrderResp
	96,   // 1091: ManagerService.ManagerService.CountShipmentOrder:output_type -> ManagerService.CountShipmentOrderResp
	100,  // 1092: ManagerService.ManagerService.ReceiveShipmentOrder:output_type -> ManagerService.ReceiveShipmentOrderResp
	102,  // 1093: ManagerService.ManagerService.GetContractByShipmentPlanId:output_type -> ManagerService.GetContractByShipmentPlanIdResp
	98,   // 1094: ManagerService.ManagerService.UpdateShipmentOrder:output_type -> ManagerService.UpdateShipmentOrderResp
	190,  // 1095: ManagerService.ManagerService.CountPayOrder:output_type -> ManagerService.GetPayOrderResp
	111,  // 1096: ManagerService.ManagerService.GetConfig:output_type -> ManagerService.GetConfigResp
	108,  // 1097: ManagerService.ManagerService.UpdateConfig:output_type -> ManagerService.UpdateConfigResp
	109,  // 1098: ManagerService.ManagerService.InsertConfigs:output_type -> ManagerService.InsertConfigsResp
	110,  // 1099: ManagerService.ManagerService.DeleteConfigs:output_type -> ManagerService.DeleteConfigsResp
	243,  // 1100: ManagerService.ManagerService.ListCompanyBind:output_type -> ManagerService.ListBindResp
	248,  // 1101: ManagerService.ManagerService.CompanyBind:output_type -> ManagerService.BindResp
	243,  // 1102: ManagerService.ManagerService.ListMiBind:output_type -> ManagerService.ListBindResp
	248,  // 1103: ManagerService.ManagerService.MiBind:output_type -> ManagerService.BindResp
	243,  // 1104: ManagerService.ManagerService.ListMedicineBind:output_type -> ManagerService.ListBindResp
	248,  // 1105: ManagerService.ManagerService.MedicineBind:output_type -> ManagerService.BindResp
	253,  // 1106: ManagerService.ManagerService.ListReimb:output_type -> ManagerService.ListReimbResp
	259,  // 1107: ManagerService.ManagerService.PayReimb:output_type -> ManagerService.OpReimbResp
	259,  // 1108: ManagerService.ManagerService.ApplyReimbQuota:output_type -> ManagerService.OpReimbResp
	259,  // 1109: ManagerService.ManagerService.ApproveReimbQuota:output_type -> ManagerService.OpReimbResp
	259,  // 1110: ManagerService.ManagerService.UpdateReimbReport:output_type -> ManagerService.OpReimbResp
	117,  // 1111: ManagerService.ManagerService.GetMiSpecialConfig:output_type -> ManagerService.GetMiSpecialConfigResp
	260,  // 1112: ManagerService.ManagerService.UpdateMiSpecialConfig:output_type -> ManagerService.UpdateMiSpecialConfigResp
	114,  // 1113: ManagerService.ManagerService.QueryMiInfo:output_type -> ManagerService.GetMiInfoResp
	263,  // 1114: ManagerService.ManagerService.CreateBankAccount:output_type -> ManagerService.CreateBankAccountResp
	278,  // 1115: ManagerService.ManagerService.CreateMiDevelopUser:output_type -> ManagerService.CreateMiDevelopUserResp
	280,  // 1116: ManagerService.ManagerService.GetClientPermission:output_type -> ManagerService.ClientPermissionResp
	283,  // 1117: ManagerService.ManagerService.SetClientDevelop:output_type -> ManagerService.SetClientDevelopResp
	285,  // 1118: ManagerService.ManagerService.SaveClientPermission:output_type -> ManagerService.SaveClientPermissionResp
	287,  // 1119: ManagerService.ManagerService.MedicineBindList:output_type -> ManagerService.ListMedicineBindListResp
	290,  // 1120: ManagerService.ManagerService.MedicineBindCode:output_type -> ManagerService.CreateStockMedcineCodeBindResp
	292,  // 1121: ManagerService.ManagerService.SyncInfoMedicineMiStock:output_type -> ManagerService.MedicineMiStockResp
	295,  // 1122: ManagerService.ManagerService.SyncInfoMedicineCompanyStock:output_type -> ManagerService.MedicineCompanyStockResp
	298,  // 1123: ManagerService.ManagerService.MedicineStockMiListStock:output_type -> ManagerService.MedicineStockMiListResp
	301,  // 1124: ManagerService.ManagerService.ReimbursementLists:output_type -> ManagerService.ReimbursementListResp
	304,  // 1125: ManagerService.ManagerService.ReimbursementApplyQuota:output_type -> ManagerService.ReimbursementApplyQuotaResp
	306,  // 1126: ManagerService.ManagerService.GetWsGetContractList:output_type -> ManagerService.GetWsGetContractListResp
	309,  // 1127: ManagerService.ManagerService.SaveShipmentplan:output_type -> ManagerService.ShipmentPlanListResp
	312,  // 1128: ManagerService.ManagerService.SaveTenderContractInfo:output_type -> ManagerService.TenderContractInfoResp
	329,  // 1129: ManagerService.ManagerService.ListConstruction:output_type -> ManagerService.ListConstructionResp
	332,  // 1130: ManagerService.ManagerService.CommonConstruction:output_type -> ManagerService.CommonConstructionResp
	336,  // 1131: ManagerService.ManagerService.GetConstructionInfo:output_type -> ManagerService.GetConstructionInfoResp
	338,  // 1132: ManagerService.ManagerService.CreateOneConstruction:output_type -> ManagerService.CreateOneConstructionResp
	340,  // 1133: ManagerService.ManagerService.CreateHashConstruction:output_type -> ManagerService.CreateHashConstructionResp
	342,  // 1134: ManagerService.ManagerService.UpdateOneConstruction:output_type -> ManagerService.UpdateOneConstructionResp
	344,  // 1135: ManagerService.ManagerService.UpdateHashConstruction:output_type -> ManagerService.UpdateHashConstructionResp
	346,  // 1136: ManagerService.ManagerService.UploadConstructionLogoUrl:output_type -> ManagerService.UploadConstructionLogoUrlResp
	348,  // 1137: ManagerService.ManagerService.DeleteConstruction:output_type -> ManagerService.DeleteConstructionResp
	353,  // 1138: ManagerService.ManagerService.ListBuild:output_type -> ManagerService.ListBuildResp
	356,  // 1139: ManagerService.ManagerService.CommonBuild:output_type -> ManagerService.CommonBuildResp
	360,  // 1140: ManagerService.ManagerService.GetBuildInfo:output_type -> ManagerService.GetBuildInfoResp
	362,  // 1141: ManagerService.ManagerService.CreateOneBuild:output_type -> ManagerService.CreateOneBuildResp
	364,  // 1142: ManagerService.ManagerService.CreateHashBuild:output_type -> ManagerService.CreateHashBuildResp
	366,  // 1143: ManagerService.ManagerService.UpdateOneBuild:output_type -> ManagerService.UpdateOneBuildResp
	368,  // 1144: ManagerService.ManagerService.UpdateHashBuild:output_type -> ManagerService.UpdateHashBuildResp
	370,  // 1145: ManagerService.ManagerService.UploadBuildLogoUrl:output_type -> ManagerService.UploadBuildLogoUrlResp
	372,  // 1146: ManagerService.ManagerService.DeleteBuild:output_type -> ManagerService.DeleteBuildResp
	377,  // 1147: ManagerService.ManagerService.ListSupervisor:output_type -> ManagerService.ListSupervisorResp
	380,  // 1148: ManagerService.ManagerService.CommonSupervisor:output_type -> ManagerService.CommonSupervisorResp
	384,  // 1149: ManagerService.ManagerService.GetSupervisorInfo:output_type -> ManagerService.GetSupervisorInfoResp
	386,  // 1150: ManagerService.ManagerService.CreateOneSupervisor:output_type -> ManagerService.CreateOneSupervisorResp
	388,  // 1151: ManagerService.ManagerService.CreateHashSupervisor:output_type -> ManagerService.CreateHashSupervisorResp
	390,  // 1152: ManagerService.ManagerService.UpdateOneSupervisor:output_type -> ManagerService.UpdateOneSupervisorResp
	392,  // 1153: ManagerService.ManagerService.UpdateHashSupervisor:output_type -> ManagerService.UpdateHashSupervisorResp
	394,  // 1154: ManagerService.ManagerService.UploadSupervisorLogoUrl:output_type -> ManagerService.UploadSupervisorLogoUrlResp
	396,  // 1155: ManagerService.ManagerService.DeleteSupervisor:output_type -> ManagerService.DeleteSupervisorResp
	401,  // 1156: ManagerService.ManagerService.ListGoverment:output_type -> ManagerService.ListGovermentResp
	404,  // 1157: ManagerService.ManagerService.CommonGoverment:output_type -> ManagerService.CommonGovermentResp
	408,  // 1158: ManagerService.ManagerService.GetGovermentInfo:output_type -> ManagerService.GetGovermentInfoResp
	410,  // 1159: ManagerService.ManagerService.CreateOneGoverment:output_type -> ManagerService.CreateOneGovermentResp
	412,  // 1160: ManagerService.ManagerService.CreateHashGoverment:output_type -> ManagerService.CreateHashGovermentResp
	414,  // 1161: ManagerService.ManagerService.UpdateOneGoverment:output_type -> ManagerService.UpdateOneGovermentResp
	416,  // 1162: ManagerService.ManagerService.UpdateHashGoverment:output_type -> ManagerService.UpdateHashGovermentResp
	418,  // 1163: ManagerService.ManagerService.UploadGovermentLogoUrl:output_type -> ManagerService.UploadGovermentLogoUrlResp
	420,  // 1164: ManagerService.ManagerService.DeleteGoverment:output_type -> ManagerService.DeleteGovermentResp
	440,  // 1165: ManagerService.ManagerService.ListProcess:output_type -> ManagerService.ListProcessResp
	443,  // 1166: ManagerService.ManagerService.CommonProcess:output_type -> ManagerService.CommonProcessResp
	426,  // 1167: ManagerService.ManagerService.CreateOneProcess:output_type -> ManagerService.CreateOneProcessResp
	430,  // 1168: ManagerService.ManagerService.CreateHashProcess:output_type -> ManagerService.CreateHashProcessResp
	432,  // 1169: ManagerService.ManagerService.UpdateOneProcess:output_type -> ManagerService.UpdateProcessResp
	434,  // 1170: ManagerService.ManagerService.UpdateHashProcess:output_type -> ManagerService.UpdateHashProcessResp
	428,  // 1171: ManagerService.ManagerService.GetProcessCodeById:output_type -> ManagerService.GetProcessCodeResp
	432,  // 1172: ManagerService.ManagerService.UpdateOneProcessApprove:output_type -> ManagerService.UpdateProcessResp
	436,  // 1173: ManagerService.ManagerService.DeleteProcess:output_type -> ManagerService.DeleteProcessResp
	438,  // 1174: ManagerService.ManagerService.UpdateProcessSort:output_type -> ManagerService.UpdateProcessSortResp
	485,  // 1175: ManagerService.ManagerService.GetProcessInfo:output_type -> ManagerService.GetProcessInfoResp
	487,  // 1176: ManagerService.ManagerService.ListContract:output_type -> ManagerService.ListContractResp
	490,  // 1177: ManagerService.ManagerService.GetOneContract:output_type -> ManagerService.GetOneContractResp
	494,  // 1178: ManagerService.ManagerService.CreateOneContract:output_type -> ManagerService.CreateOneContractResp
	496,  // 1179: ManagerService.ManagerService.UpdateOneContract:output_type -> ManagerService.UpdateOneContractResp
	498,  // 1180: ManagerService.ManagerService.CreateContractHash:output_type -> ManagerService.CreateContractHashResp
	500,  // 1181: ManagerService.ManagerService.UpdateContractHash:output_type -> ManagerService.UpdateContractHashResp
	502,  // 1182: ManagerService.ManagerService.DeleteOneContract:output_type -> ManagerService.DeleteOneContractResp
	511,  // 1183: ManagerService.ManagerService.CommonProjectPhase:output_type -> ManagerService.CommonProjectPhaseResp
	514,  // 1184: ManagerService.ManagerService.GetBuildInfoCodeById:output_type -> ManagerService.GetBuildInfoCodeByIdResp
	518,  // 1185: ManagerService.ManagerService.GGetSupervisorCodeById:output_type -> ManagerService.GetSupervisorCodeByIdResp
	516,  // 1186: ManagerService.ManagerService.GetGetGovermentCodeById:output_type -> ManagerService.GetGovermentCodeByIdResp
	532,  // 1187: ManagerService.ManagerService.ListInvoice:output_type -> ManagerService.ListInvoiceResp
	528,  // 1188: ManagerService.ManagerService.GetOneInvoice:output_type -> ManagerService.GetOneInvoiceResp
	522,  // 1189: ManagerService.ManagerService.CreateOneInvoice:output_type -> ManagerService.CreateOneInvoiceResp
	526,  // 1190: ManagerService.ManagerService.UpdateOneInvoice:output_type -> ManagerService.UpdateOneInvoiceResp
	520,  // 1191: ManagerService.ManagerService.CreateInvoiceHash:output_type -> ManagerService.CreateInvoiceHashResp
	537,  // 1192: ManagerService.ManagerService.UpdateInvoiceHash:output_type -> ManagerService.UpdateInvoiceHashResp
	535,  // 1193: ManagerService.ManagerService.DeleteOneInvoice:output_type -> ManagerService.DeleteOneInvoiceResp
	539,  // 1194: ManagerService.ManagerService.ReceiveInvoiceHash:output_type -> ManagerService.ReceiveInvoiceHashResp
	541,  // 1195: ManagerService.ManagerService.PayInvoiceHash:output_type -> ManagerService.PayInvoiceHashResp
	578,  // 1196: ManagerService.ManagerService.CreateOneProject:output_type -> ManagerService.OperateIntegerResp
	578,  // 1197: ManagerService.ManagerService.UpdateOneProject:output_type -> ManagerService.OperateIntegerResp
	578,  // 1198: ManagerService.ManagerService.DeleteOneProject:output_type -> ManagerService.OperateIntegerResp
	447,  // 1199: ManagerService.ManagerService.GetOneProject:output_type -> ManagerService.ProjectsResp
	447,  // 1200: ManagerService.ManagerService.ListProject:output_type -> ManagerService.ProjectsResp
	578,  // 1201: ManagerService.ManagerService.CreateProjectHash:output_type -> ManagerService.OperateIntegerResp
	578,  // 1202: ManagerService.ManagerService.UpdateProjectHash:output_type -> ManagerService.OperateIntegerResp
	508,  // 1203: ManagerService.ManagerService.CommonProject:output_type -> ManagerService.CommonProjectResp
	578,  // 1204: ManagerService.ManagerService.CreateOneProgressPlan:output_type -> ManagerService.OperateIntegerResp
	578,  // 1205: ManagerService.ManagerService.UpdateOneProgressPlan:output_type -> ManagerService.OperateIntegerResp
	578,  // 1206: ManagerService.ManagerService.DeleteOneProgressPlan:output_type -> ManagerService.OperateIntegerResp
	455,  // 1207: ManagerService.ManagerService.GetOneProgressPlan:output_type -> ManagerService.ProgressPlansResp
	455,  // 1208: ManagerService.ManagerService.ListProgressPlan:output_type -> ManagerService.ProgressPlansResp
	578,  // 1209: ManagerService.ManagerService.CreateProgressPlanHash:output_type -> ManagerService.OperateIntegerResp
	578,  // 1210: ManagerService.ManagerService.UpdateProgressPlanHash:output_type -> ManagerService.OperateIntegerResp
	578,  // 1211: ManagerService.ManagerService.CreateOneProgressActual:output_type -> ManagerService.OperateIntegerResp
	578,  // 1212: ManagerService.ManagerService.UpdateOneProgressActual:output_type -> ManagerService.OperateIntegerResp
	578,  // 1213: ManagerService.ManagerService.DeleteOneProgressActual:output_type -> ManagerService.OperateIntegerResp
	463,  // 1214: ManagerService.ManagerService.GetOneProgressActual:output_type -> ManagerService.ProgressActualsResp
	463,  // 1215: ManagerService.ManagerService.ListProgressActual:output_type -> ManagerService.ProgressActualsResp
	578,  // 1216: ManagerService.ManagerService.CreateProgressActualHash:output_type -> ManagerService.OperateIntegerResp
	578,  // 1217: ManagerService.ManagerService.UpdateProgressActualHash:output_type -> ManagerService.OperateIntegerResp
	578,  // 1218: ManagerService.ManagerService.CreateOneQualityInspection:output_type -> ManagerService.OperateIntegerResp
	578,  // 1219: ManagerService.ManagerService.UpdateOneQualityInspection:output_type -> ManagerService.OperateIntegerResp
	578,  // 1220: ManagerService.ManagerService.DeleteOneQualityInspection:output_type -> ManagerService.OperateIntegerResp
	471,  // 1221: ManagerService.ManagerService.GetOneQualityInspection:output_type -> ManagerService.QualityInspectionsResp
	471,  // 1222: ManagerService.ManagerService.ListQualityInspection:output_type -> ManagerService.QualityInspectionsResp
	578,  // 1223: ManagerService.ManagerService.CreateQualityInspectionHash:output_type -> ManagerService.OperateIntegerResp
	578,  // 1224: ManagerService.ManagerService.UpdateQualityInspectionHash:output_type -> ManagerService.OperateIntegerResp
	578,  // 1225: ManagerService.ManagerService.UpdateOneQualityRectify:output_type -> ManagerService.OperateIntegerResp
	578,  // 1226: ManagerService.ManagerService.UpdateQualityRectifyHash:output_type -> ManagerService.OperateIntegerResp
	471,  // 1227: ManagerService.ManagerService.GetOneQualityRectify:output_type -> ManagerService.QualityInspectionsResp
	471,  // 1228: ManagerService.ManagerService.ListQualityRectify:output_type -> ManagerService.QualityInspectionsResp
	578,  // 1229: ManagerService.ManagerService.UpdateOneQualityReview:output_type -> ManagerService.OperateIntegerResp
	578,  // 1230: ManagerService.ManagerService.UpdateQualityReviewHash:output_type -> ManagerService.OperateIntegerResp
	471,  // 1231: ManagerService.ManagerService.GetOneQualityReview:output_type -> ManagerService.QualityInspectionsResp
	471,  // 1232: ManagerService.ManagerService.ListQualityReview:output_type -> ManagerService.QualityInspectionsResp
	578,  // 1233: ManagerService.ManagerService.CreateOneSafetyInspection:output_type -> ManagerService.OperateIntegerResp
	578,  // 1234: ManagerService.ManagerService.UpdateOneSafetyInspection:output_type -> ManagerService.OperateIntegerResp
	578,  // 1235: ManagerService.ManagerService.DeleteOneSafetyInspection:output_type -> ManagerService.OperateIntegerResp
	579,  // 1236: ManagerService.ManagerService.GetOneSafetyInspection:output_type -> ManagerService.SafetyInspectionsResp
	579,  // 1237: ManagerService.ManagerService.ListSafetyInspection:output_type -> ManagerService.SafetyInspectionsResp
	578,  // 1238: ManagerService.ManagerService.CreateSafetyInspectionHash:output_type -> ManagerService.OperateIntegerResp
	578,  // 1239: ManagerService.ManagerService.UpdateSafetyInspectionHash:output_type -> ManagerService.OperateIntegerResp
	578,  // 1240: ManagerService.ManagerService.UpdateSafetyRectifyHash:output_type -> ManagerService.OperateIntegerResp
	578,  // 1241: ManagerService.ManagerService.UpdateSafetyReviewHash:output_type -> ManagerService.OperateIntegerResp
	580,  // 1242: ManagerService.ManagerService.GetSafetyInspectionHash:output_type -> ManagerService.GetSafetyInspectionHashResp
	578,  // 1243: ManagerService.ManagerService.CreateOneSafetyLog:output_type -> ManagerService.OperateIntegerResp
	578,  // 1244: ManagerService.ManagerService.UpdateOneSafetyLog:output_type -> ManagerService.OperateIntegerResp
	578,  // 1245: ManagerService.ManagerService.DeleteOneSafetyLog:output_type -> ManagerService.OperateIntegerResp
	586,  // 1246: ManagerService.ManagerService.GetOneSafetyLog:output_type -> ManagerService.SafetyLogsResp
	586,  // 1247: ManagerService.ManagerService.ListSafetyLog:output_type -> ManagerService.SafetyLogsResp
	578,  // 1248: ManagerService.ManagerService.CreateSafetyLogHash:output_type -> ManagerService.OperateIntegerResp
	578,  // 1249: ManagerService.ManagerService.UpdateSafetyLogHash:output_type -> ManagerService.OperateIntegerResp
	587,  // 1250: ManagerService.ManagerService.GetSafetyLogHash:output_type -> ManagerService.GetSafetyLogHashResp
	578,  // 1251: ManagerService.ManagerService.CreateOneWorkman:output_type -> ManagerService.OperateIntegerResp
	578,  // 1252: ManagerService.ManagerService.UpdateOneWorkman:output_type -> ManagerService.OperateIntegerResp
	578,  // 1253: ManagerService.ManagerService.DeleteOneWorkman:output_type -> ManagerService.OperateIntegerResp
	594,  // 1254: ManagerService.ManagerService.GetOneWorkman:output_type -> ManagerService.WorkmansResp
	594,  // 1255: ManagerService.ManagerService.ListWorkman:output_type -> ManagerService.WorkmansResp
	578,  // 1256: ManagerService.ManagerService.CreateWorkmanHash:output_type -> ManagerService.OperateIntegerResp
	578,  // 1257: ManagerService.ManagerService.UpdateWorkmanHash:output_type -> ManagerService.OperateIntegerResp
	595,  // 1258: ManagerService.ManagerService.GetWorkmanHash:output_type -> ManagerService.GetWorkmanHashResp
	578,  // 1259: ManagerService.ManagerService.ImportWorkman:output_type -> ManagerService.OperateIntegerResp
	578,  // 1260: ManagerService.ManagerService.BatchWorkmanHash:output_type -> ManagerService.OperateIntegerResp
	578,  // 1261: ManagerService.ManagerService.CreateOneWorkmanAttendance:output_type -> ManagerService.OperateIntegerResp
	578,  // 1262: ManagerService.ManagerService.UpdateOneWorkmanAttendance:output_type -> ManagerService.OperateIntegerResp
	578,  // 1263: ManagerService.ManagerService.DeleteOneWorkmanAttendance:output_type -> ManagerService.OperateIntegerResp
	602,  // 1264: ManagerService.ManagerService.GetOneWorkmanAttendance:output_type -> ManagerService.WorkmanAttendancesResp
	602,  // 1265: ManagerService.ManagerService.ListWorkmanAttendance:output_type -> ManagerService.WorkmanAttendancesResp
	578,  // 1266: ManagerService.ManagerService.CreateWorkmanAttendanceHash:output_type -> ManagerService.OperateIntegerResp
	578,  // 1267: ManagerService.ManagerService.UpdateWorkmanAttendanceHash:output_type -> ManagerService.OperateIntegerResp
	603,  // 1268: ManagerService.ManagerService.GetWorkmanAttendanceHash:output_type -> ManagerService.GetWorkmanAttendanceHashResp
	578,  // 1269: ManagerService.ManagerService.ImportWorkmanAttendance:output_type -> ManagerService.OperateIntegerResp
	578,  // 1270: ManagerService.ManagerService.BatchWorkmanAttendanceHash:output_type -> ManagerService.OperateIntegerResp
	578,  // 1271: ManagerService.ManagerService.CreateOneMaterial:output_type -> ManagerService.OperateIntegerResp
	578,  // 1272: ManagerService.ManagerService.UpdateOneMaterial:output_type -> ManagerService.OperateIntegerResp
	578,  // 1273: ManagerService.ManagerService.DeleteOneMaterial:output_type -> ManagerService.OperateIntegerResp
	609,  // 1274: ManagerService.ManagerService.GetOneMaterial:output_type -> ManagerService.MaterialsResp
	609,  // 1275: ManagerService.ManagerService.ListMaterial:output_type -> ManagerService.MaterialsResp
	578,  // 1276: ManagerService.ManagerService.CreateMaterialHash:output_type -> ManagerService.OperateIntegerResp
	578,  // 1277: ManagerService.ManagerService.UpdateMaterialHash:output_type -> ManagerService.OperateIntegerResp
	610,  // 1278: ManagerService.ManagerService.GetMaterialHash:output_type -> ManagerService.GetMaterialHashResp
	615,  // 1279: ManagerService.ManagerService.ListMaterialDistinctName:output_type -> ManagerService.ListMaterialDistinctNameResp
	266,  // 1280: ManagerService.StockService.StockSync:output_type -> ManagerService.StockSyncResp
	268,  // 1281: ManagerService.StockService.ComStockMedicineBindList:output_type -> ManagerService.ComStockMedicineBindListResp
	274,  // 1282: ManagerService.StockService.ComStockMedicineBind:output_type -> ManagerService.ComStockMedicineBindResp
	271,  // 1283: ManagerService.StockService.MiStockMedicineBindList:output_type -> ManagerService.MiStockMedicineBindListResp
	276,  // 1284: ManagerService.StockService.MiStockMedicineBind:output_type -> ManagerService.MiStockMedicineBindResp
	128,  // 1285: ManagerService.DataReportService.GetShipmentPlanDayReports:output_type -> ManagerService.GetShipmentPlanDayReportsResp
	129,  // 1286: ManagerService.DataReportService.GetShipmentPlanMonthReports:output_type -> ManagerService.GetShipmentPlanMonthReportsResp
	130,  // 1287: ManagerService.DataReportService.GetShipmentPlanYearReports:output_type -> ManagerService.GetShipmentPlanYearReportsResp
	137,  // 1288: ManagerService.DataReportService.GetShipmentOrderDayReports:output_type -> ManagerService.GetShipmentOrderDayReportsResp
	138,  // 1289: ManagerService.DataReportService.GetShipmentOrderMonthReports:output_type -> ManagerService.GetShipmentOrderMonthReportsResp
	139,  // 1290: ManagerService.DataReportService.GetShipmentOrderYearReports:output_type -> ManagerService.GetShipmentOrderYearReportsResp
	144,  // 1291: ManagerService.DataReportService.GetFactoringOrderDayReports:output_type -> ManagerService.GetFactoringOrderDayReportsResp
	146,  // 1292: ManagerService.DataReportService.GetFactoringOrderMonthReports:output_type -> ManagerService.GetFactoringOrderMonthReportsResp
	148,  // 1293: ManagerService.DataReportService.GetFactoringOrderYearReports:output_type -> ManagerService.GetFactoringOrderYearReportsResp
	155,  // 1294: ManagerService.DataReportService.GetContractPlanDayReports:output_type -> ManagerService.GetContractPlanDayReportsResp
	157,  // 1295: ManagerService.DataReportService.GetContractPlanMonthReports:output_type -> ManagerService.GetContractPlanMonthReportsResp
	159,  // 1296: ManagerService.DataReportService.GetContractPlanYearReports:output_type -> ManagerService.GetContractPlanYearReportsResp
	161,  // 1297: ManagerService.DataReportService.GetContractSum:output_type -> ManagerService.GetContractSumResp
	164,  // 1298: ManagerService.DataReportService.GetValidContractInfo:output_type -> ManagerService.GetValidContractInfoResp
	165,  // 1299: ManagerService.DataReportService.GetCurrentNeedPay:output_type -> ManagerService.GetCurrentNeedPayResp
	192,  // 1300: ManagerService.HashService.GetCompanyHash:output_type -> ManagerService.GetCompanyHashResp
	196,  // 1301: ManagerService.HashService.GetMiHash:output_type -> ManagerService.GetMiHashResp
	320,  // 1302: ManagerService.HashService.GetMedicineHash:output_type -> ManagerService.GetMedicineHashResp
	202,  // 1303: ManagerService.HashService.GetContractHash:output_type -> ManagerService.GetContractHashResp
	205,  // 1304: ManagerService.HashService.GetContractMiHash:output_type -> ManagerService.GetContractMiHashResp
	208,  // 1305: ManagerService.HashService.GetConfigHash:output_type -> ManagerService.GetConfigHashResp
	211,  // 1306: ManagerService.HashService.GetShipmentPlanHash:output_type -> ManagerService.GetShipmentPlanHashResp
	214,  // 1307: ManagerService.HashService.GetShipmentOrderHash:output_type -> ManagerService.GetShipmentOrderHashResp
	217,  // 1308: ManagerService.HashService.GetShipmentPayHash:output_type -> ManagerService.GetShipmentPayHashResp
	220,  // 1309: ManagerService.HashService.GetShipmentFactoringHash:output_type -> ManagerService.GetShipmentFactoringHashResp
	350,  // 1310: ManagerService.HashService.GetConstructionHash:output_type -> ManagerService.GetConstructionHashResp
	374,  // 1311: ManagerService.HashService.GetBuildHash:output_type -> ManagerService.GetBuildHashResp
	398,  // 1312: ManagerService.HashService.GetSupervisorHash:output_type -> ManagerService.GetSupervisorHashResp
	422,  // 1313: ManagerService.HashService.GetGovermentHash:output_type -> ManagerService.GetGovermentHashResp
	478,  // 1314: ManagerService.HashService.GetProcessHash:output_type -> ManagerService.GetProcessHashResp
	452,  // 1315: ManagerService.HashService.GetProjectHash:output_type -> ManagerService.GetProjectHashResp
	504,  // 1316: ManagerService.HashService.ListContractHash:output_type -> ManagerService.ListContractHashResp
	223,  // 1317: ManagerService.RankService.GetShipmentRankMedicineDataYear:output_type -> ManagerService.GetShipmentRankMedicineDataYearResp
	227,  // 1318: ManagerService.RankService.GetShipmentRankCompanyDataYear:output_type -> ManagerService.GetShipmentRankCompanyDataYearResp
	230,  // 1319: ManagerService.RankService.GetRankMiReceiveYear:output_type -> ManagerService.GetRankMiReceiveYearResp
	233,  // 1320: ManagerService.RankService.GetRankComReceiveYear:output_type -> ManagerService.GetRankComReceiveYearResp
	236,  // 1321: ManagerService.RankService.GetRankMiPaidYear:output_type -> ManagerService.GetRankMiPaidYearResp
	239,  // 1322: ManagerService.RankService.GetRankMedicineYear:output_type -> ManagerService.GetRankMedicineYearResp
	241,  // 1323: ManagerService.RankService.GetMIBDashboardBaseInfo:output_type -> ManagerService.GetMIBDashboardBaseInfoResp
	168,  // 1324: ManagerService.DashboardService.GetMiDashboardBaseInfo:output_type -> ManagerService.GetMiDashboardBaseInfoResp
	171,  // 1325: ManagerService.DashboardService.GetDashboardShipmentRankCompanyDataYear:output_type -> ManagerService.GetDashboardShipmentRankCompanyDataYearResp
	174,  // 1326: ManagerService.DashboardService.GetDashboardShipmentRankMedicineDataYear:output_type -> ManagerService.GetDashboardShipmentRankMedicineDataYearResp
	177,  // 1327: ManagerService.DashboardService.GetDashboardShipmentCompanyRank:output_type -> ManagerService.GetDashboardCompanyRankResp
	180,  // 1328: ManagerService.DashboardService.GetDashboardShipmentList:output_type -> ManagerService.GetDashboardShipmentListResp
	183,  // 1329: ManagerService.DashboardService.GetDashboardMedicineRank:output_type -> ManagerService.GetDashboardMedicineRankResp
	186,  // 1330: ManagerService.DashboardService.GetDashboardStockList:output_type -> ManagerService.GetDashboardStockListResp
	544,  // 1331: ManagerService.DashboardService.GetDashboardProject:output_type -> ManagerService.GetDashboardProjectResp
	547,  // 1332: ManagerService.DashboardService.CountDashboardWorkmanAttendanceStatistics:output_type -> ManagerService.CountDashboardWorkmanAttendanceStatisticsResp
	550,  // 1333: ManagerService.DashboardService.CountDashboardWorkmanEpidemicStatistics:output_type -> ManagerService.CountDashboardWorkmanEpidemicStatisticsResp
	553,  // 1334: ManagerService.DashboardService.CountDashboardProcessCompletionPercent:output_type -> ManagerService.CountDashboardProcessCompletionPercentResp
	556,  // 1335: ManagerService.DashboardService.ListDashboardSafetyInspection:output_type -> ManagerService.ListDashboardSafetyInspectionResp
	559,  // 1336: ManagerService.DashboardService.ReportDashboardInvoiceYear:output_type -> ManagerService.ReportDashboardInvoiceYearResp
	560,  // 1337: ManagerService.DashboardService.ReportDashboardInvoiceMonth:output_type -> ManagerService.ReportDashboardInvoiceMonthResp
	561,  // 1338: ManagerService.DashboardService.ReportDashboardQualityInspectionYear:output_type -> ManagerService.ReportDashboardInspectionYearResp
	562,  // 1339: ManagerService.DashboardService.ReportDashboardQualityInspectionMonth:output_type -> ManagerService.ReportDashboardInspectionMonthResp
	561,  // 1340: ManagerService.DashboardService.ReportDashboardSafetyInspectionYear:output_type -> ManagerService.ReportDashboardInspectionYearResp
	562,  // 1341: ManagerService.DashboardService.ReportDashboardSafetyInspectionMonth:output_type -> ManagerService.ReportDashboardInspectionMonthResp
	563,  // 1342: ManagerService.DashboardService.ReportDashboardProcessYear:output_type -> ManagerService.ReportDashboardProcessYearResp
	564,  // 1343: ManagerService.DashboardService.ReportDashboardProcessMonth:output_type -> ManagerService.ReportDashboardProcessMonthResp
	565,  // 1344: ManagerService.DashboardService.ReportDashboardAttendanceYear:output_type -> ManagerService.ReportDashboardAttendanceYearResp
	566,  // 1345: ManagerService.DashboardService.ReportDashboardAttendanceMonth:output_type -> ManagerService.ReportDashboardAttendanceMonthResp
	570,  // 1346: ManagerService.DashboardService.ReportDashboardRankMaterialYear:output_type -> ManagerService.ReportDashboardRankMaterialYearResp
	572,  // 1347: ManagerService.DashboardService.ReportDashboardRankMaterialMonth:output_type -> ManagerService.ReportDashboardRankMaterialMonthResp
	574,  // 1348: ManagerService.DashboardService.ListDashboardProcess:output_type -> ManagerService.ListDashboardProcessResp
	1045, // [1045:1349] is the sub-list for method output_type
	741,  // [741:1045] is the sub-list for method input_type
	741,  // [741:741] is the sub-list for extension type_name
	741,  // [741:741] is the sub-list for extension extendee
	0,    // [0:741] is the sub-list for field type_name
}

func init() { file_ManagerService_proto_init() }
func file_ManagerService_proto_init() {
	if File_ManagerService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ManagerService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Page); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineListVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineListForQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineListForQueryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineListForQueryVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonListCnapsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CnapsListVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonListCnapsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonListTagReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonListTagResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonListTagVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMedicineReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMedicineResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBatchMedicineReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBatchMedicineResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMedicineReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMedicineResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMedicineActiveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMedicineActiveResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMedicineReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMedicineResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectTagByMedicineIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectTagByMedicineIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectInfoByMedicineNamesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectInfoByMedicineNamesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagListVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTagReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTagResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTagReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTagResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagDetailListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagDetailListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagDetailVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagMedicineReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagMedicineResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTagMedicineReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTagMedicineResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonMedicineQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonMedicineQueryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagMedicineVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMiReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMiResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMiVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonMIReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonMIInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonMIResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonMIInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonMIVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonMIInfoVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneMIReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneMIResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMiReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMiResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonCompanyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonCompanyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonCompanyVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyInfoVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelCompanyByNamesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelCompanyByNamesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCompanyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCompanyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCompanyVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneCompanyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneCompanyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOneCompanyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOneCompanyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTpPlanErrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTpPlanErrResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTpPlanErrVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateErrShipmentPlanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateErrShipmentPlanResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShipmentPlanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShipmentPlanResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShipmentPlanrVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailShipmentOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentReceiveOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentReceiveOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailShipmentOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShipmentPlanForOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShipmentPlanForOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShipmentPlanForOrderVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountShipmentPlanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountShipmentPlanResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateShipmentOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateShipmentOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShipmentOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShipmentOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShipmentOrderVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountShipmentOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountShipmentOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateShipmentOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateShipmentOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveShipmentOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveShipmentOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractByShipmentPlanIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractByShipmentPlanIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertConfigsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConfigsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertConfigsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConfigsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMiInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiInfoVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMiInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMiSpecialConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiSpecialConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMiSpecialConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMiSpecialConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanReportGroupCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanReportGetCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentPlanReportsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyReportVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiReportVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineReportVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentPlanDayReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentPlanMonthReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentPlanYearReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentPlanDayReportsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentPlanMonthReportsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentPlanYearReportsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderReportGroupCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderReportGetCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentOrderReportsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentOrderDayReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentOrderMonthReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentOrderYearReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentOrderDayReportsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentOrderMonthReportsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentOrderYearReportsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactoringReportGroupCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactoringReportGetCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFactoringOrderReportsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactoringOrderDayReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFactoringOrderDayReportsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactoringOrderMonthReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFactoringOrderMonthReportsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactoringOrderYearReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFactoringOrderYearReportsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractPlanReportGetCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractPlanReportGroupCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractPlanReportsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractReportVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractMiReportVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractPlanDayReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractPlanDayReportsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractPlanMonthReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractPlanMonthReportsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractPlanYearReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractPlanYearReportsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractSum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractSumResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidContractInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentNeedPayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidContractInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentNeedPayResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMiDashboardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankAccounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMiDashboardBaseInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardShipmentRankCompanyDataYearReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardShipmentRankCompanyDataYearVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardShipmentRankCompanyDataYearResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardShipmentRankMedicineDataYearReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardShipmentRankMedicineDataYear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardShipmentRankMedicineDataYearResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardCompanyRankReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardCompanyRankVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardCompanyRankResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardShipmentListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardShipmentVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardShipmentListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardMedicineRankReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardMedicineRankVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardMedicineRankResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardStockListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardStockVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardStockListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyBankAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyBankAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPayOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPayOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMiHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMiHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMedicineReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMedicineResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractMiHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractMiHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractMiHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentPlanHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentPlanHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentPlanHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentOrderHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentOrderHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentOrderHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentPayHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentPayHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentPayHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentFactoringHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentFactoringHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentFactoringHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentRankMedicineDataYearReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentRankMedicineDataYear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentRankMedicineDataYearResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentRankCompanyDataYearReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentRankCompanyMedicine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentRankCompanyDataYear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentRankCompanyDataYearResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankMiReceiveYearReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankMiReceiveYear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankMiReceiveYearResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankComReceiveYearReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankComReceiveYear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankComReceiveYearResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankMiPaidYearReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankMiPaidYear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankMiPaidYearResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankMedicineYearReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankMedicineYear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankMedicineYearResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMIBDashboardBaseInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMIBDashboardBaseInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBindResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBindVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindJsonVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetContractReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetContractParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetContractResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReimbReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReimbResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReimbListVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayReimbReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyReimbQuotaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveReimbQuotaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReimbReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpReimbResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMiSpecialConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBankAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBankAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockSyncReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockSyncParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockSyncResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComStockMedicineBindListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComStockMedicineBindListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComStockMedicineBindListVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiStockMedicineBindListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiStockMedicineBindListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiStockMedicineBindListVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComStockMedicineBindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComStockMedicineBindResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiStockMedicineBindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiStockMedicineBindResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMiDevelopUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMiDevelopUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientPermissionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientPermissionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetClientDevelopReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetClientDevelopResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveClientPermissionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveClientPermissionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMedicineBindListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMedicineBindListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMedicineBindListVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStockMedcineCodeBindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStockMedcineCodeBindResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineMiStockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineMiStockResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineMiStock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineCompanyStockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineCompanyStockResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineCompanyStock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineStockMiListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineStockMiListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineStockMiListVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReimbursementListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReimbursementListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReimbursementListVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReimbursementApplyQuotaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReimbursementApplyQuotaResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWsGetContractListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWsGetContractListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpsyncContractListVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentPlanListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentPlanListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentPlaneListVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenderContractInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenderContractInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenderContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadCompanyLogoUrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadCompanyLogoUrlResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadMiLogoUrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadMiLogoUrlResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMedicineHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMedicineHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineChainHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineByMedicineIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineByMedicineIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMICodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMICodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConstructionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConstructionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstructionVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonConstructionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonConstructionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonConstructionVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConstructionInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstructionInfoVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConstructionInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneConstructionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneConstructionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHashConstructionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHashConstructionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOneConstructionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOneConstructionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHashConstructionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHashConstructionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadConstructionLogoUrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadConstructionLogoUrlResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConstructionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConstructionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConstructionHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConstructionHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstructionHashVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBuildReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBuildResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonBuildReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonBuildResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonBuildVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBuildInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildInfoVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBuildInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneBuildReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneBuildResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHashBuildReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHashBuildResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOneBuildReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOneBuildResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHashBuildReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHashBuildResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadBuildLogoUrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadBuildLogoUrlResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBuildReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBuildResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBuildHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBuildHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildHashVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSupervisorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSupervisorResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupervisorVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonSupervisorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonSupervisorResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[381].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonSupervisorVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[382].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSupervisorInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[383].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupervisorInfoVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[384].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSupervisorInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[385].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneSupervisorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[386].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneSupervisorResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[387].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHashSupervisorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[388].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHashSupervisorResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[389].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOneSupervisorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[390].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOneSupervisorResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[391].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHashSupervisorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[392].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHashSupervisorResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[393].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadSupervisorLogoUrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[394].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadSupervisorLogoUrlResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[395].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSupervisorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[396].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSupervisorResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[397].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSupervisorHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[398].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSupervisorHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[399].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupervisorHashVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[400].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGovermentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[401].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGovermentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[402].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovermentVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[403].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonGovermentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[404].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonGovermentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[405].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonGovermentVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[406].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGovermentInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[407].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovermentInfoVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[408].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGovermentInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[409].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneGovermentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[410].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneGovermentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[411].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHashGovermentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[412].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHashGovermentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[413].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOneGovermentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[414].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOneGovermentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[415].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHashGovermentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[416].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHashGovermentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[417].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadGovermentLogoUrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[418].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadGovermentLogoUrlResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[419].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGovermentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[420].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGovermentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[421].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGovermentHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[422].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGovermentHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[423].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovermentHashVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[424].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneProcessReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[425].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentInfoApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[426].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneProcessResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[427].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProcessCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[428].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProcessCodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[429].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHashProcessReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[430].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHashProcessResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[431].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProcessReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[432].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProcessResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[433].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHashProcessReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[434].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHashProcessResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[435].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProcessReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[436].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProcessResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[437].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProcessSortReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[438].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProcessSortResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[439].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProcessReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[440].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProcessResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[441].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProcessVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[442].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonProcessReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[443].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonProcessResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[444].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadDocumentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[445].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[446].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[447].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[448].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProjectHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[449].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[450].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[451].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectHashVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[452].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[453].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgressPlanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[454].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgressPlanVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[455].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgressPlansResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[456].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProgressPlanHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[457].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProgressPlanHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[458].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProgressPlanHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[459].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgressPlanHashVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[460].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProgressPlanHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[461].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgressActualReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[462].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgressActualVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[463].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgressActualsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[464].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProgressActualHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[465].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProgressActualHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[466].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProgressActualHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[467].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgressActualHashVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[468].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProgressActualHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[469].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityInspectionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[470].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityInspectionVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[471].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityInspectionsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[472].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQualityInspectionHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[473].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateQualityInspectionHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[474].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQualityInspectionHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[475].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityInspectionHashVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[476].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQualityInspectionHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[477].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProcessHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[478].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProcessHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[479].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessHashVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[480].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProcessApproveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[481].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentInfoApprove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[482].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProcessInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[483].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessInfoVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[484].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessInfoHashVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[485].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProcessInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[486].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContractReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[487].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContractResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[488].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContractVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[489].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOneContractReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[490].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOneContractResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[491].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractInfoVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[492].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneContractReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[493].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentInfoContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[494].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneContractResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[495].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOneContractReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[496].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOneContractResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[497].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateContractHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[498].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateContractHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[499].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateContractHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[500].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateContractHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[501].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOneContractReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[502].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOneContractResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[503].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContractHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[504].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContractHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[505].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContractHashVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[506].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[507].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonProjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[508].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonProjectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[509].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonProjectVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[510].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonProjectPhaseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[511].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonProjectPhaseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[512].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonProjectPhaseVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[513].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBuildInfoCodeByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[514].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBuildInfoCodeByIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[515].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGovermentCodeByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[516].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGovermentCodeByIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[517].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSupervisorCodeByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[518].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSupervisorCodeByIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[519].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInvoiceHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[520].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInvoiceHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[521].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneInvoiceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[522].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneInvoiceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[523].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInvoiceHasReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[524].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInvoiceHasResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[525].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOneInvoiceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[526].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOneInvoiceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[527].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOneInvoiceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[528].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOneInvoiceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[529].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceInfoVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[530].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainInvoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[531].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInvoiceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[532].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInvoiceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[533].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInvoiceVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[534].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOneInvoiceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[535].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOneInvoiceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[536].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInvoiceHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[537].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInvoiceHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[538].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveInvoiceHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[539].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveInvoiceHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[540].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayInvoiceHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[541].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayInvoiceHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[542].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardProjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[543].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardProjectVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[544].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardProjectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[545].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountDashboardWorkmanAttendanceStatisticsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[546].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardWorkmanAttendanceStatisticsVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[547].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountDashboardWorkmanAttendanceStatisticsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[548].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountDashboardWorkmanEpidemicStatisticsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[549].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardWorkmanEpidemicStatisticsVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[550].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountDashboardWorkmanEpidemicStatisticsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[551].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountDashboardProcessCompletionPercentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[552].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardProcessCompletionPercentVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[553].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountDashboardProcessCompletionPercentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[554].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDashboardSafetyInspectionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[555].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardSafetyInspectionVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[556].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDashboardSafetyInspectionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[557].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDashboardYearReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[558].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDashboardMonthReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[559].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDashboardInvoiceYearResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[560].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDashboardInvoiceMonthResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[561].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDashboardInspectionYearResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[562].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDashboardInspectionMonthResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[563].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDashboardProcessYearResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[564].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDashboardProcessMonthResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[565].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDashboardAttendanceYearResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[566].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDashboardAttendanceMonthResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[567].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDashboardRankYearReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[568].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDashboardRankMonthReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[569].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardRankMaterialYearVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[570].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDashboardRankMaterialYearResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[571].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardRankMaterialMonthVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[572].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDashboardRankMaterialMonthResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[573].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDashboardProcessReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[574].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDashboardProcessResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[575].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafetyInspectionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[576].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafetyInspectionIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[577].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSafetyInspectionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[578].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateIntegerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[579].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafetyInspectionsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[580].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSafetyInspectionHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[581].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafetyInspectionVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[582].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafetyInspectionHashVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[583].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafetyLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[584].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafetyLogIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[585].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSafetyLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[586].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafetyLogsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[587].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSafetyLogHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[588].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafetyLogVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[589].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafetyLogHashVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[590].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkmansReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[591].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkmanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[592].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkmanIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[593].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkmanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[594].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkmansResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[595].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkmanHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[596].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkmanVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[597].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkmanHashVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[598].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkmanAttendancesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[599].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkmanAttendanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[600].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkmanAttendanceIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[601].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkmanAttendanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[602].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkmanAttendancesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[603].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkmanAttendanceHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[604].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkmanAttendanceVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[605].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkmanAttendanceHashVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[606].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[607].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[608].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMaterialReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[609].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[610].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMaterialHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[611].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[612].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialHashVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[613].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMaterialDistinctNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[614].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialDistinctNameVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[615].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMaterialDistinctNameResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ManagerService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   616,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_ManagerService_proto_goTypes,
		DependencyIndexes: file_ManagerService_proto_depIdxs,
		MessageInfos:      file_ManagerService_proto_msgTypes,
	}.Build()
	File_ManagerService_proto = out.File
	file_ManagerService_proto_rawDesc = nil
	file_ManagerService_proto_goTypes = nil
	file_ManagerService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ManagerServiceClient is the client API for ManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ManagerServiceClient interface {
	//药品相关
	ListMedicine(ctx context.Context, in *MedicineListReq, opts ...grpc.CallOption) (*MedicineListResp, error)
	MedicineListForQuery(ctx context.Context, in *MedicineListForQueryReq, opts ...grpc.CallOption) (*MedicineListForQueryResp, error)
	CommonListCnaps(ctx context.Context, in *CommonListCnapsReq, opts ...grpc.CallOption) (*CommonListCnapsResp, error)
	CommonListTag(ctx context.Context, in *CommonListTagReq, opts ...grpc.CallOption) (*CommonListTagResp, error)
	CreateMedicine(ctx context.Context, in *CreateMedicineReq, opts ...grpc.CallOption) (*CreateMedicineResp, error)
	CreateBatchMedicine(ctx context.Context, in *CreateBatchMedicineReq, opts ...grpc.CallOption) (*CreateBatchMedicineResp, error)
	UpdateMedicine(ctx context.Context, in *UpdateMedicineReq, opts ...grpc.CallOption) (*UpdateMedicineResp, error)
	UpdateMedicineActive(ctx context.Context, in *UpdateMedicineActiveReq, opts ...grpc.CallOption) (*UpdateMedicineActiveResp, error)
	DeleteMedicine(ctx context.Context, in *DeleteMedicineReq, opts ...grpc.CallOption) (*DeleteMedicineResp, error)
	SelectTagByMedicineId(ctx context.Context, in *SelectTagByMedicineIdReq, opts ...grpc.CallOption) (*SelectTagByMedicineIdResp, error)
	SelectInfoByMedicineNames(ctx context.Context, in *SelectInfoByMedicineNamesReq, opts ...grpc.CallOption) (*SelectInfoByMedicineNamesResp, error)
	UpdateMedicineActiveHash(ctx context.Context, in *UpdateMedicineActiveReq, opts ...grpc.CallOption) (*UpdateMedicineActiveResp, error)
	SelectByMedicineId(ctx context.Context, in *MedicineByMedicineIdReq, opts ...grpc.CallOption) (*MedicineByMedicineIdResp, error)
	//药品标签相关
	TagList(ctx context.Context, in *TagListReq, opts ...grpc.CallOption) (*TagListResp, error)
	CreateTag(ctx context.Context, in *CreateTagReq, opts ...grpc.CallOption) (*CreateTagResp, error)
	UpdateTag(ctx context.Context, in *UpdateTagReq, opts ...grpc.CallOption) (*UpdateTagResp, error)
	DeleteTag(ctx context.Context, in *DeleteTagReq, opts ...grpc.CallOption) (*DeleteTagResp, error)
	TagDetailList(ctx context.Context, in *TagDetailListReq, opts ...grpc.CallOption) (*TagDetailListResp, error)
	DeleteTagMedicine(ctx context.Context, in *DeleteTagMedicineReq, opts ...grpc.CallOption) (*DeleteTagMedicineResp, error)
	CreateTagMedicine(ctx context.Context, in *CreateTagMedicineReq, opts ...grpc.CallOption) (*CreateTagMedicineResp, error)
	CommonMedicineQuery(ctx context.Context, in *CommonMedicineQueryReq, opts ...grpc.CallOption) (*CommonMedicineQueryResp, error)
	//医疗机构相关
	ListMi(ctx context.Context, in *ListMiReq, opts ...grpc.CallOption) (*ListMiResp, error)
	CommonMI(ctx context.Context, in *CommonMIReq, opts ...grpc.CallOption) (*CommonMIResp, error)
	CommonMIInfo(ctx context.Context, in *CommonMIInfoReq, opts ...grpc.CallOption) (*CommonMIInfoResp, error)
	CreateOneMI(ctx context.Context, in *CreateOneMIReq, opts ...grpc.CallOption) (*CreateOneMIResp, error)
	UpdateMi(ctx context.Context, in *UpdateMiReq, opts ...grpc.CallOption) (*UpdateMiResp, error)
	UploadMiLogoUrl(ctx context.Context, in *UploadMiLogoUrlReq, opts ...grpc.CallOption) (*UploadMiLogoUrlResp, error)
	GetMiCodeById(ctx context.Context, in *GetMICodeReq, opts ...grpc.CallOption) (*GetMICodeResp, error)
	//配送企业相关
	ListCompany(ctx context.Context, in *ListCompanyReq, opts ...grpc.CallOption) (*ListCompanyResp, error)
	CreateOneCompany(ctx context.Context, in *CreateOneCompanyReq, opts ...grpc.CallOption) (*CreateOneCompanyResp, error)
	UpdateOneCompany(ctx context.Context, in *UpdateOneCompanyReq, opts ...grpc.CallOption) (*UpdateOneCompanyResp, error)
	CommonCompany(ctx context.Context, in *CommonCompanyReq, opts ...grpc.CallOption) (*CommonCompanyResp, error)
	GetCompanyInfo(ctx context.Context, in *CommonCompanyReq, opts ...grpc.CallOption) (*CompanyInfoResp, error)
	SelCompanyByNames(ctx context.Context, in *SelCompanyByNamesReq, opts ...grpc.CallOption) (*SelCompanyByNamesResp, error)
	QueryCompanyBankAccount(ctx context.Context, in *GetCompanyBankAccountReq, opts ...grpc.CallOption) (*GetCompanyBankAccountResp, error)
	UploadCompanyLogoUrl(ctx context.Context, in *UploadCompanyLogoUrlReq, opts ...grpc.CallOption) (*UploadCompanyLogoUrlResp, error)
	GetCompanysById(ctx context.Context, in *GetCompanyInfoReq, opts ...grpc.CallOption) (*GetCompanyInfoResp, error)
	//招采异常订单相关
	ListTpPlanErr(ctx context.Context, in *ListTpPlanErrReq, opts ...grpc.CallOption) (*ListTpPlanErrResp, error)
	UpdateErrShipmentPlan(ctx context.Context, in *UpdateErrShipmentPlanReq, opts ...grpc.CallOption) (*UpdateErrShipmentPlanResp, error)
	//招采单(配送)相关
	ListShipmentPlan(ctx context.Context, in *ListShipmentPlanReq, opts ...grpc.CallOption) (*ListShipmentPlanResp, error)
	CountShipmentPlan(ctx context.Context, in *CountShipmentPlanReq, opts ...grpc.CallOption) (*CountShipmentPlanResp, error)
	//配送单详情
	ShipmentReceiveOrder(ctx context.Context, in *ShipmentReceiveOrderReq, opts ...grpc.CallOption) (*ShipmentReceiveOrderResp, error)
	DetailShipmentOrder(ctx context.Context, in *DetailShipmentOrderReq, opts ...grpc.CallOption) (*DetailShipmentOrderResp, error)
	ListShipmentPlanForOrder(ctx context.Context, in *ListShipmentPlanForOrderReq, opts ...grpc.CallOption) (*ListShipmentPlanForOrderResp, error)
	//配送单创建
	CreateShipmentOrder(ctx context.Context, in *CreateShipmentOrderReq, opts ...grpc.CallOption) (*CreateShipmentOrderResp, error)
	//配送单列表
	ListShipmentOrder(ctx context.Context, in *ListShipmentOrderReq, opts ...grpc.CallOption) (*ListShipmentOrderResp, error)
	//配送单表头汇总
	CountShipmentOrder(ctx context.Context, in *CountShipmentOrderReq, opts ...grpc.CallOption) (*CountShipmentOrderResp, error)
	//配送单收获
	ReceiveShipmentOrder(ctx context.Context, in *ReceiveShipmentOrderReq, opts ...grpc.CallOption) (*ReceiveShipmentOrderResp, error)
	//根据招采单(配送计划)id查询合同编号
	GetContractByShipmentPlanId(ctx context.Context, in *GetContractByShipmentPlanIdReq, opts ...grpc.CallOption) (*GetContractByShipmentPlanIdResp, error)
	//配送单修改
	UpdateShipmentOrder(ctx context.Context, in *UpdateShipmentOrderReq, opts ...grpc.CallOption) (*UpdateShipmentOrderResp, error)
	//支付单汇总
	CountPayOrder(ctx context.Context, in *GetPayOrderReq, opts ...grpc.CallOption) (*GetPayOrderResp, error)
	//通用配置查询
	GetConfig(ctx context.Context, in *GetConfigReq, opts ...grpc.CallOption) (*GetConfigResp, error)
	//修改配置
	UpdateConfig(ctx context.Context, in *UpdateConfigReq, opts ...grpc.CallOption) (*UpdateConfigResp, error)
	//批量插入配置
	InsertConfigs(ctx context.Context, in *InsertConfigsReq, opts ...grpc.CallOption) (*InsertConfigsResp, error)
	//删除配置
	DeleteConfigs(ctx context.Context, in *DeleteConfigsReq, opts ...grpc.CallOption) (*DeleteConfigsResp, error)
	//配送企业绑定
	ListCompanyBind(ctx context.Context, in *ListBindReq, opts ...grpc.CallOption) (*ListBindResp, error)
	CompanyBind(ctx context.Context, in *BindReq, opts ...grpc.CallOption) (*BindResp, error)
	//医疗机构绑定
	ListMiBind(ctx context.Context, in *ListBindReq, opts ...grpc.CallOption) (*ListBindResp, error)
	MiBind(ctx context.Context, in *BindReq, opts ...grpc.CallOption) (*BindResp, error)
	//药品绑定绑定
	ListMedicineBind(ctx context.Context, in *ListBindReq, opts ...grpc.CallOption) (*ListBindResp, error)
	MedicineBind(ctx context.Context, in *BindReq, opts ...grpc.CallOption) (*BindResp, error)
	//医保局财务管理
	ListReimb(ctx context.Context, in *ListReimbReq, opts ...grpc.CallOption) (*ListReimbResp, error)
	PayReimb(ctx context.Context, in *PayReimbReq, opts ...grpc.CallOption) (*OpReimbResp, error)
	ApplyReimbQuota(ctx context.Context, in *ApplyReimbQuotaReq, opts ...grpc.CallOption) (*OpReimbResp, error)
	ApproveReimbQuota(ctx context.Context, in *ApproveReimbQuotaReq, opts ...grpc.CallOption) (*OpReimbResp, error)
	UpdateReimbReport(ctx context.Context, in *UpdateReimbReportReq, opts ...grpc.CallOption) (*OpReimbResp, error)
	//医疗机构专户填平额度设置
	GetMiSpecialConfig(ctx context.Context, in *GetMiSpecialConfigReq, opts ...grpc.CallOption) (*GetMiSpecialConfigResp, error)
	UpdateMiSpecialConfig(ctx context.Context, in *UpdateMiSpecialConfigReq, opts ...grpc.CallOption) (*UpdateMiSpecialConfigResp, error)
	//医疗机构基础信息
	QueryMiInfo(ctx context.Context, in *GetMiInfoReq, opts ...grpc.CallOption) (*GetMiInfoResp, error)
	CreateBankAccount(ctx context.Context, in *CreateBankAccountReq, opts ...grpc.CallOption) (*CreateBankAccountResp, error)
	//开发者配置
	CreateMiDevelopUser(ctx context.Context, in *CreateMiDevelopUserReq, opts ...grpc.CallOption) (*CreateMiDevelopUserResp, error)
	GetClientPermission(ctx context.Context, in *ClientPermissionReq, opts ...grpc.CallOption) (*ClientPermissionResp, error)
	SetClientDevelop(ctx context.Context, in *SetClientDevelopReq, opts ...grpc.CallOption) (*SetClientDevelopResp, error)
	SaveClientPermission(ctx context.Context, in *SaveClientPermissionReq, opts ...grpc.CallOption) (*SaveClientPermissionResp, error)
	MedicineBindList(ctx context.Context, in *ListMedicineBindListReq, opts ...grpc.CallOption) (*ListMedicineBindListResp, error)
	MedicineBindCode(ctx context.Context, in *CreateStockMedcineCodeBindReq, opts ...grpc.CallOption) (*CreateStockMedcineCodeBindResp, error)
	//同步库存mi
	SyncInfoMedicineMiStock(ctx context.Context, in *MedicineMiStockReq, opts ...grpc.CallOption) (*MedicineMiStockResp, error)
	SyncInfoMedicineCompanyStock(ctx context.Context, in *MedicineCompanyStockReq, opts ...grpc.CallOption) (*MedicineCompanyStockResp, error)
	//库存查询
	MedicineStockMiListStock(ctx context.Context, in *MedicineStockMiListReq, opts ...grpc.CallOption) (*MedicineStockMiListResp, error)
	//医疗机构（财务管理)
	ReimbursementLists(ctx context.Context, in *ReimbursementListReq, opts ...grpc.CallOption) (*ReimbursementListResp, error)
	ReimbursementApplyQuota(ctx context.Context, in *ReimbursementApplyQuotaReq, opts ...grpc.CallOption) (*ReimbursementApplyQuotaResp, error)
	//获取省合同信息
	GetWsGetContractList(ctx context.Context, in *GetWsGetContractListReq, opts ...grpc.CallOption) (*GetWsGetContractListResp, error)
	//配送计划数据测试数据
	SaveShipmentplan(ctx context.Context, in *ShipmentPlanListReq, opts ...grpc.CallOption) (*ShipmentPlanListResp, error)
	//合同测试数据
	SaveTenderContractInfo(ctx context.Context, in *TenderContractInfoReq, opts ...grpc.CallOption) (*TenderContractInfoResp, error)
	//建设单位
	ListConstruction(ctx context.Context, in *ListConstructionReq, opts ...grpc.CallOption) (*ListConstructionResp, error)
	CommonConstruction(ctx context.Context, in *CommonConstructionReq, opts ...grpc.CallOption) (*CommonConstructionResp, error)
	GetConstructionInfo(ctx context.Context, in *GetConstructionInfoReq, opts ...grpc.CallOption) (*GetConstructionInfoResp, error)
	CreateOneConstruction(ctx context.Context, in *CreateOneConstructionReq, opts ...grpc.CallOption) (*CreateOneConstructionResp, error)
	CreateHashConstruction(ctx context.Context, in *CreateHashConstructionReq, opts ...grpc.CallOption) (*CreateHashConstructionResp, error)
	UpdateOneConstruction(ctx context.Context, in *UpdateOneConstructionReq, opts ...grpc.CallOption) (*UpdateOneConstructionResp, error)
	UpdateHashConstruction(ctx context.Context, in *UpdateHashConstructionReq, opts ...grpc.CallOption) (*UpdateHashConstructionResp, error)
	UploadConstructionLogoUrl(ctx context.Context, in *UploadConstructionLogoUrlReq, opts ...grpc.CallOption) (*UploadConstructionLogoUrlResp, error)
	DeleteConstruction(ctx context.Context, in *DeleteConstructionReq, opts ...grpc.CallOption) (*DeleteConstructionResp, error)
	//施工单位
	ListBuild(ctx context.Context, in *ListBuildReq, opts ...grpc.CallOption) (*ListBuildResp, error)
	CommonBuild(ctx context.Context, in *CommonBuildReq, opts ...grpc.CallOption) (*CommonBuildResp, error)
	GetBuildInfo(ctx context.Context, in *GetBuildInfoReq, opts ...grpc.CallOption) (*GetBuildInfoResp, error)
	CreateOneBuild(ctx context.Context, in *CreateOneBuildReq, opts ...grpc.CallOption) (*CreateOneBuildResp, error)
	CreateHashBuild(ctx context.Context, in *CreateHashBuildReq, opts ...grpc.CallOption) (*CreateHashBuildResp, error)
	UpdateOneBuild(ctx context.Context, in *UpdateOneBuildReq, opts ...grpc.CallOption) (*UpdateOneBuildResp, error)
	UpdateHashBuild(ctx context.Context, in *UpdateHashBuildReq, opts ...grpc.CallOption) (*UpdateHashBuildResp, error)
	UploadBuildLogoUrl(ctx context.Context, in *UploadBuildLogoUrlReq, opts ...grpc.CallOption) (*UploadBuildLogoUrlResp, error)
	DeleteBuild(ctx context.Context, in *DeleteBuildReq, opts ...grpc.CallOption) (*DeleteBuildResp, error)
	//监理单位
	ListSupervisor(ctx context.Context, in *ListSupervisorReq, opts ...grpc.CallOption) (*ListSupervisorResp, error)
	CommonSupervisor(ctx context.Context, in *CommonSupervisorReq, opts ...grpc.CallOption) (*CommonSupervisorResp, error)
	GetSupervisorInfo(ctx context.Context, in *GetSupervisorInfoReq, opts ...grpc.CallOption) (*GetSupervisorInfoResp, error)
	CreateOneSupervisor(ctx context.Context, in *CreateOneSupervisorReq, opts ...grpc.CallOption) (*CreateOneSupervisorResp, error)
	CreateHashSupervisor(ctx context.Context, in *CreateHashSupervisorReq, opts ...grpc.CallOption) (*CreateHashSupervisorResp, error)
	UpdateOneSupervisor(ctx context.Context, in *UpdateOneSupervisorReq, opts ...grpc.CallOption) (*UpdateOneSupervisorResp, error)
	UpdateHashSupervisor(ctx context.Context, in *UpdateHashSupervisorReq, opts ...grpc.CallOption) (*UpdateHashSupervisorResp, error)
	UploadSupervisorLogoUrl(ctx context.Context, in *UploadSupervisorLogoUrlReq, opts ...grpc.CallOption) (*UploadSupervisorLogoUrlResp, error)
	DeleteSupervisor(ctx context.Context, in *DeleteSupervisorReq, opts ...grpc.CallOption) (*DeleteSupervisorResp, error)
	//监管单位
	ListGoverment(ctx context.Context, in *ListGovermentReq, opts ...grpc.CallOption) (*ListGovermentResp, error)
	CommonGoverment(ctx context.Context, in *CommonGovermentReq, opts ...grpc.CallOption) (*CommonGovermentResp, error)
	GetGovermentInfo(ctx context.Context, in *GetGovermentInfoReq, opts ...grpc.CallOption) (*GetGovermentInfoResp, error)
	CreateOneGoverment(ctx context.Context, in *CreateOneGovermentReq, opts ...grpc.CallOption) (*CreateOneGovermentResp, error)
	CreateHashGoverment(ctx context.Context, in *CreateHashGovermentReq, opts ...grpc.CallOption) (*CreateHashGovermentResp, error)
	UpdateOneGoverment(ctx context.Context, in *UpdateOneGovermentReq, opts ...grpc.CallOption) (*UpdateOneGovermentResp, error)
	UpdateHashGoverment(ctx context.Context, in *UpdateHashGovermentReq, opts ...grpc.CallOption) (*UpdateHashGovermentResp, error)
	UploadGovermentLogoUrl(ctx context.Context, in *UploadGovermentLogoUrlReq, opts ...grpc.CallOption) (*UploadGovermentLogoUrlResp, error)
	DeleteGoverment(ctx context.Context, in *DeleteGovermentReq, opts ...grpc.CallOption) (*DeleteGovermentResp, error)
	//流程审批相关
	ListProcess(ctx context.Context, in *ListProcessReq, opts ...grpc.CallOption) (*ListProcessResp, error)
	CommonProcess(ctx context.Context, in *CommonProcessReq, opts ...grpc.CallOption) (*CommonProcessResp, error)
	CreateOneProcess(ctx context.Context, in *CreateOneProcessReq, opts ...grpc.CallOption) (*CreateOneProcessResp, error)
	CreateHashProcess(ctx context.Context, in *CreateHashProcessReq, opts ...grpc.CallOption) (*CreateHashProcessResp, error)
	UpdateOneProcess(ctx context.Context, in *UpdateProcessReq, opts ...grpc.CallOption) (*UpdateProcessResp, error)
	UpdateHashProcess(ctx context.Context, in *UpdateHashProcessReq, opts ...grpc.CallOption) (*UpdateHashProcessResp, error)
	GetProcessCodeById(ctx context.Context, in *GetProcessCodeReq, opts ...grpc.CallOption) (*GetProcessCodeResp, error)
	UpdateOneProcessApprove(ctx context.Context, in *UpdateProcessApproveReq, opts ...grpc.CallOption) (*UpdateProcessResp, error)
	DeleteProcess(ctx context.Context, in *DeleteProcessReq, opts ...grpc.CallOption) (*DeleteProcessResp, error)
	UpdateProcessSort(ctx context.Context, in *UpdateProcessSortReq, opts ...grpc.CallOption) (*UpdateProcessSortResp, error)
	GetProcessInfo(ctx context.Context, in *GetProcessInfoReq, opts ...grpc.CallOption) (*GetProcessInfoResp, error)
	//合同信息相关
	ListContract(ctx context.Context, in *ListContractReq, opts ...grpc.CallOption) (*ListContractResp, error)
	GetOneContract(ctx context.Context, in *GetOneContractReq, opts ...grpc.CallOption) (*GetOneContractResp, error)
	CreateOneContract(ctx context.Context, in *CreateOneContractReq, opts ...grpc.CallOption) (*CreateOneContractResp, error)
	UpdateOneContract(ctx context.Context, in *UpdateOneContractReq, opts ...grpc.CallOption) (*UpdateOneContractResp, error)
	CreateContractHash(ctx context.Context, in *CreateContractHashReq, opts ...grpc.CallOption) (*CreateContractHashResp, error)
	UpdateContractHash(ctx context.Context, in *UpdateContractHashReq, opts ...grpc.CallOption) (*UpdateContractHashResp, error)
	DeleteOneContract(ctx context.Context, in *DeleteOneContractReq, opts ...grpc.CallOption) (*DeleteOneContractResp, error)
	CommonProjectPhase(ctx context.Context, in *CommonProjectPhaseReq, opts ...grpc.CallOption) (*CommonProjectPhaseResp, error)
	GetBuildInfoCodeById(ctx context.Context, in *GetBuildInfoCodeByIdReq, opts ...grpc.CallOption) (*GetBuildInfoCodeByIdResp, error)
	GGetSupervisorCodeById(ctx context.Context, in *GetSupervisorCodeByIdReq, opts ...grpc.CallOption) (*GetSupervisorCodeByIdResp, error)
	GetGetGovermentCodeById(ctx context.Context, in *GetGovermentCodeByIdReq, opts ...grpc.CallOption) (*GetGovermentCodeByIdResp, error)
	//开票信息
	ListInvoice(ctx context.Context, in *ListInvoiceReq, opts ...grpc.CallOption) (*ListInvoiceResp, error)
	GetOneInvoice(ctx context.Context, in *GetOneInvoiceReq, opts ...grpc.CallOption) (*GetOneInvoiceResp, error)
	CreateOneInvoice(ctx context.Context, in *CreateOneInvoiceReq, opts ...grpc.CallOption) (*CreateOneInvoiceResp, error)
	UpdateOneInvoice(ctx context.Context, in *UpdateOneInvoiceReq, opts ...grpc.CallOption) (*UpdateOneInvoiceResp, error)
	CreateInvoiceHash(ctx context.Context, in *CreateInvoiceHashReq, opts ...grpc.CallOption) (*CreateInvoiceHashResp, error)
	UpdateInvoiceHash(ctx context.Context, in *UpdateInvoiceHashReq, opts ...grpc.CallOption) (*UpdateInvoiceHashResp, error)
	DeleteOneInvoice(ctx context.Context, in *DeleteOneInvoiceReq, opts ...grpc.CallOption) (*DeleteOneInvoiceResp, error)
	ReceiveInvoiceHash(ctx context.Context, in *ReceiveInvoiceHashReq, opts ...grpc.CallOption) (*ReceiveInvoiceHashResp, error)
	PayInvoiceHash(ctx context.Context, in *PayInvoiceHashReq, opts ...grpc.CallOption) (*PayInvoiceHashResp, error)
	//项目相关
	CreateOneProject(ctx context.Context, in *ProjectReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	UpdateOneProject(ctx context.Context, in *ProjectReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	DeleteOneProject(ctx context.Context, in *ProjectReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	GetOneProject(ctx context.Context, in *ProjectReq, opts ...grpc.CallOption) (*ProjectsResp, error)
	ListProject(ctx context.Context, in *ProjectReq, opts ...grpc.CallOption) (*ProjectsResp, error)
	CreateProjectHash(ctx context.Context, in *CreateProjectHashReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	UpdateProjectHash(ctx context.Context, in *UpdateProjectHashReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	CommonProject(ctx context.Context, in *CommonProjectReq, opts ...grpc.CallOption) (*CommonProjectResp, error)
	//进度计划相关
	CreateOneProgressPlan(ctx context.Context, in *ProgressPlanReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	UpdateOneProgressPlan(ctx context.Context, in *ProgressPlanReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	DeleteOneProgressPlan(ctx context.Context, in *ProgressPlanReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	GetOneProgressPlan(ctx context.Context, in *ProgressPlanReq, opts ...grpc.CallOption) (*ProgressPlansResp, error)
	ListProgressPlan(ctx context.Context, in *ProgressPlanReq, opts ...grpc.CallOption) (*ProgressPlansResp, error)
	CreateProgressPlanHash(ctx context.Context, in *CreateProgressPlanHashReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	UpdateProgressPlanHash(ctx context.Context, in *UpdateProgressPlanHashReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	//实际进度相关
	CreateOneProgressActual(ctx context.Context, in *ProgressActualReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	UpdateOneProgressActual(ctx context.Context, in *ProgressActualReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	DeleteOneProgressActual(ctx context.Context, in *ProgressActualReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	GetOneProgressActual(ctx context.Context, in *ProgressActualReq, opts ...grpc.CallOption) (*ProgressActualsResp, error)
	ListProgressActual(ctx context.Context, in *ProgressActualReq, opts ...grpc.CallOption) (*ProgressActualsResp, error)
	CreateProgressActualHash(ctx context.Context, in *CreateProgressActualHashReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	UpdateProgressActualHash(ctx context.Context, in *UpdateProgressActualHashReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	//质量巡检相关
	CreateOneQualityInspection(ctx context.Context, in *QualityInspectionReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	UpdateOneQualityInspection(ctx context.Context, in *QualityInspectionReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	DeleteOneQualityInspection(ctx context.Context, in *QualityInspectionReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	GetOneQualityInspection(ctx context.Context, in *QualityInspectionReq, opts ...grpc.CallOption) (*QualityInspectionsResp, error)
	ListQualityInspection(ctx context.Context, in *QualityInspectionReq, opts ...grpc.CallOption) (*QualityInspectionsResp, error)
	CreateQualityInspectionHash(ctx context.Context, in *CreateQualityInspectionHashReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	UpdateQualityInspectionHash(ctx context.Context, in *UpdateQualityInspectionHashReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	UpdateOneQualityRectify(ctx context.Context, in *QualityInspectionReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	UpdateQualityRectifyHash(ctx context.Context, in *UpdateQualityInspectionHashReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	GetOneQualityRectify(ctx context.Context, in *QualityInspectionReq, opts ...grpc.CallOption) (*QualityInspectionsResp, error)
	ListQualityRectify(ctx context.Context, in *QualityInspectionReq, opts ...grpc.CallOption) (*QualityInspectionsResp, error)
	UpdateOneQualityReview(ctx context.Context, in *QualityInspectionReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	UpdateQualityReviewHash(ctx context.Context, in *UpdateQualityInspectionHashReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	GetOneQualityReview(ctx context.Context, in *QualityInspectionReq, opts ...grpc.CallOption) (*QualityInspectionsResp, error)
	ListQualityReview(ctx context.Context, in *QualityInspectionReq, opts ...grpc.CallOption) (*QualityInspectionsResp, error)
	//===SafetyInspection rpc begin===
	CreateOneSafetyInspection(ctx context.Context, in *SafetyInspectionReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	UpdateOneSafetyInspection(ctx context.Context, in *SafetyInspectionReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	DeleteOneSafetyInspection(ctx context.Context, in *SafetyInspectionIdsReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	GetOneSafetyInspection(ctx context.Context, in *SafetyInspectionIdsReq, opts ...grpc.CallOption) (*SafetyInspectionsResp, error)
	ListSafetyInspection(ctx context.Context, in *ListSafetyInspectionReq, opts ...grpc.CallOption) (*SafetyInspectionsResp, error)
	CreateSafetyInspectionHash(ctx context.Context, in *SafetyInspectionReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	UpdateSafetyInspectionHash(ctx context.Context, in *SafetyInspectionReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	UpdateSafetyRectifyHash(ctx context.Context, in *SafetyInspectionReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	UpdateSafetyReviewHash(ctx context.Context, in *SafetyInspectionReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	GetSafetyInspectionHash(ctx context.Context, in *SafetyInspectionIdsReq, opts ...grpc.CallOption) (*GetSafetyInspectionHashResp, error)
	//===SafetyLog rpc begin===
	CreateOneSafetyLog(ctx context.Context, in *SafetyLogReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	UpdateOneSafetyLog(ctx context.Context, in *SafetyLogReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	DeleteOneSafetyLog(ctx context.Context, in *SafetyLogIdsReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	GetOneSafetyLog(ctx context.Context, in *SafetyLogIdsReq, opts ...grpc.CallOption) (*SafetyLogsResp, error)
	ListSafetyLog(ctx context.Context, in *ListSafetyLogReq, opts ...grpc.CallOption) (*SafetyLogsResp, error)
	CreateSafetyLogHash(ctx context.Context, in *SafetyLogReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	UpdateSafetyLogHash(ctx context.Context, in *SafetyLogReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	GetSafetyLogHash(ctx context.Context, in *SafetyLogIdsReq, opts ...grpc.CallOption) (*GetSafetyLogHashResp, error)
	//===Workman rpc begin===
	CreateOneWorkman(ctx context.Context, in *WorkmanReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	UpdateOneWorkman(ctx context.Context, in *WorkmanReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	DeleteOneWorkman(ctx context.Context, in *WorkmanIdsReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	GetOneWorkman(ctx context.Context, in *WorkmanIdsReq, opts ...grpc.CallOption) (*WorkmansResp, error)
	ListWorkman(ctx context.Context, in *ListWorkmanReq, opts ...grpc.CallOption) (*WorkmansResp, error)
	CreateWorkmanHash(ctx context.Context, in *WorkmanReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	UpdateWorkmanHash(ctx context.Context, in *WorkmanReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	GetWorkmanHash(ctx context.Context, in *WorkmanIdsReq, opts ...grpc.CallOption) (*GetWorkmanHashResp, error)
	ImportWorkman(ctx context.Context, in *WorkmansReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	BatchWorkmanHash(ctx context.Context, in *WorkmansReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	//===WorkmanAttendance rpc begin===
	CreateOneWorkmanAttendance(ctx context.Context, in *WorkmanAttendanceReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	UpdateOneWorkmanAttendance(ctx context.Context, in *WorkmanAttendanceReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	DeleteOneWorkmanAttendance(ctx context.Context, in *WorkmanAttendanceIdsReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	GetOneWorkmanAttendance(ctx context.Context, in *WorkmanAttendanceIdsReq, opts ...grpc.CallOption) (*WorkmanAttendancesResp, error)
	ListWorkmanAttendance(ctx context.Context, in *ListWorkmanAttendanceReq, opts ...grpc.CallOption) (*WorkmanAttendancesResp, error)
	CreateWorkmanAttendanceHash(ctx context.Context, in *WorkmanAttendanceReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	UpdateWorkmanAttendanceHash(ctx context.Context, in *WorkmanAttendanceReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	GetWorkmanAttendanceHash(ctx context.Context, in *WorkmanAttendanceIdsReq, opts ...grpc.CallOption) (*GetWorkmanAttendanceHashResp, error)
	ImportWorkmanAttendance(ctx context.Context, in *WorkmanAttendancesReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	BatchWorkmanAttendanceHash(ctx context.Context, in *WorkmanAttendancesReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	//===Material rpc begin===
	CreateOneMaterial(ctx context.Context, in *MaterialReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	UpdateOneMaterial(ctx context.Context, in *MaterialReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	DeleteOneMaterial(ctx context.Context, in *MaterialIdsReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	GetOneMaterial(ctx context.Context, in *MaterialIdsReq, opts ...grpc.CallOption) (*MaterialsResp, error)
	ListMaterial(ctx context.Context, in *ListMaterialReq, opts ...grpc.CallOption) (*MaterialsResp, error)
	CreateMaterialHash(ctx context.Context, in *MaterialReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	UpdateMaterialHash(ctx context.Context, in *MaterialReq, opts ...grpc.CallOption) (*OperateIntegerResp, error)
	GetMaterialHash(ctx context.Context, in *MaterialIdsReq, opts ...grpc.CallOption) (*GetMaterialHashResp, error)
	ListMaterialDistinctName(ctx context.Context, in *ListMaterialDistinctNameReq, opts ...grpc.CallOption) (*ListMaterialDistinctNameResp, error)
}

type managerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerServiceClient(cc grpc.ClientConnInterface) ManagerServiceClient {
	return &managerServiceClient{cc}
}

func (c *managerServiceClient) ListMedicine(ctx context.Context, in *MedicineListReq, opts ...grpc.CallOption) (*MedicineListResp, error) {
	out := new(MedicineListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) MedicineListForQuery(ctx context.Context, in *MedicineListForQueryReq, opts ...grpc.CallOption) (*MedicineListForQueryResp, error) {
	out := new(MedicineListForQueryResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/MedicineListForQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CommonListCnaps(ctx context.Context, in *CommonListCnapsReq, opts ...grpc.CallOption) (*CommonListCnapsResp, error) {
	out := new(CommonListCnapsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CommonListCnaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CommonListTag(ctx context.Context, in *CommonListTagReq, opts ...grpc.CallOption) (*CommonListTagResp, error) {
	out := new(CommonListTagResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CommonListTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateMedicine(ctx context.Context, in *CreateMedicineReq, opts ...grpc.CallOption) (*CreateMedicineResp, error) {
	out := new(CreateMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateBatchMedicine(ctx context.Context, in *CreateBatchMedicineReq, opts ...grpc.CallOption) (*CreateBatchMedicineResp, error) {
	out := new(CreateBatchMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateBatchMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateMedicine(ctx context.Context, in *UpdateMedicineReq, opts ...grpc.CallOption) (*UpdateMedicineResp, error) {
	out := new(UpdateMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateMedicineActive(ctx context.Context, in *UpdateMedicineActiveReq, opts ...grpc.CallOption) (*UpdateMedicineActiveResp, error) {
	out := new(UpdateMedicineActiveResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateMedicineActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteMedicine(ctx context.Context, in *DeleteMedicineReq, opts ...grpc.CallOption) (*DeleteMedicineResp, error) {
	out := new(DeleteMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SelectTagByMedicineId(ctx context.Context, in *SelectTagByMedicineIdReq, opts ...grpc.CallOption) (*SelectTagByMedicineIdResp, error) {
	out := new(SelectTagByMedicineIdResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/SelectTagByMedicineId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SelectInfoByMedicineNames(ctx context.Context, in *SelectInfoByMedicineNamesReq, opts ...grpc.CallOption) (*SelectInfoByMedicineNamesResp, error) {
	out := new(SelectInfoByMedicineNamesResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/SelectInfoByMedicineNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateMedicineActiveHash(ctx context.Context, in *UpdateMedicineActiveReq, opts ...grpc.CallOption) (*UpdateMedicineActiveResp, error) {
	out := new(UpdateMedicineActiveResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateMedicineActiveHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SelectByMedicineId(ctx context.Context, in *MedicineByMedicineIdReq, opts ...grpc.CallOption) (*MedicineByMedicineIdResp, error) {
	out := new(MedicineByMedicineIdResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/SelectByMedicineId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) TagList(ctx context.Context, in *TagListReq, opts ...grpc.CallOption) (*TagListResp, error) {
	out := new(TagListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/TagList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateTag(ctx context.Context, in *CreateTagReq, opts ...grpc.CallOption) (*CreateTagResp, error) {
	out := new(CreateTagResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateTag(ctx context.Context, in *UpdateTagReq, opts ...grpc.CallOption) (*UpdateTagResp, error) {
	out := new(UpdateTagResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteTag(ctx context.Context, in *DeleteTagReq, opts ...grpc.CallOption) (*DeleteTagResp, error) {
	out := new(DeleteTagResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) TagDetailList(ctx context.Context, in *TagDetailListReq, opts ...grpc.CallOption) (*TagDetailListResp, error) {
	out := new(TagDetailListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/TagDetailList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteTagMedicine(ctx context.Context, in *DeleteTagMedicineReq, opts ...grpc.CallOption) (*DeleteTagMedicineResp, error) {
	out := new(DeleteTagMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteTagMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateTagMedicine(ctx context.Context, in *CreateTagMedicineReq, opts ...grpc.CallOption) (*CreateTagMedicineResp, error) {
	out := new(CreateTagMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateTagMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CommonMedicineQuery(ctx context.Context, in *CommonMedicineQueryReq, opts ...grpc.CallOption) (*CommonMedicineQueryResp, error) {
	out := new(CommonMedicineQueryResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CommonMedicineQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListMi(ctx context.Context, in *ListMiReq, opts ...grpc.CallOption) (*ListMiResp, error) {
	out := new(ListMiResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListMi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CommonMI(ctx context.Context, in *CommonMIReq, opts ...grpc.CallOption) (*CommonMIResp, error) {
	out := new(CommonMIResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CommonMI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CommonMIInfo(ctx context.Context, in *CommonMIInfoReq, opts ...grpc.CallOption) (*CommonMIInfoResp, error) {
	out := new(CommonMIInfoResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CommonMIInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneMI(ctx context.Context, in *CreateOneMIReq, opts ...grpc.CallOption) (*CreateOneMIResp, error) {
	out := new(CreateOneMIResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneMI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateMi(ctx context.Context, in *UpdateMiReq, opts ...grpc.CallOption) (*UpdateMiResp, error) {
	out := new(UpdateMiResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateMi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UploadMiLogoUrl(ctx context.Context, in *UploadMiLogoUrlReq, opts ...grpc.CallOption) (*UploadMiLogoUrlResp, error) {
	out := new(UploadMiLogoUrlResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UploadMiLogoUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetMiCodeById(ctx context.Context, in *GetMICodeReq, opts ...grpc.CallOption) (*GetMICodeResp, error) {
	out := new(GetMICodeResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetMiCodeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListCompany(ctx context.Context, in *ListCompanyReq, opts ...grpc.CallOption) (*ListCompanyResp, error) {
	out := new(ListCompanyResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneCompany(ctx context.Context, in *CreateOneCompanyReq, opts ...grpc.CallOption) (*CreateOneCompanyResp, error) {
	out := new(CreateOneCompanyResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneCompany(ctx context.Context, in *UpdateOneCompanyReq, opts ...grpc.CallOption) (*UpdateOneCompanyResp, error) {
	out := new(UpdateOneCompanyResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CommonCompany(ctx context.Context, in *CommonCompanyReq, opts ...grpc.CallOption) (*CommonCompanyResp, error) {
	out := new(CommonCompanyResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CommonCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetCompanyInfo(ctx context.Context, in *CommonCompanyReq, opts ...grpc.CallOption) (*CompanyInfoResp, error) {
	out := new(CompanyInfoResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetCompanyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SelCompanyByNames(ctx context.Context, in *SelCompanyByNamesReq, opts ...grpc.CallOption) (*SelCompanyByNamesResp, error) {
	out := new(SelCompanyByNamesResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/SelCompanyByNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) QueryCompanyBankAccount(ctx context.Context, in *GetCompanyBankAccountReq, opts ...grpc.CallOption) (*GetCompanyBankAccountResp, error) {
	out := new(GetCompanyBankAccountResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/QueryCompanyBankAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UploadCompanyLogoUrl(ctx context.Context, in *UploadCompanyLogoUrlReq, opts ...grpc.CallOption) (*UploadCompanyLogoUrlResp, error) {
	out := new(UploadCompanyLogoUrlResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UploadCompanyLogoUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetCompanysById(ctx context.Context, in *GetCompanyInfoReq, opts ...grpc.CallOption) (*GetCompanyInfoResp, error) {
	out := new(GetCompanyInfoResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetCompanysById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListTpPlanErr(ctx context.Context, in *ListTpPlanErrReq, opts ...grpc.CallOption) (*ListTpPlanErrResp, error) {
	out := new(ListTpPlanErrResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListTpPlanErr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateErrShipmentPlan(ctx context.Context, in *UpdateErrShipmentPlanReq, opts ...grpc.CallOption) (*UpdateErrShipmentPlanResp, error) {
	out := new(UpdateErrShipmentPlanResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateErrShipmentPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListShipmentPlan(ctx context.Context, in *ListShipmentPlanReq, opts ...grpc.CallOption) (*ListShipmentPlanResp, error) {
	out := new(ListShipmentPlanResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListShipmentPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CountShipmentPlan(ctx context.Context, in *CountShipmentPlanReq, opts ...grpc.CallOption) (*CountShipmentPlanResp, error) {
	out := new(CountShipmentPlanResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CountShipmentPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ShipmentReceiveOrder(ctx context.Context, in *ShipmentReceiveOrderReq, opts ...grpc.CallOption) (*ShipmentReceiveOrderResp, error) {
	out := new(ShipmentReceiveOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ShipmentReceiveOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DetailShipmentOrder(ctx context.Context, in *DetailShipmentOrderReq, opts ...grpc.CallOption) (*DetailShipmentOrderResp, error) {
	out := new(DetailShipmentOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DetailShipmentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListShipmentPlanForOrder(ctx context.Context, in *ListShipmentPlanForOrderReq, opts ...grpc.CallOption) (*ListShipmentPlanForOrderResp, error) {
	out := new(ListShipmentPlanForOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListShipmentPlanForOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateShipmentOrder(ctx context.Context, in *CreateShipmentOrderReq, opts ...grpc.CallOption) (*CreateShipmentOrderResp, error) {
	out := new(CreateShipmentOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateShipmentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListShipmentOrder(ctx context.Context, in *ListShipmentOrderReq, opts ...grpc.CallOption) (*ListShipmentOrderResp, error) {
	out := new(ListShipmentOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListShipmentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CountShipmentOrder(ctx context.Context, in *CountShipmentOrderReq, opts ...grpc.CallOption) (*CountShipmentOrderResp, error) {
	out := new(CountShipmentOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CountShipmentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ReceiveShipmentOrder(ctx context.Context, in *ReceiveShipmentOrderReq, opts ...grpc.CallOption) (*ReceiveShipmentOrderResp, error) {
	out := new(ReceiveShipmentOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ReceiveShipmentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetContractByShipmentPlanId(ctx context.Context, in *GetContractByShipmentPlanIdReq, opts ...grpc.CallOption) (*GetContractByShipmentPlanIdResp, error) {
	out := new(GetContractByShipmentPlanIdResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetContractByShipmentPlanId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateShipmentOrder(ctx context.Context, in *UpdateShipmentOrderReq, opts ...grpc.CallOption) (*UpdateShipmentOrderResp, error) {
	out := new(UpdateShipmentOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateShipmentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CountPayOrder(ctx context.Context, in *GetPayOrderReq, opts ...grpc.CallOption) (*GetPayOrderResp, error) {
	out := new(GetPayOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CountPayOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetConfig(ctx context.Context, in *GetConfigReq, opts ...grpc.CallOption) (*GetConfigResp, error) {
	out := new(GetConfigResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateConfig(ctx context.Context, in *UpdateConfigReq, opts ...grpc.CallOption) (*UpdateConfigResp, error) {
	out := new(UpdateConfigResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) InsertConfigs(ctx context.Context, in *InsertConfigsReq, opts ...grpc.CallOption) (*InsertConfigsResp, error) {
	out := new(InsertConfigsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/InsertConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteConfigs(ctx context.Context, in *DeleteConfigsReq, opts ...grpc.CallOption) (*DeleteConfigsResp, error) {
	out := new(DeleteConfigsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListCompanyBind(ctx context.Context, in *ListBindReq, opts ...grpc.CallOption) (*ListBindResp, error) {
	out := new(ListBindResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListCompanyBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CompanyBind(ctx context.Context, in *BindReq, opts ...grpc.CallOption) (*BindResp, error) {
	out := new(BindResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CompanyBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListMiBind(ctx context.Context, in *ListBindReq, opts ...grpc.CallOption) (*ListBindResp, error) {
	out := new(ListBindResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListMiBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) MiBind(ctx context.Context, in *BindReq, opts ...grpc.CallOption) (*BindResp, error) {
	out := new(BindResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/MiBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListMedicineBind(ctx context.Context, in *ListBindReq, opts ...grpc.CallOption) (*ListBindResp, error) {
	out := new(ListBindResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListMedicineBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) MedicineBind(ctx context.Context, in *BindReq, opts ...grpc.CallOption) (*BindResp, error) {
	out := new(BindResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/MedicineBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListReimb(ctx context.Context, in *ListReimbReq, opts ...grpc.CallOption) (*ListReimbResp, error) {
	out := new(ListReimbResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListReimb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) PayReimb(ctx context.Context, in *PayReimbReq, opts ...grpc.CallOption) (*OpReimbResp, error) {
	out := new(OpReimbResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/PayReimb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ApplyReimbQuota(ctx context.Context, in *ApplyReimbQuotaReq, opts ...grpc.CallOption) (*OpReimbResp, error) {
	out := new(OpReimbResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ApplyReimbQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ApproveReimbQuota(ctx context.Context, in *ApproveReimbQuotaReq, opts ...grpc.CallOption) (*OpReimbResp, error) {
	out := new(OpReimbResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ApproveReimbQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateReimbReport(ctx context.Context, in *UpdateReimbReportReq, opts ...grpc.CallOption) (*OpReimbResp, error) {
	out := new(OpReimbResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateReimbReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetMiSpecialConfig(ctx context.Context, in *GetMiSpecialConfigReq, opts ...grpc.CallOption) (*GetMiSpecialConfigResp, error) {
	out := new(GetMiSpecialConfigResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetMiSpecialConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateMiSpecialConfig(ctx context.Context, in *UpdateMiSpecialConfigReq, opts ...grpc.CallOption) (*UpdateMiSpecialConfigResp, error) {
	out := new(UpdateMiSpecialConfigResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateMiSpecialConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) QueryMiInfo(ctx context.Context, in *GetMiInfoReq, opts ...grpc.CallOption) (*GetMiInfoResp, error) {
	out := new(GetMiInfoResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/QueryMiInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateBankAccount(ctx context.Context, in *CreateBankAccountReq, opts ...grpc.CallOption) (*CreateBankAccountResp, error) {
	out := new(CreateBankAccountResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateBankAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateMiDevelopUser(ctx context.Context, in *CreateMiDevelopUserReq, opts ...grpc.CallOption) (*CreateMiDevelopUserResp, error) {
	out := new(CreateMiDevelopUserResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateMiDevelopUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetClientPermission(ctx context.Context, in *ClientPermissionReq, opts ...grpc.CallOption) (*ClientPermissionResp, error) {
	out := new(ClientPermissionResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetClientPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SetClientDevelop(ctx context.Context, in *SetClientDevelopReq, opts ...grpc.CallOption) (*SetClientDevelopResp, error) {
	out := new(SetClientDevelopResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/SetClientDevelop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SaveClientPermission(ctx context.Context, in *SaveClientPermissionReq, opts ...grpc.CallOption) (*SaveClientPermissionResp, error) {
	out := new(SaveClientPermissionResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/SaveClientPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) MedicineBindList(ctx context.Context, in *ListMedicineBindListReq, opts ...grpc.CallOption) (*ListMedicineBindListResp, error) {
	out := new(ListMedicineBindListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/MedicineBindList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) MedicineBindCode(ctx context.Context, in *CreateStockMedcineCodeBindReq, opts ...grpc.CallOption) (*CreateStockMedcineCodeBindResp, error) {
	out := new(CreateStockMedcineCodeBindResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/MedicineBindCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SyncInfoMedicineMiStock(ctx context.Context, in *MedicineMiStockReq, opts ...grpc.CallOption) (*MedicineMiStockResp, error) {
	out := new(MedicineMiStockResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/SyncInfoMedicineMiStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SyncInfoMedicineCompanyStock(ctx context.Context, in *MedicineCompanyStockReq, opts ...grpc.CallOption) (*MedicineCompanyStockResp, error) {
	out := new(MedicineCompanyStockResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/SyncInfoMedicineCompanyStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) MedicineStockMiListStock(ctx context.Context, in *MedicineStockMiListReq, opts ...grpc.CallOption) (*MedicineStockMiListResp, error) {
	out := new(MedicineStockMiListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/MedicineStockMiListStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ReimbursementLists(ctx context.Context, in *ReimbursementListReq, opts ...grpc.CallOption) (*ReimbursementListResp, error) {
	out := new(ReimbursementListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ReimbursementLists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ReimbursementApplyQuota(ctx context.Context, in *ReimbursementApplyQuotaReq, opts ...grpc.CallOption) (*ReimbursementApplyQuotaResp, error) {
	out := new(ReimbursementApplyQuotaResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ReimbursementApplyQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetWsGetContractList(ctx context.Context, in *GetWsGetContractListReq, opts ...grpc.CallOption) (*GetWsGetContractListResp, error) {
	out := new(GetWsGetContractListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetWsGetContractList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SaveShipmentplan(ctx context.Context, in *ShipmentPlanListReq, opts ...grpc.CallOption) (*ShipmentPlanListResp, error) {
	out := new(ShipmentPlanListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/SaveShipmentplan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SaveTenderContractInfo(ctx context.Context, in *TenderContractInfoReq, opts ...grpc.CallOption) (*TenderContractInfoResp, error) {
	out := new(TenderContractInfoResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/SaveTenderContractInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListConstruction(ctx context.Context, in *ListConstructionReq, opts ...grpc.CallOption) (*ListConstructionResp, error) {
	out := new(ListConstructionResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListConstruction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CommonConstruction(ctx context.Context, in *CommonConstructionReq, opts ...grpc.CallOption) (*CommonConstructionResp, error) {
	out := new(CommonConstructionResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CommonConstruction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetConstructionInfo(ctx context.Context, in *GetConstructionInfoReq, opts ...grpc.CallOption) (*GetConstructionInfoResp, error) {
	out := new(GetConstructionInfoResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetConstructionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneConstruction(ctx context.Context, in *CreateOneConstructionReq, opts ...grpc.CallOption) (*CreateOneConstructionResp, error) {
	out := new(CreateOneConstructionResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneConstruction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateHashConstruction(ctx context.Context, in *CreateHashConstructionReq, opts ...grpc.CallOption) (*CreateHashConstructionResp, error) {
	out := new(CreateHashConstructionResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateHashConstruction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneConstruction(ctx context.Context, in *UpdateOneConstructionReq, opts ...grpc.CallOption) (*UpdateOneConstructionResp, error) {
	out := new(UpdateOneConstructionResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneConstruction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateHashConstruction(ctx context.Context, in *UpdateHashConstructionReq, opts ...grpc.CallOption) (*UpdateHashConstructionResp, error) {
	out := new(UpdateHashConstructionResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateHashConstruction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UploadConstructionLogoUrl(ctx context.Context, in *UploadConstructionLogoUrlReq, opts ...grpc.CallOption) (*UploadConstructionLogoUrlResp, error) {
	out := new(UploadConstructionLogoUrlResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UploadConstructionLogoUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteConstruction(ctx context.Context, in *DeleteConstructionReq, opts ...grpc.CallOption) (*DeleteConstructionResp, error) {
	out := new(DeleteConstructionResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteConstruction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListBuild(ctx context.Context, in *ListBuildReq, opts ...grpc.CallOption) (*ListBuildResp, error) {
	out := new(ListBuildResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CommonBuild(ctx context.Context, in *CommonBuildReq, opts ...grpc.CallOption) (*CommonBuildResp, error) {
	out := new(CommonBuildResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CommonBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetBuildInfo(ctx context.Context, in *GetBuildInfoReq, opts ...grpc.CallOption) (*GetBuildInfoResp, error) {
	out := new(GetBuildInfoResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetBuildInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneBuild(ctx context.Context, in *CreateOneBuildReq, opts ...grpc.CallOption) (*CreateOneBuildResp, error) {
	out := new(CreateOneBuildResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateHashBuild(ctx context.Context, in *CreateHashBuildReq, opts ...grpc.CallOption) (*CreateHashBuildResp, error) {
	out := new(CreateHashBuildResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateHashBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneBuild(ctx context.Context, in *UpdateOneBuildReq, opts ...grpc.CallOption) (*UpdateOneBuildResp, error) {
	out := new(UpdateOneBuildResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateHashBuild(ctx context.Context, in *UpdateHashBuildReq, opts ...grpc.CallOption) (*UpdateHashBuildResp, error) {
	out := new(UpdateHashBuildResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateHashBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UploadBuildLogoUrl(ctx context.Context, in *UploadBuildLogoUrlReq, opts ...grpc.CallOption) (*UploadBuildLogoUrlResp, error) {
	out := new(UploadBuildLogoUrlResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UploadBuildLogoUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteBuild(ctx context.Context, in *DeleteBuildReq, opts ...grpc.CallOption) (*DeleteBuildResp, error) {
	out := new(DeleteBuildResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListSupervisor(ctx context.Context, in *ListSupervisorReq, opts ...grpc.CallOption) (*ListSupervisorResp, error) {
	out := new(ListSupervisorResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListSupervisor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CommonSupervisor(ctx context.Context, in *CommonSupervisorReq, opts ...grpc.CallOption) (*CommonSupervisorResp, error) {
	out := new(CommonSupervisorResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CommonSupervisor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetSupervisorInfo(ctx context.Context, in *GetSupervisorInfoReq, opts ...grpc.CallOption) (*GetSupervisorInfoResp, error) {
	out := new(GetSupervisorInfoResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetSupervisorInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneSupervisor(ctx context.Context, in *CreateOneSupervisorReq, opts ...grpc.CallOption) (*CreateOneSupervisorResp, error) {
	out := new(CreateOneSupervisorResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneSupervisor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateHashSupervisor(ctx context.Context, in *CreateHashSupervisorReq, opts ...grpc.CallOption) (*CreateHashSupervisorResp, error) {
	out := new(CreateHashSupervisorResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateHashSupervisor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneSupervisor(ctx context.Context, in *UpdateOneSupervisorReq, opts ...grpc.CallOption) (*UpdateOneSupervisorResp, error) {
	out := new(UpdateOneSupervisorResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneSupervisor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateHashSupervisor(ctx context.Context, in *UpdateHashSupervisorReq, opts ...grpc.CallOption) (*UpdateHashSupervisorResp, error) {
	out := new(UpdateHashSupervisorResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateHashSupervisor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UploadSupervisorLogoUrl(ctx context.Context, in *UploadSupervisorLogoUrlReq, opts ...grpc.CallOption) (*UploadSupervisorLogoUrlResp, error) {
	out := new(UploadSupervisorLogoUrlResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UploadSupervisorLogoUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteSupervisor(ctx context.Context, in *DeleteSupervisorReq, opts ...grpc.CallOption) (*DeleteSupervisorResp, error) {
	out := new(DeleteSupervisorResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteSupervisor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListGoverment(ctx context.Context, in *ListGovermentReq, opts ...grpc.CallOption) (*ListGovermentResp, error) {
	out := new(ListGovermentResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListGoverment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CommonGoverment(ctx context.Context, in *CommonGovermentReq, opts ...grpc.CallOption) (*CommonGovermentResp, error) {
	out := new(CommonGovermentResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CommonGoverment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetGovermentInfo(ctx context.Context, in *GetGovermentInfoReq, opts ...grpc.CallOption) (*GetGovermentInfoResp, error) {
	out := new(GetGovermentInfoResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetGovermentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneGoverment(ctx context.Context, in *CreateOneGovermentReq, opts ...grpc.CallOption) (*CreateOneGovermentResp, error) {
	out := new(CreateOneGovermentResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneGoverment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateHashGoverment(ctx context.Context, in *CreateHashGovermentReq, opts ...grpc.CallOption) (*CreateHashGovermentResp, error) {
	out := new(CreateHashGovermentResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateHashGoverment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneGoverment(ctx context.Context, in *UpdateOneGovermentReq, opts ...grpc.CallOption) (*UpdateOneGovermentResp, error) {
	out := new(UpdateOneGovermentResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneGoverment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateHashGoverment(ctx context.Context, in *UpdateHashGovermentReq, opts ...grpc.CallOption) (*UpdateHashGovermentResp, error) {
	out := new(UpdateHashGovermentResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateHashGoverment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UploadGovermentLogoUrl(ctx context.Context, in *UploadGovermentLogoUrlReq, opts ...grpc.CallOption) (*UploadGovermentLogoUrlResp, error) {
	out := new(UploadGovermentLogoUrlResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UploadGovermentLogoUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteGoverment(ctx context.Context, in *DeleteGovermentReq, opts ...grpc.CallOption) (*DeleteGovermentResp, error) {
	out := new(DeleteGovermentResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteGoverment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListProcess(ctx context.Context, in *ListProcessReq, opts ...grpc.CallOption) (*ListProcessResp, error) {
	out := new(ListProcessResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CommonProcess(ctx context.Context, in *CommonProcessReq, opts ...grpc.CallOption) (*CommonProcessResp, error) {
	out := new(CommonProcessResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CommonProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneProcess(ctx context.Context, in *CreateOneProcessReq, opts ...grpc.CallOption) (*CreateOneProcessResp, error) {
	out := new(CreateOneProcessResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateHashProcess(ctx context.Context, in *CreateHashProcessReq, opts ...grpc.CallOption) (*CreateHashProcessResp, error) {
	out := new(CreateHashProcessResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateHashProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneProcess(ctx context.Context, in *UpdateProcessReq, opts ...grpc.CallOption) (*UpdateProcessResp, error) {
	out := new(UpdateProcessResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateHashProcess(ctx context.Context, in *UpdateHashProcessReq, opts ...grpc.CallOption) (*UpdateHashProcessResp, error) {
	out := new(UpdateHashProcessResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateHashProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetProcessCodeById(ctx context.Context, in *GetProcessCodeReq, opts ...grpc.CallOption) (*GetProcessCodeResp, error) {
	out := new(GetProcessCodeResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetProcessCodeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneProcessApprove(ctx context.Context, in *UpdateProcessApproveReq, opts ...grpc.CallOption) (*UpdateProcessResp, error) {
	out := new(UpdateProcessResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneProcessApprove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteProcess(ctx context.Context, in *DeleteProcessReq, opts ...grpc.CallOption) (*DeleteProcessResp, error) {
	out := new(DeleteProcessResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateProcessSort(ctx context.Context, in *UpdateProcessSortReq, opts ...grpc.CallOption) (*UpdateProcessSortResp, error) {
	out := new(UpdateProcessSortResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateProcessSort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetProcessInfo(ctx context.Context, in *GetProcessInfoReq, opts ...grpc.CallOption) (*GetProcessInfoResp, error) {
	out := new(GetProcessInfoResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetProcessInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListContract(ctx context.Context, in *ListContractReq, opts ...grpc.CallOption) (*ListContractResp, error) {
	out := new(ListContractResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetOneContract(ctx context.Context, in *GetOneContractReq, opts ...grpc.CallOption) (*GetOneContractResp, error) {
	out := new(GetOneContractResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetOneContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneContract(ctx context.Context, in *CreateOneContractReq, opts ...grpc.CallOption) (*CreateOneContractResp, error) {
	out := new(CreateOneContractResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneContract(ctx context.Context, in *UpdateOneContractReq, opts ...grpc.CallOption) (*UpdateOneContractResp, error) {
	out := new(UpdateOneContractResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateContractHash(ctx context.Context, in *CreateContractHashReq, opts ...grpc.CallOption) (*CreateContractHashResp, error) {
	out := new(CreateContractHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateContractHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateContractHash(ctx context.Context, in *UpdateContractHashReq, opts ...grpc.CallOption) (*UpdateContractHashResp, error) {
	out := new(UpdateContractHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateContractHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteOneContract(ctx context.Context, in *DeleteOneContractReq, opts ...grpc.CallOption) (*DeleteOneContractResp, error) {
	out := new(DeleteOneContractResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteOneContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CommonProjectPhase(ctx context.Context, in *CommonProjectPhaseReq, opts ...grpc.CallOption) (*CommonProjectPhaseResp, error) {
	out := new(CommonProjectPhaseResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CommonProjectPhase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetBuildInfoCodeById(ctx context.Context, in *GetBuildInfoCodeByIdReq, opts ...grpc.CallOption) (*GetBuildInfoCodeByIdResp, error) {
	out := new(GetBuildInfoCodeByIdResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetBuildInfoCodeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GGetSupervisorCodeById(ctx context.Context, in *GetSupervisorCodeByIdReq, opts ...grpc.CallOption) (*GetSupervisorCodeByIdResp, error) {
	out := new(GetSupervisorCodeByIdResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GGetSupervisorCodeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetGetGovermentCodeById(ctx context.Context, in *GetGovermentCodeByIdReq, opts ...grpc.CallOption) (*GetGovermentCodeByIdResp, error) {
	out := new(GetGovermentCodeByIdResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetGetGovermentCodeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListInvoice(ctx context.Context, in *ListInvoiceReq, opts ...grpc.CallOption) (*ListInvoiceResp, error) {
	out := new(ListInvoiceResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetOneInvoice(ctx context.Context, in *GetOneInvoiceReq, opts ...grpc.CallOption) (*GetOneInvoiceResp, error) {
	out := new(GetOneInvoiceResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetOneInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneInvoice(ctx context.Context, in *CreateOneInvoiceReq, opts ...grpc.CallOption) (*CreateOneInvoiceResp, error) {
	out := new(CreateOneInvoiceResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneInvoice(ctx context.Context, in *UpdateOneInvoiceReq, opts ...grpc.CallOption) (*UpdateOneInvoiceResp, error) {
	out := new(UpdateOneInvoiceResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateInvoiceHash(ctx context.Context, in *CreateInvoiceHashReq, opts ...grpc.CallOption) (*CreateInvoiceHashResp, error) {
	out := new(CreateInvoiceHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateInvoiceHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateInvoiceHash(ctx context.Context, in *UpdateInvoiceHashReq, opts ...grpc.CallOption) (*UpdateInvoiceHashResp, error) {
	out := new(UpdateInvoiceHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateInvoiceHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteOneInvoice(ctx context.Context, in *DeleteOneInvoiceReq, opts ...grpc.CallOption) (*DeleteOneInvoiceResp, error) {
	out := new(DeleteOneInvoiceResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteOneInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ReceiveInvoiceHash(ctx context.Context, in *ReceiveInvoiceHashReq, opts ...grpc.CallOption) (*ReceiveInvoiceHashResp, error) {
	out := new(ReceiveInvoiceHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ReceiveInvoiceHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) PayInvoiceHash(ctx context.Context, in *PayInvoiceHashReq, opts ...grpc.CallOption) (*PayInvoiceHashResp, error) {
	out := new(PayInvoiceHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/PayInvoiceHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneProject(ctx context.Context, in *ProjectReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneProject(ctx context.Context, in *ProjectReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteOneProject(ctx context.Context, in *ProjectReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteOneProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetOneProject(ctx context.Context, in *ProjectReq, opts ...grpc.CallOption) (*ProjectsResp, error) {
	out := new(ProjectsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetOneProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListProject(ctx context.Context, in *ProjectReq, opts ...grpc.CallOption) (*ProjectsResp, error) {
	out := new(ProjectsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateProjectHash(ctx context.Context, in *CreateProjectHashReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateProjectHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateProjectHash(ctx context.Context, in *UpdateProjectHashReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateProjectHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CommonProject(ctx context.Context, in *CommonProjectReq, opts ...grpc.CallOption) (*CommonProjectResp, error) {
	out := new(CommonProjectResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CommonProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneProgressPlan(ctx context.Context, in *ProgressPlanReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneProgressPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneProgressPlan(ctx context.Context, in *ProgressPlanReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneProgressPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteOneProgressPlan(ctx context.Context, in *ProgressPlanReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteOneProgressPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetOneProgressPlan(ctx context.Context, in *ProgressPlanReq, opts ...grpc.CallOption) (*ProgressPlansResp, error) {
	out := new(ProgressPlansResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetOneProgressPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListProgressPlan(ctx context.Context, in *ProgressPlanReq, opts ...grpc.CallOption) (*ProgressPlansResp, error) {
	out := new(ProgressPlansResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListProgressPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateProgressPlanHash(ctx context.Context, in *CreateProgressPlanHashReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateProgressPlanHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateProgressPlanHash(ctx context.Context, in *UpdateProgressPlanHashReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateProgressPlanHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneProgressActual(ctx context.Context, in *ProgressActualReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneProgressActual", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneProgressActual(ctx context.Context, in *ProgressActualReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneProgressActual", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteOneProgressActual(ctx context.Context, in *ProgressActualReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteOneProgressActual", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetOneProgressActual(ctx context.Context, in *ProgressActualReq, opts ...grpc.CallOption) (*ProgressActualsResp, error) {
	out := new(ProgressActualsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetOneProgressActual", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListProgressActual(ctx context.Context, in *ProgressActualReq, opts ...grpc.CallOption) (*ProgressActualsResp, error) {
	out := new(ProgressActualsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListProgressActual", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateProgressActualHash(ctx context.Context, in *CreateProgressActualHashReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateProgressActualHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateProgressActualHash(ctx context.Context, in *UpdateProgressActualHashReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateProgressActualHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneQualityInspection(ctx context.Context, in *QualityInspectionReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneQualityInspection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneQualityInspection(ctx context.Context, in *QualityInspectionReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneQualityInspection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteOneQualityInspection(ctx context.Context, in *QualityInspectionReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteOneQualityInspection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetOneQualityInspection(ctx context.Context, in *QualityInspectionReq, opts ...grpc.CallOption) (*QualityInspectionsResp, error) {
	out := new(QualityInspectionsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetOneQualityInspection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListQualityInspection(ctx context.Context, in *QualityInspectionReq, opts ...grpc.CallOption) (*QualityInspectionsResp, error) {
	out := new(QualityInspectionsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListQualityInspection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateQualityInspectionHash(ctx context.Context, in *CreateQualityInspectionHashReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateQualityInspectionHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateQualityInspectionHash(ctx context.Context, in *UpdateQualityInspectionHashReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateQualityInspectionHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneQualityRectify(ctx context.Context, in *QualityInspectionReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneQualityRectify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateQualityRectifyHash(ctx context.Context, in *UpdateQualityInspectionHashReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateQualityRectifyHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetOneQualityRectify(ctx context.Context, in *QualityInspectionReq, opts ...grpc.CallOption) (*QualityInspectionsResp, error) {
	out := new(QualityInspectionsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetOneQualityRectify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListQualityRectify(ctx context.Context, in *QualityInspectionReq, opts ...grpc.CallOption) (*QualityInspectionsResp, error) {
	out := new(QualityInspectionsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListQualityRectify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneQualityReview(ctx context.Context, in *QualityInspectionReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneQualityReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateQualityReviewHash(ctx context.Context, in *UpdateQualityInspectionHashReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateQualityReviewHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetOneQualityReview(ctx context.Context, in *QualityInspectionReq, opts ...grpc.CallOption) (*QualityInspectionsResp, error) {
	out := new(QualityInspectionsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetOneQualityReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListQualityReview(ctx context.Context, in *QualityInspectionReq, opts ...grpc.CallOption) (*QualityInspectionsResp, error) {
	out := new(QualityInspectionsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListQualityReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneSafetyInspection(ctx context.Context, in *SafetyInspectionReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneSafetyInspection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneSafetyInspection(ctx context.Context, in *SafetyInspectionReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneSafetyInspection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteOneSafetyInspection(ctx context.Context, in *SafetyInspectionIdsReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteOneSafetyInspection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetOneSafetyInspection(ctx context.Context, in *SafetyInspectionIdsReq, opts ...grpc.CallOption) (*SafetyInspectionsResp, error) {
	out := new(SafetyInspectionsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetOneSafetyInspection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListSafetyInspection(ctx context.Context, in *ListSafetyInspectionReq, opts ...grpc.CallOption) (*SafetyInspectionsResp, error) {
	out := new(SafetyInspectionsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListSafetyInspection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateSafetyInspectionHash(ctx context.Context, in *SafetyInspectionReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateSafetyInspectionHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateSafetyInspectionHash(ctx context.Context, in *SafetyInspectionReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateSafetyInspectionHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateSafetyRectifyHash(ctx context.Context, in *SafetyInspectionReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateSafetyRectifyHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateSafetyReviewHash(ctx context.Context, in *SafetyInspectionReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateSafetyReviewHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetSafetyInspectionHash(ctx context.Context, in *SafetyInspectionIdsReq, opts ...grpc.CallOption) (*GetSafetyInspectionHashResp, error) {
	out := new(GetSafetyInspectionHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetSafetyInspectionHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneSafetyLog(ctx context.Context, in *SafetyLogReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneSafetyLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneSafetyLog(ctx context.Context, in *SafetyLogReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneSafetyLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteOneSafetyLog(ctx context.Context, in *SafetyLogIdsReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteOneSafetyLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetOneSafetyLog(ctx context.Context, in *SafetyLogIdsReq, opts ...grpc.CallOption) (*SafetyLogsResp, error) {
	out := new(SafetyLogsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetOneSafetyLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListSafetyLog(ctx context.Context, in *ListSafetyLogReq, opts ...grpc.CallOption) (*SafetyLogsResp, error) {
	out := new(SafetyLogsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListSafetyLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateSafetyLogHash(ctx context.Context, in *SafetyLogReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateSafetyLogHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateSafetyLogHash(ctx context.Context, in *SafetyLogReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateSafetyLogHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetSafetyLogHash(ctx context.Context, in *SafetyLogIdsReq, opts ...grpc.CallOption) (*GetSafetyLogHashResp, error) {
	out := new(GetSafetyLogHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetSafetyLogHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneWorkman(ctx context.Context, in *WorkmanReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneWorkman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneWorkman(ctx context.Context, in *WorkmanReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneWorkman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteOneWorkman(ctx context.Context, in *WorkmanIdsReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteOneWorkman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetOneWorkman(ctx context.Context, in *WorkmanIdsReq, opts ...grpc.CallOption) (*WorkmansResp, error) {
	out := new(WorkmansResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetOneWorkman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListWorkman(ctx context.Context, in *ListWorkmanReq, opts ...grpc.CallOption) (*WorkmansResp, error) {
	out := new(WorkmansResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListWorkman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateWorkmanHash(ctx context.Context, in *WorkmanReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateWorkmanHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateWorkmanHash(ctx context.Context, in *WorkmanReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateWorkmanHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetWorkmanHash(ctx context.Context, in *WorkmanIdsReq, opts ...grpc.CallOption) (*GetWorkmanHashResp, error) {
	out := new(GetWorkmanHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetWorkmanHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ImportWorkman(ctx context.Context, in *WorkmansReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ImportWorkman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) BatchWorkmanHash(ctx context.Context, in *WorkmansReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/BatchWorkmanHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneWorkmanAttendance(ctx context.Context, in *WorkmanAttendanceReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneWorkmanAttendance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneWorkmanAttendance(ctx context.Context, in *WorkmanAttendanceReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneWorkmanAttendance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteOneWorkmanAttendance(ctx context.Context, in *WorkmanAttendanceIdsReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteOneWorkmanAttendance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetOneWorkmanAttendance(ctx context.Context, in *WorkmanAttendanceIdsReq, opts ...grpc.CallOption) (*WorkmanAttendancesResp, error) {
	out := new(WorkmanAttendancesResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetOneWorkmanAttendance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListWorkmanAttendance(ctx context.Context, in *ListWorkmanAttendanceReq, opts ...grpc.CallOption) (*WorkmanAttendancesResp, error) {
	out := new(WorkmanAttendancesResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListWorkmanAttendance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateWorkmanAttendanceHash(ctx context.Context, in *WorkmanAttendanceReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateWorkmanAttendanceHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateWorkmanAttendanceHash(ctx context.Context, in *WorkmanAttendanceReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateWorkmanAttendanceHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetWorkmanAttendanceHash(ctx context.Context, in *WorkmanAttendanceIdsReq, opts ...grpc.CallOption) (*GetWorkmanAttendanceHashResp, error) {
	out := new(GetWorkmanAttendanceHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetWorkmanAttendanceHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ImportWorkmanAttendance(ctx context.Context, in *WorkmanAttendancesReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ImportWorkmanAttendance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) BatchWorkmanAttendanceHash(ctx context.Context, in *WorkmanAttendancesReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/BatchWorkmanAttendanceHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneMaterial(ctx context.Context, in *MaterialReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneMaterial(ctx context.Context, in *MaterialReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteOneMaterial(ctx context.Context, in *MaterialIdsReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteOneMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetOneMaterial(ctx context.Context, in *MaterialIdsReq, opts ...grpc.CallOption) (*MaterialsResp, error) {
	out := new(MaterialsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetOneMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListMaterial(ctx context.Context, in *ListMaterialReq, opts ...grpc.CallOption) (*MaterialsResp, error) {
	out := new(MaterialsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateMaterialHash(ctx context.Context, in *MaterialReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateMaterialHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateMaterialHash(ctx context.Context, in *MaterialReq, opts ...grpc.CallOption) (*OperateIntegerResp, error) {
	out := new(OperateIntegerResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateMaterialHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetMaterialHash(ctx context.Context, in *MaterialIdsReq, opts ...grpc.CallOption) (*GetMaterialHashResp, error) {
	out := new(GetMaterialHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetMaterialHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListMaterialDistinctName(ctx context.Context, in *ListMaterialDistinctNameReq, opts ...grpc.CallOption) (*ListMaterialDistinctNameResp, error) {
	out := new(ListMaterialDistinctNameResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListMaterialDistinctName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServiceServer is the server API for ManagerService service.
type ManagerServiceServer interface {
	//药品相关
	ListMedicine(context.Context, *MedicineListReq) (*MedicineListResp, error)
	MedicineListForQuery(context.Context, *MedicineListForQueryReq) (*MedicineListForQueryResp, error)
	CommonListCnaps(context.Context, *CommonListCnapsReq) (*CommonListCnapsResp, error)
	CommonListTag(context.Context, *CommonListTagReq) (*CommonListTagResp, error)
	CreateMedicine(context.Context, *CreateMedicineReq) (*CreateMedicineResp, error)
	CreateBatchMedicine(context.Context, *CreateBatchMedicineReq) (*CreateBatchMedicineResp, error)
	UpdateMedicine(context.Context, *UpdateMedicineReq) (*UpdateMedicineResp, error)
	UpdateMedicineActive(context.Context, *UpdateMedicineActiveReq) (*UpdateMedicineActiveResp, error)
	DeleteMedicine(context.Context, *DeleteMedicineReq) (*DeleteMedicineResp, error)
	SelectTagByMedicineId(context.Context, *SelectTagByMedicineIdReq) (*SelectTagByMedicineIdResp, error)
	SelectInfoByMedicineNames(context.Context, *SelectInfoByMedicineNamesReq) (*SelectInfoByMedicineNamesResp, error)
	UpdateMedicineActiveHash(context.Context, *UpdateMedicineActiveReq) (*UpdateMedicineActiveResp, error)
	SelectByMedicineId(context.Context, *MedicineByMedicineIdReq) (*MedicineByMedicineIdResp, error)
	//药品标签相关
	TagList(context.Context, *TagListReq) (*TagListResp, error)
	CreateTag(context.Context, *CreateTagReq) (*CreateTagResp, error)
	UpdateTag(context.Context, *UpdateTagReq) (*UpdateTagResp, error)
	DeleteTag(context.Context, *DeleteTagReq) (*DeleteTagResp, error)
	TagDetailList(context.Context, *TagDetailListReq) (*TagDetailListResp, error)
	DeleteTagMedicine(context.Context, *DeleteTagMedicineReq) (*DeleteTagMedicineResp, error)
	CreateTagMedicine(context.Context, *CreateTagMedicineReq) (*CreateTagMedicineResp, error)
	CommonMedicineQuery(context.Context, *CommonMedicineQueryReq) (*CommonMedicineQueryResp, error)
	//医疗机构相关
	ListMi(context.Context, *ListMiReq) (*ListMiResp, error)
	CommonMI(context.Context, *CommonMIReq) (*CommonMIResp, error)
	CommonMIInfo(context.Context, *CommonMIInfoReq) (*CommonMIInfoResp, error)
	CreateOneMI(context.Context, *CreateOneMIReq) (*CreateOneMIResp, error)
	UpdateMi(context.Context, *UpdateMiReq) (*UpdateMiResp, error)
	UploadMiLogoUrl(context.Context, *UploadMiLogoUrlReq) (*UploadMiLogoUrlResp, error)
	GetMiCodeById(context.Context, *GetMICodeReq) (*GetMICodeResp, error)
	//配送企业相关
	ListCompany(context.Context, *ListCompanyReq) (*ListCompanyResp, error)
	CreateOneCompany(context.Context, *CreateOneCompanyReq) (*CreateOneCompanyResp, error)
	UpdateOneCompany(context.Context, *UpdateOneCompanyReq) (*UpdateOneCompanyResp, error)
	CommonCompany(context.Context, *CommonCompanyReq) (*CommonCompanyResp, error)
	GetCompanyInfo(context.Context, *CommonCompanyReq) (*CompanyInfoResp, error)
	SelCompanyByNames(context.Context, *SelCompanyByNamesReq) (*SelCompanyByNamesResp, error)
	QueryCompanyBankAccount(context.Context, *GetCompanyBankAccountReq) (*GetCompanyBankAccountResp, error)
	UploadCompanyLogoUrl(context.Context, *UploadCompanyLogoUrlReq) (*UploadCompanyLogoUrlResp, error)
	GetCompanysById(context.Context, *GetCompanyInfoReq) (*GetCompanyInfoResp, error)
	//招采异常订单相关
	ListTpPlanErr(context.Context, *ListTpPlanErrReq) (*ListTpPlanErrResp, error)
	UpdateErrShipmentPlan(context.Context, *UpdateErrShipmentPlanReq) (*UpdateErrShipmentPlanResp, error)
	//招采单(配送)相关
	ListShipmentPlan(context.Context, *ListShipmentPlanReq) (*ListShipmentPlanResp, error)
	CountShipmentPlan(context.Context, *CountShipmentPlanReq) (*CountShipmentPlanResp, error)
	//配送单详情
	ShipmentReceiveOrder(context.Context, *ShipmentReceiveOrderReq) (*ShipmentReceiveOrderResp, error)
	DetailShipmentOrder(context.Context, *DetailShipmentOrderReq) (*DetailShipmentOrderResp, error)
	ListShipmentPlanForOrder(context.Context, *ListShipmentPlanForOrderReq) (*ListShipmentPlanForOrderResp, error)
	//配送单创建
	CreateShipmentOrder(context.Context, *CreateShipmentOrderReq) (*CreateShipmentOrderResp, error)
	//配送单列表
	ListShipmentOrder(context.Context, *ListShipmentOrderReq) (*ListShipmentOrderResp, error)
	//配送单表头汇总
	CountShipmentOrder(context.Context, *CountShipmentOrderReq) (*CountShipmentOrderResp, error)
	//配送单收获
	ReceiveShipmentOrder(context.Context, *ReceiveShipmentOrderReq) (*ReceiveShipmentOrderResp, error)
	//根据招采单(配送计划)id查询合同编号
	GetContractByShipmentPlanId(context.Context, *GetContractByShipmentPlanIdReq) (*GetContractByShipmentPlanIdResp, error)
	//配送单修改
	UpdateShipmentOrder(context.Context, *UpdateShipmentOrderReq) (*UpdateShipmentOrderResp, error)
	//支付单汇总
	CountPayOrder(context.Context, *GetPayOrderReq) (*GetPayOrderResp, error)
	//通用配置查询
	GetConfig(context.Context, *GetConfigReq) (*GetConfigResp, error)
	//修改配置
	UpdateConfig(context.Context, *UpdateConfigReq) (*UpdateConfigResp, error)
	//批量插入配置
	InsertConfigs(context.Context, *InsertConfigsReq) (*InsertConfigsResp, error)
	//删除配置
	DeleteConfigs(context.Context, *DeleteConfigsReq) (*DeleteConfigsResp, error)
	//配送企业绑定
	ListCompanyBind(context.Context, *ListBindReq) (*ListBindResp, error)
	CompanyBind(context.Context, *BindReq) (*BindResp, error)
	//医疗机构绑定
	ListMiBind(context.Context, *ListBindReq) (*ListBindResp, error)
	MiBind(context.Context, *BindReq) (*BindResp, error)
	//药品绑定绑定
	ListMedicineBind(context.Context, *ListBindReq) (*ListBindResp, error)
	MedicineBind(context.Context, *BindReq) (*BindResp, error)
	//医保局财务管理
	ListReimb(context.Context, *ListReimbReq) (*ListReimbResp, error)
	PayReimb(context.Context, *PayReimbReq) (*OpReimbResp, error)
	ApplyReimbQuota(context.Context, *ApplyReimbQuotaReq) (*OpReimbResp, error)
	ApproveReimbQuota(context.Context, *ApproveReimbQuotaReq) (*OpReimbResp, error)
	UpdateReimbReport(context.Context, *UpdateReimbReportReq) (*OpReimbResp, error)
	//医疗机构专户填平额度设置
	GetMiSpecialConfig(context.Context, *GetMiSpecialConfigReq) (*GetMiSpecialConfigResp, error)
	UpdateMiSpecialConfig(context.Context, *UpdateMiSpecialConfigReq) (*UpdateMiSpecialConfigResp, error)
	//医疗机构基础信息
	QueryMiInfo(context.Context, *GetMiInfoReq) (*GetMiInfoResp, error)
	CreateBankAccount(context.Context, *CreateBankAccountReq) (*CreateBankAccountResp, error)
	//开发者配置
	CreateMiDevelopUser(context.Context, *CreateMiDevelopUserReq) (*CreateMiDevelopUserResp, error)
	GetClientPermission(context.Context, *ClientPermissionReq) (*ClientPermissionResp, error)
	SetClientDevelop(context.Context, *SetClientDevelopReq) (*SetClientDevelopResp, error)
	SaveClientPermission(context.Context, *SaveClientPermissionReq) (*SaveClientPermissionResp, error)
	MedicineBindList(context.Context, *ListMedicineBindListReq) (*ListMedicineBindListResp, error)
	MedicineBindCode(context.Context, *CreateStockMedcineCodeBindReq) (*CreateStockMedcineCodeBindResp, error)
	//同步库存mi
	SyncInfoMedicineMiStock(context.Context, *MedicineMiStockReq) (*MedicineMiStockResp, error)
	SyncInfoMedicineCompanyStock(context.Context, *MedicineCompanyStockReq) (*MedicineCompanyStockResp, error)
	//库存查询
	MedicineStockMiListStock(context.Context, *MedicineStockMiListReq) (*MedicineStockMiListResp, error)
	//医疗机构（财务管理)
	ReimbursementLists(context.Context, *ReimbursementListReq) (*ReimbursementListResp, error)
	ReimbursementApplyQuota(context.Context, *ReimbursementApplyQuotaReq) (*ReimbursementApplyQuotaResp, error)
	//获取省合同信息
	GetWsGetContractList(context.Context, *GetWsGetContractListReq) (*GetWsGetContractListResp, error)
	//配送计划数据测试数据
	SaveShipmentplan(context.Context, *ShipmentPlanListReq) (*ShipmentPlanListResp, error)
	//合同测试数据
	SaveTenderContractInfo(context.Context, *TenderContractInfoReq) (*TenderContractInfoResp, error)
	//建设单位
	ListConstruction(context.Context, *ListConstructionReq) (*ListConstructionResp, error)
	CommonConstruction(context.Context, *CommonConstructionReq) (*CommonConstructionResp, error)
	GetConstructionInfo(context.Context, *GetConstructionInfoReq) (*GetConstructionInfoResp, error)
	CreateOneConstruction(context.Context, *CreateOneConstructionReq) (*CreateOneConstructionResp, error)
	CreateHashConstruction(context.Context, *CreateHashConstructionReq) (*CreateHashConstructionResp, error)
	UpdateOneConstruction(context.Context, *UpdateOneConstructionReq) (*UpdateOneConstructionResp, error)
	UpdateHashConstruction(context.Context, *UpdateHashConstructionReq) (*UpdateHashConstructionResp, error)
	UploadConstructionLogoUrl(context.Context, *UploadConstructionLogoUrlReq) (*UploadConstructionLogoUrlResp, error)
	DeleteConstruction(context.Context, *DeleteConstructionReq) (*DeleteConstructionResp, error)
	//施工单位
	ListBuild(context.Context, *ListBuildReq) (*ListBuildResp, error)
	CommonBuild(context.Context, *CommonBuildReq) (*CommonBuildResp, error)
	GetBuildInfo(context.Context, *GetBuildInfoReq) (*GetBuildInfoResp, error)
	CreateOneBuild(context.Context, *CreateOneBuildReq) (*CreateOneBuildResp, error)
	CreateHashBuild(context.Context, *CreateHashBuildReq) (*CreateHashBuildResp, error)
	UpdateOneBuild(context.Context, *UpdateOneBuildReq) (*UpdateOneBuildResp, error)
	UpdateHashBuild(context.Context, *UpdateHashBuildReq) (*UpdateHashBuildResp, error)
	UploadBuildLogoUrl(context.Context, *UploadBuildLogoUrlReq) (*UploadBuildLogoUrlResp, error)
	DeleteBuild(context.Context, *DeleteBuildReq) (*DeleteBuildResp, error)
	//监理单位
	ListSupervisor(context.Context, *ListSupervisorReq) (*ListSupervisorResp, error)
	CommonSupervisor(context.Context, *CommonSupervisorReq) (*CommonSupervisorResp, error)
	GetSupervisorInfo(context.Context, *GetSupervisorInfoReq) (*GetSupervisorInfoResp, error)
	CreateOneSupervisor(context.Context, *CreateOneSupervisorReq) (*CreateOneSupervisorResp, error)
	CreateHashSupervisor(context.Context, *CreateHashSupervisorReq) (*CreateHashSupervisorResp, error)
	UpdateOneSupervisor(context.Context, *UpdateOneSupervisorReq) (*UpdateOneSupervisorResp, error)
	UpdateHashSupervisor(context.Context, *UpdateHashSupervisorReq) (*UpdateHashSupervisorResp, error)
	UploadSupervisorLogoUrl(context.Context, *UploadSupervisorLogoUrlReq) (*UploadSupervisorLogoUrlResp, error)
	DeleteSupervisor(context.Context, *DeleteSupervisorReq) (*DeleteSupervisorResp, error)
	//监管单位
	ListGoverment(context.Context, *ListGovermentReq) (*ListGovermentResp, error)
	CommonGoverment(context.Context, *CommonGovermentReq) (*CommonGovermentResp, error)
	GetGovermentInfo(context.Context, *GetGovermentInfoReq) (*GetGovermentInfoResp, error)
	CreateOneGoverment(context.Context, *CreateOneGovermentReq) (*CreateOneGovermentResp, error)
	CreateHashGoverment(context.Context, *CreateHashGovermentReq) (*CreateHashGovermentResp, error)
	UpdateOneGoverment(context.Context, *UpdateOneGovermentReq) (*UpdateOneGovermentResp, error)
	UpdateHashGoverment(context.Context, *UpdateHashGovermentReq) (*UpdateHashGovermentResp, error)
	UploadGovermentLogoUrl(context.Context, *UploadGovermentLogoUrlReq) (*UploadGovermentLogoUrlResp, error)
	DeleteGoverment(context.Context, *DeleteGovermentReq) (*DeleteGovermentResp, error)
	//流程审批相关
	ListProcess(context.Context, *ListProcessReq) (*ListProcessResp, error)
	CommonProcess(context.Context, *CommonProcessReq) (*CommonProcessResp, error)
	CreateOneProcess(context.Context, *CreateOneProcessReq) (*CreateOneProcessResp, error)
	CreateHashProcess(context.Context, *CreateHashProcessReq) (*CreateHashProcessResp, error)
	UpdateOneProcess(context.Context, *UpdateProcessReq) (*UpdateProcessResp, error)
	UpdateHashProcess(context.Context, *UpdateHashProcessReq) (*UpdateHashProcessResp, error)
	GetProcessCodeById(context.Context, *GetProcessCodeReq) (*GetProcessCodeResp, error)
	UpdateOneProcessApprove(context.Context, *UpdateProcessApproveReq) (*UpdateProcessResp, error)
	DeleteProcess(context.Context, *DeleteProcessReq) (*DeleteProcessResp, error)
	UpdateProcessSort(context.Context, *UpdateProcessSortReq) (*UpdateProcessSortResp, error)
	GetProcessInfo(context.Context, *GetProcessInfoReq) (*GetProcessInfoResp, error)
	//合同信息相关
	ListContract(context.Context, *ListContractReq) (*ListContractResp, error)
	GetOneContract(context.Context, *GetOneContractReq) (*GetOneContractResp, error)
	CreateOneContract(context.Context, *CreateOneContractReq) (*CreateOneContractResp, error)
	UpdateOneContract(context.Context, *UpdateOneContractReq) (*UpdateOneContractResp, error)
	CreateContractHash(context.Context, *CreateContractHashReq) (*CreateContractHashResp, error)
	UpdateContractHash(context.Context, *UpdateContractHashReq) (*UpdateContractHashResp, error)
	DeleteOneContract(context.Context, *DeleteOneContractReq) (*DeleteOneContractResp, error)
	CommonProjectPhase(context.Context, *CommonProjectPhaseReq) (*CommonProjectPhaseResp, error)
	GetBuildInfoCodeById(context.Context, *GetBuildInfoCodeByIdReq) (*GetBuildInfoCodeByIdResp, error)
	GGetSupervisorCodeById(context.Context, *GetSupervisorCodeByIdReq) (*GetSupervisorCodeByIdResp, error)
	GetGetGovermentCodeById(context.Context, *GetGovermentCodeByIdReq) (*GetGovermentCodeByIdResp, error)
	//开票信息
	ListInvoice(context.Context, *ListInvoiceReq) (*ListInvoiceResp, error)
	GetOneInvoice(context.Context, *GetOneInvoiceReq) (*GetOneInvoiceResp, error)
	CreateOneInvoice(context.Context, *CreateOneInvoiceReq) (*CreateOneInvoiceResp, error)
	UpdateOneInvoice(context.Context, *UpdateOneInvoiceReq) (*UpdateOneInvoiceResp, error)
	CreateInvoiceHash(context.Context, *CreateInvoiceHashReq) (*CreateInvoiceHashResp, error)
	UpdateInvoiceHash(context.Context, *UpdateInvoiceHashReq) (*UpdateInvoiceHashResp, error)
	DeleteOneInvoice(context.Context, *DeleteOneInvoiceReq) (*DeleteOneInvoiceResp, error)
	ReceiveInvoiceHash(context.Context, *ReceiveInvoiceHashReq) (*ReceiveInvoiceHashResp, error)
	PayInvoiceHash(context.Context, *PayInvoiceHashReq) (*PayInvoiceHashResp, error)
	//项目相关
	CreateOneProject(context.Context, *ProjectReq) (*OperateIntegerResp, error)
	UpdateOneProject(context.Context, *ProjectReq) (*OperateIntegerResp, error)
	DeleteOneProject(context.Context, *ProjectReq) (*OperateIntegerResp, error)
	GetOneProject(context.Context, *ProjectReq) (*ProjectsResp, error)
	ListProject(context.Context, *ProjectReq) (*ProjectsResp, error)
	CreateProjectHash(context.Context, *CreateProjectHashReq) (*OperateIntegerResp, error)
	UpdateProjectHash(context.Context, *UpdateProjectHashReq) (*OperateIntegerResp, error)
	CommonProject(context.Context, *CommonProjectReq) (*CommonProjectResp, error)
	//进度计划相关
	CreateOneProgressPlan(context.Context, *ProgressPlanReq) (*OperateIntegerResp, error)
	UpdateOneProgressPlan(context.Context, *ProgressPlanReq) (*OperateIntegerResp, error)
	DeleteOneProgressPlan(context.Context, *ProgressPlanReq) (*OperateIntegerResp, error)
	GetOneProgressPlan(context.Context, *ProgressPlanReq) (*ProgressPlansResp, error)
	ListProgressPlan(context.Context, *ProgressPlanReq) (*ProgressPlansResp, error)
	CreateProgressPlanHash(context.Context, *CreateProgressPlanHashReq) (*OperateIntegerResp, error)
	UpdateProgressPlanHash(context.Context, *UpdateProgressPlanHashReq) (*OperateIntegerResp, error)
	//实际进度相关
	CreateOneProgressActual(context.Context, *ProgressActualReq) (*OperateIntegerResp, error)
	UpdateOneProgressActual(context.Context, *ProgressActualReq) (*OperateIntegerResp, error)
	DeleteOneProgressActual(context.Context, *ProgressActualReq) (*OperateIntegerResp, error)
	GetOneProgressActual(context.Context, *ProgressActualReq) (*ProgressActualsResp, error)
	ListProgressActual(context.Context, *ProgressActualReq) (*ProgressActualsResp, error)
	CreateProgressActualHash(context.Context, *CreateProgressActualHashReq) (*OperateIntegerResp, error)
	UpdateProgressActualHash(context.Context, *UpdateProgressActualHashReq) (*OperateIntegerResp, error)
	//质量巡检相关
	CreateOneQualityInspection(context.Context, *QualityInspectionReq) (*OperateIntegerResp, error)
	UpdateOneQualityInspection(context.Context, *QualityInspectionReq) (*OperateIntegerResp, error)
	DeleteOneQualityInspection(context.Context, *QualityInspectionReq) (*OperateIntegerResp, error)
	GetOneQualityInspection(context.Context, *QualityInspectionReq) (*QualityInspectionsResp, error)
	ListQualityInspection(context.Context, *QualityInspectionReq) (*QualityInspectionsResp, error)
	CreateQualityInspectionHash(context.Context, *CreateQualityInspectionHashReq) (*OperateIntegerResp, error)
	UpdateQualityInspectionHash(context.Context, *UpdateQualityInspectionHashReq) (*OperateIntegerResp, error)
	UpdateOneQualityRectify(context.Context, *QualityInspectionReq) (*OperateIntegerResp, error)
	UpdateQualityRectifyHash(context.Context, *UpdateQualityInspectionHashReq) (*OperateIntegerResp, error)
	GetOneQualityRectify(context.Context, *QualityInspectionReq) (*QualityInspectionsResp, error)
	ListQualityRectify(context.Context, *QualityInspectionReq) (*QualityInspectionsResp, error)
	UpdateOneQualityReview(context.Context, *QualityInspectionReq) (*OperateIntegerResp, error)
	UpdateQualityReviewHash(context.Context, *UpdateQualityInspectionHashReq) (*OperateIntegerResp, error)
	GetOneQualityReview(context.Context, *QualityInspectionReq) (*QualityInspectionsResp, error)
	ListQualityReview(context.Context, *QualityInspectionReq) (*QualityInspectionsResp, error)
	//===SafetyInspection rpc begin===
	CreateOneSafetyInspection(context.Context, *SafetyInspectionReq) (*OperateIntegerResp, error)
	UpdateOneSafetyInspection(context.Context, *SafetyInspectionReq) (*OperateIntegerResp, error)
	DeleteOneSafetyInspection(context.Context, *SafetyInspectionIdsReq) (*OperateIntegerResp, error)
	GetOneSafetyInspection(context.Context, *SafetyInspectionIdsReq) (*SafetyInspectionsResp, error)
	ListSafetyInspection(context.Context, *ListSafetyInspectionReq) (*SafetyInspectionsResp, error)
	CreateSafetyInspectionHash(context.Context, *SafetyInspectionReq) (*OperateIntegerResp, error)
	UpdateSafetyInspectionHash(context.Context, *SafetyInspectionReq) (*OperateIntegerResp, error)
	UpdateSafetyRectifyHash(context.Context, *SafetyInspectionReq) (*OperateIntegerResp, error)
	UpdateSafetyReviewHash(context.Context, *SafetyInspectionReq) (*OperateIntegerResp, error)
	GetSafetyInspectionHash(context.Context, *SafetyInspectionIdsReq) (*GetSafetyInspectionHashResp, error)
	//===SafetyLog rpc begin===
	CreateOneSafetyLog(context.Context, *SafetyLogReq) (*OperateIntegerResp, error)
	UpdateOneSafetyLog(context.Context, *SafetyLogReq) (*OperateIntegerResp, error)
	DeleteOneSafetyLog(context.Context, *SafetyLogIdsReq) (*OperateIntegerResp, error)
	GetOneSafetyLog(context.Context, *SafetyLogIdsReq) (*SafetyLogsResp, error)
	ListSafetyLog(context.Context, *ListSafetyLogReq) (*SafetyLogsResp, error)
	CreateSafetyLogHash(context.Context, *SafetyLogReq) (*OperateIntegerResp, error)
	UpdateSafetyLogHash(context.Context, *SafetyLogReq) (*OperateIntegerResp, error)
	GetSafetyLogHash(context.Context, *SafetyLogIdsReq) (*GetSafetyLogHashResp, error)
	//===Workman rpc begin===
	CreateOneWorkman(context.Context, *WorkmanReq) (*OperateIntegerResp, error)
	UpdateOneWorkman(context.Context, *WorkmanReq) (*OperateIntegerResp, error)
	DeleteOneWorkman(context.Context, *WorkmanIdsReq) (*OperateIntegerResp, error)
	GetOneWorkman(context.Context, *WorkmanIdsReq) (*WorkmansResp, error)
	ListWorkman(context.Context, *ListWorkmanReq) (*WorkmansResp, error)
	CreateWorkmanHash(context.Context, *WorkmanReq) (*OperateIntegerResp, error)
	UpdateWorkmanHash(context.Context, *WorkmanReq) (*OperateIntegerResp, error)
	GetWorkmanHash(context.Context, *WorkmanIdsReq) (*GetWorkmanHashResp, error)
	ImportWorkman(context.Context, *WorkmansReq) (*OperateIntegerResp, error)
	BatchWorkmanHash(context.Context, *WorkmansReq) (*OperateIntegerResp, error)
	//===WorkmanAttendance rpc begin===
	CreateOneWorkmanAttendance(context.Context, *WorkmanAttendanceReq) (*OperateIntegerResp, error)
	UpdateOneWorkmanAttendance(context.Context, *WorkmanAttendanceReq) (*OperateIntegerResp, error)
	DeleteOneWorkmanAttendance(context.Context, *WorkmanAttendanceIdsReq) (*OperateIntegerResp, error)
	GetOneWorkmanAttendance(context.Context, *WorkmanAttendanceIdsReq) (*WorkmanAttendancesResp, error)
	ListWorkmanAttendance(context.Context, *ListWorkmanAttendanceReq) (*WorkmanAttendancesResp, error)
	CreateWorkmanAttendanceHash(context.Context, *WorkmanAttendanceReq) (*OperateIntegerResp, error)
	UpdateWorkmanAttendanceHash(context.Context, *WorkmanAttendanceReq) (*OperateIntegerResp, error)
	GetWorkmanAttendanceHash(context.Context, *WorkmanAttendanceIdsReq) (*GetWorkmanAttendanceHashResp, error)
	ImportWorkmanAttendance(context.Context, *WorkmanAttendancesReq) (*OperateIntegerResp, error)
	BatchWorkmanAttendanceHash(context.Context, *WorkmanAttendancesReq) (*OperateIntegerResp, error)
	//===Material rpc begin===
	CreateOneMaterial(context.Context, *MaterialReq) (*OperateIntegerResp, error)
	UpdateOneMaterial(context.Context, *MaterialReq) (*OperateIntegerResp, error)
	DeleteOneMaterial(context.Context, *MaterialIdsReq) (*OperateIntegerResp, error)
	GetOneMaterial(context.Context, *MaterialIdsReq) (*MaterialsResp, error)
	ListMaterial(context.Context, *ListMaterialReq) (*MaterialsResp, error)
	CreateMaterialHash(context.Context, *MaterialReq) (*OperateIntegerResp, error)
	UpdateMaterialHash(context.Context, *MaterialReq) (*OperateIntegerResp, error)
	GetMaterialHash(context.Context, *MaterialIdsReq) (*GetMaterialHashResp, error)
	ListMaterialDistinctName(context.Context, *ListMaterialDistinctNameReq) (*ListMaterialDistinctNameResp, error)
}

// UnimplementedManagerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedManagerServiceServer struct {
}

func (*UnimplementedManagerServiceServer) ListMedicine(context.Context, *MedicineListReq) (*MedicineListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedicine not implemented")
}
func (*UnimplementedManagerServiceServer) MedicineListForQuery(context.Context, *MedicineListForQueryReq) (*MedicineListForQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MedicineListForQuery not implemented")
}
func (*UnimplementedManagerServiceServer) CommonListCnaps(context.Context, *CommonListCnapsReq) (*CommonListCnapsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonListCnaps not implemented")
}
func (*UnimplementedManagerServiceServer) CommonListTag(context.Context, *CommonListTagReq) (*CommonListTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonListTag not implemented")
}
func (*UnimplementedManagerServiceServer) CreateMedicine(context.Context, *CreateMedicineReq) (*CreateMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedicine not implemented")
}
func (*UnimplementedManagerServiceServer) CreateBatchMedicine(context.Context, *CreateBatchMedicineReq) (*CreateBatchMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBatchMedicine not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateMedicine(context.Context, *UpdateMedicineReq) (*UpdateMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedicine not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateMedicineActive(context.Context, *UpdateMedicineActiveReq) (*UpdateMedicineActiveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedicineActive not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteMedicine(context.Context, *DeleteMedicineReq) (*DeleteMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedicine not implemented")
}
func (*UnimplementedManagerServiceServer) SelectTagByMedicineId(context.Context, *SelectTagByMedicineIdReq) (*SelectTagByMedicineIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectTagByMedicineId not implemented")
}
func (*UnimplementedManagerServiceServer) SelectInfoByMedicineNames(context.Context, *SelectInfoByMedicineNamesReq) (*SelectInfoByMedicineNamesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectInfoByMedicineNames not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateMedicineActiveHash(context.Context, *UpdateMedicineActiveReq) (*UpdateMedicineActiveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedicineActiveHash not implemented")
}
func (*UnimplementedManagerServiceServer) SelectByMedicineId(context.Context, *MedicineByMedicineIdReq) (*MedicineByMedicineIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectByMedicineId not implemented")
}
func (*UnimplementedManagerServiceServer) TagList(context.Context, *TagListReq) (*TagListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagList not implemented")
}
func (*UnimplementedManagerServiceServer) CreateTag(context.Context, *CreateTagReq) (*CreateTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateTag(context.Context, *UpdateTagReq) (*UpdateTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteTag(context.Context, *DeleteTagReq) (*DeleteTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (*UnimplementedManagerServiceServer) TagDetailList(context.Context, *TagDetailListReq) (*TagDetailListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagDetailList not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteTagMedicine(context.Context, *DeleteTagMedicineReq) (*DeleteTagMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTagMedicine not implemented")
}
func (*UnimplementedManagerServiceServer) CreateTagMedicine(context.Context, *CreateTagMedicineReq) (*CreateTagMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTagMedicine not implemented")
}
func (*UnimplementedManagerServiceServer) CommonMedicineQuery(context.Context, *CommonMedicineQueryReq) (*CommonMedicineQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonMedicineQuery not implemented")
}
func (*UnimplementedManagerServiceServer) ListMi(context.Context, *ListMiReq) (*ListMiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMi not implemented")
}
func (*UnimplementedManagerServiceServer) CommonMI(context.Context, *CommonMIReq) (*CommonMIResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonMI not implemented")
}
func (*UnimplementedManagerServiceServer) CommonMIInfo(context.Context, *CommonMIInfoReq) (*CommonMIInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonMIInfo not implemented")
}
func (*UnimplementedManagerServiceServer) CreateOneMI(context.Context, *CreateOneMIReq) (*CreateOneMIResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneMI not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateMi(context.Context, *UpdateMiReq) (*UpdateMiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMi not implemented")
}
func (*UnimplementedManagerServiceServer) UploadMiLogoUrl(context.Context, *UploadMiLogoUrlReq) (*UploadMiLogoUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadMiLogoUrl not implemented")
}
func (*UnimplementedManagerServiceServer) GetMiCodeById(context.Context, *GetMICodeReq) (*GetMICodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMiCodeById not implemented")
}
func (*UnimplementedManagerServiceServer) ListCompany(context.Context, *ListCompanyReq) (*ListCompanyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompany not implemented")
}
func (*UnimplementedManagerServiceServer) CreateOneCompany(context.Context, *CreateOneCompanyReq) (*CreateOneCompanyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneCompany not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateOneCompany(context.Context, *UpdateOneCompanyReq) (*UpdateOneCompanyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneCompany not implemented")
}
func (*UnimplementedManagerServiceServer) CommonCompany(context.Context, *CommonCompanyReq) (*CommonCompanyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonCompany not implemented")
}
func (*UnimplementedManagerServiceServer) GetCompanyInfo(context.Context, *CommonCompanyReq) (*CompanyInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyInfo not implemented")
}
func (*UnimplementedManagerServiceServer) SelCompanyByNames(context.Context, *SelCompanyByNamesReq) (*SelCompanyByNamesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelCompanyByNames not implemented")
}
func (*UnimplementedManagerServiceServer) QueryCompanyBankAccount(context.Context, *GetCompanyBankAccountReq) (*GetCompanyBankAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCompanyBankAccount not implemented")
}
func (*UnimplementedManagerServiceServer) UploadCompanyLogoUrl(context.Context, *UploadCompanyLogoUrlReq) (*UploadCompanyLogoUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadCompanyLogoUrl not implemented")
}
func (*UnimplementedManagerServiceServer) GetCompanysById(context.Context, *GetCompanyInfoReq) (*GetCompanyInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanysById not implemented")
}
func (*UnimplementedManagerServiceServer) ListTpPlanErr(context.Context, *ListTpPlanErrReq) (*ListTpPlanErrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTpPlanErr not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateErrShipmentPlan(context.Context, *UpdateErrShipmentPlanReq) (*UpdateErrShipmentPlanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateErrShipmentPlan not implemented")
}
func (*UnimplementedManagerServiceServer) ListShipmentPlan(context.Context, *ListShipmentPlanReq) (*ListShipmentPlanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShipmentPlan not implemented")
}
func (*UnimplementedManagerServiceServer) CountShipmentPlan(context.Context, *CountShipmentPlanReq) (*CountShipmentPlanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountShipmentPlan not implemented")
}
func (*UnimplementedManagerServiceServer) ShipmentReceiveOrder(context.Context, *ShipmentReceiveOrderReq) (*ShipmentReceiveOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShipmentReceiveOrder not implemented")
}
func (*UnimplementedManagerServiceServer) DetailShipmentOrder(context.Context, *DetailShipmentOrderReq) (*DetailShipmentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailShipmentOrder not implemented")
}
func (*UnimplementedManagerServiceServer) ListShipmentPlanForOrder(context.Context, *ListShipmentPlanForOrderReq) (*ListShipmentPlanForOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShipmentPlanForOrder not implemented")
}
func (*UnimplementedManagerServiceServer) CreateShipmentOrder(context.Context, *CreateShipmentOrderReq) (*CreateShipmentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShipmentOrder not implemented")
}
func (*UnimplementedManagerServiceServer) ListShipmentOrder(context.Context, *ListShipmentOrderReq) (*ListShipmentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShipmentOrder not implemented")
}
func (*UnimplementedManagerServiceServer) CountShipmentOrder(context.Context, *CountShipmentOrderReq) (*CountShipmentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountShipmentOrder not implemented")
}
func (*UnimplementedManagerServiceServer) ReceiveShipmentOrder(context.Context, *ReceiveShipmentOrderReq) (*ReceiveShipmentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveShipmentOrder not implemented")
}
func (*UnimplementedManagerServiceServer) GetContractByShipmentPlanId(context.Context, *GetContractByShipmentPlanIdReq) (*GetContractByShipmentPlanIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractByShipmentPlanId not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateShipmentOrder(context.Context, *UpdateShipmentOrderReq) (*UpdateShipmentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShipmentOrder not implemented")
}
func (*UnimplementedManagerServiceServer) CountPayOrder(context.Context, *GetPayOrderReq) (*GetPayOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPayOrder not implemented")
}
func (*UnimplementedManagerServiceServer) GetConfig(context.Context, *GetConfigReq) (*GetConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateConfig(context.Context, *UpdateConfigReq) (*UpdateConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (*UnimplementedManagerServiceServer) InsertConfigs(context.Context, *InsertConfigsReq) (*InsertConfigsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertConfigs not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteConfigs(context.Context, *DeleteConfigsReq) (*DeleteConfigsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfigs not implemented")
}
func (*UnimplementedManagerServiceServer) ListCompanyBind(context.Context, *ListBindReq) (*ListBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompanyBind not implemented")
}
func (*UnimplementedManagerServiceServer) CompanyBind(context.Context, *BindReq) (*BindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyBind not implemented")
}
func (*UnimplementedManagerServiceServer) ListMiBind(context.Context, *ListBindReq) (*ListBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMiBind not implemented")
}
func (*UnimplementedManagerServiceServer) MiBind(context.Context, *BindReq) (*BindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiBind not implemented")
}
func (*UnimplementedManagerServiceServer) ListMedicineBind(context.Context, *ListBindReq) (*ListBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedicineBind not implemented")
}
func (*UnimplementedManagerServiceServer) MedicineBind(context.Context, *BindReq) (*BindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MedicineBind not implemented")
}
func (*UnimplementedManagerServiceServer) ListReimb(context.Context, *ListReimbReq) (*ListReimbResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReimb not implemented")
}
func (*UnimplementedManagerServiceServer) PayReimb(context.Context, *PayReimbReq) (*OpReimbResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayReimb not implemented")
}
func (*UnimplementedManagerServiceServer) ApplyReimbQuota(context.Context, *ApplyReimbQuotaReq) (*OpReimbResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyReimbQuota not implemented")
}
func (*UnimplementedManagerServiceServer) ApproveReimbQuota(context.Context, *ApproveReimbQuotaReq) (*OpReimbResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveReimbQuota not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateReimbReport(context.Context, *UpdateReimbReportReq) (*OpReimbResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReimbReport not implemented")
}
func (*UnimplementedManagerServiceServer) GetMiSpecialConfig(context.Context, *GetMiSpecialConfigReq) (*GetMiSpecialConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMiSpecialConfig not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateMiSpecialConfig(context.Context, *UpdateMiSpecialConfigReq) (*UpdateMiSpecialConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMiSpecialConfig not implemented")
}
func (*UnimplementedManagerServiceServer) QueryMiInfo(context.Context, *GetMiInfoReq) (*GetMiInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMiInfo not implemented")
}
func (*UnimplementedManagerServiceServer) CreateBankAccount(context.Context, *CreateBankAccountReq) (*CreateBankAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBankAccount not implemented")
}
func (*UnimplementedManagerServiceServer) CreateMiDevelopUser(context.Context, *CreateMiDevelopUserReq) (*CreateMiDevelopUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMiDevelopUser not implemented")
}
func (*UnimplementedManagerServiceServer) GetClientPermission(context.Context, *ClientPermissionReq) (*ClientPermissionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientPermission not implemented")
}
func (*UnimplementedManagerServiceServer) SetClientDevelop(context.Context, *SetClientDevelopReq) (*SetClientDevelopResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetClientDevelop not implemented")
}
func (*UnimplementedManagerServiceServer) SaveClientPermission(context.Context, *SaveClientPermissionReq) (*SaveClientPermissionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveClientPermission not implemented")
}
func (*UnimplementedManagerServiceServer) MedicineBindList(context.Context, *ListMedicineBindListReq) (*ListMedicineBindListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MedicineBindList not implemented")
}
func (*UnimplementedManagerServiceServer) MedicineBindCode(context.Context, *CreateStockMedcineCodeBindReq) (*CreateStockMedcineCodeBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MedicineBindCode not implemented")
}
func (*UnimplementedManagerServiceServer) SyncInfoMedicineMiStock(context.Context, *MedicineMiStockReq) (*MedicineMiStockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncInfoMedicineMiStock not implemented")
}
func (*UnimplementedManagerServiceServer) SyncInfoMedicineCompanyStock(context.Context, *MedicineCompanyStockReq) (*MedicineCompanyStockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncInfoMedicineCompanyStock not implemented")
}
func (*UnimplementedManagerServiceServer) MedicineStockMiListStock(context.Context, *MedicineStockMiListReq) (*MedicineStockMiListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MedicineStockMiListStock not implemented")
}
func (*UnimplementedManagerServiceServer) ReimbursementLists(context.Context, *ReimbursementListReq) (*ReimbursementListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReimbursementLists not implemented")
}
func (*UnimplementedManagerServiceServer) ReimbursementApplyQuota(context.Context, *ReimbursementApplyQuotaReq) (*ReimbursementApplyQuotaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReimbursementApplyQuota not implemented")
}
func (*UnimplementedManagerServiceServer) GetWsGetContractList(context.Context, *GetWsGetContractListReq) (*GetWsGetContractListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWsGetContractList not implemented")
}
func (*UnimplementedManagerServiceServer) SaveShipmentplan(context.Context, *ShipmentPlanListReq) (*ShipmentPlanListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveShipmentplan not implemented")
}
func (*UnimplementedManagerServiceServer) SaveTenderContractInfo(context.Context, *TenderContractInfoReq) (*TenderContractInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTenderContractInfo not implemented")
}
func (*UnimplementedManagerServiceServer) ListConstruction(context.Context, *ListConstructionReq) (*ListConstructionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConstruction not implemented")
}
func (*UnimplementedManagerServiceServer) CommonConstruction(context.Context, *CommonConstructionReq) (*CommonConstructionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonConstruction not implemented")
}
func (*UnimplementedManagerServiceServer) GetConstructionInfo(context.Context, *GetConstructionInfoReq) (*GetConstructionInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConstructionInfo not implemented")
}
func (*UnimplementedManagerServiceServer) CreateOneConstruction(context.Context, *CreateOneConstructionReq) (*CreateOneConstructionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneConstruction not implemented")
}
func (*UnimplementedManagerServiceServer) CreateHashConstruction(context.Context, *CreateHashConstructionReq) (*CreateHashConstructionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHashConstruction not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateOneConstruction(context.Context, *UpdateOneConstructionReq) (*UpdateOneConstructionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneConstruction not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateHashConstruction(context.Context, *UpdateHashConstructionReq) (*UpdateHashConstructionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHashConstruction not implemented")
}
func (*UnimplementedManagerServiceServer) UploadConstructionLogoUrl(context.Context, *UploadConstructionLogoUrlReq) (*UploadConstructionLogoUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadConstructionLogoUrl not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteConstruction(context.Context, *DeleteConstructionReq) (*DeleteConstructionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConstruction not implemented")
}
func (*UnimplementedManagerServiceServer) ListBuild(context.Context, *ListBuildReq) (*ListBuildResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuild not implemented")
}
func (*UnimplementedManagerServiceServer) CommonBuild(context.Context, *CommonBuildReq) (*CommonBuildResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonBuild not implemented")
}
func (*UnimplementedManagerServiceServer) GetBuildInfo(context.Context, *GetBuildInfoReq) (*GetBuildInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildInfo not implemented")
}
func (*UnimplementedManagerServiceServer) CreateOneBuild(context.Context, *CreateOneBuildReq) (*CreateOneBuildResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneBuild not implemented")
}
func (*UnimplementedManagerServiceServer) CreateHashBuild(context.Context, *CreateHashBuildReq) (*CreateHashBuildResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHashBuild not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateOneBuild(context.Context, *UpdateOneBuildReq) (*UpdateOneBuildResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneBuild not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateHashBuild(context.Context, *UpdateHashBuildReq) (*UpdateHashBuildResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHashBuild not implemented")
}
func (*UnimplementedManagerServiceServer) UploadBuildLogoUrl(context.Context, *UploadBuildLogoUrlReq) (*UploadBuildLogoUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadBuildLogoUrl not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteBuild(context.Context, *DeleteBuildReq) (*DeleteBuildResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBuild not implemented")
}
func (*UnimplementedManagerServiceServer) ListSupervisor(context.Context, *ListSupervisorReq) (*ListSupervisorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSupervisor not implemented")
}
func (*UnimplementedManagerServiceServer) CommonSupervisor(context.Context, *CommonSupervisorReq) (*CommonSupervisorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonSupervisor not implemented")
}
func (*UnimplementedManagerServiceServer) GetSupervisorInfo(context.Context, *GetSupervisorInfoReq) (*GetSupervisorInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupervisorInfo not implemented")
}
func (*UnimplementedManagerServiceServer) CreateOneSupervisor(context.Context, *CreateOneSupervisorReq) (*CreateOneSupervisorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneSupervisor not implemented")
}
func (*UnimplementedManagerServiceServer) CreateHashSupervisor(context.Context, *CreateHashSupervisorReq) (*CreateHashSupervisorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHashSupervisor not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateOneSupervisor(context.Context, *UpdateOneSupervisorReq) (*UpdateOneSupervisorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneSupervisor not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateHashSupervisor(context.Context, *UpdateHashSupervisorReq) (*UpdateHashSupervisorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHashSupervisor not implemented")
}
func (*UnimplementedManagerServiceServer) UploadSupervisorLogoUrl(context.Context, *UploadSupervisorLogoUrlReq) (*UploadSupervisorLogoUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSupervisorLogoUrl not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteSupervisor(context.Context, *DeleteSupervisorReq) (*DeleteSupervisorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSupervisor not implemented")
}
func (*UnimplementedManagerServiceServer) ListGoverment(context.Context, *ListGovermentReq) (*ListGovermentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGoverment not implemented")
}
func (*UnimplementedManagerServiceServer) CommonGoverment(context.Context, *CommonGovermentReq) (*CommonGovermentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonGoverment not implemented")
}
func (*UnimplementedManagerServiceServer) GetGovermentInfo(context.Context, *GetGovermentInfoReq) (*GetGovermentInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGovermentInfo not implemented")
}
func (*UnimplementedManagerServiceServer) CreateOneGoverment(context.Context, *CreateOneGovermentReq) (*CreateOneGovermentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneGoverment not implemented")
}
func (*UnimplementedManagerServiceServer) CreateHashGoverment(context.Context, *CreateHashGovermentReq) (*CreateHashGovermentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHashGoverment not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateOneGoverment(context.Context, *UpdateOneGovermentReq) (*UpdateOneGovermentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneGoverment not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateHashGoverment(context.Context, *UpdateHashGovermentReq) (*UpdateHashGovermentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHashGoverment not implemented")
}
func (*UnimplementedManagerServiceServer) UploadGovermentLogoUrl(context.Context, *UploadGovermentLogoUrlReq) (*UploadGovermentLogoUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGovermentLogoUrl not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteGoverment(context.Context, *DeleteGovermentReq) (*DeleteGovermentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGoverment not implemented")
}
func (*UnimplementedManagerServiceServer) ListProcess(context.Context, *ListProcessReq) (*ListProcessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProcess not implemented")
}
func (*UnimplementedManagerServiceServer) CommonProcess(context.Context, *CommonProcessReq) (*CommonProcessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonProcess not implemented")
}
func (*UnimplementedManagerServiceServer) CreateOneProcess(context.Context, *CreateOneProcessReq) (*CreateOneProcessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneProcess not implemented")
}
func (*UnimplementedManagerServiceServer) CreateHashProcess(context.Context, *CreateHashProcessReq) (*CreateHashProcessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHashProcess not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateOneProcess(context.Context, *UpdateProcessReq) (*UpdateProcessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneProcess not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateHashProcess(context.Context, *UpdateHashProcessReq) (*UpdateHashProcessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHashProcess not implemented")
}
func (*UnimplementedManagerServiceServer) GetProcessCodeById(context.Context, *GetProcessCodeReq) (*GetProcessCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessCodeById not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateOneProcessApprove(context.Context, *UpdateProcessApproveReq) (*UpdateProcessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneProcessApprove not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteProcess(context.Context, *DeleteProcessReq) (*DeleteProcessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProcess not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateProcessSort(context.Context, *UpdateProcessSortReq) (*UpdateProcessSortResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProcessSort not implemented")
}
func (*UnimplementedManagerServiceServer) GetProcessInfo(context.Context, *GetProcessInfoReq) (*GetProcessInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessInfo not implemented")
}
func (*UnimplementedManagerServiceServer) ListContract(context.Context, *ListContractReq) (*ListContractResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContract not implemented")
}
func (*UnimplementedManagerServiceServer) GetOneContract(context.Context, *GetOneContractReq) (*GetOneContractResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneContract not implemented")
}
func (*UnimplementedManagerServiceServer) CreateOneContract(context.Context, *CreateOneContractReq) (*CreateOneContractResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneContract not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateOneContract(context.Context, *UpdateOneContractReq) (*UpdateOneContractResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneContract not implemented")
}
func (*UnimplementedManagerServiceServer) CreateContractHash(context.Context, *CreateContractHashReq) (*CreateContractHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContractHash not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateContractHash(context.Context, *UpdateContractHashReq) (*UpdateContractHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContractHash not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteOneContract(context.Context, *DeleteOneContractReq) (*DeleteOneContractResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneContract not implemented")
}
func (*UnimplementedManagerServiceServer) CommonProjectPhase(context.Context, *CommonProjectPhaseReq) (*CommonProjectPhaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonProjectPhase not implemented")
}
func (*UnimplementedManagerServiceServer) GetBuildInfoCodeById(context.Context, *GetBuildInfoCodeByIdReq) (*GetBuildInfoCodeByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildInfoCodeById not implemented")
}
func (*UnimplementedManagerServiceServer) GGetSupervisorCodeById(context.Context, *GetSupervisorCodeByIdReq) (*GetSupervisorCodeByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GGetSupervisorCodeById not implemented")
}
func (*UnimplementedManagerServiceServer) GetGetGovermentCodeById(context.Context, *GetGovermentCodeByIdReq) (*GetGovermentCodeByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGetGovermentCodeById not implemented")
}
func (*UnimplementedManagerServiceServer) ListInvoice(context.Context, *ListInvoiceReq) (*ListInvoiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvoice not implemented")
}
func (*UnimplementedManagerServiceServer) GetOneInvoice(context.Context, *GetOneInvoiceReq) (*GetOneInvoiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneInvoice not implemented")
}
func (*UnimplementedManagerServiceServer) CreateOneInvoice(context.Context, *CreateOneInvoiceReq) (*CreateOneInvoiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneInvoice not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateOneInvoice(context.Context, *UpdateOneInvoiceReq) (*UpdateOneInvoiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneInvoice not implemented")
}
func (*UnimplementedManagerServiceServer) CreateInvoiceHash(context.Context, *CreateInvoiceHashReq) (*CreateInvoiceHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoiceHash not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateInvoiceHash(context.Context, *UpdateInvoiceHashReq) (*UpdateInvoiceHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvoiceHash not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteOneInvoice(context.Context, *DeleteOneInvoiceReq) (*DeleteOneInvoiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneInvoice not implemented")
}
func (*UnimplementedManagerServiceServer) ReceiveInvoiceHash(context.Context, *ReceiveInvoiceHashReq) (*ReceiveInvoiceHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveInvoiceHash not implemented")
}
func (*UnimplementedManagerServiceServer) PayInvoiceHash(context.Context, *PayInvoiceHashReq) (*PayInvoiceHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayInvoiceHash not implemented")
}
func (*UnimplementedManagerServiceServer) CreateOneProject(context.Context, *ProjectReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneProject not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateOneProject(context.Context, *ProjectReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneProject not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteOneProject(context.Context, *ProjectReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneProject not implemented")
}
func (*UnimplementedManagerServiceServer) GetOneProject(context.Context, *ProjectReq) (*ProjectsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneProject not implemented")
}
func (*UnimplementedManagerServiceServer) ListProject(context.Context, *ProjectReq) (*ProjectsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProject not implemented")
}
func (*UnimplementedManagerServiceServer) CreateProjectHash(context.Context, *CreateProjectHashReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectHash not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateProjectHash(context.Context, *UpdateProjectHashReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectHash not implemented")
}
func (*UnimplementedManagerServiceServer) CommonProject(context.Context, *CommonProjectReq) (*CommonProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonProject not implemented")
}
func (*UnimplementedManagerServiceServer) CreateOneProgressPlan(context.Context, *ProgressPlanReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneProgressPlan not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateOneProgressPlan(context.Context, *ProgressPlanReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneProgressPlan not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteOneProgressPlan(context.Context, *ProgressPlanReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneProgressPlan not implemented")
}
func (*UnimplementedManagerServiceServer) GetOneProgressPlan(context.Context, *ProgressPlanReq) (*ProgressPlansResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneProgressPlan not implemented")
}
func (*UnimplementedManagerServiceServer) ListProgressPlan(context.Context, *ProgressPlanReq) (*ProgressPlansResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProgressPlan not implemented")
}
func (*UnimplementedManagerServiceServer) CreateProgressPlanHash(context.Context, *CreateProgressPlanHashReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProgressPlanHash not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateProgressPlanHash(context.Context, *UpdateProgressPlanHashReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProgressPlanHash not implemented")
}
func (*UnimplementedManagerServiceServer) CreateOneProgressActual(context.Context, *ProgressActualReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneProgressActual not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateOneProgressActual(context.Context, *ProgressActualReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneProgressActual not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteOneProgressActual(context.Context, *ProgressActualReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneProgressActual not implemented")
}
func (*UnimplementedManagerServiceServer) GetOneProgressActual(context.Context, *ProgressActualReq) (*ProgressActualsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneProgressActual not implemented")
}
func (*UnimplementedManagerServiceServer) ListProgressActual(context.Context, *ProgressActualReq) (*ProgressActualsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProgressActual not implemented")
}
func (*UnimplementedManagerServiceServer) CreateProgressActualHash(context.Context, *CreateProgressActualHashReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProgressActualHash not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateProgressActualHash(context.Context, *UpdateProgressActualHashReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProgressActualHash not implemented")
}
func (*UnimplementedManagerServiceServer) CreateOneQualityInspection(context.Context, *QualityInspectionReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneQualityInspection not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateOneQualityInspection(context.Context, *QualityInspectionReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneQualityInspection not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteOneQualityInspection(context.Context, *QualityInspectionReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneQualityInspection not implemented")
}
func (*UnimplementedManagerServiceServer) GetOneQualityInspection(context.Context, *QualityInspectionReq) (*QualityInspectionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneQualityInspection not implemented")
}
func (*UnimplementedManagerServiceServer) ListQualityInspection(context.Context, *QualityInspectionReq) (*QualityInspectionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQualityInspection not implemented")
}
func (*UnimplementedManagerServiceServer) CreateQualityInspectionHash(context.Context, *CreateQualityInspectionHashReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQualityInspectionHash not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateQualityInspectionHash(context.Context, *UpdateQualityInspectionHashReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQualityInspectionHash not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateOneQualityRectify(context.Context, *QualityInspectionReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneQualityRectify not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateQualityRectifyHash(context.Context, *UpdateQualityInspectionHashReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQualityRectifyHash not implemented")
}
func (*UnimplementedManagerServiceServer) GetOneQualityRectify(context.Context, *QualityInspectionReq) (*QualityInspectionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneQualityRectify not implemented")
}
func (*UnimplementedManagerServiceServer) ListQualityRectify(context.Context, *QualityInspectionReq) (*QualityInspectionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQualityRectify not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateOneQualityReview(context.Context, *QualityInspectionReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneQualityReview not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateQualityReviewHash(context.Context, *UpdateQualityInspectionHashReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQualityReviewHash not implemented")
}
func (*UnimplementedManagerServiceServer) GetOneQualityReview(context.Context, *QualityInspectionReq) (*QualityInspectionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneQualityReview not implemented")
}
func (*UnimplementedManagerServiceServer) ListQualityReview(context.Context, *QualityInspectionReq) (*QualityInspectionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQualityReview not implemented")
}
func (*UnimplementedManagerServiceServer) CreateOneSafetyInspection(context.Context, *SafetyInspectionReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneSafetyInspection not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateOneSafetyInspection(context.Context, *SafetyInspectionReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneSafetyInspection not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteOneSafetyInspection(context.Context, *SafetyInspectionIdsReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneSafetyInspection not implemented")
}
func (*UnimplementedManagerServiceServer) GetOneSafetyInspection(context.Context, *SafetyInspectionIdsReq) (*SafetyInspectionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneSafetyInspection not implemented")
}
func (*UnimplementedManagerServiceServer) ListSafetyInspection(context.Context, *ListSafetyInspectionReq) (*SafetyInspectionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSafetyInspection not implemented")
}
func (*UnimplementedManagerServiceServer) CreateSafetyInspectionHash(context.Context, *SafetyInspectionReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSafetyInspectionHash not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateSafetyInspectionHash(context.Context, *SafetyInspectionReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSafetyInspectionHash not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateSafetyRectifyHash(context.Context, *SafetyInspectionReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSafetyRectifyHash not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateSafetyReviewHash(context.Context, *SafetyInspectionReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSafetyReviewHash not implemented")
}
func (*UnimplementedManagerServiceServer) GetSafetyInspectionHash(context.Context, *SafetyInspectionIdsReq) (*GetSafetyInspectionHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSafetyInspectionHash not implemented")
}
func (*UnimplementedManagerServiceServer) CreateOneSafetyLog(context.Context, *SafetyLogReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneSafetyLog not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateOneSafetyLog(context.Context, *SafetyLogReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneSafetyLog not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteOneSafetyLog(context.Context, *SafetyLogIdsReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneSafetyLog not implemented")
}
func (*UnimplementedManagerServiceServer) GetOneSafetyLog(context.Context, *SafetyLogIdsReq) (*SafetyLogsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneSafetyLog not implemented")
}
func (*UnimplementedManagerServiceServer) ListSafetyLog(context.Context, *ListSafetyLogReq) (*SafetyLogsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSafetyLog not implemented")
}
func (*UnimplementedManagerServiceServer) CreateSafetyLogHash(context.Context, *SafetyLogReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSafetyLogHash not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateSafetyLogHash(context.Context, *SafetyLogReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSafetyLogHash not implemented")
}
func (*UnimplementedManagerServiceServer) GetSafetyLogHash(context.Context, *SafetyLogIdsReq) (*GetSafetyLogHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSafetyLogHash not implemented")
}
func (*UnimplementedManagerServiceServer) CreateOneWorkman(context.Context, *WorkmanReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneWorkman not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateOneWorkman(context.Context, *WorkmanReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneWorkman not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteOneWorkman(context.Context, *WorkmanIdsReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneWorkman not implemented")
}
func (*UnimplementedManagerServiceServer) GetOneWorkman(context.Context, *WorkmanIdsReq) (*WorkmansResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneWorkman not implemented")
}
func (*UnimplementedManagerServiceServer) ListWorkman(context.Context, *ListWorkmanReq) (*WorkmansResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkman not implemented")
}
func (*UnimplementedManagerServiceServer) CreateWorkmanHash(context.Context, *WorkmanReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkmanHash not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateWorkmanHash(context.Context, *WorkmanReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkmanHash not implemented")
}
func (*UnimplementedManagerServiceServer) GetWorkmanHash(context.Context, *WorkmanIdsReq) (*GetWorkmanHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkmanHash not implemented")
}
func (*UnimplementedManagerServiceServer) ImportWorkman(context.Context, *WorkmansReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportWorkman not implemented")
}
func (*UnimplementedManagerServiceServer) BatchWorkmanHash(context.Context, *WorkmansReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchWorkmanHash not implemented")
}
func (*UnimplementedManagerServiceServer) CreateOneWorkmanAttendance(context.Context, *WorkmanAttendanceReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneWorkmanAttendance not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateOneWorkmanAttendance(context.Context, *WorkmanAttendanceReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneWorkmanAttendance not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteOneWorkmanAttendance(context.Context, *WorkmanAttendanceIdsReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneWorkmanAttendance not implemented")
}
func (*UnimplementedManagerServiceServer) GetOneWorkmanAttendance(context.Context, *WorkmanAttendanceIdsReq) (*WorkmanAttendancesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneWorkmanAttendance not implemented")
}
func (*UnimplementedManagerServiceServer) ListWorkmanAttendance(context.Context, *ListWorkmanAttendanceReq) (*WorkmanAttendancesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkmanAttendance not implemented")
}
func (*UnimplementedManagerServiceServer) CreateWorkmanAttendanceHash(context.Context, *WorkmanAttendanceReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkmanAttendanceHash not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateWorkmanAttendanceHash(context.Context, *WorkmanAttendanceReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkmanAttendanceHash not implemented")
}
func (*UnimplementedManagerServiceServer) GetWorkmanAttendanceHash(context.Context, *WorkmanAttendanceIdsReq) (*GetWorkmanAttendanceHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkmanAttendanceHash not implemented")
}
func (*UnimplementedManagerServiceServer) ImportWorkmanAttendance(context.Context, *WorkmanAttendancesReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportWorkmanAttendance not implemented")
}
func (*UnimplementedManagerServiceServer) BatchWorkmanAttendanceHash(context.Context, *WorkmanAttendancesReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchWorkmanAttendanceHash not implemented")
}
func (*UnimplementedManagerServiceServer) CreateOneMaterial(context.Context, *MaterialReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneMaterial not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateOneMaterial(context.Context, *MaterialReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneMaterial not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteOneMaterial(context.Context, *MaterialIdsReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneMaterial not implemented")
}
func (*UnimplementedManagerServiceServer) GetOneMaterial(context.Context, *MaterialIdsReq) (*MaterialsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneMaterial not implemented")
}
func (*UnimplementedManagerServiceServer) ListMaterial(context.Context, *ListMaterialReq) (*MaterialsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMaterial not implemented")
}
func (*UnimplementedManagerServiceServer) CreateMaterialHash(context.Context, *MaterialReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMaterialHash not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateMaterialHash(context.Context, *MaterialReq) (*OperateIntegerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMaterialHash not implemented")
}
func (*UnimplementedManagerServiceServer) GetMaterialHash(context.Context, *MaterialIdsReq) (*GetMaterialHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaterialHash not implemented")
}
func (*UnimplementedManagerServiceServer) ListMaterialDistinctName(context.Context, *ListMaterialDistinctNameReq) (*ListMaterialDistinctNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMaterialDistinctName not implemented")
}

func RegisterManagerServiceServer(s *grpc.Server, srv ManagerServiceServer) {
	s.RegisterService(&_ManagerService_serviceDesc, srv)
}

func _ManagerService_ListMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicineListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListMedicine(ctx, req.(*MedicineListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_MedicineListForQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicineListForQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).MedicineListForQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/MedicineListForQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).MedicineListForQuery(ctx, req.(*MedicineListForQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CommonListCnaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonListCnapsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CommonListCnaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CommonListCnaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CommonListCnaps(ctx, req.(*CommonListCnapsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CommonListTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonListTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CommonListTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CommonListTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CommonListTag(ctx, req.(*CommonListTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateMedicine(ctx, req.(*CreateMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateBatchMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBatchMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateBatchMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateBatchMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateBatchMedicine(ctx, req.(*CreateBatchMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateMedicine(ctx, req.(*UpdateMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateMedicineActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMedicineActiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateMedicineActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateMedicineActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateMedicineActive(ctx, req.(*UpdateMedicineActiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteMedicine(ctx, req.(*DeleteMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SelectTagByMedicineId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectTagByMedicineIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SelectTagByMedicineId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/SelectTagByMedicineId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SelectTagByMedicineId(ctx, req.(*SelectTagByMedicineIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SelectInfoByMedicineNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectInfoByMedicineNamesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SelectInfoByMedicineNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/SelectInfoByMedicineNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SelectInfoByMedicineNames(ctx, req.(*SelectInfoByMedicineNamesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateMedicineActiveHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMedicineActiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateMedicineActiveHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateMedicineActiveHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateMedicineActiveHash(ctx, req.(*UpdateMedicineActiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SelectByMedicineId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicineByMedicineIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SelectByMedicineId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/SelectByMedicineId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SelectByMedicineId(ctx, req.(*MedicineByMedicineIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_TagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).TagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/TagList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).TagList(ctx, req.(*TagListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateTag(ctx, req.(*CreateTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateTag(ctx, req.(*UpdateTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteTag(ctx, req.(*DeleteTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_TagDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagDetailListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).TagDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/TagDetailList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).TagDetailList(ctx, req.(*TagDetailListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteTagMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteTagMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteTagMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteTagMedicine(ctx, req.(*DeleteTagMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateTagMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateTagMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateTagMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateTagMedicine(ctx, req.(*CreateTagMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CommonMedicineQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonMedicineQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CommonMedicineQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CommonMedicineQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CommonMedicineQuery(ctx, req.(*CommonMedicineQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListMi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListMi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListMi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListMi(ctx, req.(*ListMiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CommonMI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonMIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CommonMI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CommonMI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CommonMI(ctx, req.(*CommonMIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CommonMIInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonMIInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CommonMIInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CommonMIInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CommonMIInfo(ctx, req.(*CommonMIInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneMI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOneMIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneMI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneMI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneMI(ctx, req.(*CreateOneMIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateMi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateMi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateMi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateMi(ctx, req.(*UpdateMiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UploadMiLogoUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadMiLogoUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UploadMiLogoUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UploadMiLogoUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UploadMiLogoUrl(ctx, req.(*UploadMiLogoUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetMiCodeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMICodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetMiCodeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetMiCodeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetMiCodeById(ctx, req.(*GetMICodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListCompany(ctx, req.(*ListCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOneCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneCompany(ctx, req.(*CreateOneCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOneCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneCompany(ctx, req.(*UpdateOneCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CommonCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CommonCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CommonCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CommonCompany(ctx, req.(*CommonCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetCompanyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetCompanyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetCompanyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetCompanyInfo(ctx, req.(*CommonCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SelCompanyByNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelCompanyByNamesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SelCompanyByNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/SelCompanyByNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SelCompanyByNames(ctx, req.(*SelCompanyByNamesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_QueryCompanyBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyBankAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).QueryCompanyBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/QueryCompanyBankAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).QueryCompanyBankAccount(ctx, req.(*GetCompanyBankAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UploadCompanyLogoUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadCompanyLogoUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UploadCompanyLogoUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UploadCompanyLogoUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UploadCompanyLogoUrl(ctx, req.(*UploadCompanyLogoUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetCompanysById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetCompanysById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetCompanysById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetCompanysById(ctx, req.(*GetCompanyInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListTpPlanErr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTpPlanErrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListTpPlanErr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListTpPlanErr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListTpPlanErr(ctx, req.(*ListTpPlanErrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateErrShipmentPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateErrShipmentPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateErrShipmentPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateErrShipmentPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateErrShipmentPlan(ctx, req.(*UpdateErrShipmentPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListShipmentPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShipmentPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListShipmentPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListShipmentPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListShipmentPlan(ctx, req.(*ListShipmentPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CountShipmentPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountShipmentPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CountShipmentPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CountShipmentPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CountShipmentPlan(ctx, req.(*CountShipmentPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ShipmentReceiveOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShipmentReceiveOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ShipmentReceiveOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ShipmentReceiveOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ShipmentReceiveOrder(ctx, req.(*ShipmentReceiveOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DetailShipmentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailShipmentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DetailShipmentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DetailShipmentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DetailShipmentOrder(ctx, req.(*DetailShipmentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListShipmentPlanForOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShipmentPlanForOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListShipmentPlanForOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListShipmentPlanForOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListShipmentPlanForOrder(ctx, req.(*ListShipmentPlanForOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateShipmentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShipmentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateShipmentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateShipmentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateShipmentOrder(ctx, req.(*CreateShipmentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListShipmentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShipmentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListShipmentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListShipmentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListShipmentOrder(ctx, req.(*ListShipmentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CountShipmentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountShipmentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CountShipmentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CountShipmentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CountShipmentOrder(ctx, req.(*CountShipmentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ReceiveShipmentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveShipmentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ReceiveShipmentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ReceiveShipmentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ReceiveShipmentOrder(ctx, req.(*ReceiveShipmentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetContractByShipmentPlanId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractByShipmentPlanIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetContractByShipmentPlanId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetContractByShipmentPlanId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetContractByShipmentPlanId(ctx, req.(*GetContractByShipmentPlanIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateShipmentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShipmentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateShipmentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateShipmentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateShipmentOrder(ctx, req.(*UpdateShipmentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CountPayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CountPayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CountPayOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CountPayOrder(ctx, req.(*GetPayOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetConfig(ctx, req.(*GetConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateConfig(ctx, req.(*UpdateConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_InsertConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).InsertConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/InsertConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).InsertConfigs(ctx, req.(*InsertConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteConfigs(ctx, req.(*DeleteConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListCompanyBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListCompanyBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListCompanyBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListCompanyBind(ctx, req.(*ListBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CompanyBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CompanyBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CompanyBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CompanyBind(ctx, req.(*BindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListMiBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListMiBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListMiBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListMiBind(ctx, req.(*ListBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_MiBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).MiBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/MiBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).MiBind(ctx, req.(*BindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListMedicineBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListMedicineBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListMedicineBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListMedicineBind(ctx, req.(*ListBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_MedicineBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).MedicineBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/MedicineBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).MedicineBind(ctx, req.(*BindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListReimb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReimbReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListReimb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListReimb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListReimb(ctx, req.(*ListReimbReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_PayReimb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayReimbReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).PayReimb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/PayReimb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).PayReimb(ctx, req.(*PayReimbReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ApplyReimbQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyReimbQuotaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ApplyReimbQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ApplyReimbQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ApplyReimbQuota(ctx, req.(*ApplyReimbQuotaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ApproveReimbQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveReimbQuotaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ApproveReimbQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ApproveReimbQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ApproveReimbQuota(ctx, req.(*ApproveReimbQuotaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateReimbReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReimbReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateReimbReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateReimbReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateReimbReport(ctx, req.(*UpdateReimbReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetMiSpecialConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMiSpecialConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetMiSpecialConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetMiSpecialConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetMiSpecialConfig(ctx, req.(*GetMiSpecialConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateMiSpecialConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMiSpecialConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateMiSpecialConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateMiSpecialConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateMiSpecialConfig(ctx, req.(*UpdateMiSpecialConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_QueryMiInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMiInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).QueryMiInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/QueryMiInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).QueryMiInfo(ctx, req.(*GetMiInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBankAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateBankAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateBankAccount(ctx, req.(*CreateBankAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateMiDevelopUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMiDevelopUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateMiDevelopUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateMiDevelopUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateMiDevelopUser(ctx, req.(*CreateMiDevelopUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetClientPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetClientPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetClientPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetClientPermission(ctx, req.(*ClientPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SetClientDevelop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetClientDevelopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SetClientDevelop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/SetClientDevelop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SetClientDevelop(ctx, req.(*SetClientDevelopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SaveClientPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveClientPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SaveClientPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/SaveClientPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SaveClientPermission(ctx, req.(*SaveClientPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_MedicineBindList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMedicineBindListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).MedicineBindList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/MedicineBindList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).MedicineBindList(ctx, req.(*ListMedicineBindListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_MedicineBindCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStockMedcineCodeBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).MedicineBindCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/MedicineBindCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).MedicineBindCode(ctx, req.(*CreateStockMedcineCodeBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SyncInfoMedicineMiStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicineMiStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SyncInfoMedicineMiStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/SyncInfoMedicineMiStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SyncInfoMedicineMiStock(ctx, req.(*MedicineMiStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SyncInfoMedicineCompanyStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicineCompanyStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SyncInfoMedicineCompanyStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/SyncInfoMedicineCompanyStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SyncInfoMedicineCompanyStock(ctx, req.(*MedicineCompanyStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_MedicineStockMiListStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicineStockMiListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).MedicineStockMiListStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/MedicineStockMiListStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).MedicineStockMiListStock(ctx, req.(*MedicineStockMiListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ReimbursementLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReimbursementListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ReimbursementLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ReimbursementLists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ReimbursementLists(ctx, req.(*ReimbursementListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ReimbursementApplyQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReimbursementApplyQuotaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ReimbursementApplyQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ReimbursementApplyQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ReimbursementApplyQuota(ctx, req.(*ReimbursementApplyQuotaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetWsGetContractList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWsGetContractListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetWsGetContractList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetWsGetContractList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetWsGetContractList(ctx, req.(*GetWsGetContractListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SaveShipmentplan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShipmentPlanListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SaveShipmentplan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/SaveShipmentplan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SaveShipmentplan(ctx, req.(*ShipmentPlanListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SaveTenderContractInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenderContractInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SaveTenderContractInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/SaveTenderContractInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SaveTenderContractInfo(ctx, req.(*TenderContractInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListConstruction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConstructionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListConstruction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListConstruction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListConstruction(ctx, req.(*ListConstructionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CommonConstruction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonConstructionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CommonConstruction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CommonConstruction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CommonConstruction(ctx, req.(*CommonConstructionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetConstructionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConstructionInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetConstructionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetConstructionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetConstructionInfo(ctx, req.(*GetConstructionInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneConstruction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOneConstructionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneConstruction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneConstruction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneConstruction(ctx, req.(*CreateOneConstructionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateHashConstruction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHashConstructionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateHashConstruction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateHashConstruction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateHashConstruction(ctx, req.(*CreateHashConstructionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneConstruction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOneConstructionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneConstruction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneConstruction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneConstruction(ctx, req.(*UpdateOneConstructionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateHashConstruction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHashConstructionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateHashConstruction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateHashConstruction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateHashConstruction(ctx, req.(*UpdateHashConstructionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UploadConstructionLogoUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadConstructionLogoUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UploadConstructionLogoUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UploadConstructionLogoUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UploadConstructionLogoUrl(ctx, req.(*UploadConstructionLogoUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteConstruction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConstructionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteConstruction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteConstruction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteConstruction(ctx, req.(*DeleteConstructionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBuildReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListBuild(ctx, req.(*ListBuildReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CommonBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonBuildReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CommonBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CommonBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CommonBuild(ctx, req.(*CommonBuildReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetBuildInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuildInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetBuildInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetBuildInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetBuildInfo(ctx, req.(*GetBuildInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOneBuildReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneBuild(ctx, req.(*CreateOneBuildReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateHashBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHashBuildReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateHashBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateHashBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateHashBuild(ctx, req.(*CreateHashBuildReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOneBuildReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneBuild(ctx, req.(*UpdateOneBuildReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateHashBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHashBuildReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateHashBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateHashBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateHashBuild(ctx, req.(*UpdateHashBuildReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UploadBuildLogoUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadBuildLogoUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UploadBuildLogoUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UploadBuildLogoUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UploadBuildLogoUrl(ctx, req.(*UploadBuildLogoUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBuildReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteBuild(ctx, req.(*DeleteBuildReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListSupervisor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSupervisorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListSupervisor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListSupervisor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListSupervisor(ctx, req.(*ListSupervisorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CommonSupervisor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonSupervisorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CommonSupervisor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CommonSupervisor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CommonSupervisor(ctx, req.(*CommonSupervisorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetSupervisorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupervisorInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetSupervisorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetSupervisorInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetSupervisorInfo(ctx, req.(*GetSupervisorInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneSupervisor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOneSupervisorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneSupervisor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneSupervisor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneSupervisor(ctx, req.(*CreateOneSupervisorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateHashSupervisor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHashSupervisorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateHashSupervisor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateHashSupervisor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateHashSupervisor(ctx, req.(*CreateHashSupervisorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneSupervisor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOneSupervisorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneSupervisor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneSupervisor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneSupervisor(ctx, req.(*UpdateOneSupervisorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateHashSupervisor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHashSupervisorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateHashSupervisor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateHashSupervisor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateHashSupervisor(ctx, req.(*UpdateHashSupervisorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UploadSupervisorLogoUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadSupervisorLogoUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UploadSupervisorLogoUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UploadSupervisorLogoUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UploadSupervisorLogoUrl(ctx, req.(*UploadSupervisorLogoUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteSupervisor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSupervisorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteSupervisor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteSupervisor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteSupervisor(ctx, req.(*DeleteSupervisorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListGoverment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGovermentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListGoverment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListGoverment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListGoverment(ctx, req.(*ListGovermentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CommonGoverment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonGovermentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CommonGoverment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CommonGoverment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CommonGoverment(ctx, req.(*CommonGovermentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetGovermentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGovermentInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetGovermentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetGovermentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetGovermentInfo(ctx, req.(*GetGovermentInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneGoverment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOneGovermentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneGoverment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneGoverment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneGoverment(ctx, req.(*CreateOneGovermentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateHashGoverment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHashGovermentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateHashGoverment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateHashGoverment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateHashGoverment(ctx, req.(*CreateHashGovermentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneGoverment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOneGovermentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneGoverment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneGoverment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneGoverment(ctx, req.(*UpdateOneGovermentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateHashGoverment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHashGovermentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateHashGoverment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateHashGoverment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateHashGoverment(ctx, req.(*UpdateHashGovermentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UploadGovermentLogoUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadGovermentLogoUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UploadGovermentLogoUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UploadGovermentLogoUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UploadGovermentLogoUrl(ctx, req.(*UploadGovermentLogoUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteGoverment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGovermentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteGoverment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteGoverment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteGoverment(ctx, req.(*DeleteGovermentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProcessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListProcess(ctx, req.(*ListProcessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CommonProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonProcessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CommonProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CommonProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CommonProcess(ctx, req.(*CommonProcessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOneProcessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneProcess(ctx, req.(*CreateOneProcessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateHashProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHashProcessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateHashProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateHashProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateHashProcess(ctx, req.(*CreateHashProcessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProcessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneProcess(ctx, req.(*UpdateProcessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateHashProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHashProcessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateHashProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateHashProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateHashProcess(ctx, req.(*UpdateHashProcessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetProcessCodeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetProcessCodeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetProcessCodeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetProcessCodeById(ctx, req.(*GetProcessCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneProcessApprove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProcessApproveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneProcessApprove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneProcessApprove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneProcessApprove(ctx, req.(*UpdateProcessApproveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProcessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteProcess(ctx, req.(*DeleteProcessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateProcessSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProcessSortReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateProcessSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateProcessSort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateProcessSort(ctx, req.(*UpdateProcessSortReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetProcessInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetProcessInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetProcessInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetProcessInfo(ctx, req.(*GetProcessInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListContract(ctx, req.(*ListContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetOneContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetOneContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetOneContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetOneContract(ctx, req.(*GetOneContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOneContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneContract(ctx, req.(*CreateOneContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOneContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneContract(ctx, req.(*UpdateOneContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateContractHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContractHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateContractHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateContractHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateContractHash(ctx, req.(*CreateContractHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateContractHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContractHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateContractHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateContractHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateContractHash(ctx, req.(*UpdateContractHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteOneContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOneContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteOneContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteOneContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteOneContract(ctx, req.(*DeleteOneContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CommonProjectPhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonProjectPhaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CommonProjectPhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CommonProjectPhase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CommonProjectPhase(ctx, req.(*CommonProjectPhaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetBuildInfoCodeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuildInfoCodeByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetBuildInfoCodeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetBuildInfoCodeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetBuildInfoCodeById(ctx, req.(*GetBuildInfoCodeByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GGetSupervisorCodeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupervisorCodeByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GGetSupervisorCodeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GGetSupervisorCodeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GGetSupervisorCodeById(ctx, req.(*GetSupervisorCodeByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetGetGovermentCodeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGovermentCodeByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetGetGovermentCodeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetGetGovermentCodeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetGetGovermentCodeById(ctx, req.(*GetGovermentCodeByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvoiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListInvoice(ctx, req.(*ListInvoiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetOneInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneInvoiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetOneInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetOneInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetOneInvoice(ctx, req.(*GetOneInvoiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOneInvoiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneInvoice(ctx, req.(*CreateOneInvoiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOneInvoiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneInvoice(ctx, req.(*UpdateOneInvoiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateInvoiceHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateInvoiceHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateInvoiceHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateInvoiceHash(ctx, req.(*CreateInvoiceHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateInvoiceHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvoiceHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateInvoiceHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateInvoiceHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateInvoiceHash(ctx, req.(*UpdateInvoiceHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteOneInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOneInvoiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteOneInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteOneInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteOneInvoice(ctx, req.(*DeleteOneInvoiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ReceiveInvoiceHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveInvoiceHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ReceiveInvoiceHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ReceiveInvoiceHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ReceiveInvoiceHash(ctx, req.(*ReceiveInvoiceHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_PayInvoiceHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayInvoiceHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).PayInvoiceHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/PayInvoiceHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).PayInvoiceHash(ctx, req.(*PayInvoiceHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneProject(ctx, req.(*ProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneProject(ctx, req.(*ProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteOneProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteOneProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteOneProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteOneProject(ctx, req.(*ProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetOneProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetOneProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetOneProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetOneProject(ctx, req.(*ProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListProject(ctx, req.(*ProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateProjectHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateProjectHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateProjectHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateProjectHash(ctx, req.(*CreateProjectHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateProjectHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateProjectHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateProjectHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateProjectHash(ctx, req.(*UpdateProjectHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CommonProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CommonProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CommonProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CommonProject(ctx, req.(*CommonProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneProgressPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneProgressPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneProgressPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneProgressPlan(ctx, req.(*ProgressPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneProgressPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneProgressPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneProgressPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneProgressPlan(ctx, req.(*ProgressPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteOneProgressPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteOneProgressPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteOneProgressPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteOneProgressPlan(ctx, req.(*ProgressPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetOneProgressPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetOneProgressPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetOneProgressPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetOneProgressPlan(ctx, req.(*ProgressPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListProgressPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListProgressPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListProgressPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListProgressPlan(ctx, req.(*ProgressPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateProgressPlanHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProgressPlanHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateProgressPlanHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateProgressPlanHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateProgressPlanHash(ctx, req.(*CreateProgressPlanHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateProgressPlanHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProgressPlanHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateProgressPlanHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateProgressPlanHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateProgressPlanHash(ctx, req.(*UpdateProgressPlanHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneProgressActual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressActualReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneProgressActual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneProgressActual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneProgressActual(ctx, req.(*ProgressActualReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneProgressActual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressActualReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneProgressActual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneProgressActual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneProgressActual(ctx, req.(*ProgressActualReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteOneProgressActual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressActualReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteOneProgressActual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteOneProgressActual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteOneProgressActual(ctx, req.(*ProgressActualReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetOneProgressActual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressActualReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetOneProgressActual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetOneProgressActual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetOneProgressActual(ctx, req.(*ProgressActualReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListProgressActual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressActualReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListProgressActual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListProgressActual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListProgressActual(ctx, req.(*ProgressActualReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateProgressActualHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProgressActualHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateProgressActualHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateProgressActualHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateProgressActualHash(ctx, req.(*CreateProgressActualHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateProgressActualHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProgressActualHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateProgressActualHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateProgressActualHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateProgressActualHash(ctx, req.(*UpdateProgressActualHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneQualityInspection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QualityInspectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneQualityInspection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneQualityInspection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneQualityInspection(ctx, req.(*QualityInspectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneQualityInspection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QualityInspectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneQualityInspection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneQualityInspection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneQualityInspection(ctx, req.(*QualityInspectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteOneQualityInspection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QualityInspectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteOneQualityInspection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteOneQualityInspection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteOneQualityInspection(ctx, req.(*QualityInspectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetOneQualityInspection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QualityInspectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetOneQualityInspection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetOneQualityInspection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetOneQualityInspection(ctx, req.(*QualityInspectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListQualityInspection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QualityInspectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListQualityInspection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListQualityInspection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListQualityInspection(ctx, req.(*QualityInspectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateQualityInspectionHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQualityInspectionHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateQualityInspectionHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateQualityInspectionHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateQualityInspectionHash(ctx, req.(*CreateQualityInspectionHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateQualityInspectionHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQualityInspectionHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateQualityInspectionHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateQualityInspectionHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateQualityInspectionHash(ctx, req.(*UpdateQualityInspectionHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneQualityRectify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QualityInspectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneQualityRectify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneQualityRectify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneQualityRectify(ctx, req.(*QualityInspectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateQualityRectifyHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQualityInspectionHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateQualityRectifyHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateQualityRectifyHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateQualityRectifyHash(ctx, req.(*UpdateQualityInspectionHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetOneQualityRectify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QualityInspectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetOneQualityRectify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetOneQualityRectify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetOneQualityRectify(ctx, req.(*QualityInspectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListQualityRectify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QualityInspectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListQualityRectify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListQualityRectify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListQualityRectify(ctx, req.(*QualityInspectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneQualityReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QualityInspectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneQualityReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneQualityReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneQualityReview(ctx, req.(*QualityInspectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateQualityReviewHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQualityInspectionHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateQualityReviewHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateQualityReviewHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateQualityReviewHash(ctx, req.(*UpdateQualityInspectionHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetOneQualityReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QualityInspectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetOneQualityReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetOneQualityReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetOneQualityReview(ctx, req.(*QualityInspectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListQualityReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QualityInspectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListQualityReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListQualityReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListQualityReview(ctx, req.(*QualityInspectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneSafetyInspection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafetyInspectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneSafetyInspection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneSafetyInspection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneSafetyInspection(ctx, req.(*SafetyInspectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneSafetyInspection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafetyInspectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneSafetyInspection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneSafetyInspection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneSafetyInspection(ctx, req.(*SafetyInspectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteOneSafetyInspection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafetyInspectionIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteOneSafetyInspection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteOneSafetyInspection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteOneSafetyInspection(ctx, req.(*SafetyInspectionIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetOneSafetyInspection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafetyInspectionIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetOneSafetyInspection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetOneSafetyInspection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetOneSafetyInspection(ctx, req.(*SafetyInspectionIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListSafetyInspection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSafetyInspectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListSafetyInspection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListSafetyInspection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListSafetyInspection(ctx, req.(*ListSafetyInspectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateSafetyInspectionHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafetyInspectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateSafetyInspectionHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateSafetyInspectionHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateSafetyInspectionHash(ctx, req.(*SafetyInspectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateSafetyInspectionHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafetyInspectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateSafetyInspectionHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateSafetyInspectionHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateSafetyInspectionHash(ctx, req.(*SafetyInspectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateSafetyRectifyHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafetyInspectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateSafetyRectifyHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateSafetyRectifyHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateSafetyRectifyHash(ctx, req.(*SafetyInspectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateSafetyReviewHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafetyInspectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateSafetyReviewHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateSafetyReviewHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateSafetyReviewHash(ctx, req.(*SafetyInspectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetSafetyInspectionHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafetyInspectionIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetSafetyInspectionHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetSafetyInspectionHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetSafetyInspectionHash(ctx, req.(*SafetyInspectionIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneSafetyLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafetyLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneSafetyLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneSafetyLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneSafetyLog(ctx, req.(*SafetyLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneSafetyLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafetyLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneSafetyLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneSafetyLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneSafetyLog(ctx, req.(*SafetyLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteOneSafetyLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafetyLogIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteOneSafetyLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteOneSafetyLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteOneSafetyLog(ctx, req.(*SafetyLogIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetOneSafetyLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafetyLogIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetOneSafetyLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetOneSafetyLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetOneSafetyLog(ctx, req.(*SafetyLogIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListSafetyLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSafetyLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListSafetyLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListSafetyLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListSafetyLog(ctx, req.(*ListSafetyLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateSafetyLogHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafetyLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateSafetyLogHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateSafetyLogHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateSafetyLogHash(ctx, req.(*SafetyLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateSafetyLogHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafetyLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateSafetyLogHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateSafetyLogHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateSafetyLogHash(ctx, req.(*SafetyLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetSafetyLogHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafetyLogIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetSafetyLogHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetSafetyLogHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetSafetyLogHash(ctx, req.(*SafetyLogIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneWorkman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkmanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneWorkman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneWorkman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneWorkman(ctx, req.(*WorkmanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneWorkman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkmanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneWorkman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneWorkman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneWorkman(ctx, req.(*WorkmanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteOneWorkman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkmanIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteOneWorkman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteOneWorkman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteOneWorkman(ctx, req.(*WorkmanIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetOneWorkman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkmanIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetOneWorkman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetOneWorkman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetOneWorkman(ctx, req.(*WorkmanIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListWorkman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkmanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListWorkman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListWorkman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListWorkman(ctx, req.(*ListWorkmanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateWorkmanHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkmanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateWorkmanHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateWorkmanHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateWorkmanHash(ctx, req.(*WorkmanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateWorkmanHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkmanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateWorkmanHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateWorkmanHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateWorkmanHash(ctx, req.(*WorkmanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetWorkmanHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkmanIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetWorkmanHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetWorkmanHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetWorkmanHash(ctx, req.(*WorkmanIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ImportWorkman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkmansReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ImportWorkman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ImportWorkman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ImportWorkman(ctx, req.(*WorkmansReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_BatchWorkmanHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkmansReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).BatchWorkmanHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/BatchWorkmanHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).BatchWorkmanHash(ctx, req.(*WorkmansReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneWorkmanAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkmanAttendanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneWorkmanAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneWorkmanAttendance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneWorkmanAttendance(ctx, req.(*WorkmanAttendanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneWorkmanAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkmanAttendanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneWorkmanAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneWorkmanAttendance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneWorkmanAttendance(ctx, req.(*WorkmanAttendanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteOneWorkmanAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkmanAttendanceIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteOneWorkmanAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteOneWorkmanAttendance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteOneWorkmanAttendance(ctx, req.(*WorkmanAttendanceIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetOneWorkmanAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkmanAttendanceIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetOneWorkmanAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetOneWorkmanAttendance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetOneWorkmanAttendance(ctx, req.(*WorkmanAttendanceIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListWorkmanAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkmanAttendanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListWorkmanAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListWorkmanAttendance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListWorkmanAttendance(ctx, req.(*ListWorkmanAttendanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateWorkmanAttendanceHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkmanAttendanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateWorkmanAttendanceHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateWorkmanAttendanceHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateWorkmanAttendanceHash(ctx, req.(*WorkmanAttendanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateWorkmanAttendanceHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkmanAttendanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateWorkmanAttendanceHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateWorkmanAttendanceHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateWorkmanAttendanceHash(ctx, req.(*WorkmanAttendanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetWorkmanAttendanceHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkmanAttendanceIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetWorkmanAttendanceHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetWorkmanAttendanceHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetWorkmanAttendanceHash(ctx, req.(*WorkmanAttendanceIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ImportWorkmanAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkmanAttendancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ImportWorkmanAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ImportWorkmanAttendance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ImportWorkmanAttendance(ctx, req.(*WorkmanAttendancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_BatchWorkmanAttendanceHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkmanAttendancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).BatchWorkmanAttendanceHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/BatchWorkmanAttendanceHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).BatchWorkmanAttendanceHash(ctx, req.(*WorkmanAttendancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneMaterial(ctx, req.(*MaterialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneMaterial(ctx, req.(*MaterialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteOneMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteOneMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteOneMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteOneMaterial(ctx, req.(*MaterialIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetOneMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetOneMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetOneMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetOneMaterial(ctx, req.(*MaterialIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMaterialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListMaterial(ctx, req.(*ListMaterialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateMaterialHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateMaterialHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateMaterialHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateMaterialHash(ctx, req.(*MaterialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateMaterialHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateMaterialHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateMaterialHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateMaterialHash(ctx, req.(*MaterialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetMaterialHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetMaterialHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetMaterialHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetMaterialHash(ctx, req.(*MaterialIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListMaterialDistinctName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMaterialDistinctNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListMaterialDistinctName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListMaterialDistinctName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListMaterialDistinctName(ctx, req.(*ListMaterialDistinctNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ManagerService.ManagerService",
	HandlerType: (*ManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMedicine",
			Handler:    _ManagerService_ListMedicine_Handler,
		},
		{
			MethodName: "MedicineListForQuery",
			Handler:    _ManagerService_MedicineListForQuery_Handler,
		},
		{
			MethodName: "CommonListCnaps",
			Handler:    _ManagerService_CommonListCnaps_Handler,
		},
		{
			MethodName: "CommonListTag",
			Handler:    _ManagerService_CommonListTag_Handler,
		},
		{
			MethodName: "CreateMedicine",
			Handler:    _ManagerService_CreateMedicine_Handler,
		},
		{
			MethodName: "CreateBatchMedicine",
			Handler:    _ManagerService_CreateBatchMedicine_Handler,
		},
		{
			MethodName: "UpdateMedicine",
			Handler:    _ManagerService_UpdateMedicine_Handler,
		},
		{
			MethodName: "UpdateMedicineActive",
			Handler:    _ManagerService_UpdateMedicineActive_Handler,
		},
		{
			MethodName: "DeleteMedicine",
			Handler:    _ManagerService_DeleteMedicine_Handler,
		},
		{
			MethodName: "SelectTagByMedicineId",
			Handler:    _ManagerService_SelectTagByMedicineId_Handler,
		},
		{
			MethodName: "SelectInfoByMedicineNames",
			Handler:    _ManagerService_SelectInfoByMedicineNames_Handler,
		},
		{
			MethodName: "UpdateMedicineActiveHash",
			Handler:    _ManagerService_UpdateMedicineActiveHash_Handler,
		},
		{
			MethodName: "SelectByMedicineId",
			Handler:    _ManagerService_SelectByMedicineId_Handler,
		},
		{
			MethodName: "TagList",
			Handler:    _ManagerService_TagList_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _ManagerService_CreateTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _ManagerService_UpdateTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _ManagerService_DeleteTag_Handler,
		},
		{
			MethodName: "TagDetailList",
			Handler:    _ManagerService_TagDetailList_Handler,
		},
		{
			MethodName: "DeleteTagMedicine",
			Handler:    _ManagerService_DeleteTagMedicine_Handler,
		},
		{
			MethodName: "CreateTagMedicine",
			Handler:    _ManagerService_CreateTagMedicine_Handler,
		},
		{
			MethodName: "CommonMedicineQuery",
			Handler:    _ManagerService_CommonMedicineQuery_Handler,
		},
		{
			MethodName: "ListMi",
			Handler:    _ManagerService_ListMi_Handler,
		},
		{
			MethodName: "CommonMI",
			Handler:    _ManagerService_CommonMI_Handler,
		},
		{
			MethodName: "CommonMIInfo",
			Handler:    _ManagerService_CommonMIInfo_Handler,
		},
		{
			MethodName: "CreateOneMI",
			Handler:    _ManagerService_CreateOneMI_Handler,
		},
		{
			MethodName: "UpdateMi",
			Handler:    _ManagerService_UpdateMi_Handler,
		},
		{
			MethodName: "UploadMiLogoUrl",
			Handler:    _ManagerService_UploadMiLogoUrl_Handler,
		},
		{
			MethodName: "GetMiCodeById",
			Handler:    _ManagerService_GetMiCodeById_Handler,
		},
		{
			MethodName: "ListCompany",
			Handler:    _ManagerService_ListCompany_Handler,
		},
		{
			MethodName: "CreateOneCompany",
			Handler:    _ManagerService_CreateOneCompany_Handler,
		},
		{
			MethodName: "UpdateOneCompany",
			Handler:    _ManagerService_UpdateOneCompany_Handler,
		},
		{
			MethodName: "CommonCompany",
			Handler:    _ManagerService_CommonCompany_Handler,
		},
		{
			MethodName: "GetCompanyInfo",
			Handler:    _ManagerService_GetCompanyInfo_Handler,
		},
		{
			MethodName: "SelCompanyByNames",
			Handler:    _ManagerService_SelCompanyByNames_Handler,
		},
		{
			MethodName: "QueryCompanyBankAccount",
			Handler:    _ManagerService_QueryCompanyBankAccount_Handler,
		},
		{
			MethodName: "UploadCompanyLogoUrl",
			Handler:    _ManagerService_UploadCompanyLogoUrl_Handler,
		},
		{
			MethodName: "GetCompanysById",
			Handler:    _ManagerService_GetCompanysById_Handler,
		},
		{
			MethodName: "ListTpPlanErr",
			Handler:    _ManagerService_ListTpPlanErr_Handler,
		},
		{
			MethodName: "UpdateErrShipmentPlan",
			Handler:    _ManagerService_UpdateErrShipmentPlan_Handler,
		},
		{
			MethodName: "ListShipmentPlan",
			Handler:    _ManagerService_ListShipmentPlan_Handler,
		},
		{
			MethodName: "CountShipmentPlan",
			Handler:    _ManagerService_CountShipmentPlan_Handler,
		},
		{
			MethodName: "ShipmentReceiveOrder",
			Handler:    _ManagerService_ShipmentReceiveOrder_Handler,
		},
		{
			MethodName: "DetailShipmentOrder",
			Handler:    _ManagerService_DetailShipmentOrder_Handler,
		},
		{
			MethodName: "ListShipmentPlanForOrder",
			Handler:    _ManagerService_ListShipmentPlanForOrder_Handler,
		},
		{
			MethodName: "CreateShipmentOrder",
			Handler:    _ManagerService_CreateShipmentOrder_Handler,
		},
		{
			MethodName: "ListShipmentOrder",
			Handler:    _ManagerService_ListShipmentOrder_Handler,
		},
		{
			MethodName: "CountShipmentOrder",
			Handler:    _ManagerService_CountShipmentOrder_Handler,
		},
		{
			MethodName: "ReceiveShipmentOrder",
			Handler:    _ManagerService_ReceiveShipmentOrder_Handler,
		},
		{
			MethodName: "GetContractByShipmentPlanId",
			Handler:    _ManagerService_GetContractByShipmentPlanId_Handler,
		},
		{
			MethodName: "UpdateShipmentOrder",
			Handler:    _ManagerService_UpdateShipmentOrder_Handler,
		},
		{
			MethodName: "CountPayOrder",
			Handler:    _ManagerService_CountPayOrder_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _ManagerService_GetConfig_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _ManagerService_UpdateConfig_Handler,
		},
		{
			MethodName: "InsertConfigs",
			Handler:    _ManagerService_InsertConfigs_Handler,
		},
		{
			MethodName: "DeleteConfigs",
			Handler:    _ManagerService_DeleteConfigs_Handler,
		},
		{
			MethodName: "ListCompanyBind",
			Handler:    _ManagerService_ListCompanyBind_Handler,
		},
		{
			MethodName: "CompanyBind",
			Handler:    _ManagerService_CompanyBind_Handler,
		},
		{
			MethodName: "ListMiBind",
			Handler:    _ManagerService_ListMiBind_Handler,
		},
		{
			MethodName: "MiBind",
			Handler:    _ManagerService_MiBind_Handler,
		},
		{
			MethodName: "ListMedicineBind",
			Handler:    _ManagerService_ListMedicineBind_Handler,
		},
		{
			MethodName: "MedicineBind",
			Handler:    _ManagerService_MedicineBind_Handler,
		},
		{
			MethodName: "ListReimb",
			Handler:    _ManagerService_ListReimb_Handler,
		},
		{
			MethodName: "PayReimb",
			Handler:    _ManagerService_PayReimb_Handler,
		},
		{
			MethodName: "ApplyReimbQuota",
			Handler:    _ManagerService_ApplyReimbQuota_Handler,
		},
		{
			MethodName: "ApproveReimbQuota",
			Handler:    _ManagerService_ApproveReimbQuota_Handler,
		},
		{
			MethodName: "UpdateReimbReport",
			Handler:    _ManagerService_UpdateReimbReport_Handler,
		},
		{
			MethodName: "GetMiSpecialConfig",
			Handler:    _ManagerService_GetMiSpecialConfig_Handler,
		},
		{
			MethodName: "UpdateMiSpecialConfig",
			Handler:    _ManagerService_UpdateMiSpecialConfig_Handler,
		},
		{
			MethodName: "QueryMiInfo",
			Handler:    _ManagerService_QueryMiInfo_Handler,
		},
		{
			MethodName: "CreateBankAccount",
			Handler:    _ManagerService_CreateBankAccount_Handler,
		},
		{
			MethodName: "CreateMiDevelopUser",
			Handler:    _ManagerService_CreateMiDevelopUser_Handler,
		},
		{
			MethodName: "GetClientPermission",
			Handler:    _ManagerService_GetClientPermission_Handler,
		},
		{
			MethodName: "SetClientDevelop",
			Handler:    _ManagerService_SetClientDevelop_Handler,
		},
		{
			MethodName: "SaveClientPermission",
			Handler:    _ManagerService_SaveClientPermission_Handler,
		},
		{
			MethodName: "MedicineBindList",
			Handler:    _ManagerService_MedicineBindList_Handler,
		},
		{
			MethodName: "MedicineBindCode",
			Handler:    _ManagerService_MedicineBindCode_Handler,
		},
		{
			MethodName: "SyncInfoMedicineMiStock",
			Handler:    _ManagerService_SyncInfoMedicineMiStock_Handler,
		},
		{
			MethodName: "SyncInfoMedicineCompanyStock",
			Handler:    _ManagerService_SyncInfoMedicineCompanyStock_Handler,
		},
		{
			MethodName: "MedicineStockMiListStock",
			Handler:    _ManagerService_MedicineStockMiListStock_Handler,
		},
		{
			MethodName: "ReimbursementLists",
			Handler:    _ManagerService_ReimbursementLists_Handler,
		},
		{
			MethodName: "ReimbursementApplyQuota",
			Handler:    _ManagerService_ReimbursementApplyQuota_Handler,
		},
		{
			MethodName: "GetWsGetContractList",
			Handler:    _ManagerService_GetWsGetContractList_Handler,
		},
		{
			MethodName: "SaveShipmentplan",
			Handler:    _ManagerService_SaveShipmentplan_Handler,
		},
		{
			MethodName: "SaveTenderContractInfo",
			Handler:    _ManagerService_SaveTenderContractInfo_Handler,
		},
		{
			MethodName: "ListConstruction",
			Handler:    _ManagerService_ListConstruction_Handler,
		},
		{
			MethodName: "CommonConstruction",
			Handler:    _ManagerService_CommonConstruction_Handler,
		},
		{
			MethodName: "GetConstructionInfo",
			Handler:    _ManagerService_GetConstructionInfo_Handler,
		},
		{
			MethodName: "CreateOneConstruction",
			Handler:    _ManagerService_CreateOneConstruction_Handler,
		},
		{
			MethodName: "CreateHashConstruction",
			Handler:    _ManagerService_CreateHashConstruction_Handler,
		},
		{
			MethodName: "UpdateOneConstruction",
			Handler:    _ManagerService_UpdateOneConstruction_Handler,
		},
		{
			MethodName: "UpdateHashConstruction",
			Handler:    _ManagerService_UpdateHashConstruction_Handler,
		},
		{
			MethodName: "UploadConstructionLogoUrl",
			Handler:    _ManagerService_UploadConstructionLogoUrl_Handler,
		},
		{
			MethodName: "DeleteConstruction",
			Handler:    _ManagerService_DeleteConstruction_Handler,
		},
		{
			MethodName: "ListBuild",
			Handler:    _ManagerService_ListBuild_Handler,
		},
		{
			MethodName: "CommonBuild",
			Handler:    _ManagerService_CommonBuild_Handler,
		},
		{
			MethodName: "GetBuildInfo",
			Handler:    _ManagerService_GetBuildInfo_Handler,
		},
		{
			MethodName: "CreateOneBuild",
			Handler:    _ManagerService_CreateOneBuild_Handler,
		},
		{
			MethodName: "CreateHashBuild",
			Handler:    _ManagerService_CreateHashBuild_Handler,
		},
		{
			MethodName: "UpdateOneBuild",
			Handler:    _ManagerService_UpdateOneBuild_Handler,
		},
		{
			MethodName: "UpdateHashBuild",
			Handler:    _ManagerService_UpdateHashBuild_Handler,
		},
		{
			MethodName: "UploadBuildLogoUrl",
			Handler:    _ManagerService_UploadBuildLogoUrl_Handler,
		},
		{
			MethodName: "DeleteBuild",
			Handler:    _ManagerService_DeleteBuild_Handler,
		},
		{
			MethodName: "ListSupervisor",
			Handler:    _ManagerService_ListSupervisor_Handler,
		},
		{
			MethodName: "CommonSupervisor",
			Handler:    _ManagerService_CommonSupervisor_Handler,
		},
		{
			MethodName: "GetSupervisorInfo",
			Handler:    _ManagerService_GetSupervisorInfo_Handler,
		},
		{
			MethodName: "CreateOneSupervisor",
			Handler:    _ManagerService_CreateOneSupervisor_Handler,
		},
		{
			MethodName: "CreateHashSupervisor",
			Handler:    _ManagerService_CreateHashSupervisor_Handler,
		},
		{
			MethodName: "UpdateOneSupervisor",
			Handler:    _ManagerService_UpdateOneSupervisor_Handler,
		},
		{
			MethodName: "UpdateHashSupervisor",
			Handler:    _ManagerService_UpdateHashSupervisor_Handler,
		},
		{
			MethodName: "UploadSupervisorLogoUrl",
			Handler:    _ManagerService_UploadSupervisorLogoUrl_Handler,
		},
		{
			MethodName: "DeleteSupervisor",
			Handler:    _ManagerService_DeleteSupervisor_Handler,
		},
		{
			MethodName: "ListGoverment",
			Handler:    _ManagerService_ListGoverment_Handler,
		},
		{
			MethodName: "CommonGoverment",
			Handler:    _ManagerService_CommonGoverment_Handler,
		},
		{
			MethodName: "GetGovermentInfo",
			Handler:    _ManagerService_GetGovermentInfo_Handler,
		},
		{
			MethodName: "CreateOneGoverment",
			Handler:    _ManagerService_CreateOneGoverment_Handler,
		},
		{
			MethodName: "CreateHashGoverment",
			Handler:    _ManagerService_CreateHashGoverment_Handler,
		},
		{
			MethodName: "UpdateOneGoverment",
			Handler:    _ManagerService_UpdateOneGoverment_Handler,
		},
		{
			MethodName: "UpdateHashGoverment",
			Handler:    _ManagerService_UpdateHashGoverment_Handler,
		},
		{
			MethodName: "UploadGovermentLogoUrl",
			Handler:    _ManagerService_UploadGovermentLogoUrl_Handler,
		},
		{
			MethodName: "DeleteGoverment",
			Handler:    _ManagerService_DeleteGoverment_Handler,
		},
		{
			MethodName: "ListProcess",
			Handler:    _ManagerService_ListProcess_Handler,
		},
		{
			MethodName: "CommonProcess",
			Handler:    _ManagerService_CommonProcess_Handler,
		},
		{
			MethodName: "CreateOneProcess",
			Handler:    _ManagerService_CreateOneProcess_Handler,
		},
		{
			MethodName: "CreateHashProcess",
			Handler:    _ManagerService_CreateHashProcess_Handler,
		},
		{
			MethodName: "UpdateOneProcess",
			Handler:    _ManagerService_UpdateOneProcess_Handler,
		},
		{
			MethodName: "UpdateHashProcess",
			Handler:    _ManagerService_UpdateHashProcess_Handler,
		},
		{
			MethodName: "GetProcessCodeById",
			Handler:    _ManagerService_GetProcessCodeById_Handler,
		},
		{
			MethodName: "UpdateOneProcessApprove",
			Handler:    _ManagerService_UpdateOneProcessApprove_Handler,
		},
		{
			MethodName: "DeleteProcess",
			Handler:    _ManagerService_DeleteProcess_Handler,
		},
		{
			MethodName: "UpdateProcessSort",
			Handler:    _ManagerService_UpdateProcessSort_Handler,
		},
		{
			MethodName: "GetProcessInfo",
			Handler:    _ManagerService_GetProcessInfo_Handler,
		},
		{
			MethodName: "ListContract",
			Handler:    _ManagerService_ListContract_Handler,
		},
		{
			MethodName: "GetOneContract",
			Handler:    _ManagerService_GetOneContract_Handler,
		},
		{
			MethodName: "CreateOneContract",
			Handler:    _ManagerService_CreateOneContract_Handler,
		},
		{
			MethodName: "UpdateOneContract",
			Handler:    _ManagerService_UpdateOneContract_Handler,
		},
		{
			MethodName: "CreateContractHash",
			Handler:    _ManagerService_CreateContractHash_Handler,
		},
		{
			MethodName: "UpdateContractHash",
			Handler:    _ManagerService_UpdateContractHash_Handler,
		},
		{
			MethodName: "DeleteOneContract",
			Handler:    _ManagerService_DeleteOneContract_Handler,
		},
		{
			MethodName: "CommonProjectPhase",
			Handler:    _ManagerService_CommonProjectPhase_Handler,
		},
		{
			MethodName: "GetBuildInfoCodeById",
			Handler:    _ManagerService_GetBuildInfoCodeById_Handler,
		},
		{
			MethodName: "GGetSupervisorCodeById",
			Handler:    _ManagerService_GGetSupervisorCodeById_Handler,
		},
		{
			MethodName: "GetGetGovermentCodeById",
			Handler:    _ManagerService_GetGetGovermentCodeById_Handler,
		},
		{
			MethodName: "ListInvoice",
			Handler:    _ManagerService_ListInvoice_Handler,
		},
		{
			MethodName: "GetOneInvoice",
			Handler:    _ManagerService_GetOneInvoice_Handler,
		},
		{
			MethodName: "CreateOneInvoice",
			Handler:    _ManagerService_CreateOneInvoice_Handler,
		},
		{
			MethodName: "UpdateOneInvoice",
			Handler:    _ManagerService_UpdateOneInvoice_Handler,
		},
		{
			MethodName: "CreateInvoiceHash",
			Handler:    _ManagerService_CreateInvoiceHash_Handler,
		},
		{
			MethodName: "UpdateInvoiceHash",
			Handler:    _ManagerService_UpdateInvoiceHash_Handler,
		},
		{
			MethodName: "DeleteOneInvoice",
			Handler:    _ManagerService_DeleteOneInvoice_Handler,
		},
		{
			MethodName: "ReceiveInvoiceHash",
			Handler:    _ManagerService_ReceiveInvoiceHash_Handler,
		},
		{
			MethodName: "PayInvoiceHash",
			Handler:    _ManagerService_PayInvoiceHash_Handler,
		},
		{
			MethodName: "CreateOneProject",
			Handler:    _ManagerService_CreateOneProject_Handler,
		},
		{
			MethodName: "UpdateOneProject",
			Handler:    _ManagerService_UpdateOneProject_Handler,
		},
		{
			MethodName: "DeleteOneProject",
			Handler:    _ManagerService_DeleteOneProject_Handler,
		},
		{
			MethodName: "GetOneProject",
			Handler:    _ManagerService_GetOneProject_Handler,
		},
		{
			MethodName: "ListProject",
			Handler:    _ManagerService_ListProject_Handler,
		},
		{
			MethodName: "CreateProjectHash",
			Handler:    _ManagerService_CreateProjectHash_Handler,
		},
		{
			MethodName: "UpdateProjectHash",
			Handler:    _ManagerService_UpdateProjectHash_Handler,
		},
		{
			MethodName: "CommonProject",
			Handler:    _ManagerService_CommonProject_Handler,
		},
		{
			MethodName: "CreateOneProgressPlan",
			Handler:    _ManagerService_CreateOneProgressPlan_Handler,
		},
		{
			MethodName: "UpdateOneProgressPlan",
			Handler:    _ManagerService_UpdateOneProgressPlan_Handler,
		},
		{
			MethodName: "DeleteOneProgressPlan",
			Handler:    _ManagerService_DeleteOneProgressPlan_Handler,
		},
		{
			MethodName: "GetOneProgressPlan",
			Handler:    _ManagerService_GetOneProgressPlan_Handler,
		},
		{
			MethodName: "ListProgressPlan",
			Handler:    _ManagerService_ListProgressPlan_Handler,
		},
		{
			MethodName: "CreateProgressPlanHash",
			Handler:    _ManagerService_CreateProgressPlanHash_Handler,
		},
		{
			MethodName: "UpdateProgressPlanHash",
			Handler:    _ManagerService_UpdateProgressPlanHash_Handler,
		},
		{
			MethodName: "CreateOneProgressActual",
			Handler:    _ManagerService_CreateOneProgressActual_Handler,
		},
		{
			MethodName: "UpdateOneProgressActual",
			Handler:    _ManagerService_UpdateOneProgressActual_Handler,
		},
		{
			MethodName: "DeleteOneProgressActual",
			Handler:    _ManagerService_DeleteOneProgressActual_Handler,
		},
		{
			MethodName: "GetOneProgressActual",
			Handler:    _ManagerService_GetOneProgressActual_Handler,
		},
		{
			MethodName: "ListProgressActual",
			Handler:    _ManagerService_ListProgressActual_Handler,
		},
		{
			MethodName: "CreateProgressActualHash",
			Handler:    _ManagerService_CreateProgressActualHash_Handler,
		},
		{
			MethodName: "UpdateProgressActualHash",
			Handler:    _ManagerService_UpdateProgressActualHash_Handler,
		},
		{
			MethodName: "CreateOneQualityInspection",
			Handler:    _ManagerService_CreateOneQualityInspection_Handler,
		},
		{
			MethodName: "UpdateOneQualityInspection",
			Handler:    _ManagerService_UpdateOneQualityInspection_Handler,
		},
		{
			MethodName: "DeleteOneQualityInspection",
			Handler:    _ManagerService_DeleteOneQualityInspection_Handler,
		},
		{
			MethodName: "GetOneQualityInspection",
			Handler:    _ManagerService_GetOneQualityInspection_Handler,
		},
		{
			MethodName: "ListQualityInspection",
			Handler:    _ManagerService_ListQualityInspection_Handler,
		},
		{
			MethodName: "CreateQualityInspectionHash",
			Handler:    _ManagerService_CreateQualityInspectionHash_Handler,
		},
		{
			MethodName: "UpdateQualityInspectionHash",
			Handler:    _ManagerService_UpdateQualityInspectionHash_Handler,
		},
		{
			MethodName: "UpdateOneQualityRectify",
			Handler:    _ManagerService_UpdateOneQualityRectify_Handler,
		},
		{
			MethodName: "UpdateQualityRectifyHash",
			Handler:    _ManagerService_UpdateQualityRectifyHash_Handler,
		},
		{
			MethodName: "GetOneQualityRectify",
			Handler:    _ManagerService_GetOneQualityRectify_Handler,
		},
		{
			MethodName: "ListQualityRectify",
			Handler:    _ManagerService_ListQualityRectify_Handler,
		},
		{
			MethodName: "UpdateOneQualityReview",
			Handler:    _ManagerService_UpdateOneQualityReview_Handler,
		},
		{
			MethodName: "UpdateQualityReviewHash",
			Handler:    _ManagerService_UpdateQualityReviewHash_Handler,
		},
		{
			MethodName: "GetOneQualityReview",
			Handler:    _ManagerService_GetOneQualityReview_Handler,
		},
		{
			MethodName: "ListQualityReview",
			Handler:    _ManagerService_ListQualityReview_Handler,
		},
		{
			MethodName: "CreateOneSafetyInspection",
			Handler:    _ManagerService_CreateOneSafetyInspection_Handler,
		},
		{
			MethodName: "UpdateOneSafetyInspection",
			Handler:    _ManagerService_UpdateOneSafetyInspection_Handler,
		},
		{
			MethodName: "DeleteOneSafetyInspection",
			Handler:    _ManagerService_DeleteOneSafetyInspection_Handler,
		},
		{
			MethodName: "GetOneSafetyInspection",
			Handler:    _ManagerService_GetOneSafetyInspection_Handler,
		},
		{
			MethodName: "ListSafetyInspection",
			Handler:    _ManagerService_ListSafetyInspection_Handler,
		},
		{
			MethodName: "CreateSafetyInspectionHash",
			Handler:    _ManagerService_CreateSafetyInspectionHash_Handler,
		},
		{
			MethodName: "UpdateSafetyInspectionHash",
			Handler:    _ManagerService_UpdateSafetyInspectionHash_Handler,
		},
		{
			MethodName: "UpdateSafetyRectifyHash",
			Handler:    _ManagerService_UpdateSafetyRectifyHash_Handler,
		},
		{
			MethodName: "UpdateSafetyReviewHash",
			Handler:    _ManagerService_UpdateSafetyReviewHash_Handler,
		},
		{
			MethodName: "GetSafetyInspectionHash",
			Handler:    _ManagerService_GetSafetyInspectionHash_Handler,
		},
		{
			MethodName: "CreateOneSafetyLog",
			Handler:    _ManagerService_CreateOneSafetyLog_Handler,
		},
		{
			MethodName: "UpdateOneSafetyLog",
			Handler:    _ManagerService_UpdateOneSafetyLog_Handler,
		},
		{
			MethodName: "DeleteOneSafetyLog",
			Handler:    _ManagerService_DeleteOneSafetyLog_Handler,
		},
		{
			MethodName: "GetOneSafetyLog",
			Handler:    _ManagerService_GetOneSafetyLog_Handler,
		},
		{
			MethodName: "ListSafetyLog",
			Handler:    _ManagerService_ListSafetyLog_Handler,
		},
		{
			MethodName: "CreateSafetyLogHash",
			Handler:    _ManagerService_CreateSafetyLogHash_Handler,
		},
		{
			MethodName: "UpdateSafetyLogHash",
			Handler:    _ManagerService_UpdateSafetyLogHash_Handler,
		},
		{
			MethodName: "GetSafetyLogHash",
			Handler:    _ManagerService_GetSafetyLogHash_Handler,
		},
		{
			MethodName: "CreateOneWorkman",
			Handler:    _ManagerService_CreateOneWorkman_Handler,
		},
		{
			MethodName: "UpdateOneWorkman",
			Handler:    _ManagerService_UpdateOneWorkman_Handler,
		},
		{
			MethodName: "DeleteOneWorkman",
			Handler:    _ManagerService_DeleteOneWorkman_Handler,
		},
		{
			MethodName: "GetOneWorkman",
			Handler:    _ManagerService_GetOneWorkman_Handler,
		},
		{
			MethodName: "ListWorkman",
			Handler:    _ManagerService_ListWorkman_Handler,
		},
		{
			MethodName: "CreateWorkmanHash",
			Handler:    _ManagerService_CreateWorkmanHash_Handler,
		},
		{
			MethodName: "UpdateWorkmanHash",
			Handler:    _ManagerService_UpdateWorkmanHash_Handler,
		},
		{
			MethodName: "GetWorkmanHash",
			Handler:    _ManagerService_GetWorkmanHash_Handler,
		},
		{
			MethodName: "ImportWorkman",
			Handler:    _ManagerService_ImportWorkman_Handler,
		},
		{
			MethodName: "BatchWorkmanHash",
			Handler:    _ManagerService_BatchWorkmanHash_Handler,
		},
		{
			MethodName: "CreateOneWorkmanAttendance",
			Handler:    _ManagerService_CreateOneWorkmanAttendance_Handler,
		},
		{
			MethodName: "UpdateOneWorkmanAttendance",
			Handler:    _ManagerService_UpdateOneWorkmanAttendance_Handler,
		},
		{
			MethodName: "DeleteOneWorkmanAttendance",
			Handler:    _ManagerService_DeleteOneWorkmanAttendance_Handler,
		},
		{
			MethodName: "GetOneWorkmanAttendance",
			Handler:    _ManagerService_GetOneWorkmanAttendance_Handler,
		},
		{
			MethodName: "ListWorkmanAttendance",
			Handler:    _ManagerService_ListWorkmanAttendance_Handler,
		},
		{
			MethodName: "CreateWorkmanAttendanceHash",
			Handler:    _ManagerService_CreateWorkmanAttendanceHash_Handler,
		},
		{
			MethodName: "UpdateWorkmanAttendanceHash",
			Handler:    _ManagerService_UpdateWorkmanAttendanceHash_Handler,
		},
		{
			MethodName: "GetWorkmanAttendanceHash",
			Handler:    _ManagerService_GetWorkmanAttendanceHash_Handler,
		},
		{
			MethodName: "ImportWorkmanAttendance",
			Handler:    _ManagerService_ImportWorkmanAttendance_Handler,
		},
		{
			MethodName: "BatchWorkmanAttendanceHash",
			Handler:    _ManagerService_BatchWorkmanAttendanceHash_Handler,
		},
		{
			MethodName: "CreateOneMaterial",
			Handler:    _ManagerService_CreateOneMaterial_Handler,
		},
		{
			MethodName: "UpdateOneMaterial",
			Handler:    _ManagerService_UpdateOneMaterial_Handler,
		},
		{
			MethodName: "DeleteOneMaterial",
			Handler:    _ManagerService_DeleteOneMaterial_Handler,
		},
		{
			MethodName: "GetOneMaterial",
			Handler:    _ManagerService_GetOneMaterial_Handler,
		},
		{
			MethodName: "ListMaterial",
			Handler:    _ManagerService_ListMaterial_Handler,
		},
		{
			MethodName: "CreateMaterialHash",
			Handler:    _ManagerService_CreateMaterialHash_Handler,
		},
		{
			MethodName: "UpdateMaterialHash",
			Handler:    _ManagerService_UpdateMaterialHash_Handler,
		},
		{
			MethodName: "GetMaterialHash",
			Handler:    _ManagerService_GetMaterialHash_Handler,
		},
		{
			MethodName: "ListMaterialDistinctName",
			Handler:    _ManagerService_ListMaterialDistinctName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ManagerService.proto",
}

// StockServiceClient is the client API for StockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StockServiceClient interface {
	//库存数据上报
	StockSync(ctx context.Context, in *StockSyncReq, opts ...grpc.CallOption) (*StockSyncResp, error)
	//配送企业药品绑定列表
	ComStockMedicineBindList(ctx context.Context, in *ComStockMedicineBindListReq, opts ...grpc.CallOption) (*ComStockMedicineBindListResp, error)
	//配送企业绑定his药品code
	ComStockMedicineBind(ctx context.Context, in *ComStockMedicineBindReq, opts ...grpc.CallOption) (*ComStockMedicineBindResp, error)
	//医疗机构药品绑定列表
	MiStockMedicineBindList(ctx context.Context, in *MiStockMedicineBindListReq, opts ...grpc.CallOption) (*MiStockMedicineBindListResp, error)
	//医疗机构绑定his药品code
	MiStockMedicineBind(ctx context.Context, in *MiStockMedicineBindReq, opts ...grpc.CallOption) (*MiStockMedicineBindResp, error)
}

type stockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockServiceClient(cc grpc.ClientConnInterface) StockServiceClient {
	return &stockServiceClient{cc}
}

func (c *stockServiceClient) StockSync(ctx context.Context, in *StockSyncReq, opts ...grpc.CallOption) (*StockSyncResp, error) {
	out := new(StockSyncResp)
	err := c.cc.Invoke(ctx, "/ManagerService.StockService/StockSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) ComStockMedicineBindList(ctx context.Context, in *ComStockMedicineBindListReq, opts ...grpc.CallOption) (*ComStockMedicineBindListResp, error) {
	out := new(ComStockMedicineBindListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.StockService/ComStockMedicineBindList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) ComStockMedicineBind(ctx context.Context, in *ComStockMedicineBindReq, opts ...grpc.CallOption) (*ComStockMedicineBindResp, error) {
	out := new(ComStockMedicineBindResp)
	err := c.cc.Invoke(ctx, "/ManagerService.StockService/ComStockMedicineBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) MiStockMedicineBindList(ctx context.Context, in *MiStockMedicineBindListReq, opts ...grpc.CallOption) (*MiStockMedicineBindListResp, error) {
	out := new(MiStockMedicineBindListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.StockService/MiStockMedicineBindList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) MiStockMedicineBind(ctx context.Context, in *MiStockMedicineBindReq, opts ...grpc.CallOption) (*MiStockMedicineBindResp, error) {
	out := new(MiStockMedicineBindResp)
	err := c.cc.Invoke(ctx, "/ManagerService.StockService/MiStockMedicineBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockServiceServer is the server API for StockService service.
type StockServiceServer interface {
	//库存数据上报
	StockSync(context.Context, *StockSyncReq) (*StockSyncResp, error)
	//配送企业药品绑定列表
	ComStockMedicineBindList(context.Context, *ComStockMedicineBindListReq) (*ComStockMedicineBindListResp, error)
	//配送企业绑定his药品code
	ComStockMedicineBind(context.Context, *ComStockMedicineBindReq) (*ComStockMedicineBindResp, error)
	//医疗机构药品绑定列表
	MiStockMedicineBindList(context.Context, *MiStockMedicineBindListReq) (*MiStockMedicineBindListResp, error)
	//医疗机构绑定his药品code
	MiStockMedicineBind(context.Context, *MiStockMedicineBindReq) (*MiStockMedicineBindResp, error)
}

// UnimplementedStockServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStockServiceServer struct {
}

func (*UnimplementedStockServiceServer) StockSync(context.Context, *StockSyncReq) (*StockSyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockSync not implemented")
}
func (*UnimplementedStockServiceServer) ComStockMedicineBindList(context.Context, *ComStockMedicineBindListReq) (*ComStockMedicineBindListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComStockMedicineBindList not implemented")
}
func (*UnimplementedStockServiceServer) ComStockMedicineBind(context.Context, *ComStockMedicineBindReq) (*ComStockMedicineBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComStockMedicineBind not implemented")
}
func (*UnimplementedStockServiceServer) MiStockMedicineBindList(context.Context, *MiStockMedicineBindListReq) (*MiStockMedicineBindListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiStockMedicineBindList not implemented")
}
func (*UnimplementedStockServiceServer) MiStockMedicineBind(context.Context, *MiStockMedicineBindReq) (*MiStockMedicineBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiStockMedicineBind not implemented")
}

func RegisterStockServiceServer(s *grpc.Server, srv StockServiceServer) {
	s.RegisterService(&_StockService_serviceDesc, srv)
}

func _StockService_StockSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockSyncReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).StockSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.StockService/StockSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).StockSync(ctx, req.(*StockSyncReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_ComStockMedicineBindList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComStockMedicineBindListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).ComStockMedicineBindList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.StockService/ComStockMedicineBindList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).ComStockMedicineBindList(ctx, req.(*ComStockMedicineBindListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_ComStockMedicineBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComStockMedicineBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).ComStockMedicineBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.StockService/ComStockMedicineBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).ComStockMedicineBind(ctx, req.(*ComStockMedicineBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_MiStockMedicineBindList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MiStockMedicineBindListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).MiStockMedicineBindList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.StockService/MiStockMedicineBindList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).MiStockMedicineBindList(ctx, req.(*MiStockMedicineBindListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_MiStockMedicineBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MiStockMedicineBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).MiStockMedicineBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.StockService/MiStockMedicineBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).MiStockMedicineBind(ctx, req.(*MiStockMedicineBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _StockService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ManagerService.StockService",
	HandlerType: (*StockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StockSync",
			Handler:    _StockService_StockSync_Handler,
		},
		{
			MethodName: "ComStockMedicineBindList",
			Handler:    _StockService_ComStockMedicineBindList_Handler,
		},
		{
			MethodName: "ComStockMedicineBind",
			Handler:    _StockService_ComStockMedicineBind_Handler,
		},
		{
			MethodName: "MiStockMedicineBindList",
			Handler:    _StockService_MiStockMedicineBindList_Handler,
		},
		{
			MethodName: "MiStockMedicineBind",
			Handler:    _StockService_MiStockMedicineBind_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ManagerService.proto",
}

// DataReportServiceClient is the client API for DataReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataReportServiceClient interface {
	//查询招采计划 日报数据
	GetShipmentPlanDayReports(ctx context.Context, in *GetShipmentPlanReportsReq, opts ...grpc.CallOption) (*GetShipmentPlanDayReportsResp, error)
	//查询招采计划 月报数据
	GetShipmentPlanMonthReports(ctx context.Context, in *GetShipmentPlanReportsReq, opts ...grpc.CallOption) (*GetShipmentPlanMonthReportsResp, error)
	//查询招采计划 年报数据
	GetShipmentPlanYearReports(ctx context.Context, in *GetShipmentPlanReportsReq, opts ...grpc.CallOption) (*GetShipmentPlanYearReportsResp, error)
	//查询配送单 日报数据
	GetShipmentOrderDayReports(ctx context.Context, in *GetShipmentOrderReportsReq, opts ...grpc.CallOption) (*GetShipmentOrderDayReportsResp, error)
	//查询配送单 月报数据
	GetShipmentOrderMonthReports(ctx context.Context, in *GetShipmentOrderReportsReq, opts ...grpc.CallOption) (*GetShipmentOrderMonthReportsResp, error)
	//查询配送单 年报数据
	GetShipmentOrderYearReports(ctx context.Context, in *GetShipmentOrderReportsReq, opts ...grpc.CallOption) (*GetShipmentOrderYearReportsResp, error)
	//查询保理订单 日报数据
	GetFactoringOrderDayReports(ctx context.Context, in *GetFactoringOrderReportsReq, opts ...grpc.CallOption) (*GetFactoringOrderDayReportsResp, error)
	//查询保理订单 月报数据
	GetFactoringOrderMonthReports(ctx context.Context, in *GetFactoringOrderReportsReq, opts ...grpc.CallOption) (*GetFactoringOrderMonthReportsResp, error)
	//查询保理订单 年报数据
	GetFactoringOrderYearReports(ctx context.Context, in *GetFactoringOrderReportsReq, opts ...grpc.CallOption) (*GetFactoringOrderYearReportsResp, error)
	//查询合同信息 日报数据
	GetContractPlanDayReports(ctx context.Context, in *GetContractPlanReportsReq, opts ...grpc.CallOption) (*GetContractPlanDayReportsResp, error)
	//查询合同信息 月报数据
	GetContractPlanMonthReports(ctx context.Context, in *GetContractPlanReportsReq, opts ...grpc.CallOption) (*GetContractPlanMonthReportsResp, error)
	//查询合同信息 年报数据
	GetContractPlanYearReports(ctx context.Context, in *GetContractPlanReportsReq, opts ...grpc.CallOption) (*GetContractPlanYearReportsResp, error)
	//查询所含条件的合同聚合数据
	GetContractSum(ctx context.Context, in *GetContractPlanReportsReq, opts ...grpc.CallOption) (*GetContractSumResp, error)
	//查询某医保局下生效合同的统计数据
	GetValidContractInfo(ctx context.Context, in *GetValidContractInfoReq, opts ...grpc.CallOption) (*GetValidContractInfoResp, error)
	//获取目前的待支付金额
	GetCurrentNeedPay(ctx context.Context, in *GetCurrentNeedPayReq, opts ...grpc.CallOption) (*GetCurrentNeedPayResp, error)
}

type dataReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataReportServiceClient(cc grpc.ClientConnInterface) DataReportServiceClient {
	return &dataReportServiceClient{cc}
}

func (c *dataReportServiceClient) GetShipmentPlanDayReports(ctx context.Context, in *GetShipmentPlanReportsReq, opts ...grpc.CallOption) (*GetShipmentPlanDayReportsResp, error) {
	out := new(GetShipmentPlanDayReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetShipmentPlanDayReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetShipmentPlanMonthReports(ctx context.Context, in *GetShipmentPlanReportsReq, opts ...grpc.CallOption) (*GetShipmentPlanMonthReportsResp, error) {
	out := new(GetShipmentPlanMonthReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetShipmentPlanMonthReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetShipmentPlanYearReports(ctx context.Context, in *GetShipmentPlanReportsReq, opts ...grpc.CallOption) (*GetShipmentPlanYearReportsResp, error) {
	out := new(GetShipmentPlanYearReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetShipmentPlanYearReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetShipmentOrderDayReports(ctx context.Context, in *GetShipmentOrderReportsReq, opts ...grpc.CallOption) (*GetShipmentOrderDayReportsResp, error) {
	out := new(GetShipmentOrderDayReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetShipmentOrderDayReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetShipmentOrderMonthReports(ctx context.Context, in *GetShipmentOrderReportsReq, opts ...grpc.CallOption) (*GetShipmentOrderMonthReportsResp, error) {
	out := new(GetShipmentOrderMonthReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetShipmentOrderMonthReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetShipmentOrderYearReports(ctx context.Context, in *GetShipmentOrderReportsReq, opts ...grpc.CallOption) (*GetShipmentOrderYearReportsResp, error) {
	out := new(GetShipmentOrderYearReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetShipmentOrderYearReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetFactoringOrderDayReports(ctx context.Context, in *GetFactoringOrderReportsReq, opts ...grpc.CallOption) (*GetFactoringOrderDayReportsResp, error) {
	out := new(GetFactoringOrderDayReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetFactoringOrderDayReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetFactoringOrderMonthReports(ctx context.Context, in *GetFactoringOrderReportsReq, opts ...grpc.CallOption) (*GetFactoringOrderMonthReportsResp, error) {
	out := new(GetFactoringOrderMonthReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetFactoringOrderMonthReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetFactoringOrderYearReports(ctx context.Context, in *GetFactoringOrderReportsReq, opts ...grpc.CallOption) (*GetFactoringOrderYearReportsResp, error) {
	out := new(GetFactoringOrderYearReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetFactoringOrderYearReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetContractPlanDayReports(ctx context.Context, in *GetContractPlanReportsReq, opts ...grpc.CallOption) (*GetContractPlanDayReportsResp, error) {
	out := new(GetContractPlanDayReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetContractPlanDayReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetContractPlanMonthReports(ctx context.Context, in *GetContractPlanReportsReq, opts ...grpc.CallOption) (*GetContractPlanMonthReportsResp, error) {
	out := new(GetContractPlanMonthReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetContractPlanMonthReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetContractPlanYearReports(ctx context.Context, in *GetContractPlanReportsReq, opts ...grpc.CallOption) (*GetContractPlanYearReportsResp, error) {
	out := new(GetContractPlanYearReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetContractPlanYearReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetContractSum(ctx context.Context, in *GetContractPlanReportsReq, opts ...grpc.CallOption) (*GetContractSumResp, error) {
	out := new(GetContractSumResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetContractSum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetValidContractInfo(ctx context.Context, in *GetValidContractInfoReq, opts ...grpc.CallOption) (*GetValidContractInfoResp, error) {
	out := new(GetValidContractInfoResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetValidContractInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetCurrentNeedPay(ctx context.Context, in *GetCurrentNeedPayReq, opts ...grpc.CallOption) (*GetCurrentNeedPayResp, error) {
	out := new(GetCurrentNeedPayResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetCurrentNeedPay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataReportServiceServer is the server API for DataReportService service.
type DataReportServiceServer interface {
	//查询招采计划 日报数据
	GetShipmentPlanDayReports(context.Context, *GetShipmentPlanReportsReq) (*GetShipmentPlanDayReportsResp, error)
	//查询招采计划 月报数据
	GetShipmentPlanMonthReports(context.Context, *GetShipmentPlanReportsReq) (*GetShipmentPlanMonthReportsResp, error)
	//查询招采计划 年报数据
	GetShipmentPlanYearReports(context.Context, *GetShipmentPlanReportsReq) (*GetShipmentPlanYearReportsResp, error)
	//查询配送单 日报数据
	GetShipmentOrderDayReports(context.Context, *GetShipmentOrderReportsReq) (*GetShipmentOrderDayReportsResp, error)
	//查询配送单 月报数据
	GetShipmentOrderMonthReports(context.Context, *GetShipmentOrderReportsReq) (*GetShipmentOrderMonthReportsResp, error)
	//查询配送单 年报数据
	GetShipmentOrderYearReports(context.Context, *GetShipmentOrderReportsReq) (*GetShipmentOrderYearReportsResp, error)
	//查询保理订单 日报数据
	GetFactoringOrderDayReports(context.Context, *GetFactoringOrderReportsReq) (*GetFactoringOrderDayReportsResp, error)
	//查询保理订单 月报数据
	GetFactoringOrderMonthReports(context.Context, *GetFactoringOrderReportsReq) (*GetFactoringOrderMonthReportsResp, error)
	//查询保理订单 年报数据
	GetFactoringOrderYearReports(context.Context, *GetFactoringOrderReportsReq) (*GetFactoringOrderYearReportsResp, error)
	//查询合同信息 日报数据
	GetContractPlanDayReports(context.Context, *GetContractPlanReportsReq) (*GetContractPlanDayReportsResp, error)
	//查询合同信息 月报数据
	GetContractPlanMonthReports(context.Context, *GetContractPlanReportsReq) (*GetContractPlanMonthReportsResp, error)
	//查询合同信息 年报数据
	GetContractPlanYearReports(context.Context, *GetContractPlanReportsReq) (*GetContractPlanYearReportsResp, error)
	//查询所含条件的合同聚合数据
	GetContractSum(context.Context, *GetContractPlanReportsReq) (*GetContractSumResp, error)
	//查询某医保局下生效合同的统计数据
	GetValidContractInfo(context.Context, *GetValidContractInfoReq) (*GetValidContractInfoResp, error)
	//获取目前的待支付金额
	GetCurrentNeedPay(context.Context, *GetCurrentNeedPayReq) (*GetCurrentNeedPayResp, error)
}

// UnimplementedDataReportServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDataReportServiceServer struct {
}

func (*UnimplementedDataReportServiceServer) GetShipmentPlanDayReports(context.Context, *GetShipmentPlanReportsReq) (*GetShipmentPlanDayReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentPlanDayReports not implemented")
}
func (*UnimplementedDataReportServiceServer) GetShipmentPlanMonthReports(context.Context, *GetShipmentPlanReportsReq) (*GetShipmentPlanMonthReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentPlanMonthReports not implemented")
}
func (*UnimplementedDataReportServiceServer) GetShipmentPlanYearReports(context.Context, *GetShipmentPlanReportsReq) (*GetShipmentPlanYearReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentPlanYearReports not implemented")
}
func (*UnimplementedDataReportServiceServer) GetShipmentOrderDayReports(context.Context, *GetShipmentOrderReportsReq) (*GetShipmentOrderDayReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentOrderDayReports not implemented")
}
func (*UnimplementedDataReportServiceServer) GetShipmentOrderMonthReports(context.Context, *GetShipmentOrderReportsReq) (*GetShipmentOrderMonthReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentOrderMonthReports not implemented")
}
func (*UnimplementedDataReportServiceServer) GetShipmentOrderYearReports(context.Context, *GetShipmentOrderReportsReq) (*GetShipmentOrderYearReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentOrderYearReports not implemented")
}
func (*UnimplementedDataReportServiceServer) GetFactoringOrderDayReports(context.Context, *GetFactoringOrderReportsReq) (*GetFactoringOrderDayReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFactoringOrderDayReports not implemented")
}
func (*UnimplementedDataReportServiceServer) GetFactoringOrderMonthReports(context.Context, *GetFactoringOrderReportsReq) (*GetFactoringOrderMonthReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFactoringOrderMonthReports not implemented")
}
func (*UnimplementedDataReportServiceServer) GetFactoringOrderYearReports(context.Context, *GetFactoringOrderReportsReq) (*GetFactoringOrderYearReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFactoringOrderYearReports not implemented")
}
func (*UnimplementedDataReportServiceServer) GetContractPlanDayReports(context.Context, *GetContractPlanReportsReq) (*GetContractPlanDayReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractPlanDayReports not implemented")
}
func (*UnimplementedDataReportServiceServer) GetContractPlanMonthReports(context.Context, *GetContractPlanReportsReq) (*GetContractPlanMonthReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractPlanMonthReports not implemented")
}
func (*UnimplementedDataReportServiceServer) GetContractPlanYearReports(context.Context, *GetContractPlanReportsReq) (*GetContractPlanYearReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractPlanYearReports not implemented")
}
func (*UnimplementedDataReportServiceServer) GetContractSum(context.Context, *GetContractPlanReportsReq) (*GetContractSumResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractSum not implemented")
}
func (*UnimplementedDataReportServiceServer) GetValidContractInfo(context.Context, *GetValidContractInfoReq) (*GetValidContractInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidContractInfo not implemented")
}
func (*UnimplementedDataReportServiceServer) GetCurrentNeedPay(context.Context, *GetCurrentNeedPayReq) (*GetCurrentNeedPayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentNeedPay not implemented")
}

func RegisterDataReportServiceServer(s *grpc.Server, srv DataReportServiceServer) {
	s.RegisterService(&_DataReportService_serviceDesc, srv)
}

func _DataReportService_GetShipmentPlanDayReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentPlanReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetShipmentPlanDayReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetShipmentPlanDayReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetShipmentPlanDayReports(ctx, req.(*GetShipmentPlanReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetShipmentPlanMonthReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentPlanReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetShipmentPlanMonthReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetShipmentPlanMonthReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetShipmentPlanMonthReports(ctx, req.(*GetShipmentPlanReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetShipmentPlanYearReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentPlanReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetShipmentPlanYearReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetShipmentPlanYearReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetShipmentPlanYearReports(ctx, req.(*GetShipmentPlanReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetShipmentOrderDayReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentOrderReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetShipmentOrderDayReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetShipmentOrderDayReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetShipmentOrderDayReports(ctx, req.(*GetShipmentOrderReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetShipmentOrderMonthReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentOrderReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetShipmentOrderMonthReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetShipmentOrderMonthReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetShipmentOrderMonthReports(ctx, req.(*GetShipmentOrderReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetShipmentOrderYearReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentOrderReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetShipmentOrderYearReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetShipmentOrderYearReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetShipmentOrderYearReports(ctx, req.(*GetShipmentOrderReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetFactoringOrderDayReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFactoringOrderReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetFactoringOrderDayReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetFactoringOrderDayReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetFactoringOrderDayReports(ctx, req.(*GetFactoringOrderReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetFactoringOrderMonthReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFactoringOrderReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetFactoringOrderMonthReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetFactoringOrderMonthReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetFactoringOrderMonthReports(ctx, req.(*GetFactoringOrderReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetFactoringOrderYearReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFactoringOrderReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetFactoringOrderYearReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetFactoringOrderYearReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetFactoringOrderYearReports(ctx, req.(*GetFactoringOrderReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetContractPlanDayReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractPlanReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetContractPlanDayReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetContractPlanDayReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetContractPlanDayReports(ctx, req.(*GetContractPlanReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetContractPlanMonthReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractPlanReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetContractPlanMonthReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetContractPlanMonthReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetContractPlanMonthReports(ctx, req.(*GetContractPlanReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetContractPlanYearReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractPlanReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetContractPlanYearReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetContractPlanYearReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetContractPlanYearReports(ctx, req.(*GetContractPlanReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetContractSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractPlanReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetContractSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetContractSum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetContractSum(ctx, req.(*GetContractPlanReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetValidContractInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidContractInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetValidContractInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetValidContractInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetValidContractInfo(ctx, req.(*GetValidContractInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetCurrentNeedPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentNeedPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetCurrentNeedPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetCurrentNeedPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetCurrentNeedPay(ctx, req.(*GetCurrentNeedPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataReportService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ManagerService.DataReportService",
	HandlerType: (*DataReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShipmentPlanDayReports",
			Handler:    _DataReportService_GetShipmentPlanDayReports_Handler,
		},
		{
			MethodName: "GetShipmentPlanMonthReports",
			Handler:    _DataReportService_GetShipmentPlanMonthReports_Handler,
		},
		{
			MethodName: "GetShipmentPlanYearReports",
			Handler:    _DataReportService_GetShipmentPlanYearReports_Handler,
		},
		{
			MethodName: "GetShipmentOrderDayReports",
			Handler:    _DataReportService_GetShipmentOrderDayReports_Handler,
		},
		{
			MethodName: "GetShipmentOrderMonthReports",
			Handler:    _DataReportService_GetShipmentOrderMonthReports_Handler,
		},
		{
			MethodName: "GetShipmentOrderYearReports",
			Handler:    _DataReportService_GetShipmentOrderYearReports_Handler,
		},
		{
			MethodName: "GetFactoringOrderDayReports",
			Handler:    _DataReportService_GetFactoringOrderDayReports_Handler,
		},
		{
			MethodName: "GetFactoringOrderMonthReports",
			Handler:    _DataReportService_GetFactoringOrderMonthReports_Handler,
		},
		{
			MethodName: "GetFactoringOrderYearReports",
			Handler:    _DataReportService_GetFactoringOrderYearReports_Handler,
		},
		{
			MethodName: "GetContractPlanDayReports",
			Handler:    _DataReportService_GetContractPlanDayReports_Handler,
		},
		{
			MethodName: "GetContractPlanMonthReports",
			Handler:    _DataReportService_GetContractPlanMonthReports_Handler,
		},
		{
			MethodName: "GetContractPlanYearReports",
			Handler:    _DataReportService_GetContractPlanYearReports_Handler,
		},
		{
			MethodName: "GetContractSum",
			Handler:    _DataReportService_GetContractSum_Handler,
		},
		{
			MethodName: "GetValidContractInfo",
			Handler:    _DataReportService_GetValidContractInfo_Handler,
		},
		{
			MethodName: "GetCurrentNeedPay",
			Handler:    _DataReportService_GetCurrentNeedPay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ManagerService.proto",
}

// HashServiceClient is the client API for HashService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HashServiceClient interface {
	//hash模块
	GetCompanyHash(ctx context.Context, in *GetCompanyHashReq, opts ...grpc.CallOption) (*GetCompanyHashResp, error)
	GetMiHash(ctx context.Context, in *GetMiHashReq, opts ...grpc.CallOption) (*GetMiHashResp, error)
	GetMedicineHash(ctx context.Context, in *GetMedicineHashReq, opts ...grpc.CallOption) (*GetMedicineHashResp, error)
	GetContractHash(ctx context.Context, in *GetContractHashReq, opts ...grpc.CallOption) (*GetContractHashResp, error)
	GetContractMiHash(ctx context.Context, in *GetContractMiHashReq, opts ...grpc.CallOption) (*GetContractMiHashResp, error)
	GetConfigHash(ctx context.Context, in *GetConfigHashReq, opts ...grpc.CallOption) (*GetConfigHashResp, error)
	GetShipmentPlanHash(ctx context.Context, in *GetShipmentPlanHashReq, opts ...grpc.CallOption) (*GetShipmentPlanHashResp, error)
	GetShipmentOrderHash(ctx context.Context, in *GetShipmentOrderHashReq, opts ...grpc.CallOption) (*GetShipmentOrderHashResp, error)
	GetShipmentPayHash(ctx context.Context, in *GetShipmentPayHashReq, opts ...grpc.CallOption) (*GetShipmentPayHashResp, error)
	GetShipmentFactoringHash(ctx context.Context, in *GetShipmentFactoringHashReq, opts ...grpc.CallOption) (*GetShipmentFactoringHashResp, error)
	GetConstructionHash(ctx context.Context, in *GetConstructionHashReq, opts ...grpc.CallOption) (*GetConstructionHashResp, error)
	GetBuildHash(ctx context.Context, in *GetBuildHashReq, opts ...grpc.CallOption) (*GetBuildHashResp, error)
	GetSupervisorHash(ctx context.Context, in *GetSupervisorHashReq, opts ...grpc.CallOption) (*GetSupervisorHashResp, error)
	GetGovermentHash(ctx context.Context, in *GetGovermentHashReq, opts ...grpc.CallOption) (*GetGovermentHashResp, error)
	GetProcessHash(ctx context.Context, in *GetProcessHashReq, opts ...grpc.CallOption) (*GetProcessHashResp, error)
	GetProjectHash(ctx context.Context, in *GetProjectHashReq, opts ...grpc.CallOption) (*GetProjectHashResp, error)
	ListContractHash(ctx context.Context, in *ListContractHashReq, opts ...grpc.CallOption) (*ListContractHashResp, error)
}

type hashServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHashServiceClient(cc grpc.ClientConnInterface) HashServiceClient {
	return &hashServiceClient{cc}
}

func (c *hashServiceClient) GetCompanyHash(ctx context.Context, in *GetCompanyHashReq, opts ...grpc.CallOption) (*GetCompanyHashResp, error) {
	out := new(GetCompanyHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetCompanyHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetMiHash(ctx context.Context, in *GetMiHashReq, opts ...grpc.CallOption) (*GetMiHashResp, error) {
	out := new(GetMiHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetMiHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetMedicineHash(ctx context.Context, in *GetMedicineHashReq, opts ...grpc.CallOption) (*GetMedicineHashResp, error) {
	out := new(GetMedicineHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetMedicineHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetContractHash(ctx context.Context, in *GetContractHashReq, opts ...grpc.CallOption) (*GetContractHashResp, error) {
	out := new(GetContractHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetContractHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetContractMiHash(ctx context.Context, in *GetContractMiHashReq, opts ...grpc.CallOption) (*GetContractMiHashResp, error) {
	out := new(GetContractMiHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetContractMiHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetConfigHash(ctx context.Context, in *GetConfigHashReq, opts ...grpc.CallOption) (*GetConfigHashResp, error) {
	out := new(GetConfigHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetConfigHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetShipmentPlanHash(ctx context.Context, in *GetShipmentPlanHashReq, opts ...grpc.CallOption) (*GetShipmentPlanHashResp, error) {
	out := new(GetShipmentPlanHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetShipmentPlanHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetShipmentOrderHash(ctx context.Context, in *GetShipmentOrderHashReq, opts ...grpc.CallOption) (*GetShipmentOrderHashResp, error) {
	out := new(GetShipmentOrderHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetShipmentOrderHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetShipmentPayHash(ctx context.Context, in *GetShipmentPayHashReq, opts ...grpc.CallOption) (*GetShipmentPayHashResp, error) {
	out := new(GetShipmentPayHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetShipmentPayHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetShipmentFactoringHash(ctx context.Context, in *GetShipmentFactoringHashReq, opts ...grpc.CallOption) (*GetShipmentFactoringHashResp, error) {
	out := new(GetShipmentFactoringHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetShipmentFactoringHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetConstructionHash(ctx context.Context, in *GetConstructionHashReq, opts ...grpc.CallOption) (*GetConstructionHashResp, error) {
	out := new(GetConstructionHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetConstructionHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetBuildHash(ctx context.Context, in *GetBuildHashReq, opts ...grpc.CallOption) (*GetBuildHashResp, error) {
	out := new(GetBuildHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetBuildHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetSupervisorHash(ctx context.Context, in *GetSupervisorHashReq, opts ...grpc.CallOption) (*GetSupervisorHashResp, error) {
	out := new(GetSupervisorHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetSupervisorHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetGovermentHash(ctx context.Context, in *GetGovermentHashReq, opts ...grpc.CallOption) (*GetGovermentHashResp, error) {
	out := new(GetGovermentHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetGovermentHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetProcessHash(ctx context.Context, in *GetProcessHashReq, opts ...grpc.CallOption) (*GetProcessHashResp, error) {
	out := new(GetProcessHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetProcessHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetProjectHash(ctx context.Context, in *GetProjectHashReq, opts ...grpc.CallOption) (*GetProjectHashResp, error) {
	out := new(GetProjectHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetProjectHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) ListContractHash(ctx context.Context, in *ListContractHashReq, opts ...grpc.CallOption) (*ListContractHashResp, error) {
	out := new(ListContractHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/ListContractHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HashServiceServer is the server API for HashService service.
type HashServiceServer interface {
	//hash模块
	GetCompanyHash(context.Context, *GetCompanyHashReq) (*GetCompanyHashResp, error)
	GetMiHash(context.Context, *GetMiHashReq) (*GetMiHashResp, error)
	GetMedicineHash(context.Context, *GetMedicineHashReq) (*GetMedicineHashResp, error)
	GetContractHash(context.Context, *GetContractHashReq) (*GetContractHashResp, error)
	GetContractMiHash(context.Context, *GetContractMiHashReq) (*GetContractMiHashResp, error)
	GetConfigHash(context.Context, *GetConfigHashReq) (*GetConfigHashResp, error)
	GetShipmentPlanHash(context.Context, *GetShipmentPlanHashReq) (*GetShipmentPlanHashResp, error)
	GetShipmentOrderHash(context.Context, *GetShipmentOrderHashReq) (*GetShipmentOrderHashResp, error)
	GetShipmentPayHash(context.Context, *GetShipmentPayHashReq) (*GetShipmentPayHashResp, error)
	GetShipmentFactoringHash(context.Context, *GetShipmentFactoringHashReq) (*GetShipmentFactoringHashResp, error)
	GetConstructionHash(context.Context, *GetConstructionHashReq) (*GetConstructionHashResp, error)
	GetBuildHash(context.Context, *GetBuildHashReq) (*GetBuildHashResp, error)
	GetSupervisorHash(context.Context, *GetSupervisorHashReq) (*GetSupervisorHashResp, error)
	GetGovermentHash(context.Context, *GetGovermentHashReq) (*GetGovermentHashResp, error)
	GetProcessHash(context.Context, *GetProcessHashReq) (*GetProcessHashResp, error)
	GetProjectHash(context.Context, *GetProjectHashReq) (*GetProjectHashResp, error)
	ListContractHash(context.Context, *ListContractHashReq) (*ListContractHashResp, error)
}

// UnimplementedHashServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHashServiceServer struct {
}

func (*UnimplementedHashServiceServer) GetCompanyHash(context.Context, *GetCompanyHashReq) (*GetCompanyHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyHash not implemented")
}
func (*UnimplementedHashServiceServer) GetMiHash(context.Context, *GetMiHashReq) (*GetMiHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMiHash not implemented")
}
func (*UnimplementedHashServiceServer) GetMedicineHash(context.Context, *GetMedicineHashReq) (*GetMedicineHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedicineHash not implemented")
}
func (*UnimplementedHashServiceServer) GetContractHash(context.Context, *GetContractHashReq) (*GetContractHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractHash not implemented")
}
func (*UnimplementedHashServiceServer) GetContractMiHash(context.Context, *GetContractMiHashReq) (*GetContractMiHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractMiHash not implemented")
}
func (*UnimplementedHashServiceServer) GetConfigHash(context.Context, *GetConfigHashReq) (*GetConfigHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigHash not implemented")
}
func (*UnimplementedHashServiceServer) GetShipmentPlanHash(context.Context, *GetShipmentPlanHashReq) (*GetShipmentPlanHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentPlanHash not implemented")
}
func (*UnimplementedHashServiceServer) GetShipmentOrderHash(context.Context, *GetShipmentOrderHashReq) (*GetShipmentOrderHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentOrderHash not implemented")
}
func (*UnimplementedHashServiceServer) GetShipmentPayHash(context.Context, *GetShipmentPayHashReq) (*GetShipmentPayHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentPayHash not implemented")
}
func (*UnimplementedHashServiceServer) GetShipmentFactoringHash(context.Context, *GetShipmentFactoringHashReq) (*GetShipmentFactoringHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentFactoringHash not implemented")
}
func (*UnimplementedHashServiceServer) GetConstructionHash(context.Context, *GetConstructionHashReq) (*GetConstructionHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConstructionHash not implemented")
}
func (*UnimplementedHashServiceServer) GetBuildHash(context.Context, *GetBuildHashReq) (*GetBuildHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildHash not implemented")
}
func (*UnimplementedHashServiceServer) GetSupervisorHash(context.Context, *GetSupervisorHashReq) (*GetSupervisorHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupervisorHash not implemented")
}
func (*UnimplementedHashServiceServer) GetGovermentHash(context.Context, *GetGovermentHashReq) (*GetGovermentHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGovermentHash not implemented")
}
func (*UnimplementedHashServiceServer) GetProcessHash(context.Context, *GetProcessHashReq) (*GetProcessHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessHash not implemented")
}
func (*UnimplementedHashServiceServer) GetProjectHash(context.Context, *GetProjectHashReq) (*GetProjectHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectHash not implemented")
}
func (*UnimplementedHashServiceServer) ListContractHash(context.Context, *ListContractHashReq) (*ListContractHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContractHash not implemented")
}

func RegisterHashServiceServer(s *grpc.Server, srv HashServiceServer) {
	s.RegisterService(&_HashService_serviceDesc, srv)
}

func _HashService_GetCompanyHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetCompanyHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetCompanyHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetCompanyHash(ctx, req.(*GetCompanyHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetMiHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMiHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetMiHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetMiHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetMiHash(ctx, req.(*GetMiHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetMedicineHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMedicineHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetMedicineHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetMedicineHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetMedicineHash(ctx, req.(*GetMedicineHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetContractHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetContractHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetContractHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetContractHash(ctx, req.(*GetContractHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetContractMiHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractMiHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetContractMiHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetContractMiHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetContractMiHash(ctx, req.(*GetContractMiHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetConfigHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetConfigHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetConfigHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetConfigHash(ctx, req.(*GetConfigHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetShipmentPlanHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentPlanHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetShipmentPlanHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetShipmentPlanHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetShipmentPlanHash(ctx, req.(*GetShipmentPlanHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetShipmentOrderHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentOrderHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetShipmentOrderHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetShipmentOrderHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetShipmentOrderHash(ctx, req.(*GetShipmentOrderHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetShipmentPayHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentPayHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetShipmentPayHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetShipmentPayHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetShipmentPayHash(ctx, req.(*GetShipmentPayHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetShipmentFactoringHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentFactoringHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetShipmentFactoringHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetShipmentFactoringHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetShipmentFactoringHash(ctx, req.(*GetShipmentFactoringHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetConstructionHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConstructionHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetConstructionHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetConstructionHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetConstructionHash(ctx, req.(*GetConstructionHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetBuildHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuildHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetBuildHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetBuildHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetBuildHash(ctx, req.(*GetBuildHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetSupervisorHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupervisorHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetSupervisorHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetSupervisorHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetSupervisorHash(ctx, req.(*GetSupervisorHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetGovermentHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGovermentHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetGovermentHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetGovermentHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetGovermentHash(ctx, req.(*GetGovermentHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetProcessHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetProcessHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetProcessHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetProcessHash(ctx, req.(*GetProcessHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetProjectHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetProjectHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetProjectHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetProjectHash(ctx, req.(*GetProjectHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_ListContractHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContractHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).ListContractHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/ListContractHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).ListContractHash(ctx, req.(*ListContractHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _HashService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ManagerService.HashService",
	HandlerType: (*HashServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCompanyHash",
			Handler:    _HashService_GetCompanyHash_Handler,
		},
		{
			MethodName: "GetMiHash",
			Handler:    _HashService_GetMiHash_Handler,
		},
		{
			MethodName: "GetMedicineHash",
			Handler:    _HashService_GetMedicineHash_Handler,
		},
		{
			MethodName: "GetContractHash",
			Handler:    _HashService_GetContractHash_Handler,
		},
		{
			MethodName: "GetContractMiHash",
			Handler:    _HashService_GetContractMiHash_Handler,
		},
		{
			MethodName: "GetConfigHash",
			Handler:    _HashService_GetConfigHash_Handler,
		},
		{
			MethodName: "GetShipmentPlanHash",
			Handler:    _HashService_GetShipmentPlanHash_Handler,
		},
		{
			MethodName: "GetShipmentOrderHash",
			Handler:    _HashService_GetShipmentOrderHash_Handler,
		},
		{
			MethodName: "GetShipmentPayHash",
			Handler:    _HashService_GetShipmentPayHash_Handler,
		},
		{
			MethodName: "GetShipmentFactoringHash",
			Handler:    _HashService_GetShipmentFactoringHash_Handler,
		},
		{
			MethodName: "GetConstructionHash",
			Handler:    _HashService_GetConstructionHash_Handler,
		},
		{
			MethodName: "GetBuildHash",
			Handler:    _HashService_GetBuildHash_Handler,
		},
		{
			MethodName: "GetSupervisorHash",
			Handler:    _HashService_GetSupervisorHash_Handler,
		},
		{
			MethodName: "GetGovermentHash",
			Handler:    _HashService_GetGovermentHash_Handler,
		},
		{
			MethodName: "GetProcessHash",
			Handler:    _HashService_GetProcessHash_Handler,
		},
		{
			MethodName: "GetProjectHash",
			Handler:    _HashService_GetProjectHash_Handler,
		},
		{
			MethodName: "ListContractHash",
			Handler:    _HashService_ListContractHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ManagerService.proto",
}

// RankServiceClient is the client API for RankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RankServiceClient interface {
	//MI端使用按年查询药品履约率排名
	GetShipmentRankMedicineDataYear(ctx context.Context, in *GetShipmentRankMedicineDataYearReq, opts ...grpc.CallOption) (*GetShipmentRankMedicineDataYearResp, error)
	GetShipmentRankCompanyDataYear(ctx context.Context, in *GetShipmentRankCompanyDataYearReq, opts ...grpc.CallOption) (*GetShipmentRankCompanyDataYearResp, error)
	//MIB端使用
	//查询医疗机构采购金额年度排名
	GetRankMiReceiveYear(ctx context.Context, in *GetRankMiReceiveYearReq, opts ...grpc.CallOption) (*GetRankMiReceiveYearResp, error)
	//查询医药企业送达率 年度排名
	GetRankComReceiveYear(ctx context.Context, in *GetRankComReceiveYearReq, opts ...grpc.CallOption) (*GetRankComReceiveYearResp, error)
	//查询医疗机构 主动支付率年度排名
	GetRankMiPaidYear(ctx context.Context, in *GetRankMiPaidYearReq, opts ...grpc.CallOption) (*GetRankMiPaidYearResp, error)
	// 查询药品采购量年度排名
	GetRankMedicineYear(ctx context.Context, in *GetRankMedicineYearReq, opts ...grpc.CallOption) (*GetRankMedicineYearResp, error)
	//  濮阳行政地图此时的数据
	GetMIBDashboardBaseInfo(ctx context.Context, in *GetMIBDashboardBaseInfoReq, opts ...grpc.CallOption) (*GetMIBDashboardBaseInfoResp, error)
}

type rankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRankServiceClient(cc grpc.ClientConnInterface) RankServiceClient {
	return &rankServiceClient{cc}
}

func (c *rankServiceClient) GetShipmentRankMedicineDataYear(ctx context.Context, in *GetShipmentRankMedicineDataYearReq, opts ...grpc.CallOption) (*GetShipmentRankMedicineDataYearResp, error) {
	out := new(GetShipmentRankMedicineDataYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetShipmentRankMedicineDataYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) GetShipmentRankCompanyDataYear(ctx context.Context, in *GetShipmentRankCompanyDataYearReq, opts ...grpc.CallOption) (*GetShipmentRankCompanyDataYearResp, error) {
	out := new(GetShipmentRankCompanyDataYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetShipmentRankCompanyDataYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) GetRankMiReceiveYear(ctx context.Context, in *GetRankMiReceiveYearReq, opts ...grpc.CallOption) (*GetRankMiReceiveYearResp, error) {
	out := new(GetRankMiReceiveYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetRankMiReceiveYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) GetRankComReceiveYear(ctx context.Context, in *GetRankComReceiveYearReq, opts ...grpc.CallOption) (*GetRankComReceiveYearResp, error) {
	out := new(GetRankComReceiveYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetRankComReceiveYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) GetRankMiPaidYear(ctx context.Context, in *GetRankMiPaidYearReq, opts ...grpc.CallOption) (*GetRankMiPaidYearResp, error) {
	out := new(GetRankMiPaidYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetRankMiPaidYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) GetRankMedicineYear(ctx context.Context, in *GetRankMedicineYearReq, opts ...grpc.CallOption) (*GetRankMedicineYearResp, error) {
	out := new(GetRankMedicineYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetRankMedicineYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) GetMIBDashboardBaseInfo(ctx context.Context, in *GetMIBDashboardBaseInfoReq, opts ...grpc.CallOption) (*GetMIBDashboardBaseInfoResp, error) {
	out := new(GetMIBDashboardBaseInfoResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetMIBDashboardBaseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RankServiceServer is the server API for RankService service.
type RankServiceServer interface {
	//MI端使用按年查询药品履约率排名
	GetShipmentRankMedicineDataYear(context.Context, *GetShipmentRankMedicineDataYearReq) (*GetShipmentRankMedicineDataYearResp, error)
	GetShipmentRankCompanyDataYear(context.Context, *GetShipmentRankCompanyDataYearReq) (*GetShipmentRankCompanyDataYearResp, error)
	//MIB端使用
	//查询医疗机构采购金额年度排名
	GetRankMiReceiveYear(context.Context, *GetRankMiReceiveYearReq) (*GetRankMiReceiveYearResp, error)
	//查询医药企业送达率 年度排名
	GetRankComReceiveYear(context.Context, *GetRankComReceiveYearReq) (*GetRankComReceiveYearResp, error)
	//查询医疗机构 主动支付率年度排名
	GetRankMiPaidYear(context.Context, *GetRankMiPaidYearReq) (*GetRankMiPaidYearResp, error)
	// 查询药品采购量年度排名
	GetRankMedicineYear(context.Context, *GetRankMedicineYearReq) (*GetRankMedicineYearResp, error)
	//  濮阳行政地图此时的数据
	GetMIBDashboardBaseInfo(context.Context, *GetMIBDashboardBaseInfoReq) (*GetMIBDashboardBaseInfoResp, error)
}

// UnimplementedRankServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRankServiceServer struct {
}

func (*UnimplementedRankServiceServer) GetShipmentRankMedicineDataYear(context.Context, *GetShipmentRankMedicineDataYearReq) (*GetShipmentRankMedicineDataYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentRankMedicineDataYear not implemented")
}
func (*UnimplementedRankServiceServer) GetShipmentRankCompanyDataYear(context.Context, *GetShipmentRankCompanyDataYearReq) (*GetShipmentRankCompanyDataYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentRankCompanyDataYear not implemented")
}
func (*UnimplementedRankServiceServer) GetRankMiReceiveYear(context.Context, *GetRankMiReceiveYearReq) (*GetRankMiReceiveYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRankMiReceiveYear not implemented")
}
func (*UnimplementedRankServiceServer) GetRankComReceiveYear(context.Context, *GetRankComReceiveYearReq) (*GetRankComReceiveYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRankComReceiveYear not implemented")
}
func (*UnimplementedRankServiceServer) GetRankMiPaidYear(context.Context, *GetRankMiPaidYearReq) (*GetRankMiPaidYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRankMiPaidYear not implemented")
}
func (*UnimplementedRankServiceServer) GetRankMedicineYear(context.Context, *GetRankMedicineYearReq) (*GetRankMedicineYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRankMedicineYear not implemented")
}
func (*UnimplementedRankServiceServer) GetMIBDashboardBaseInfo(context.Context, *GetMIBDashboardBaseInfoReq) (*GetMIBDashboardBaseInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMIBDashboardBaseInfo not implemented")
}

func RegisterRankServiceServer(s *grpc.Server, srv RankServiceServer) {
	s.RegisterService(&_RankService_serviceDesc, srv)
}

func _RankService_GetShipmentRankMedicineDataYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentRankMedicineDataYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetShipmentRankMedicineDataYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetShipmentRankMedicineDataYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetShipmentRankMedicineDataYear(ctx, req.(*GetShipmentRankMedicineDataYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_GetShipmentRankCompanyDataYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentRankCompanyDataYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetShipmentRankCompanyDataYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetShipmentRankCompanyDataYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetShipmentRankCompanyDataYear(ctx, req.(*GetShipmentRankCompanyDataYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_GetRankMiReceiveYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankMiReceiveYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetRankMiReceiveYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetRankMiReceiveYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetRankMiReceiveYear(ctx, req.(*GetRankMiReceiveYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_GetRankComReceiveYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankComReceiveYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetRankComReceiveYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetRankComReceiveYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetRankComReceiveYear(ctx, req.(*GetRankComReceiveYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_GetRankMiPaidYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankMiPaidYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetRankMiPaidYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetRankMiPaidYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetRankMiPaidYear(ctx, req.(*GetRankMiPaidYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_GetRankMedicineYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankMedicineYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetRankMedicineYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetRankMedicineYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetRankMedicineYear(ctx, req.(*GetRankMedicineYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_GetMIBDashboardBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMIBDashboardBaseInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetMIBDashboardBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetMIBDashboardBaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetMIBDashboardBaseInfo(ctx, req.(*GetMIBDashboardBaseInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RankService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ManagerService.RankService",
	HandlerType: (*RankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShipmentRankMedicineDataYear",
			Handler:    _RankService_GetShipmentRankMedicineDataYear_Handler,
		},
		{
			MethodName: "GetShipmentRankCompanyDataYear",
			Handler:    _RankService_GetShipmentRankCompanyDataYear_Handler,
		},
		{
			MethodName: "GetRankMiReceiveYear",
			Handler:    _RankService_GetRankMiReceiveYear_Handler,
		},
		{
			MethodName: "GetRankComReceiveYear",
			Handler:    _RankService_GetRankComReceiveYear_Handler,
		},
		{
			MethodName: "GetRankMiPaidYear",
			Handler:    _RankService_GetRankMiPaidYear_Handler,
		},
		{
			MethodName: "GetRankMedicineYear",
			Handler:    _RankService_GetRankMedicineYear_Handler,
		},
		{
			MethodName: "GetMIBDashboardBaseInfo",
			Handler:    _RankService_GetMIBDashboardBaseInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ManagerService.proto",
}

// DashboardServiceClient is the client API for DashboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DashboardServiceClient interface {
	GetMiDashboardBaseInfo(ctx context.Context, in *GetMiDashboardReq, opts ...grpc.CallOption) (*GetMiDashboardBaseInfoResp, error)
	GetDashboardShipmentRankCompanyDataYear(ctx context.Context, in *GetDashboardShipmentRankCompanyDataYearReq, opts ...grpc.CallOption) (*GetDashboardShipmentRankCompanyDataYearResp, error)
	GetDashboardShipmentRankMedicineDataYear(ctx context.Context, in *GetDashboardShipmentRankMedicineDataYearReq, opts ...grpc.CallOption) (*GetDashboardShipmentRankMedicineDataYearResp, error)
	GetDashboardShipmentCompanyRank(ctx context.Context, in *GetDashboardCompanyRankReq, opts ...grpc.CallOption) (*GetDashboardCompanyRankResp, error)
	GetDashboardShipmentList(ctx context.Context, in *GetDashboardShipmentListReq, opts ...grpc.CallOption) (*GetDashboardShipmentListResp, error)
	GetDashboardMedicineRank(ctx context.Context, in *GetDashboardMedicineRankReq, opts ...grpc.CallOption) (*GetDashboardMedicineRankResp, error)
	GetDashboardStockList(ctx context.Context, in *GetDashboardStockListReq, opts ...grpc.CallOption) (*GetDashboardStockListResp, error)
	//
	GetDashboardProject(ctx context.Context, in *GetDashboardProjectReq, opts ...grpc.CallOption) (*GetDashboardProjectResp, error)
	CountDashboardWorkmanAttendanceStatistics(ctx context.Context, in *CountDashboardWorkmanAttendanceStatisticsReq, opts ...grpc.CallOption) (*CountDashboardWorkmanAttendanceStatisticsResp, error)
	CountDashboardWorkmanEpidemicStatistics(ctx context.Context, in *CountDashboardWorkmanEpidemicStatisticsReq, opts ...grpc.CallOption) (*CountDashboardWorkmanEpidemicStatisticsResp, error)
	CountDashboardProcessCompletionPercent(ctx context.Context, in *CountDashboardProcessCompletionPercentReq, opts ...grpc.CallOption) (*CountDashboardProcessCompletionPercentResp, error)
	ListDashboardSafetyInspection(ctx context.Context, in *ListDashboardSafetyInspectionReq, opts ...grpc.CallOption) (*ListDashboardSafetyInspectionResp, error)
	ReportDashboardInvoiceYear(ctx context.Context, in *ReportDashboardYearReq, opts ...grpc.CallOption) (*ReportDashboardInvoiceYearResp, error)
	ReportDashboardInvoiceMonth(ctx context.Context, in *ReportDashboardMonthReq, opts ...grpc.CallOption) (*ReportDashboardInvoiceMonthResp, error)
	ReportDashboardQualityInspectionYear(ctx context.Context, in *ReportDashboardYearReq, opts ...grpc.CallOption) (*ReportDashboardInspectionYearResp, error)
	ReportDashboardQualityInspectionMonth(ctx context.Context, in *ReportDashboardMonthReq, opts ...grpc.CallOption) (*ReportDashboardInspectionMonthResp, error)
	ReportDashboardSafetyInspectionYear(ctx context.Context, in *ReportDashboardYearReq, opts ...grpc.CallOption) (*ReportDashboardInspectionYearResp, error)
	ReportDashboardSafetyInspectionMonth(ctx context.Context, in *ReportDashboardMonthReq, opts ...grpc.CallOption) (*ReportDashboardInspectionMonthResp, error)
	ReportDashboardProcessYear(ctx context.Context, in *ReportDashboardYearReq, opts ...grpc.CallOption) (*ReportDashboardProcessYearResp, error)
	ReportDashboardProcessMonth(ctx context.Context, in *ReportDashboardMonthReq, opts ...grpc.CallOption) (*ReportDashboardProcessMonthResp, error)
	ReportDashboardAttendanceYear(ctx context.Context, in *ReportDashboardYearReq, opts ...grpc.CallOption) (*ReportDashboardAttendanceYearResp, error)
	ReportDashboardAttendanceMonth(ctx context.Context, in *ReportDashboardMonthReq, opts ...grpc.CallOption) (*ReportDashboardAttendanceMonthResp, error)
	ReportDashboardRankMaterialYear(ctx context.Context, in *ReportDashboardRankYearReq, opts ...grpc.CallOption) (*ReportDashboardRankMaterialYearResp, error)
	ReportDashboardRankMaterialMonth(ctx context.Context, in *ReportDashboardRankMonthReq, opts ...grpc.CallOption) (*ReportDashboardRankMaterialMonthResp, error)
	ListDashboardProcess(ctx context.Context, in *ListDashboardProcessReq, opts ...grpc.CallOption) (*ListDashboardProcessResp, error)
}

type dashboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardServiceClient(cc grpc.ClientConnInterface) DashboardServiceClient {
	return &dashboardServiceClient{cc}
}

func (c *dashboardServiceClient) GetMiDashboardBaseInfo(ctx context.Context, in *GetMiDashboardReq, opts ...grpc.CallOption) (*GetMiDashboardBaseInfoResp, error) {
	out := new(GetMiDashboardBaseInfoResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DashboardService/GetMiDashboardBaseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetDashboardShipmentRankCompanyDataYear(ctx context.Context, in *GetDashboardShipmentRankCompanyDataYearReq, opts ...grpc.CallOption) (*GetDashboardShipmentRankCompanyDataYearResp, error) {
	out := new(GetDashboardShipmentRankCompanyDataYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DashboardService/GetDashboardShipmentRankCompanyDataYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetDashboardShipmentRankMedicineDataYear(ctx context.Context, in *GetDashboardShipmentRankMedicineDataYearReq, opts ...grpc.CallOption) (*GetDashboardShipmentRankMedicineDataYearResp, error) {
	out := new(GetDashboardShipmentRankMedicineDataYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DashboardService/GetDashboardShipmentRankMedicineDataYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetDashboardShipmentCompanyRank(ctx context.Context, in *GetDashboardCompanyRankReq, opts ...grpc.CallOption) (*GetDashboardCompanyRankResp, error) {
	out := new(GetDashboardCompanyRankResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DashboardService/GetDashboardShipmentCompanyRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetDashboardShipmentList(ctx context.Context, in *GetDashboardShipmentListReq, opts ...grpc.CallOption) (*GetDashboardShipmentListResp, error) {
	out := new(GetDashboardShipmentListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DashboardService/GetDashboardShipmentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetDashboardMedicineRank(ctx context.Context, in *GetDashboardMedicineRankReq, opts ...grpc.CallOption) (*GetDashboardMedicineRankResp, error) {
	out := new(GetDashboardMedicineRankResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DashboardService/GetDashboardMedicineRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetDashboardStockList(ctx context.Context, in *GetDashboardStockListReq, opts ...grpc.CallOption) (*GetDashboardStockListResp, error) {
	out := new(GetDashboardStockListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DashboardService/GetDashboardStockList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetDashboardProject(ctx context.Context, in *GetDashboardProjectReq, opts ...grpc.CallOption) (*GetDashboardProjectResp, error) {
	out := new(GetDashboardProjectResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DashboardService/GetDashboardProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) CountDashboardWorkmanAttendanceStatistics(ctx context.Context, in *CountDashboardWorkmanAttendanceStatisticsReq, opts ...grpc.CallOption) (*CountDashboardWorkmanAttendanceStatisticsResp, error) {
	out := new(CountDashboardWorkmanAttendanceStatisticsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DashboardService/CountDashboardWorkmanAttendanceStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) CountDashboardWorkmanEpidemicStatistics(ctx context.Context, in *CountDashboardWorkmanEpidemicStatisticsReq, opts ...grpc.CallOption) (*CountDashboardWorkmanEpidemicStatisticsResp, error) {
	out := new(CountDashboardWorkmanEpidemicStatisticsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DashboardService/CountDashboardWorkmanEpidemicStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) CountDashboardProcessCompletionPercent(ctx context.Context, in *CountDashboardProcessCompletionPercentReq, opts ...grpc.CallOption) (*CountDashboardProcessCompletionPercentResp, error) {
	out := new(CountDashboardProcessCompletionPercentResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DashboardService/CountDashboardProcessCompletionPercent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) ListDashboardSafetyInspection(ctx context.Context, in *ListDashboardSafetyInspectionReq, opts ...grpc.CallOption) (*ListDashboardSafetyInspectionResp, error) {
	out := new(ListDashboardSafetyInspectionResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DashboardService/ListDashboardSafetyInspection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) ReportDashboardInvoiceYear(ctx context.Context, in *ReportDashboardYearReq, opts ...grpc.CallOption) (*ReportDashboardInvoiceYearResp, error) {
	out := new(ReportDashboardInvoiceYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DashboardService/ReportDashboardInvoiceYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) ReportDashboardInvoiceMonth(ctx context.Context, in *ReportDashboardMonthReq, opts ...grpc.CallOption) (*ReportDashboardInvoiceMonthResp, error) {
	out := new(ReportDashboardInvoiceMonthResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DashboardService/ReportDashboardInvoiceMonth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) ReportDashboardQualityInspectionYear(ctx context.Context, in *ReportDashboardYearReq, opts ...grpc.CallOption) (*ReportDashboardInspectionYearResp, error) {
	out := new(ReportDashboardInspectionYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DashboardService/ReportDashboardQualityInspectionYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) ReportDashboardQualityInspectionMonth(ctx context.Context, in *ReportDashboardMonthReq, opts ...grpc.CallOption) (*ReportDashboardInspectionMonthResp, error) {
	out := new(ReportDashboardInspectionMonthResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DashboardService/ReportDashboardQualityInspectionMonth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) ReportDashboardSafetyInspectionYear(ctx context.Context, in *ReportDashboardYearReq, opts ...grpc.CallOption) (*ReportDashboardInspectionYearResp, error) {
	out := new(ReportDashboardInspectionYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DashboardService/ReportDashboardSafetyInspectionYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) ReportDashboardSafetyInspectionMonth(ctx context.Context, in *ReportDashboardMonthReq, opts ...grpc.CallOption) (*ReportDashboardInspectionMonthResp, error) {
	out := new(ReportDashboardInspectionMonthResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DashboardService/ReportDashboardSafetyInspectionMonth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) ReportDashboardProcessYear(ctx context.Context, in *ReportDashboardYearReq, opts ...grpc.CallOption) (*ReportDashboardProcessYearResp, error) {
	out := new(ReportDashboardProcessYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DashboardService/ReportDashboardProcessYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) ReportDashboardProcessMonth(ctx context.Context, in *ReportDashboardMonthReq, opts ...grpc.CallOption) (*ReportDashboardProcessMonthResp, error) {
	out := new(ReportDashboardProcessMonthResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DashboardService/ReportDashboardProcessMonth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) ReportDashboardAttendanceYear(ctx context.Context, in *ReportDashboardYearReq, opts ...grpc.CallOption) (*ReportDashboardAttendanceYearResp, error) {
	out := new(ReportDashboardAttendanceYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DashboardService/ReportDashboardAttendanceYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) ReportDashboardAttendanceMonth(ctx context.Context, in *ReportDashboardMonthReq, opts ...grpc.CallOption) (*ReportDashboardAttendanceMonthResp, error) {
	out := new(ReportDashboardAttendanceMonthResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DashboardService/ReportDashboardAttendanceMonth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) ReportDashboardRankMaterialYear(ctx context.Context, in *ReportDashboardRankYearReq, opts ...grpc.CallOption) (*ReportDashboardRankMaterialYearResp, error) {
	out := new(ReportDashboardRankMaterialYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DashboardService/ReportDashboardRankMaterialYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) ReportDashboardRankMaterialMonth(ctx context.Context, in *ReportDashboardRankMonthReq, opts ...grpc.CallOption) (*ReportDashboardRankMaterialMonthResp, error) {
	out := new(ReportDashboardRankMaterialMonthResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DashboardService/ReportDashboardRankMaterialMonth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) ListDashboardProcess(ctx context.Context, in *ListDashboardProcessReq, opts ...grpc.CallOption) (*ListDashboardProcessResp, error) {
	out := new(ListDashboardProcessResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DashboardService/ListDashboardProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardServiceServer is the server API for DashboardService service.
type DashboardServiceServer interface {
	GetMiDashboardBaseInfo(context.Context, *GetMiDashboardReq) (*GetMiDashboardBaseInfoResp, error)
	GetDashboardShipmentRankCompanyDataYear(context.Context, *GetDashboardShipmentRankCompanyDataYearReq) (*GetDashboardShipmentRankCompanyDataYearResp, error)
	GetDashboardShipmentRankMedicineDataYear(context.Context, *GetDashboardShipmentRankMedicineDataYearReq) (*GetDashboardShipmentRankMedicineDataYearResp, error)
	GetDashboardShipmentCompanyRank(context.Context, *GetDashboardCompanyRankReq) (*GetDashboardCompanyRankResp, error)
	GetDashboardShipmentList(context.Context, *GetDashboardShipmentListReq) (*GetDashboardShipmentListResp, error)
	GetDashboardMedicineRank(context.Context, *GetDashboardMedicineRankReq) (*GetDashboardMedicineRankResp, error)
	GetDashboardStockList(context.Context, *GetDashboardStockListReq) (*GetDashboardStockListResp, error)
	//
	GetDashboardProject(context.Context, *GetDashboardProjectReq) (*GetDashboardProjectResp, error)
	CountDashboardWorkmanAttendanceStatistics(context.Context, *CountDashboardWorkmanAttendanceStatisticsReq) (*CountDashboardWorkmanAttendanceStatisticsResp, error)
	CountDashboardWorkmanEpidemicStatistics(context.Context, *CountDashboardWorkmanEpidemicStatisticsReq) (*CountDashboardWorkmanEpidemicStatisticsResp, error)
	CountDashboardProcessCompletionPercent(context.Context, *CountDashboardProcessCompletionPercentReq) (*CountDashboardProcessCompletionPercentResp, error)
	ListDashboardSafetyInspection(context.Context, *ListDashboardSafetyInspectionReq) (*ListDashboardSafetyInspectionResp, error)
	ReportDashboardInvoiceYear(context.Context, *ReportDashboardYearReq) (*ReportDashboardInvoiceYearResp, error)
	ReportDashboardInvoiceMonth(context.Context, *ReportDashboardMonthReq) (*ReportDashboardInvoiceMonthResp, error)
	ReportDashboardQualityInspectionYear(context.Context, *ReportDashboardYearReq) (*ReportDashboardInspectionYearResp, error)
	ReportDashboardQualityInspectionMonth(context.Context, *ReportDashboardMonthReq) (*ReportDashboardInspectionMonthResp, error)
	ReportDashboardSafetyInspectionYear(context.Context, *ReportDashboardYearReq) (*ReportDashboardInspectionYearResp, error)
	ReportDashboardSafetyInspectionMonth(context.Context, *ReportDashboardMonthReq) (*ReportDashboardInspectionMonthResp, error)
	ReportDashboardProcessYear(context.Context, *ReportDashboardYearReq) (*ReportDashboardProcessYearResp, error)
	ReportDashboardProcessMonth(context.Context, *ReportDashboardMonthReq) (*ReportDashboardProcessMonthResp, error)
	ReportDashboardAttendanceYear(context.Context, *ReportDashboardYearReq) (*ReportDashboardAttendanceYearResp, error)
	ReportDashboardAttendanceMonth(context.Context, *ReportDashboardMonthReq) (*ReportDashboardAttendanceMonthResp, error)
	ReportDashboardRankMaterialYear(context.Context, *ReportDashboardRankYearReq) (*ReportDashboardRankMaterialYearResp, error)
	ReportDashboardRankMaterialMonth(context.Context, *ReportDashboardRankMonthReq) (*ReportDashboardRankMaterialMonthResp, error)
	ListDashboardProcess(context.Context, *ListDashboardProcessReq) (*ListDashboardProcessResp, error)
}

// UnimplementedDashboardServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDashboardServiceServer struct {
}

func (*UnimplementedDashboardServiceServer) GetMiDashboardBaseInfo(context.Context, *GetMiDashboardReq) (*GetMiDashboardBaseInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMiDashboardBaseInfo not implemented")
}
func (*UnimplementedDashboardServiceServer) GetDashboardShipmentRankCompanyDataYear(context.Context, *GetDashboardShipmentRankCompanyDataYearReq) (*GetDashboardShipmentRankCompanyDataYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardShipmentRankCompanyDataYear not implemented")
}
func (*UnimplementedDashboardServiceServer) GetDashboardShipmentRankMedicineDataYear(context.Context, *GetDashboardShipmentRankMedicineDataYearReq) (*GetDashboardShipmentRankMedicineDataYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardShipmentRankMedicineDataYear not implemented")
}
func (*UnimplementedDashboardServiceServer) GetDashboardShipmentCompanyRank(context.Context, *GetDashboardCompanyRankReq) (*GetDashboardCompanyRankResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardShipmentCompanyRank not implemented")
}
func (*UnimplementedDashboardServiceServer) GetDashboardShipmentList(context.Context, *GetDashboardShipmentListReq) (*GetDashboardShipmentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardShipmentList not implemented")
}
func (*UnimplementedDashboardServiceServer) GetDashboardMedicineRank(context.Context, *GetDashboardMedicineRankReq) (*GetDashboardMedicineRankResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardMedicineRank not implemented")
}
func (*UnimplementedDashboardServiceServer) GetDashboardStockList(context.Context, *GetDashboardStockListReq) (*GetDashboardStockListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardStockList not implemented")
}
func (*UnimplementedDashboardServiceServer) GetDashboardProject(context.Context, *GetDashboardProjectReq) (*GetDashboardProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardProject not implemented")
}
func (*UnimplementedDashboardServiceServer) CountDashboardWorkmanAttendanceStatistics(context.Context, *CountDashboardWorkmanAttendanceStatisticsReq) (*CountDashboardWorkmanAttendanceStatisticsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountDashboardWorkmanAttendanceStatistics not implemented")
}
func (*UnimplementedDashboardServiceServer) CountDashboardWorkmanEpidemicStatistics(context.Context, *CountDashboardWorkmanEpidemicStatisticsReq) (*CountDashboardWorkmanEpidemicStatisticsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountDashboardWorkmanEpidemicStatistics not implemented")
}
func (*UnimplementedDashboardServiceServer) CountDashboardProcessCompletionPercent(context.Context, *CountDashboardProcessCompletionPercentReq) (*CountDashboardProcessCompletionPercentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountDashboardProcessCompletionPercent not implemented")
}
func (*UnimplementedDashboardServiceServer) ListDashboardSafetyInspection(context.Context, *ListDashboardSafetyInspectionReq) (*ListDashboardSafetyInspectionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDashboardSafetyInspection not implemented")
}
func (*UnimplementedDashboardServiceServer) ReportDashboardInvoiceYear(context.Context, *ReportDashboardYearReq) (*ReportDashboardInvoiceYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDashboardInvoiceYear not implemented")
}
func (*UnimplementedDashboardServiceServer) ReportDashboardInvoiceMonth(context.Context, *ReportDashboardMonthReq) (*ReportDashboardInvoiceMonthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDashboardInvoiceMonth not implemented")
}
func (*UnimplementedDashboardServiceServer) ReportDashboardQualityInspectionYear(context.Context, *ReportDashboardYearReq) (*ReportDashboardInspectionYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDashboardQualityInspectionYear not implemented")
}
func (*UnimplementedDashboardServiceServer) ReportDashboardQualityInspectionMonth(context.Context, *ReportDashboardMonthReq) (*ReportDashboardInspectionMonthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDashboardQualityInspectionMonth not implemented")
}
func (*UnimplementedDashboardServiceServer) ReportDashboardSafetyInspectionYear(context.Context, *ReportDashboardYearReq) (*ReportDashboardInspectionYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDashboardSafetyInspectionYear not implemented")
}
func (*UnimplementedDashboardServiceServer) ReportDashboardSafetyInspectionMonth(context.Context, *ReportDashboardMonthReq) (*ReportDashboardInspectionMonthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDashboardSafetyInspectionMonth not implemented")
}
func (*UnimplementedDashboardServiceServer) ReportDashboardProcessYear(context.Context, *ReportDashboardYearReq) (*ReportDashboardProcessYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDashboardProcessYear not implemented")
}
func (*UnimplementedDashboardServiceServer) ReportDashboardProcessMonth(context.Context, *ReportDashboardMonthReq) (*ReportDashboardProcessMonthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDashboardProcessMonth not implemented")
}
func (*UnimplementedDashboardServiceServer) ReportDashboardAttendanceYear(context.Context, *ReportDashboardYearReq) (*ReportDashboardAttendanceYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDashboardAttendanceYear not implemented")
}
func (*UnimplementedDashboardServiceServer) ReportDashboardAttendanceMonth(context.Context, *ReportDashboardMonthReq) (*ReportDashboardAttendanceMonthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDashboardAttendanceMonth not implemented")
}
func (*UnimplementedDashboardServiceServer) ReportDashboardRankMaterialYear(context.Context, *ReportDashboardRankYearReq) (*ReportDashboardRankMaterialYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDashboardRankMaterialYear not implemented")
}
func (*UnimplementedDashboardServiceServer) ReportDashboardRankMaterialMonth(context.Context, *ReportDashboardRankMonthReq) (*ReportDashboardRankMaterialMonthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDashboardRankMaterialMonth not implemented")
}
func (*UnimplementedDashboardServiceServer) ListDashboardProcess(context.Context, *ListDashboardProcessReq) (*ListDashboardProcessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDashboardProcess not implemented")
}

func RegisterDashboardServiceServer(s *grpc.Server, srv DashboardServiceServer) {
	s.RegisterService(&_DashboardService_serviceDesc, srv)
}

func _DashboardService_GetMiDashboardBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMiDashboardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetMiDashboardBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DashboardService/GetMiDashboardBaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetMiDashboardBaseInfo(ctx, req.(*GetMiDashboardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetDashboardShipmentRankCompanyDataYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardShipmentRankCompanyDataYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetDashboardShipmentRankCompanyDataYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DashboardService/GetDashboardShipmentRankCompanyDataYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetDashboardShipmentRankCompanyDataYear(ctx, req.(*GetDashboardShipmentRankCompanyDataYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetDashboardShipmentRankMedicineDataYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardShipmentRankMedicineDataYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetDashboardShipmentRankMedicineDataYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DashboardService/GetDashboardShipmentRankMedicineDataYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetDashboardShipmentRankMedicineDataYear(ctx, req.(*GetDashboardShipmentRankMedicineDataYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetDashboardShipmentCompanyRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardCompanyRankReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetDashboardShipmentCompanyRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DashboardService/GetDashboardShipmentCompanyRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetDashboardShipmentCompanyRank(ctx, req.(*GetDashboardCompanyRankReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetDashboardShipmentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardShipmentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetDashboardShipmentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DashboardService/GetDashboardShipmentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetDashboardShipmentList(ctx, req.(*GetDashboardShipmentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetDashboardMedicineRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardMedicineRankReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetDashboardMedicineRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DashboardService/GetDashboardMedicineRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetDashboardMedicineRank(ctx, req.(*GetDashboardMedicineRankReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetDashboardStockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardStockListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetDashboardStockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DashboardService/GetDashboardStockList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetDashboardStockList(ctx, req.(*GetDashboardStockListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetDashboardProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetDashboardProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DashboardService/GetDashboardProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetDashboardProject(ctx, req.(*GetDashboardProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_CountDashboardWorkmanAttendanceStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountDashboardWorkmanAttendanceStatisticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).CountDashboardWorkmanAttendanceStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DashboardService/CountDashboardWorkmanAttendanceStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).CountDashboardWorkmanAttendanceStatistics(ctx, req.(*CountDashboardWorkmanAttendanceStatisticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_CountDashboardWorkmanEpidemicStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountDashboardWorkmanEpidemicStatisticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).CountDashboardWorkmanEpidemicStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DashboardService/CountDashboardWorkmanEpidemicStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).CountDashboardWorkmanEpidemicStatistics(ctx, req.(*CountDashboardWorkmanEpidemicStatisticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_CountDashboardProcessCompletionPercent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountDashboardProcessCompletionPercentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).CountDashboardProcessCompletionPercent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DashboardService/CountDashboardProcessCompletionPercent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).CountDashboardProcessCompletionPercent(ctx, req.(*CountDashboardProcessCompletionPercentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_ListDashboardSafetyInspection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDashboardSafetyInspectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).ListDashboardSafetyInspection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DashboardService/ListDashboardSafetyInspection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).ListDashboardSafetyInspection(ctx, req.(*ListDashboardSafetyInspectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_ReportDashboardInvoiceYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportDashboardYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).ReportDashboardInvoiceYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DashboardService/ReportDashboardInvoiceYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).ReportDashboardInvoiceYear(ctx, req.(*ReportDashboardYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_ReportDashboardInvoiceMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportDashboardMonthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).ReportDashboardInvoiceMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DashboardService/ReportDashboardInvoiceMonth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).ReportDashboardInvoiceMonth(ctx, req.(*ReportDashboardMonthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_ReportDashboardQualityInspectionYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportDashboardYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).ReportDashboardQualityInspectionYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DashboardService/ReportDashboardQualityInspectionYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).ReportDashboardQualityInspectionYear(ctx, req.(*ReportDashboardYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_ReportDashboardQualityInspectionMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportDashboardMonthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).ReportDashboardQualityInspectionMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DashboardService/ReportDashboardQualityInspectionMonth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).ReportDashboardQualityInspectionMonth(ctx, req.(*ReportDashboardMonthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_ReportDashboardSafetyInspectionYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportDashboardYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).ReportDashboardSafetyInspectionYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DashboardService/ReportDashboardSafetyInspectionYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).ReportDashboardSafetyInspectionYear(ctx, req.(*ReportDashboardYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_ReportDashboardSafetyInspectionMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportDashboardMonthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).ReportDashboardSafetyInspectionMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DashboardService/ReportDashboardSafetyInspectionMonth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).ReportDashboardSafetyInspectionMonth(ctx, req.(*ReportDashboardMonthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_ReportDashboardProcessYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportDashboardYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).ReportDashboardProcessYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DashboardService/ReportDashboardProcessYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).ReportDashboardProcessYear(ctx, req.(*ReportDashboardYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_ReportDashboardProcessMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportDashboardMonthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).ReportDashboardProcessMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DashboardService/ReportDashboardProcessMonth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).ReportDashboardProcessMonth(ctx, req.(*ReportDashboardMonthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_ReportDashboardAttendanceYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportDashboardYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).ReportDashboardAttendanceYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DashboardService/ReportDashboardAttendanceYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).ReportDashboardAttendanceYear(ctx, req.(*ReportDashboardYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_ReportDashboardAttendanceMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportDashboardMonthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).ReportDashboardAttendanceMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DashboardService/ReportDashboardAttendanceMonth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).ReportDashboardAttendanceMonth(ctx, req.(*ReportDashboardMonthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_ReportDashboardRankMaterialYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportDashboardRankYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).ReportDashboardRankMaterialYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DashboardService/ReportDashboardRankMaterialYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).ReportDashboardRankMaterialYear(ctx, req.(*ReportDashboardRankYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_ReportDashboardRankMaterialMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportDashboardRankMonthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).ReportDashboardRankMaterialMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DashboardService/ReportDashboardRankMaterialMonth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).ReportDashboardRankMaterialMonth(ctx, req.(*ReportDashboardRankMonthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_ListDashboardProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDashboardProcessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).ListDashboardProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DashboardService/ListDashboardProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).ListDashboardProcess(ctx, req.(*ListDashboardProcessReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DashboardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ManagerService.DashboardService",
	HandlerType: (*DashboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMiDashboardBaseInfo",
			Handler:    _DashboardService_GetMiDashboardBaseInfo_Handler,
		},
		{
			MethodName: "GetDashboardShipmentRankCompanyDataYear",
			Handler:    _DashboardService_GetDashboardShipmentRankCompanyDataYear_Handler,
		},
		{
			MethodName: "GetDashboardShipmentRankMedicineDataYear",
			Handler:    _DashboardService_GetDashboardShipmentRankMedicineDataYear_Handler,
		},
		{
			MethodName: "GetDashboardShipmentCompanyRank",
			Handler:    _DashboardService_GetDashboardShipmentCompanyRank_Handler,
		},
		{
			MethodName: "GetDashboardShipmentList",
			Handler:    _DashboardService_GetDashboardShipmentList_Handler,
		},
		{
			MethodName: "GetDashboardMedicineRank",
			Handler:    _DashboardService_GetDashboardMedicineRank_Handler,
		},
		{
			MethodName: "GetDashboardStockList",
			Handler:    _DashboardService_GetDashboardStockList_Handler,
		},
		{
			MethodName: "GetDashboardProject",
			Handler:    _DashboardService_GetDashboardProject_Handler,
		},
		{
			MethodName: "CountDashboardWorkmanAttendanceStatistics",
			Handler:    _DashboardService_CountDashboardWorkmanAttendanceStatistics_Handler,
		},
		{
			MethodName: "CountDashboardWorkmanEpidemicStatistics",
			Handler:    _DashboardService_CountDashboardWorkmanEpidemicStatistics_Handler,
		},
		{
			MethodName: "CountDashboardProcessCompletionPercent",
			Handler:    _DashboardService_CountDashboardProcessCompletionPercent_Handler,
		},
		{
			MethodName: "ListDashboardSafetyInspection",
			Handler:    _DashboardService_ListDashboardSafetyInspection_Handler,
		},
		{
			MethodName: "ReportDashboardInvoiceYear",
			Handler:    _DashboardService_ReportDashboardInvoiceYear_Handler,
		},
		{
			MethodName: "ReportDashboardInvoiceMonth",
			Handler:    _DashboardService_ReportDashboardInvoiceMonth_Handler,
		},
		{
			MethodName: "ReportDashboardQualityInspectionYear",
			Handler:    _DashboardService_ReportDashboardQualityInspectionYear_Handler,
		},
		{
			MethodName: "ReportDashboardQualityInspectionMonth",
			Handler:    _DashboardService_ReportDashboardQualityInspectionMonth_Handler,
		},
		{
			MethodName: "ReportDashboardSafetyInspectionYear",
			Handler:    _DashboardService_ReportDashboardSafetyInspectionYear_Handler,
		},
		{
			MethodName: "ReportDashboardSafetyInspectionMonth",
			Handler:    _DashboardService_ReportDashboardSafetyInspectionMonth_Handler,
		},
		{
			MethodName: "ReportDashboardProcessYear",
			Handler:    _DashboardService_ReportDashboardProcessYear_Handler,
		},
		{
			MethodName: "ReportDashboardProcessMonth",
			Handler:    _DashboardService_ReportDashboardProcessMonth_Handler,
		},
		{
			MethodName: "ReportDashboardAttendanceYear",
			Handler:    _DashboardService_ReportDashboardAttendanceYear_Handler,
		},
		{
			MethodName: "ReportDashboardAttendanceMonth",
			Handler:    _DashboardService_ReportDashboardAttendanceMonth_Handler,
		},
		{
			MethodName: "ReportDashboardRankMaterialYear",
			Handler:    _DashboardService_ReportDashboardRankMaterialYear_Handler,
		},
		{
			MethodName: "ReportDashboardRankMaterialMonth",
			Handler:    _DashboardService_ReportDashboardRankMaterialMonth_Handler,
		},
		{
			MethodName: "ListDashboardProcess",
			Handler:    _DashboardService_ListDashboardProcess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ManagerService.proto",
}
