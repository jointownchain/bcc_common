// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: BcAndBankService.proto

// 外挂用 - 综合 bankSDK 和 fabricSDK 调用
// blockchain and bank plugin

package BcAndBankService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Symbols defined in public import of google/protobuf/timestamp.proto.

type Timestamp = timestamppb.Timestamp

type QueryTxIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxID string `protobuf:"bytes,1,opt,name=TxID,proto3" json:"TxID"`
	Key  string `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key"`
}

func (x *QueryTxIDReq) Reset() {
	*x = QueryTxIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTxIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTxIDReq) ProtoMessage() {}

func (x *QueryTxIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTxIDReq.ProtoReflect.Descriptor instead.
func (*QueryTxIDReq) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{0}
}

func (x *QueryTxIDReq) GetTxID() string {
	if x != nil {
		return x.TxID
	}
	return ""
}

func (x *QueryTxIDReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type QueryTxIDRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rst      string                 `protobuf:"bytes,1,opt,name=Rst,proto3" json:"Rst"`
	CreateAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=CreateAt,proto3" json:"CreateAt"`
}

func (x *QueryTxIDRsp) Reset() {
	*x = QueryTxIDRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTxIDRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTxIDRsp) ProtoMessage() {}

func (x *QueryTxIDRsp) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTxIDRsp.ProtoReflect.Descriptor instead.
func (*QueryTxIDRsp) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{1}
}

func (x *QueryTxIDRsp) GetRst() string {
	if x != nil {
		return x.Rst
	}
	return ""
}

func (x *QueryTxIDRsp) GetCreateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

type BcAndBankPayOrderActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayOrder    []*UploadChainPayOrder `protobuf:"bytes,1,rep,name=payOrder,proto3" json:"payOrder"`
	BankRequest *BankRequest           `protobuf:"bytes,2,opt,name=bankRequest,proto3" json:"bankRequest"`
	Debug       bool                   `protobuf:"varint,3,opt,name=debug,proto3" json:"debug"`
}

func (x *BcAndBankPayOrderActionRequest) Reset() {
	*x = BcAndBankPayOrderActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BcAndBankPayOrderActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BcAndBankPayOrderActionRequest) ProtoMessage() {}

func (x *BcAndBankPayOrderActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BcAndBankPayOrderActionRequest.ProtoReflect.Descriptor instead.
func (*BcAndBankPayOrderActionRequest) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{2}
}

func (x *BcAndBankPayOrderActionRequest) GetPayOrder() []*UploadChainPayOrder {
	if x != nil {
		return x.PayOrder
	}
	return nil
}

func (x *BcAndBankPayOrderActionRequest) GetBankRequest() *BankRequest {
	if x != nil {
		return x.BankRequest
	}
	return nil
}

func (x *BcAndBankPayOrderActionRequest) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

type BcAndBankFactoringActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FactoringOrder *UploadChainFactoringOrder `protobuf:"bytes,1,opt,name=factoringOrder,proto3" json:"factoringOrder"`
	BankRequest    *BankRequest               `protobuf:"bytes,2,opt,name=bankRequest,proto3" json:"bankRequest"`
}

func (x *BcAndBankFactoringActionRequest) Reset() {
	*x = BcAndBankFactoringActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BcAndBankFactoringActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BcAndBankFactoringActionRequest) ProtoMessage() {}

func (x *BcAndBankFactoringActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BcAndBankFactoringActionRequest.ProtoReflect.Descriptor instead.
func (*BcAndBankFactoringActionRequest) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{3}
}

func (x *BcAndBankFactoringActionRequest) GetFactoringOrder() *UploadChainFactoringOrder {
	if x != nil {
		return x.FactoringOrder
	}
	return nil
}

func (x *BcAndBankFactoringActionRequest) GetBankRequest() *BankRequest {
	if x != nil {
		return x.BankRequest
	}
	return nil
}

type BcAndBankFactoringRepayActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repay       *UploadChainFactoringOrder `protobuf:"bytes,1,opt,name=repay,proto3" json:"repay"`
	BankRequest *BankRequest               `protobuf:"bytes,2,opt,name=bankRequest,proto3" json:"bankRequest"`
}

func (x *BcAndBankFactoringRepayActionRequest) Reset() {
	*x = BcAndBankFactoringRepayActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BcAndBankFactoringRepayActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BcAndBankFactoringRepayActionRequest) ProtoMessage() {}

func (x *BcAndBankFactoringRepayActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BcAndBankFactoringRepayActionRequest.ProtoReflect.Descriptor instead.
func (*BcAndBankFactoringRepayActionRequest) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{4}
}

func (x *BcAndBankFactoringRepayActionRequest) GetRepay() *UploadChainFactoringOrder {
	if x != nil {
		return x.Repay
	}
	return nil
}

func (x *BcAndBankFactoringRepayActionRequest) GetBankRequest() *BankRequest {
	if x != nil {
		return x.BankRequest
	}
	return nil
}

type BcAndBankActionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BcResponse   []*BcResponse `protobuf:"bytes,1,rep,name=bcResponse,proto3" json:"bcResponse"`     // string hash
	BankResponse *BankResponse `protobuf:"bytes,2,opt,name=bankResponse,proto3" json:"bankResponse"` // xml marshal
}

func (x *BcAndBankActionResp) Reset() {
	*x = BcAndBankActionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BcAndBankActionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BcAndBankActionResp) ProtoMessage() {}

func (x *BcAndBankActionResp) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BcAndBankActionResp.ProtoReflect.Descriptor instead.
func (*BcAndBankActionResp) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{5}
}

func (x *BcAndBankActionResp) GetBcResponse() []*BcResponse {
	if x != nil {
		return x.BcResponse
	}
	return nil
}

func (x *BcAndBankActionResp) GetBankResponse() *BankResponse {
	if x != nil {
		return x.BankResponse
	}
	return nil
}

// 银行相关参数
// 银行参数基于 XML, 对应的 struct 中有很多标签和无用字段, 使用 xml.Marshal 传 string
type BankRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求体 xml.marshal
	Body string `protobuf:"bytes,1,opt,name=body,proto3" json:"body"`
	// 请求方法 <- 按照 bankSDK 内定义的 constant opts 来
	Function string `protobuf:"bytes,2,opt,name=function,proto3" json:"function"`
	SkipBank bool   `protobuf:"varint,3,opt,name=skipBank,proto3" json:"skipBank"`
}

func (x *BankRequest) Reset() {
	*x = BankRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankRequest) ProtoMessage() {}

func (x *BankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankRequest.ProtoReflect.Descriptor instead.
func (*BankRequest) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{6}
}

func (x *BankRequest) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *BankRequest) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *BankRequest) GetSkipBank() bool {
	if x != nil {
		return x.SkipBank
	}
	return false
}

// 通用银行信息返回(返回对应结构体 xml marshal)
type BankResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body string `protobuf:"bytes,1,opt,name=body,proto3" json:"body"`
}

func (x *BankResponse) Reset() {
	*x = BankResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankResponse) ProtoMessage() {}

func (x *BankResponse) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankResponse.ProtoReflect.Descriptor instead.
func (*BankResponse) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{7}
}

func (x *BankResponse) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

// 通用单个上链信息返回(hash)
type BcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash"`
}

func (x *BcResponse) Reset() {
	*x = BcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BcResponse) ProtoMessage() {}

func (x *BcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BcResponse.ProtoReflect.Descriptor instead.
func (*BcResponse) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{8}
}

func (x *BcResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

// 通用上链信息返回(hashs)
type BcResponses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []string `protobuf:"bytes,1,rep,name=hash,proto3" json:"hash"`
}

func (x *BcResponses) Reset() {
	*x = BcResponses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BcResponses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BcResponses) ProtoMessage() {}

func (x *BcResponses) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BcResponses.ProtoReflect.Descriptor instead.
func (*BcResponses) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{9}
}

func (x *BcResponses) GetHash() []string {
	if x != nil {
		return x.Hash
	}
	return nil
}

// 通用聚合返回(hash, 银行)
type CommonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankRsp *BankResponse `protobuf:"bytes,1,opt,name=bankRsp,proto3" json:"bankRsp"`
	// 可能会返回多个 hash
	BcRsp []*BcResponse `protobuf:"bytes,2,rep,name=bcRsp,proto3" json:"bcRsp"`
}

func (x *CommonResponse) Reset() {
	*x = CommonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResponse) ProtoMessage() {}

func (x *CommonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResponse.ProtoReflect.Descriptor instead.
func (*CommonResponse) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{10}
}

func (x *CommonResponse) GetBankRsp() *BankResponse {
	if x != nil {
		return x.BankRsp
	}
	return nil
}

func (x *CommonResponse) GetBcRsp() []*BcResponse {
	if x != nil {
		return x.BcRsp
	}
	return nil
}

// dto/UploadChain.go generated
// base -------------- start
type BankAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardNo      string `protobuf:"bytes,1,opt,name=cardNo,proto3" json:"cardNo"`
	AccountType string `protobuf:"bytes,2,opt,name=accountType,proto3" json:"accountType"`
	Bank        string `protobuf:"bytes,3,opt,name=bank,proto3" json:"bank"`
	Toibkn      string `protobuf:"bytes,4,opt,name=toibkn,proto3" json:"toibkn"`
	CardOwner   string `protobuf:"bytes,5,opt,name=cardOwner,proto3" json:"cardOwner"`
	ValidStatus string `protobuf:"bytes,6,opt,name=validStatus,proto3" json:"validStatus"`
}

func (x *BankAccount) Reset() {
	*x = BankAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankAccount) ProtoMessage() {}

func (x *BankAccount) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankAccount.ProtoReflect.Descriptor instead.
func (*BankAccount) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{11}
}

func (x *BankAccount) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *BankAccount) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *BankAccount) GetBank() string {
	if x != nil {
		return x.Bank
	}
	return ""
}

func (x *BankAccount) GetToibkn() string {
	if x != nil {
		return x.Toibkn
	}
	return ""
}

func (x *BankAccount) GetCardOwner() string {
	if x != nil {
		return x.CardOwner
	}
	return ""
}

func (x *BankAccount) GetValidStatus() string {
	if x != nil {
		return x.ValidStatus
	}
	return ""
}

type UploadChainType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastHash         string `protobuf:"bytes,1,opt,name=lastHash,proto3" json:"lastHash"`
	UploadNode       string `protobuf:"bytes,2,opt,name=uploadNode,proto3" json:"uploadNode"`
	UploaderName     string `protobuf:"bytes,3,opt,name=uploaderName,proto3" json:"uploaderName"`
	UploaderRole     string `protobuf:"bytes,4,opt,name=uploaderRole,proto3" json:"uploaderRole"`
	UploaderRoleName string `protobuf:"bytes,5,opt,name=uploaderRoleName,proto3" json:"uploaderRoleName"`
	UploaderAccount  string `protobuf:"bytes,6,opt,name=uploaderAccount,proto3" json:"uploaderAccount"`
}

func (x *UploadChainType) Reset() {
	*x = UploadChainType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainType) ProtoMessage() {}

func (x *UploadChainType) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainType.ProtoReflect.Descriptor instead.
func (*UploadChainType) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{12}
}

func (x *UploadChainType) GetLastHash() string {
	if x != nil {
		return x.LastHash
	}
	return ""
}

func (x *UploadChainType) GetUploadNode() string {
	if x != nil {
		return x.UploadNode
	}
	return ""
}

func (x *UploadChainType) GetUploaderName() string {
	if x != nil {
		return x.UploaderName
	}
	return ""
}

func (x *UploadChainType) GetUploaderRole() string {
	if x != nil {
		return x.UploaderRole
	}
	return ""
}

func (x *UploadChainType) GetUploaderRoleName() string {
	if x != nil {
		return x.UploaderRoleName
	}
	return ""
}

func (x *UploadChainType) GetUploaderAccount() string {
	if x != nil {
		return x.UploaderAccount
	}
	return ""
}

type PayOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentNo string `protobuf:"bytes,1,opt,name=shipmentNo,proto3" json:"shipmentNo"`
}

func (x *PayOrder) Reset() {
	*x = PayOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayOrder) ProtoMessage() {}

func (x *PayOrder) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayOrder.ProtoReflect.Descriptor instead.
func (*PayOrder) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{13}
}

func (x *PayOrder) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

type UploadChainCompany struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType *UploadChainType       `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	CompanyName     string                 `protobuf:"bytes,2,opt,name=companyName,proto3" json:"companyName"`
	CompanyCode     string                 `protobuf:"bytes,3,opt,name=companyCode,proto3" json:"companyCode"`
	ManagerName     string                 `protobuf:"bytes,4,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone    string                 `protobuf:"bytes,5,opt,name=managerPhone,proto3" json:"managerPhone"`
	MibCode         string                 `protobuf:"bytes,6,opt,name=mibCode,proto3" json:"mibCode"`
	CreditAmount    int64                  `protobuf:"varint,7,opt,name=creditAmount,proto3" json:"creditAmount"`
	StartAt         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=startAt,proto3" json:"startAt"`
	EndAt           *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=endAt,proto3" json:"endAt"`
	BankAccount     *BankAccount           `protobuf:"bytes,10,opt,name=bankAccount,proto3" json:"bankAccount"`
}

func (x *UploadChainCompany) Reset() {
	*x = UploadChainCompany{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainCompany) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainCompany) ProtoMessage() {}

func (x *UploadChainCompany) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainCompany.ProtoReflect.Descriptor instead.
func (*UploadChainCompany) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{14}
}

func (x *UploadChainCompany) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainCompany) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *UploadChainCompany) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *UploadChainCompany) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *UploadChainCompany) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *UploadChainCompany) GetMibCode() string {
	if x != nil {
		return x.MibCode
	}
	return ""
}

func (x *UploadChainCompany) GetCreditAmount() int64 {
	if x != nil {
		return x.CreditAmount
	}
	return 0
}

func (x *UploadChainCompany) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *UploadChainCompany) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *UploadChainCompany) GetBankAccount() *BankAccount {
	if x != nil {
		return x.BankAccount
	}
	return nil
}

type UploadChainCompanies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainCompany []*UploadChainCompany `protobuf:"bytes,1,rep,name=uploadChainCompany,proto3" json:"uploadChainCompany"`
}

func (x *UploadChainCompanies) Reset() {
	*x = UploadChainCompanies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainCompanies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainCompanies) ProtoMessage() {}

func (x *UploadChainCompanies) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainCompanies.ProtoReflect.Descriptor instead.
func (*UploadChainCompanies) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{15}
}

func (x *UploadChainCompanies) GetUploadChainCompany() []*UploadChainCompany {
	if x != nil {
		return x.UploadChainCompany
	}
	return nil
}

type UploadChainConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType *UploadChainType       `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	Key             string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key"`
	TypeOne         string                 `protobuf:"bytes,3,opt,name=typeOne,proto3" json:"typeOne"`
	TypeTwo         string                 `protobuf:"bytes,4,opt,name=typeTwo,proto3" json:"typeTwo"`
	TypeThree       string                 `protobuf:"bytes,5,opt,name=typeThree,proto3" json:"typeThree"`
	Value           string                 `protobuf:"bytes,6,opt,name=value,proto3" json:"value"`
	StartAt         *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=startAt,proto3" json:"startAt"`
	EndAt           *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=endAt,proto3" json:"endAt"`
	Explain         string                 `protobuf:"bytes,9,opt,name=explain,proto3" json:"explain"`
}

func (x *UploadChainConfig) Reset() {
	*x = UploadChainConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainConfig) ProtoMessage() {}

func (x *UploadChainConfig) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainConfig.ProtoReflect.Descriptor instead.
func (*UploadChainConfig) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{16}
}

func (x *UploadChainConfig) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainConfig) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UploadChainConfig) GetTypeOne() string {
	if x != nil {
		return x.TypeOne
	}
	return ""
}

func (x *UploadChainConfig) GetTypeTwo() string {
	if x != nil {
		return x.TypeTwo
	}
	return ""
}

func (x *UploadChainConfig) GetTypeThree() string {
	if x != nil {
		return x.TypeThree
	}
	return ""
}

func (x *UploadChainConfig) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *UploadChainConfig) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *UploadChainConfig) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *UploadChainConfig) GetExplain() string {
	if x != nil {
		return x.Explain
	}
	return ""
}

type UploadChainConfigs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainConfig []*UploadChainConfig `protobuf:"bytes,1,rep,name=uploadChainConfig,proto3" json:"uploadChainConfig"`
}

func (x *UploadChainConfigs) Reset() {
	*x = UploadChainConfigs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainConfigs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainConfigs) ProtoMessage() {}

func (x *UploadChainConfigs) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainConfigs.ProtoReflect.Descriptor instead.
func (*UploadChainConfigs) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{17}
}

func (x *UploadChainConfigs) GetUploadChainConfig() []*UploadChainConfig {
	if x != nil {
		return x.UploadChainConfig
	}
	return nil
}

type UploadChainContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType *UploadChainType       `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	ContractNo      string                 `protobuf:"bytes,2,opt,name=contractNo,proto3" json:"contractNo"`
	TenderCompany   string                 `protobuf:"bytes,3,opt,name=tenderCompany,proto3" json:"tenderCompany"`
	MedicineCode    string                 `protobuf:"bytes,4,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicinePCode   string                 `protobuf:"bytes,5,opt,name=medicinePCode,proto3" json:"medicinePCode"`
	CompanyCode     string                 `protobuf:"bytes,6,opt,name=companyCode,proto3" json:"companyCode"`
	MibCode         string                 `protobuf:"bytes,7,opt,name=mibCode,proto3" json:"mibCode"`
	MedicinePrice   int64                  `protobuf:"varint,8,opt,name=medicinePrice,proto3" json:"medicinePrice"`
	TotalAmount     int64                  `protobuf:"varint,9,opt,name=totalAmount,proto3" json:"totalAmount"`
	StartAt         *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=startAt,proto3" json:"startAt"`
	EndAt           *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=endAt,proto3" json:"endAt"`
}

func (x *UploadChainContract) Reset() {
	*x = UploadChainContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainContract) ProtoMessage() {}

func (x *UploadChainContract) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainContract.ProtoReflect.Descriptor instead.
func (*UploadChainContract) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{18}
}

func (x *UploadChainContract) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainContract) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

func (x *UploadChainContract) GetTenderCompany() string {
	if x != nil {
		return x.TenderCompany
	}
	return ""
}

func (x *UploadChainContract) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *UploadChainContract) GetMedicinePCode() string {
	if x != nil {
		return x.MedicinePCode
	}
	return ""
}

func (x *UploadChainContract) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *UploadChainContract) GetMibCode() string {
	if x != nil {
		return x.MibCode
	}
	return ""
}

func (x *UploadChainContract) GetMedicinePrice() int64 {
	if x != nil {
		return x.MedicinePrice
	}
	return 0
}

func (x *UploadChainContract) GetTotalAmount() int64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *UploadChainContract) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *UploadChainContract) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

type UploadChainContracts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainContract []*UploadChainContract `protobuf:"bytes,1,rep,name=uploadChainContract,proto3" json:"uploadChainContract"`
}

func (x *UploadChainContracts) Reset() {
	*x = UploadChainContracts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainContracts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainContracts) ProtoMessage() {}

func (x *UploadChainContracts) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainContracts.ProtoReflect.Descriptor instead.
func (*UploadChainContracts) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{19}
}

func (x *UploadChainContracts) GetUploadChainContract() []*UploadChainContract {
	if x != nil {
		return x.UploadChainContract
	}
	return nil
}

type UploadChainContractMi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType *UploadChainType `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	ContractNo      string           `protobuf:"bytes,2,opt,name=contractNo,proto3" json:"contractNo"`
	MiCode          string           `protobuf:"bytes,3,opt,name=miCode,proto3" json:"miCode"`
	MedicineAmount  int64            `protobuf:"varint,4,opt,name=medicineAmount,proto3" json:"medicineAmount"`
	ContractMd5     string           `protobuf:"bytes,5,opt,name=contractMd5,proto3" json:"contractMd5"`
	ContractUrl     string           `protobuf:"bytes,6,opt,name=contractUrl,proto3" json:"contractUrl"`
}

func (x *UploadChainContractMi) Reset() {
	*x = UploadChainContractMi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainContractMi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainContractMi) ProtoMessage() {}

func (x *UploadChainContractMi) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainContractMi.ProtoReflect.Descriptor instead.
func (*UploadChainContractMi) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{20}
}

func (x *UploadChainContractMi) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainContractMi) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

func (x *UploadChainContractMi) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *UploadChainContractMi) GetMedicineAmount() int64 {
	if x != nil {
		return x.MedicineAmount
	}
	return 0
}

func (x *UploadChainContractMi) GetContractMd5() string {
	if x != nil {
		return x.ContractMd5
	}
	return ""
}

func (x *UploadChainContractMi) GetContractUrl() string {
	if x != nil {
		return x.ContractUrl
	}
	return ""
}

type UploadChainContractMis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainContractMi []*UploadChainContractMi `protobuf:"bytes,1,rep,name=uploadChainContractMi,proto3" json:"uploadChainContractMi"`
}

func (x *UploadChainContractMis) Reset() {
	*x = UploadChainContractMis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainContractMis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainContractMis) ProtoMessage() {}

func (x *UploadChainContractMis) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainContractMis.ProtoReflect.Descriptor instead.
func (*UploadChainContractMis) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{21}
}

func (x *UploadChainContractMis) GetUploadChainContractMi() []*UploadChainContractMi {
	if x != nil {
		return x.UploadChainContractMi
	}
	return nil
}

type UploadChainFactoringOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType    *UploadChainType       `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	PayOrders          []*PayOrder            `protobuf:"bytes,2,rep,name=payOrders,proto3" json:"payOrders"`
	CompanyCode        string                 `protobuf:"bytes,3,opt,name=companyCode,proto3" json:"companyCode"`
	FactoringMoney     int64                  `protobuf:"varint,4,opt,name=factoringMoney,proto3" json:"factoringMoney"`
	FactoringOrderNo   string                 `protobuf:"bytes,5,opt,name=factoringOrderNo,proto3" json:"factoringOrderNo"`
	ApplyDate          *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=applyDate,proto3" json:"applyDate"`
	ApplyAt            *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=applyAt,proto3" json:"applyAt"`
	RefundDate         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=refundDate,proto3" json:"refundDate"`
	FactoringBankNo    string                 `protobuf:"bytes,9,opt,name=factoringBankNo,proto3" json:"factoringBankNo"`
	ActualReceiveMoney int64                  `protobuf:"varint,10,opt,name=actualReceiveMoney,proto3" json:"actualReceiveMoney"`
	FactoringStatus    string                 `protobuf:"bytes,11,opt,name=factoringStatus,proto3" json:"factoringStatus"`
	RefundAt           *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=refundAt,proto3" json:"refundAt"`
	RefundStatus       string                 `protobuf:"bytes,13,opt,name=refundStatus,proto3" json:"refundStatus"`
}

func (x *UploadChainFactoringOrder) Reset() {
	*x = UploadChainFactoringOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainFactoringOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainFactoringOrder) ProtoMessage() {}

func (x *UploadChainFactoringOrder) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainFactoringOrder.ProtoReflect.Descriptor instead.
func (*UploadChainFactoringOrder) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{22}
}

func (x *UploadChainFactoringOrder) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainFactoringOrder) GetPayOrders() []*PayOrder {
	if x != nil {
		return x.PayOrders
	}
	return nil
}

func (x *UploadChainFactoringOrder) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *UploadChainFactoringOrder) GetFactoringMoney() int64 {
	if x != nil {
		return x.FactoringMoney
	}
	return 0
}

func (x *UploadChainFactoringOrder) GetFactoringOrderNo() string {
	if x != nil {
		return x.FactoringOrderNo
	}
	return ""
}

func (x *UploadChainFactoringOrder) GetApplyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyDate
	}
	return nil
}

func (x *UploadChainFactoringOrder) GetApplyAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyAt
	}
	return nil
}

func (x *UploadChainFactoringOrder) GetRefundDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RefundDate
	}
	return nil
}

func (x *UploadChainFactoringOrder) GetFactoringBankNo() string {
	if x != nil {
		return x.FactoringBankNo
	}
	return ""
}

func (x *UploadChainFactoringOrder) GetActualReceiveMoney() int64 {
	if x != nil {
		return x.ActualReceiveMoney
	}
	return 0
}

func (x *UploadChainFactoringOrder) GetFactoringStatus() string {
	if x != nil {
		return x.FactoringStatus
	}
	return ""
}

func (x *UploadChainFactoringOrder) GetRefundAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RefundAt
	}
	return nil
}

func (x *UploadChainFactoringOrder) GetRefundStatus() string {
	if x != nil {
		return x.RefundStatus
	}
	return ""
}

type UploadChainFactoringOrders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainFactoringOrder []*UploadChainFactoringOrder `protobuf:"bytes,1,rep,name=uploadChainFactoringOrder,proto3" json:"uploadChainFactoringOrder"`
}

func (x *UploadChainFactoringOrders) Reset() {
	*x = UploadChainFactoringOrders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainFactoringOrders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainFactoringOrders) ProtoMessage() {}

func (x *UploadChainFactoringOrders) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainFactoringOrders.ProtoReflect.Descriptor instead.
func (*UploadChainFactoringOrders) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{23}
}

func (x *UploadChainFactoringOrders) GetUploadChainFactoringOrder() []*UploadChainFactoringOrder {
	if x != nil {
		return x.UploadChainFactoringOrder
	}
	return nil
}

type UploadChainMedicine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType       *UploadChainType `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	MedicineName          string           `protobuf:"bytes,2,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string           `protobuf:"bytes,3,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicinePCode         string           `protobuf:"bytes,4,opt,name=medicinePCode,proto3" json:"medicinePCode"`
	MedicineSpecification string           `protobuf:"bytes,5,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	MedicineForm          string           `protobuf:"bytes,6,opt,name=medicineForm,proto3" json:"medicineForm"`
	MedicinePackage       string           `protobuf:"bytes,7,opt,name=medicinePackage,proto3" json:"medicinePackage"`
	MedicineUnit          string           `protobuf:"bytes,8,opt,name=medicineUnit,proto3" json:"medicineUnit"`
	CalculateRate         int64            `protobuf:"varint,9,opt,name=calculateRate,proto3" json:"calculateRate"`
	Manufacturer          string           `protobuf:"bytes,10,opt,name=manufacturer,proto3" json:"manufacturer"`
}

func (x *UploadChainMedicine) Reset() {
	*x = UploadChainMedicine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainMedicine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainMedicine) ProtoMessage() {}

func (x *UploadChainMedicine) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainMedicine.ProtoReflect.Descriptor instead.
func (*UploadChainMedicine) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{24}
}

func (x *UploadChainMedicine) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainMedicine) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *UploadChainMedicine) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *UploadChainMedicine) GetMedicinePCode() string {
	if x != nil {
		return x.MedicinePCode
	}
	return ""
}

func (x *UploadChainMedicine) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *UploadChainMedicine) GetMedicineForm() string {
	if x != nil {
		return x.MedicineForm
	}
	return ""
}

func (x *UploadChainMedicine) GetMedicinePackage() string {
	if x != nil {
		return x.MedicinePackage
	}
	return ""
}

func (x *UploadChainMedicine) GetMedicineUnit() string {
	if x != nil {
		return x.MedicineUnit
	}
	return ""
}

func (x *UploadChainMedicine) GetCalculateRate() int64 {
	if x != nil {
		return x.CalculateRate
	}
	return 0
}

func (x *UploadChainMedicine) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

type UploadChainMedicines struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainMedicine []*UploadChainMedicine `protobuf:"bytes,1,rep,name=uploadChainMedicine,proto3" json:"uploadChainMedicine"`
}

func (x *UploadChainMedicines) Reset() {
	*x = UploadChainMedicines{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainMedicines) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainMedicines) ProtoMessage() {}

func (x *UploadChainMedicines) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainMedicines.ProtoReflect.Descriptor instead.
func (*UploadChainMedicines) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{25}
}

func (x *UploadChainMedicines) GetUploadChainMedicine() []*UploadChainMedicine {
	if x != nil {
		return x.UploadChainMedicine
	}
	return nil
}

type UploadChainMi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType *UploadChainType `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	MibCode         string           `protobuf:"bytes,2,opt,name=mibCode,proto3" json:"mibCode"`
	MiName          string           `protobuf:"bytes,3,opt,name=miName,proto3" json:"miName"`
	MiCode          string           `protobuf:"bytes,4,opt,name=miCode,proto3" json:"miCode"`
	MiType          string           `protobuf:"bytes,5,opt,name=miType,proto3" json:"miType"`
	ManagerName     string           `protobuf:"bytes,6,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone    string           `protobuf:"bytes,7,opt,name=managerPhone,proto3" json:"managerPhone"`
	LimitBalance    int64            `protobuf:"varint,8,opt,name=limitBalance,proto3" json:"limitBalance"`
	SpecialAccount  *BankAccount     `protobuf:"bytes,9,opt,name=specialAccount,proto3" json:"specialAccount"`
	NormalAccount   *BankAccount     `protobuf:"bytes,10,opt,name=normalAccount,proto3" json:"normalAccount"`
}

func (x *UploadChainMi) Reset() {
	*x = UploadChainMi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainMi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainMi) ProtoMessage() {}

func (x *UploadChainMi) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainMi.ProtoReflect.Descriptor instead.
func (*UploadChainMi) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{26}
}

func (x *UploadChainMi) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainMi) GetMibCode() string {
	if x != nil {
		return x.MibCode
	}
	return ""
}

func (x *UploadChainMi) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *UploadChainMi) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *UploadChainMi) GetMiType() string {
	if x != nil {
		return x.MiType
	}
	return ""
}

func (x *UploadChainMi) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *UploadChainMi) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *UploadChainMi) GetLimitBalance() int64 {
	if x != nil {
		return x.LimitBalance
	}
	return 0
}

func (x *UploadChainMi) GetSpecialAccount() *BankAccount {
	if x != nil {
		return x.SpecialAccount
	}
	return nil
}

func (x *UploadChainMi) GetNormalAccount() *BankAccount {
	if x != nil {
		return x.NormalAccount
	}
	return nil
}

type UploadChainMis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainMi []*UploadChainMi `protobuf:"bytes,1,rep,name=uploadChainMi,proto3" json:"uploadChainMi"`
}

func (x *UploadChainMis) Reset() {
	*x = UploadChainMis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainMis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainMis) ProtoMessage() {}

func (x *UploadChainMis) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainMis.ProtoReflect.Descriptor instead.
func (*UploadChainMis) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{27}
}

func (x *UploadChainMis) GetUploadChainMi() []*UploadChainMi {
	if x != nil {
		return x.UploadChainMi
	}
	return nil
}

type UploadChainPayOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType *UploadChainType       `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	ShipmentNo      string                 `protobuf:"bytes,2,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	OrderAmount     int64                  `protobuf:"varint,3,opt,name=orderAmount,proto3" json:"orderAmount"`
	MiCode          string                 `protobuf:"bytes,4,opt,name=miCode,proto3" json:"miCode"`
	CompanyCode     string                 `protobuf:"bytes,5,opt,name=companyCode,proto3" json:"companyCode"`
	OutTradeNo      string                 `protobuf:"bytes,6,opt,name=outTradeNo,proto3" json:"outTradeNo"`
	PayType         string                 `protobuf:"bytes,7,opt,name=payType,proto3" json:"payType"`
	PayAt           *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=payAt,proto3" json:"payAt"`
	PayStatus       string                 `protobuf:"bytes,9,opt,name=payStatus,proto3" json:"payStatus"`
	FactoringStatus string                 `protobuf:"bytes,10,opt,name=factoringStatus,proto3" json:"factoringStatus"`
}

func (x *UploadChainPayOrder) Reset() {
	*x = UploadChainPayOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainPayOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainPayOrder) ProtoMessage() {}

func (x *UploadChainPayOrder) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainPayOrder.ProtoReflect.Descriptor instead.
func (*UploadChainPayOrder) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{28}
}

func (x *UploadChainPayOrder) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainPayOrder) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *UploadChainPayOrder) GetOrderAmount() int64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *UploadChainPayOrder) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *UploadChainPayOrder) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *UploadChainPayOrder) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

func (x *UploadChainPayOrder) GetPayType() string {
	if x != nil {
		return x.PayType
	}
	return ""
}

func (x *UploadChainPayOrder) GetPayAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PayAt
	}
	return nil
}

func (x *UploadChainPayOrder) GetPayStatus() string {
	if x != nil {
		return x.PayStatus
	}
	return ""
}

func (x *UploadChainPayOrder) GetFactoringStatus() string {
	if x != nil {
		return x.FactoringStatus
	}
	return ""
}

type UploadChainPayOrders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainPayOrder []*UploadChainPayOrder `protobuf:"bytes,1,rep,name=uploadChainPayOrder,proto3" json:"uploadChainPayOrder"`
}

func (x *UploadChainPayOrders) Reset() {
	*x = UploadChainPayOrders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainPayOrders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainPayOrders) ProtoMessage() {}

func (x *UploadChainPayOrders) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainPayOrders.ProtoReflect.Descriptor instead.
func (*UploadChainPayOrders) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{29}
}

func (x *UploadChainPayOrders) GetUploadChainPayOrder() []*UploadChainPayOrder {
	if x != nil {
		return x.UploadChainPayOrder
	}
	return nil
}

type UploadChainShipment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType *UploadChainType       `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	TpOrderNo       string                 `protobuf:"bytes,2,opt,name=tpOrderNo,proto3" json:"tpOrderNo"`
	OrderNo         string                 `protobuf:"bytes,3,opt,name=orderNo,proto3" json:"orderNo"`
	TpCode          string                 `protobuf:"bytes,4,opt,name=tpCode,proto3" json:"tpCode"`
	MibCode         string                 `protobuf:"bytes,5,opt,name=mibCode,proto3" json:"mibCode"`
	ShipmentAmount  int64                  `protobuf:"varint,6,opt,name=shipmentAmount,proto3" json:"shipmentAmount"`
	OrderAmount     int64                  `protobuf:"varint,7,opt,name=orderAmount,proto3" json:"orderAmount"`
	ContractNo      string                 `protobuf:"bytes,8,opt,name=contractNo,proto3" json:"contractNo"`
	MiCode          string                 `protobuf:"bytes,9,opt,name=miCode,proto3" json:"miCode"`
	MedicineCode    string                 `protobuf:"bytes,10,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicinePCode   string                 `protobuf:"bytes,11,opt,name=medicinePCode,proto3" json:"medicinePCode"`
	CompanyCode     string                 `protobuf:"bytes,12,opt,name=companyCode,proto3" json:"companyCode"`
	SyncAt          *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=syncAt,proto3" json:"syncAt"`
}

func (x *UploadChainShipment) Reset() {
	*x = UploadChainShipment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainShipment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainShipment) ProtoMessage() {}

func (x *UploadChainShipment) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainShipment.ProtoReflect.Descriptor instead.
func (*UploadChainShipment) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{30}
}

func (x *UploadChainShipment) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainShipment) GetTpOrderNo() string {
	if x != nil {
		return x.TpOrderNo
	}
	return ""
}

func (x *UploadChainShipment) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *UploadChainShipment) GetTpCode() string {
	if x != nil {
		return x.TpCode
	}
	return ""
}

func (x *UploadChainShipment) GetMibCode() string {
	if x != nil {
		return x.MibCode
	}
	return ""
}

func (x *UploadChainShipment) GetShipmentAmount() int64 {
	if x != nil {
		return x.ShipmentAmount
	}
	return 0
}

func (x *UploadChainShipment) GetOrderAmount() int64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *UploadChainShipment) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

func (x *UploadChainShipment) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *UploadChainShipment) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *UploadChainShipment) GetMedicinePCode() string {
	if x != nil {
		return x.MedicinePCode
	}
	return ""
}

func (x *UploadChainShipment) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *UploadChainShipment) GetSyncAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SyncAt
	}
	return nil
}

type UploadChainShipments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainShipment []*UploadChainShipment `protobuf:"bytes,1,rep,name=uploadChainShipment,proto3" json:"uploadChainShipment"`
}

func (x *UploadChainShipments) Reset() {
	*x = UploadChainShipments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainShipments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainShipments) ProtoMessage() {}

func (x *UploadChainShipments) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainShipments.ProtoReflect.Descriptor instead.
func (*UploadChainShipments) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{31}
}

func (x *UploadChainShipments) GetUploadChainShipment() []*UploadChainShipment {
	if x != nil {
		return x.UploadChainShipment
	}
	return nil
}

type UploadChainShipmentOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType  *UploadChainType       `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	Plans            []*UploadChainShipment `protobuf:"bytes,2,rep,name=plans,proto3" json:"plans"`
	ShipmentNo       string                 `protobuf:"bytes,3,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	InvoiceMd5       string                 `protobuf:"bytes,4,opt,name=invoiceMd5,proto3" json:"invoiceMd5"`
	InvoiceUrl       string                 `protobuf:"bytes,5,opt,name=invoiceUrl,proto3" json:"invoiceUrl"`
	InvoiceType      string                 `protobuf:"bytes,6,opt,name=invoiceType,proto3" json:"invoiceType"`
	InvoiceTotal     int64                  `protobuf:"varint,7,opt,name=invoiceTotal,proto3" json:"invoiceTotal"`
	InvoiceTax       int64                  `protobuf:"varint,8,opt,name=invoiceTax,proto3" json:"invoiceTax"`
	InvoiceCheckCode string                 `protobuf:"bytes,9,opt,name=invoiceCheckCode,proto3" json:"invoiceCheckCode"`
	InvoiceNo        string                 `protobuf:"bytes,10,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode      string                 `protobuf:"bytes,11,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	InvoiceDate      *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=invoiceDate,proto3" json:"invoiceDate"`
	SendOutAt        *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=sendOutAt,proto3" json:"sendOutAt"`
	ShipmentCode     string                 `protobuf:"bytes,14,opt,name=shipmentCode,proto3" json:"shipmentCode"`
	ShipmentCompany  string                 `protobuf:"bytes,15,opt,name=shipmentCompany,proto3" json:"shipmentCompany"`
	ShipmentStatus   string                 `protobuf:"bytes,16,opt,name=shipmentStatus,proto3" json:"shipmentStatus"`
	ReceiveAt        *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=receiveAt,proto3" json:"receiveAt"`
	ConfirmAt        *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=confirmAt,proto3" json:"confirmAt"`
}

func (x *UploadChainShipmentOrder) Reset() {
	*x = UploadChainShipmentOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainShipmentOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainShipmentOrder) ProtoMessage() {}

func (x *UploadChainShipmentOrder) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainShipmentOrder.ProtoReflect.Descriptor instead.
func (*UploadChainShipmentOrder) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{32}
}

func (x *UploadChainShipmentOrder) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainShipmentOrder) GetPlans() []*UploadChainShipment {
	if x != nil {
		return x.Plans
	}
	return nil
}

func (x *UploadChainShipmentOrder) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *UploadChainShipmentOrder) GetInvoiceMd5() string {
	if x != nil {
		return x.InvoiceMd5
	}
	return ""
}

func (x *UploadChainShipmentOrder) GetInvoiceUrl() string {
	if x != nil {
		return x.InvoiceUrl
	}
	return ""
}

func (x *UploadChainShipmentOrder) GetInvoiceType() string {
	if x != nil {
		return x.InvoiceType
	}
	return ""
}

func (x *UploadChainShipmentOrder) GetInvoiceTotal() int64 {
	if x != nil {
		return x.InvoiceTotal
	}
	return 0
}

func (x *UploadChainShipmentOrder) GetInvoiceTax() int64 {
	if x != nil {
		return x.InvoiceTax
	}
	return 0
}

func (x *UploadChainShipmentOrder) GetInvoiceCheckCode() string {
	if x != nil {
		return x.InvoiceCheckCode
	}
	return ""
}

func (x *UploadChainShipmentOrder) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *UploadChainShipmentOrder) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *UploadChainShipmentOrder) GetInvoiceDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoiceDate
	}
	return nil
}

func (x *UploadChainShipmentOrder) GetSendOutAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SendOutAt
	}
	return nil
}

func (x *UploadChainShipmentOrder) GetShipmentCode() string {
	if x != nil {
		return x.ShipmentCode
	}
	return ""
}

func (x *UploadChainShipmentOrder) GetShipmentCompany() string {
	if x != nil {
		return x.ShipmentCompany
	}
	return ""
}

func (x *UploadChainShipmentOrder) GetShipmentStatus() string {
	if x != nil {
		return x.ShipmentStatus
	}
	return ""
}

func (x *UploadChainShipmentOrder) GetReceiveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveAt
	}
	return nil
}

func (x *UploadChainShipmentOrder) GetConfirmAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ConfirmAt
	}
	return nil
}

type UploadChainShipmentOrders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainShipmentOrder []*UploadChainShipmentOrder `protobuf:"bytes,1,rep,name=uploadChainShipmentOrder,proto3" json:"uploadChainShipmentOrder"`
}

func (x *UploadChainShipmentOrders) Reset() {
	*x = UploadChainShipmentOrders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainShipmentOrders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainShipmentOrders) ProtoMessage() {}

func (x *UploadChainShipmentOrders) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainShipmentOrders.ProtoReflect.Descriptor instead.
func (*UploadChainShipmentOrders) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{33}
}

func (x *UploadChainShipmentOrders) GetUploadChainShipmentOrder() []*UploadChainShipmentOrder {
	if x != nil {
		return x.UploadChainShipmentOrder
	}
	return nil
}

type UploadChainOrganizations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainOrganization []*UploadChainOrganization `protobuf:"bytes,1,rep,name=uploadChainOrganization,proto3" json:"uploadChainOrganization"`
}

func (x *UploadChainOrganizations) Reset() {
	*x = UploadChainOrganizations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainOrganizations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainOrganizations) ProtoMessage() {}

func (x *UploadChainOrganizations) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainOrganizations.ProtoReflect.Descriptor instead.
func (*UploadChainOrganizations) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{34}
}

func (x *UploadChainOrganizations) GetUploadChainOrganization() []*UploadChainOrganization {
	if x != nil {
		return x.UploadChainOrganization
	}
	return nil
}

type UploadChainOrganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType *UploadChainType `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	Code            string           `protobuf:"bytes,2,opt,name=code,proto3" json:"code"`
	Name            string           `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	Type            string           `protobuf:"bytes,4,opt,name=type,proto3" json:"type"`
	ManagerName     string           `protobuf:"bytes,5,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone    string           `protobuf:"bytes,6,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province        string           `protobuf:"bytes,7,opt,name=province,proto3" json:"province"`
	City            string           `protobuf:"bytes,8,opt,name=city,proto3" json:"city"`
	Zone            string           `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone"`
	Memo            string           `protobuf:"bytes,10,opt,name=memo,proto3" json:"memo"`
}

func (x *UploadChainOrganization) Reset() {
	*x = UploadChainOrganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainOrganization) ProtoMessage() {}

func (x *UploadChainOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainOrganization.ProtoReflect.Descriptor instead.
func (*UploadChainOrganization) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{35}
}

func (x *UploadChainOrganization) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainOrganization) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UploadChainOrganization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploadChainOrganization) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UploadChainOrganization) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *UploadChainOrganization) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *UploadChainOrganization) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *UploadChainOrganization) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UploadChainOrganization) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *UploadChainOrganization) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type UploadChainProcessApplies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainProcessApply []*UploadChainProcessApply `protobuf:"bytes,1,rep,name=uploadChainProcessApply,proto3" json:"uploadChainProcessApply"`
}

func (x *UploadChainProcessApplies) Reset() {
	*x = UploadChainProcessApplies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainProcessApplies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainProcessApplies) ProtoMessage() {}

func (x *UploadChainProcessApplies) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainProcessApplies.ProtoReflect.Descriptor instead.
func (*UploadChainProcessApplies) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{36}
}

func (x *UploadChainProcessApplies) GetUploadChainProcessApply() []*UploadChainProcessApply {
	if x != nil {
		return x.UploadChainProcessApply
	}
	return nil
}

type UploadChainProcessApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType       *UploadChainType       `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	ProjectName           string                 `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName"`
	ConstructionName      string                 `protobuf:"bytes,3,opt,name=constructionName,proto3" json:"constructionName"`
	GovermentName         string                 `protobuf:"bytes,4,opt,name=govermentName,proto3" json:"govermentName"`
	PhaseName             string                 `protobuf:"bytes,5,opt,name=phaseName,proto3" json:"phaseName"`
	ProcessName           string                 `protobuf:"bytes,6,opt,name=processName,proto3" json:"processName"`
	ApplyDate             *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=applyDate,proto3" json:"applyDate"`
	IsParallel            int64                  `protobuf:"varint,8,opt,name=isParallel,proto3" json:"isParallel"`
	EstimatedApprovalDays int64                  `protobuf:"varint,9,opt,name=estimatedApprovalDays,proto3" json:"estimatedApprovalDays"`
	UploadDocumnet        []*DocumentInfoApply   `protobuf:"bytes,10,rep,name=uploadDocumnet,proto3" json:"uploadDocumnet"`
}

func (x *UploadChainProcessApply) Reset() {
	*x = UploadChainProcessApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainProcessApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainProcessApply) ProtoMessage() {}

func (x *UploadChainProcessApply) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainProcessApply.ProtoReflect.Descriptor instead.
func (*UploadChainProcessApply) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{37}
}

func (x *UploadChainProcessApply) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainProcessApply) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *UploadChainProcessApply) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *UploadChainProcessApply) GetGovermentName() string {
	if x != nil {
		return x.GovermentName
	}
	return ""
}

func (x *UploadChainProcessApply) GetPhaseName() string {
	if x != nil {
		return x.PhaseName
	}
	return ""
}

func (x *UploadChainProcessApply) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *UploadChainProcessApply) GetApplyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyDate
	}
	return nil
}

func (x *UploadChainProcessApply) GetIsParallel() int64 {
	if x != nil {
		return x.IsParallel
	}
	return 0
}

func (x *UploadChainProcessApply) GetEstimatedApprovalDays() int64 {
	if x != nil {
		return x.EstimatedApprovalDays
	}
	return 0
}

func (x *UploadChainProcessApply) GetUploadDocumnet() []*DocumentInfoApply {
	if x != nil {
		return x.UploadDocumnet
	}
	return nil
}

type DocumentInfoApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName  string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName"`
	UploadUrl string `protobuf:"bytes,2,opt,name=uploadUrl,proto3" json:"uploadUrl"`
}

func (x *DocumentInfoApply) Reset() {
	*x = DocumentInfoApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentInfoApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentInfoApply) ProtoMessage() {}

func (x *DocumentInfoApply) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentInfoApply.ProtoReflect.Descriptor instead.
func (*DocumentInfoApply) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{38}
}

func (x *DocumentInfoApply) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *DocumentInfoApply) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

type UploadChainProcessApproves struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainProcessApprove []*UploadChainProcessApprove `protobuf:"bytes,1,rep,name=uploadChainProcessApprove,proto3" json:"uploadChainProcessApprove"`
}

func (x *UploadChainProcessApproves) Reset() {
	*x = UploadChainProcessApproves{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainProcessApproves) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainProcessApproves) ProtoMessage() {}

func (x *UploadChainProcessApproves) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainProcessApproves.ProtoReflect.Descriptor instead.
func (*UploadChainProcessApproves) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{39}
}

func (x *UploadChainProcessApproves) GetUploadChainProcessApprove() []*UploadChainProcessApprove {
	if x != nil {
		return x.UploadChainProcessApprove
	}
	return nil
}

type UploadChainProcessApprove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType       *UploadChainType       `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	ProjectName           string                 `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName"`
	ConstructionName      string                 `protobuf:"bytes,3,opt,name=constructionName,proto3" json:"constructionName"`
	GovermentName         string                 `protobuf:"bytes,4,opt,name=govermentName,proto3" json:"govermentName"`
	PhaseName             string                 `protobuf:"bytes,5,opt,name=phaseName,proto3" json:"phaseName"`
	ProcessName           string                 `protobuf:"bytes,6,opt,name=processName,proto3" json:"processName"`
	IsParallel            int64                  `protobuf:"varint,7,opt,name=isParallel,proto3" json:"isParallel"`
	EstimatedApprovalDays int64                  `protobuf:"varint,8,opt,name=estimatedApprovalDays,proto3" json:"estimatedApprovalDays"`
	ApplyDate             *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=applyDate,proto3" json:"applyDate"`
	ApproveAt             *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=approveAt,proto3" json:"approveAt"`
	ApproveDesc           string                 `protobuf:"bytes,11,opt,name=approveDesc,proto3" json:"approveDesc"`
	UploadDocumnetApply   []*DocumentInfoApply   `protobuf:"bytes,12,rep,name=uploadDocumnetApply,proto3" json:"uploadDocumnetApply"`
	UploadDocumnetApprove []*DocumentInfoApprove `protobuf:"bytes,13,rep,name=uploadDocumnetApprove,proto3" json:"uploadDocumnetApprove"`
}

func (x *UploadChainProcessApprove) Reset() {
	*x = UploadChainProcessApprove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainProcessApprove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainProcessApprove) ProtoMessage() {}

func (x *UploadChainProcessApprove) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainProcessApprove.ProtoReflect.Descriptor instead.
func (*UploadChainProcessApprove) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{40}
}

func (x *UploadChainProcessApprove) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainProcessApprove) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *UploadChainProcessApprove) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *UploadChainProcessApprove) GetGovermentName() string {
	if x != nil {
		return x.GovermentName
	}
	return ""
}

func (x *UploadChainProcessApprove) GetPhaseName() string {
	if x != nil {
		return x.PhaseName
	}
	return ""
}

func (x *UploadChainProcessApprove) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *UploadChainProcessApprove) GetIsParallel() int64 {
	if x != nil {
		return x.IsParallel
	}
	return 0
}

func (x *UploadChainProcessApprove) GetEstimatedApprovalDays() int64 {
	if x != nil {
		return x.EstimatedApprovalDays
	}
	return 0
}

func (x *UploadChainProcessApprove) GetApplyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyDate
	}
	return nil
}

func (x *UploadChainProcessApprove) GetApproveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveAt
	}
	return nil
}

func (x *UploadChainProcessApprove) GetApproveDesc() string {
	if x != nil {
		return x.ApproveDesc
	}
	return ""
}

func (x *UploadChainProcessApprove) GetUploadDocumnetApply() []*DocumentInfoApply {
	if x != nil {
		return x.UploadDocumnetApply
	}
	return nil
}

func (x *UploadChainProcessApprove) GetUploadDocumnetApprove() []*DocumentInfoApprove {
	if x != nil {
		return x.UploadDocumnetApprove
	}
	return nil
}

type DocumentInfoApprove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName  string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName"`
	UploadUrl string `protobuf:"bytes,2,opt,name=uploadUrl,proto3" json:"uploadUrl"`
}

func (x *DocumentInfoApprove) Reset() {
	*x = DocumentInfoApprove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentInfoApprove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentInfoApprove) ProtoMessage() {}

func (x *DocumentInfoApprove) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentInfoApprove.ProtoReflect.Descriptor instead.
func (*DocumentInfoApprove) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{41}
}

func (x *DocumentInfoApprove) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *DocumentInfoApprove) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

var File_BcAndBankService_proto protoreflect.FileDescriptor

var file_BcAndBankService_proto_rawDesc = []byte{
	0x0a, 0x16, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34, 0x0a, 0x0c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x78, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x78, 0x49, 0x44, 0x12,
	0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65,
	0x79, 0x22, 0x58, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x78, 0x49, 0x44, 0x52, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x52, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x1e,
	0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41,
	0x0a, 0x08, 0x70, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50,
	0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x3f, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61,
	0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xb7, 0x01, 0x0a, 0x1f, 0x42, 0x63, 0x41,
	0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0e,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x0e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x3f, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61,
	0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x24, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x61, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x72,
	0x65, 0x70, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x42, 0x63, 0x41,
	0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x72, 0x65, 0x70, 0x61, 0x79, 0x12, 0x3f,
	0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x97, 0x01, 0x0a, 0x13, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0a, 0x62, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x42, 0x63,
	0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x62, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x42, 0x63,
	0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42,
	0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x0a, 0x0b, 0x42, 0x61, 0x6e,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x70,
	0x42, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x70,
	0x42, 0x61, 0x6e, 0x6b, 0x22, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x20, 0x0a, 0x0a, 0x42, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x21, 0x0a, 0x0b, 0x42, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x7e, 0x0a,
	0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x52, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x52, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x05, 0x62, 0x63, 0x52,
	0x73, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x62, 0x63, 0x52, 0x73, 0x70, 0x22, 0xb3, 0x01,
	0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x6f, 0x69, 0x62, 0x6b, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x69,
	0x62, 0x6b, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x72, 0x64, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x2a, 0x0a, 0x08, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x22, 0xd2, 0x03,
	0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x12, 0x4b, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x69, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x69,
	0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12,
	0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41,
	0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61,
	0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x12, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61,
	0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x12, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x22, 0xdc, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4b, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x54, 0x77, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x54, 0x77, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x79, 0x70,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x79,
	0x70, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x22,
	0x67, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x51, 0x0a, 0x11, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xde, 0x03, 0x0a, 0x13, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x4b, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x42, 0x63, 0x41, 0x6e,
	0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x12, 0x24, 0x0a,
	0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x50, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x69, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x69, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x22, 0x6f, 0x0a, 0x14, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x12, 0x57, 0x0a, 0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x88, 0x02, 0x0a, 0x15, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4d, 0x69, 0x12, 0x4b, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x64, 0x35,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4d, 0x64, 0x35, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x55, 0x72, 0x6c, 0x22, 0x77, 0x0a, 0x16, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x73, 0x12,
	0x5d, 0x0a, 0x15, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x52, 0x15, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x22, 0xa4,
	0x05, 0x0a, 0x19, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x61, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x42,
	0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x09, 0x70, 0x61, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x10, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x12,
	0x2e, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12,
	0x28, 0x0a, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x69, 0x0a, 0x19, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x19, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22,
	0xc2, 0x03, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x28, 0x0a, 0x0f,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x22, 0x6f, 0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x13,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x42, 0x63, 0x41, 0x6e,
	0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x52, 0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x22, 0xb4, 0x03, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x12, 0x4b, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x69, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x69, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x45, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x57, 0x0a, 0x0e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x73, 0x12, 0x45,
	0x0a, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x52, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x4d, 0x69, 0x22, 0x92, 0x03, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4b, 0x0a,
	0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61,
	0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x70, 0x61, 0x79,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6f, 0x0a, 0x14, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x57, 0x0a, 0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x61,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xee, 0x03, 0x0a, 0x13,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x42,
	0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x69, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x50, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x79, 0x6e, 0x63,
	0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x74, 0x22, 0x6f, 0x0a, 0x14,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb8, 0x06,
	0x0a, 0x18, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0f, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61,
	0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x70,
	0x6c, 0x61, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d,
	0x64, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x4d, 0x64, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55,
	0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x4e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x41,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x41, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x41, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x66, 0x0a, 0x18, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x18, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x7f,
	0x0a, 0x18, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x63, 0x0a, 0x17, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x42, 0x63,
	0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xc0, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x22, 0x80, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73,
	0x12, 0x63, 0x0a, 0x17, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x17, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x22, 0xf7, 0x03, 0x0a, 0x17, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x12, 0x4b, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x42, 0x63, 0x41,
	0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x69, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x15,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x44, 0x61, 0x79, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61,
	0x79, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x6e, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x42, 0x63, 0x41,
	0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52,
	0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x6e, 0x65, 0x74, 0x22,
	0x4d, 0x0a, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22, 0x87,
	0x01, 0x0a, 0x1a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x73, 0x12, 0x69, 0x0a,
	0x19, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x19, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x22, 0xbc, 0x05, 0x0a, 0x19, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x12, 0x38, 0x0a,
	0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x55, 0x0a, 0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x6e, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x6e, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x5b, 0x0a, 0x15, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x6e, 0x65, 0x74, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x42, 0x63, 0x41, 0x6e,
	0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x52, 0x15, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x6e, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x22, 0x4f, 0x0a, 0x13, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x32, 0xb7, 0x10, 0x0a, 0x10, 0x42, 0x63, 0x41,
	0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a,
	0x0f, 0x42, 0x63, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x12, 0x24, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61,
	0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x11, 0x42, 0x63, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x42, 0x63, 0x41,
	0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69,
	0x65, 0x73, 0x1a, 0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x12, 0x4e, 0x0a, 0x0b, 0x42, 0x63, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x69, 0x73,
	0x12, 0x20, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d,
	0x69, 0x73, 0x1a, 0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x12, 0x59, 0x0a, 0x10, 0x42, 0x63, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x12, 0x26, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x1a, 0x1d, 0x2e,
	0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x42, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x11,
	0x42, 0x63, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x12, 0x26, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x1a, 0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e,
	0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x13, 0x42, 0x63, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x73, 0x12,
	0x28, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x73, 0x1a, 0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e,
	0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x11, 0x42, 0x63, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x2e,
	0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x16, 0x42, 0x63, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2b,
	0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x1d, 0x2e, 0x42, 0x63,
	0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x11, 0x42, 0x63,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x26, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x61,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x17, 0x42, 0x63, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x2c, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x1a,
	0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x42, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x72,
	0x0a, 0x17, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x42, 0x63, 0x41, 0x6e,
	0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x63, 0x41,
	0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x42, 0x63,
	0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42,
	0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x7a, 0x0a, 0x1e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e,
	0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64,
	0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x7e,
	0x0a, 0x1d, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64,
	0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5f,
	0x0a, 0x16, 0x42, 0x63, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x1a, 0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x42, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12,
	0x69, 0x0a, 0x1b, 0x42, 0x63, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2b,
	0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x1d, 0x2e, 0x42, 0x63,
	0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x16, 0x42, 0x63,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x1d, 0x2e, 0x42,
	0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x42, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x16, 0x42,
	0x63, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x1a, 0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x42, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x54,
	0x78, 0x49, 0x44, 0x12, 0x1e, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x78, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x78, 0x49, 0x44,
	0x52, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x15, 0x42, 0x63, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x42,
	0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x14, 0x42, 0x63, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12,
	0x2b, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x1a, 0x1d, 0x2e, 0x42,
	0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x42, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x16, 0x42,
	0x63, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x2c, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x73, 0x1a, 0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x42, 0x2b, 0x5a, 0x29, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x42, 0x63,
	0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3b, 0x42,
	0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_BcAndBankService_proto_rawDescOnce sync.Once
	file_BcAndBankService_proto_rawDescData = file_BcAndBankService_proto_rawDesc
)

func file_BcAndBankService_proto_rawDescGZIP() []byte {
	file_BcAndBankService_proto_rawDescOnce.Do(func() {
		file_BcAndBankService_proto_rawDescData = protoimpl.X.CompressGZIP(file_BcAndBankService_proto_rawDescData)
	})
	return file_BcAndBankService_proto_rawDescData
}

var file_BcAndBankService_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_BcAndBankService_proto_goTypes = []interface{}{
	(*QueryTxIDReq)(nil),                         // 0: BcAndBankService.QueryTxIDReq
	(*QueryTxIDRsp)(nil),                         // 1: BcAndBankService.QueryTxIDRsp
	(*BcAndBankPayOrderActionRequest)(nil),       // 2: BcAndBankService.BcAndBankPayOrderActionRequest
	(*BcAndBankFactoringActionRequest)(nil),      // 3: BcAndBankService.BcAndBankFactoringActionRequest
	(*BcAndBankFactoringRepayActionRequest)(nil), // 4: BcAndBankService.BcAndBankFactoringRepayActionRequest
	(*BcAndBankActionResp)(nil),                  // 5: BcAndBankService.BcAndBankActionResp
	(*BankRequest)(nil),                          // 6: BcAndBankService.BankRequest
	(*BankResponse)(nil),                         // 7: BcAndBankService.BankResponse
	(*BcResponse)(nil),                           // 8: BcAndBankService.BcResponse
	(*BcResponses)(nil),                          // 9: BcAndBankService.BcResponses
	(*CommonResponse)(nil),                       // 10: BcAndBankService.CommonResponse
	(*BankAccount)(nil),                          // 11: BcAndBankService.BankAccount
	(*UploadChainType)(nil),                      // 12: BcAndBankService.UploadChainType
	(*PayOrder)(nil),                             // 13: BcAndBankService.PayOrder
	(*UploadChainCompany)(nil),                   // 14: BcAndBankService.UploadChainCompany
	(*UploadChainCompanies)(nil),                 // 15: BcAndBankService.UploadChainCompanies
	(*UploadChainConfig)(nil),                    // 16: BcAndBankService.UploadChainConfig
	(*UploadChainConfigs)(nil),                   // 17: BcAndBankService.UploadChainConfigs
	(*UploadChainContract)(nil),                  // 18: BcAndBankService.UploadChainContract
	(*UploadChainContracts)(nil),                 // 19: BcAndBankService.UploadChainContracts
	(*UploadChainContractMi)(nil),                // 20: BcAndBankService.UploadChainContractMi
	(*UploadChainContractMis)(nil),               // 21: BcAndBankService.UploadChainContractMis
	(*UploadChainFactoringOrder)(nil),            // 22: BcAndBankService.UploadChainFactoringOrder
	(*UploadChainFactoringOrders)(nil),           // 23: BcAndBankService.UploadChainFactoringOrders
	(*UploadChainMedicine)(nil),                  // 24: BcAndBankService.UploadChainMedicine
	(*UploadChainMedicines)(nil),                 // 25: BcAndBankService.UploadChainMedicines
	(*UploadChainMi)(nil),                        // 26: BcAndBankService.UploadChainMi
	(*UploadChainMis)(nil),                       // 27: BcAndBankService.UploadChainMis
	(*UploadChainPayOrder)(nil),                  // 28: BcAndBankService.UploadChainPayOrder
	(*UploadChainPayOrders)(nil),                 // 29: BcAndBankService.UploadChainPayOrders
	(*UploadChainShipment)(nil),                  // 30: BcAndBankService.UploadChainShipment
	(*UploadChainShipments)(nil),                 // 31: BcAndBankService.UploadChainShipments
	(*UploadChainShipmentOrder)(nil),             // 32: BcAndBankService.UploadChainShipmentOrder
	(*UploadChainShipmentOrders)(nil),            // 33: BcAndBankService.UploadChainShipmentOrders
	(*UploadChainOrganizations)(nil),             // 34: BcAndBankService.UploadChainOrganizations
	(*UploadChainOrganization)(nil),              // 35: BcAndBankService.UploadChainOrganization
	(*UploadChainProcessApplies)(nil),            // 36: BcAndBankService.UploadChainProcessApplies
	(*UploadChainProcessApply)(nil),              // 37: BcAndBankService.UploadChainProcessApply
	(*DocumentInfoApply)(nil),                    // 38: BcAndBankService.DocumentInfoApply
	(*UploadChainProcessApproves)(nil),           // 39: BcAndBankService.UploadChainProcessApproves
	(*UploadChainProcessApprove)(nil),            // 40: BcAndBankService.UploadChainProcessApprove
	(*DocumentInfoApprove)(nil),                  // 41: BcAndBankService.DocumentInfoApprove
	(*timestamppb.Timestamp)(nil),                // 42: google.protobuf.Timestamp
}
var file_BcAndBankService_proto_depIdxs = []int32{
	42, // 0: BcAndBankService.QueryTxIDRsp.CreateAt:type_name -> google.protobuf.Timestamp
	28, // 1: BcAndBankService.BcAndBankPayOrderActionRequest.payOrder:type_name -> BcAndBankService.UploadChainPayOrder
	6,  // 2: BcAndBankService.BcAndBankPayOrderActionRequest.bankRequest:type_name -> BcAndBankService.BankRequest
	22, // 3: BcAndBankService.BcAndBankFactoringActionRequest.factoringOrder:type_name -> BcAndBankService.UploadChainFactoringOrder
	6,  // 4: BcAndBankService.BcAndBankFactoringActionRequest.bankRequest:type_name -> BcAndBankService.BankRequest
	22, // 5: BcAndBankService.BcAndBankFactoringRepayActionRequest.repay:type_name -> BcAndBankService.UploadChainFactoringOrder
	6,  // 6: BcAndBankService.BcAndBankFactoringRepayActionRequest.bankRequest:type_name -> BcAndBankService.BankRequest
	8,  // 7: BcAndBankService.BcAndBankActionResp.bcResponse:type_name -> BcAndBankService.BcResponse
	7,  // 8: BcAndBankService.BcAndBankActionResp.bankResponse:type_name -> BcAndBankService.BankResponse
	7,  // 9: BcAndBankService.CommonResponse.bankRsp:type_name -> BcAndBankService.BankResponse
	8,  // 10: BcAndBankService.CommonResponse.bcRsp:type_name -> BcAndBankService.BcResponse
	12, // 11: BcAndBankService.UploadChainCompany.uploadChainType:type_name -> BcAndBankService.UploadChainType
	42, // 12: BcAndBankService.UploadChainCompany.startAt:type_name -> google.protobuf.Timestamp
	42, // 13: BcAndBankService.UploadChainCompany.endAt:type_name -> google.protobuf.Timestamp
	11, // 14: BcAndBankService.UploadChainCompany.bankAccount:type_name -> BcAndBankService.BankAccount
	14, // 15: BcAndBankService.UploadChainCompanies.uploadChainCompany:type_name -> BcAndBankService.UploadChainCompany
	12, // 16: BcAndBankService.UploadChainConfig.uploadChainType:type_name -> BcAndBankService.UploadChainType
	42, // 17: BcAndBankService.UploadChainConfig.startAt:type_name -> google.protobuf.Timestamp
	42, // 18: BcAndBankService.UploadChainConfig.endAt:type_name -> google.protobuf.Timestamp
	16, // 19: BcAndBankService.UploadChainConfigs.uploadChainConfig:type_name -> BcAndBankService.UploadChainConfig
	12, // 20: BcAndBankService.UploadChainContract.uploadChainType:type_name -> BcAndBankService.UploadChainType
	42, // 21: BcAndBankService.UploadChainContract.startAt:type_name -> google.protobuf.Timestamp
	42, // 22: BcAndBankService.UploadChainContract.endAt:type_name -> google.protobuf.Timestamp
	18, // 23: BcAndBankService.UploadChainContracts.uploadChainContract:type_name -> BcAndBankService.UploadChainContract
	12, // 24: BcAndBankService.UploadChainContractMi.uploadChainType:type_name -> BcAndBankService.UploadChainType
	20, // 25: BcAndBankService.UploadChainContractMis.uploadChainContractMi:type_name -> BcAndBankService.UploadChainContractMi
	12, // 26: BcAndBankService.UploadChainFactoringOrder.uploadChainType:type_name -> BcAndBankService.UploadChainType
	13, // 27: BcAndBankService.UploadChainFactoringOrder.payOrders:type_name -> BcAndBankService.PayOrder
	42, // 28: BcAndBankService.UploadChainFactoringOrder.applyDate:type_name -> google.protobuf.Timestamp
	42, // 29: BcAndBankService.UploadChainFactoringOrder.applyAt:type_name -> google.protobuf.Timestamp
	42, // 30: BcAndBankService.UploadChainFactoringOrder.refundDate:type_name -> google.protobuf.Timestamp
	42, // 31: BcAndBankService.UploadChainFactoringOrder.refundAt:type_name -> google.protobuf.Timestamp
	22, // 32: BcAndBankService.UploadChainFactoringOrders.uploadChainFactoringOrder:type_name -> BcAndBankService.UploadChainFactoringOrder
	12, // 33: BcAndBankService.UploadChainMedicine.uploadChainType:type_name -> BcAndBankService.UploadChainType
	24, // 34: BcAndBankService.UploadChainMedicines.uploadChainMedicine:type_name -> BcAndBankService.UploadChainMedicine
	12, // 35: BcAndBankService.UploadChainMi.uploadChainType:type_name -> BcAndBankService.UploadChainType
	11, // 36: BcAndBankService.UploadChainMi.specialAccount:type_name -> BcAndBankService.BankAccount
	11, // 37: BcAndBankService.UploadChainMi.normalAccount:type_name -> BcAndBankService.BankAccount
	26, // 38: BcAndBankService.UploadChainMis.uploadChainMi:type_name -> BcAndBankService.UploadChainMi
	12, // 39: BcAndBankService.UploadChainPayOrder.uploadChainType:type_name -> BcAndBankService.UploadChainType
	42, // 40: BcAndBankService.UploadChainPayOrder.payAt:type_name -> google.protobuf.Timestamp
	28, // 41: BcAndBankService.UploadChainPayOrders.uploadChainPayOrder:type_name -> BcAndBankService.UploadChainPayOrder
	12, // 42: BcAndBankService.UploadChainShipment.uploadChainType:type_name -> BcAndBankService.UploadChainType
	42, // 43: BcAndBankService.UploadChainShipment.syncAt:type_name -> google.protobuf.Timestamp
	30, // 44: BcAndBankService.UploadChainShipments.uploadChainShipment:type_name -> BcAndBankService.UploadChainShipment
	12, // 45: BcAndBankService.UploadChainShipmentOrder.uploadChainType:type_name -> BcAndBankService.UploadChainType
	30, // 46: BcAndBankService.UploadChainShipmentOrder.plans:type_name -> BcAndBankService.UploadChainShipment
	42, // 47: BcAndBankService.UploadChainShipmentOrder.invoiceDate:type_name -> google.protobuf.Timestamp
	42, // 48: BcAndBankService.UploadChainShipmentOrder.sendOutAt:type_name -> google.protobuf.Timestamp
	42, // 49: BcAndBankService.UploadChainShipmentOrder.receiveAt:type_name -> google.protobuf.Timestamp
	42, // 50: BcAndBankService.UploadChainShipmentOrder.confirmAt:type_name -> google.protobuf.Timestamp
	32, // 51: BcAndBankService.UploadChainShipmentOrders.uploadChainShipmentOrder:type_name -> BcAndBankService.UploadChainShipmentOrder
	35, // 52: BcAndBankService.UploadChainOrganizations.uploadChainOrganization:type_name -> BcAndBankService.UploadChainOrganization
	12, // 53: BcAndBankService.UploadChainOrganization.uploadChainType:type_name -> BcAndBankService.UploadChainType
	37, // 54: BcAndBankService.UploadChainProcessApplies.uploadChainProcessApply:type_name -> BcAndBankService.UploadChainProcessApply
	12, // 55: BcAndBankService.UploadChainProcessApply.uploadChainType:type_name -> BcAndBankService.UploadChainType
	42, // 56: BcAndBankService.UploadChainProcessApply.applyDate:type_name -> google.protobuf.Timestamp
	38, // 57: BcAndBankService.UploadChainProcessApply.uploadDocumnet:type_name -> BcAndBankService.DocumentInfoApply
	40, // 58: BcAndBankService.UploadChainProcessApproves.uploadChainProcessApprove:type_name -> BcAndBankService.UploadChainProcessApprove
	12, // 59: BcAndBankService.UploadChainProcessApprove.uploadChainType:type_name -> BcAndBankService.UploadChainType
	42, // 60: BcAndBankService.UploadChainProcessApprove.applyDate:type_name -> google.protobuf.Timestamp
	42, // 61: BcAndBankService.UploadChainProcessApprove.approveAt:type_name -> google.protobuf.Timestamp
	38, // 62: BcAndBankService.UploadChainProcessApprove.uploadDocumnetApply:type_name -> BcAndBankService.DocumentInfoApply
	41, // 63: BcAndBankService.UploadChainProcessApprove.uploadDocumnetApprove:type_name -> BcAndBankService.DocumentInfoApprove
	17, // 64: BcAndBankService.BcAndBankService.BcUploadConfigs:input_type -> BcAndBankService.UploadChainConfigs
	15, // 65: BcAndBankService.BcAndBankService.BcUploadCompanies:input_type -> BcAndBankService.UploadChainCompanies
	27, // 66: BcAndBankService.BcAndBankService.BcUploadMis:input_type -> BcAndBankService.UploadChainMis
	25, // 67: BcAndBankService.BcAndBankService.BcUploadMedicine:input_type -> BcAndBankService.UploadChainMedicines
	19, // 68: BcAndBankService.BcAndBankService.BcUploadContracts:input_type -> BcAndBankService.UploadChainContracts
	21, // 69: BcAndBankService.BcAndBankService.BcUploadContractMis:input_type -> BcAndBankService.UploadChainContractMis
	31, // 70: BcAndBankService.BcAndBankService.BcUploadShipments:input_type -> BcAndBankService.UploadChainShipments
	33, // 71: BcAndBankService.BcAndBankService.BcUploadShipmentOrders:input_type -> BcAndBankService.UploadChainShipmentOrders
	29, // 72: BcAndBankService.BcAndBankService.BcUploadPayOrders:input_type -> BcAndBankService.UploadChainPayOrders
	23, // 73: BcAndBankService.BcAndBankService.BcUploadFactoringOrders:input_type -> BcAndBankService.UploadChainFactoringOrders
	2,  // 74: BcAndBankService.BcAndBankService.BcAndBankPayOrderAction:input_type -> BcAndBankService.BcAndBankPayOrderActionRequest
	3,  // 75: BcAndBankService.BcAndBankService.BcAndBankFactoringOrdersAction:input_type -> BcAndBankService.BcAndBankFactoringActionRequest
	4,  // 76: BcAndBankService.BcAndBankService.BcAndBankFactoringRepayAction:input_type -> BcAndBankService.BcAndBankFactoringRepayActionRequest
	31, // 77: BcAndBankService.BcAndBankService.BcForceUploadShipments:input_type -> BcAndBankService.UploadChainShipments
	33, // 78: BcAndBankService.BcAndBankService.BcForceUploadShipmentOrders:input_type -> BcAndBankService.UploadChainShipmentOrders
	29, // 79: BcAndBankService.BcAndBankService.BcForceUploadPayOrders:input_type -> BcAndBankService.UploadChainPayOrders
	23, // 80: BcAndBankService.BcAndBankService.BcForceUploadFactoring:input_type -> BcAndBankService.UploadChainFactoringOrders
	0,  // 81: BcAndBankService.BcAndBankService.BcQueryByTxID:input_type -> BcAndBankService.QueryTxIDReq
	34, // 82: BcAndBankService.BcAndBankService.BcUploadOrganizations:input_type -> BcAndBankService.UploadChainOrganizations
	36, // 83: BcAndBankService.BcAndBankService.BcUploadProcessApply:input_type -> BcAndBankService.UploadChainProcessApplies
	39, // 84: BcAndBankService.BcAndBankService.BcUploadProcessApprove:input_type -> BcAndBankService.UploadChainProcessApproves
	9,  // 85: BcAndBankService.BcAndBankService.BcUploadConfigs:output_type -> BcAndBankService.BcResponses
	9,  // 86: BcAndBankService.BcAndBankService.BcUploadCompanies:output_type -> BcAndBankService.BcResponses
	9,  // 87: BcAndBankService.BcAndBankService.BcUploadMis:output_type -> BcAndBankService.BcResponses
	9,  // 88: BcAndBankService.BcAndBankService.BcUploadMedicine:output_type -> BcAndBankService.BcResponses
	9,  // 89: BcAndBankService.BcAndBankService.BcUploadContracts:output_type -> BcAndBankService.BcResponses
	9,  // 90: BcAndBankService.BcAndBankService.BcUploadContractMis:output_type -> BcAndBankService.BcResponses
	9,  // 91: BcAndBankService.BcAndBankService.BcUploadShipments:output_type -> BcAndBankService.BcResponses
	9,  // 92: BcAndBankService.BcAndBankService.BcUploadShipmentOrders:output_type -> BcAndBankService.BcResponses
	9,  // 93: BcAndBankService.BcAndBankService.BcUploadPayOrders:output_type -> BcAndBankService.BcResponses
	9,  // 94: BcAndBankService.BcAndBankService.BcUploadFactoringOrders:output_type -> BcAndBankService.BcResponses
	5,  // 95: BcAndBankService.BcAndBankService.BcAndBankPayOrderAction:output_type -> BcAndBankService.BcAndBankActionResp
	5,  // 96: BcAndBankService.BcAndBankService.BcAndBankFactoringOrdersAction:output_type -> BcAndBankService.BcAndBankActionResp
	5,  // 97: BcAndBankService.BcAndBankService.BcAndBankFactoringRepayAction:output_type -> BcAndBankService.BcAndBankActionResp
	9,  // 98: BcAndBankService.BcAndBankService.BcForceUploadShipments:output_type -> BcAndBankService.BcResponses
	9,  // 99: BcAndBankService.BcAndBankService.BcForceUploadShipmentOrders:output_type -> BcAndBankService.BcResponses
	9,  // 100: BcAndBankService.BcAndBankService.BcForceUploadPayOrders:output_type -> BcAndBankService.BcResponses
	9,  // 101: BcAndBankService.BcAndBankService.BcForceUploadFactoring:output_type -> BcAndBankService.BcResponses
	1,  // 102: BcAndBankService.BcAndBankService.BcQueryByTxID:output_type -> BcAndBankService.QueryTxIDRsp
	9,  // 103: BcAndBankService.BcAndBankService.BcUploadOrganizations:output_type -> BcAndBankService.BcResponses
	9,  // 104: BcAndBankService.BcAndBankService.BcUploadProcessApply:output_type -> BcAndBankService.BcResponses
	9,  // 105: BcAndBankService.BcAndBankService.BcUploadProcessApprove:output_type -> BcAndBankService.BcResponses
	85, // [85:106] is the sub-list for method output_type
	64, // [64:85] is the sub-list for method input_type
	64, // [64:64] is the sub-list for extension type_name
	64, // [64:64] is the sub-list for extension extendee
	0,  // [0:64] is the sub-list for field type_name
}

func init() { file_BcAndBankService_proto_init() }
func file_BcAndBankService_proto_init() {
	if File_BcAndBankService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_BcAndBankService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTxIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTxIDRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BcAndBankPayOrderActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BcAndBankFactoringActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BcAndBankFactoringRepayActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BcAndBankActionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BcResponses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainCompany); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainCompanies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainConfigs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainContracts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainContractMi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainContractMis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainFactoringOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainFactoringOrders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainMedicine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainMedicines); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainMi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainMis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainPayOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainPayOrders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainShipment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainShipments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainShipmentOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainShipmentOrders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainOrganizations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainOrganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainProcessApplies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainProcessApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentInfoApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainProcessApproves); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainProcessApprove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentInfoApprove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_BcAndBankService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_BcAndBankService_proto_goTypes,
		DependencyIndexes: file_BcAndBankService_proto_depIdxs,
		MessageInfos:      file_BcAndBankService_proto_msgTypes,
	}.Build()
	File_BcAndBankService_proto = out.File
	file_BcAndBankService_proto_rawDesc = nil
	file_BcAndBankService_proto_goTypes = nil
	file_BcAndBankService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BcAndBankServiceClient is the client API for BcAndBankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BcAndBankServiceClient interface {
	// --------单纯上链接口 start---------
	// 上链 configs 信息
	BcUploadConfigs(ctx context.Context, in *UploadChainConfigs, opts ...grpc.CallOption) (*BcResponses, error)
	// 上链 企业信息s
	BcUploadCompanies(ctx context.Context, in *UploadChainCompanies, opts ...grpc.CallOption) (*BcResponses, error)
	// 医疗机构上链
	BcUploadMis(ctx context.Context, in *UploadChainMis, opts ...grpc.CallOption) (*BcResponses, error)
	// 药品信息上链
	BcUploadMedicine(ctx context.Context, in *UploadChainMedicines, opts ...grpc.CallOption) (*BcResponses, error)
	// 合同信息上链
	BcUploadContracts(ctx context.Context, in *UploadChainContracts, opts ...grpc.CallOption) (*BcResponses, error)
	// 子合同信息上链
	BcUploadContractMis(ctx context.Context, in *UploadChainContractMis, opts ...grpc.CallOption) (*BcResponses, error)
	// 配送计划上链
	BcUploadShipments(ctx context.Context, in *UploadChainShipments, opts ...grpc.CallOption) (*BcResponses, error)
	// 配送单上链
	BcUploadShipmentOrders(ctx context.Context, in *UploadChainShipmentOrders, opts ...grpc.CallOption) (*BcResponses, error)
	// 支付单上链, 确权
	BcUploadPayOrders(ctx context.Context, in *UploadChainPayOrders, opts ...grpc.CallOption) (*BcResponses, error)
	// 保理单上链（更新）
	BcUploadFactoringOrders(ctx context.Context, in *UploadChainFactoringOrders, opts ...grpc.CallOption) (*BcResponses, error)
	// --------上链 + 银行 组合接口 start---------
	// 发起付款 一笔付款单内可以包含多笔 支付单(接收参数: 多笔 payOrder + 一个 银行请求)
	// 查所有的支付单, 看是否符合要求
	// 返回:: 链上数据hash集合 加 银行返回
	BcAndBankPayOrderAction(ctx context.Context, in *BcAndBankPayOrderActionRequest, opts ...grpc.CallOption) (*BcAndBankActionResp, error)
	// 发起保理(多笔支付单)
	// 保理单上链, 支付单上链后才上链, 查所有的支付单: 确认 支付单 处于 待支付/失败/(私有状态 未保理) 中; 调银行
	BcAndBankFactoringOrdersAction(ctx context.Context, in *BcAndBankFactoringActionRequest, opts ...grpc.CallOption) (*BcAndBankActionResp, error)
	// 发起保理还款(以保理单为准)
	// 查保理单, 处于 已保理 状态 ->
	BcAndBankFactoringRepayAction(ctx context.Context, in *BcAndBankFactoringRepayActionRequest, opts ...grpc.CallOption) (*BcAndBankActionResp, error)
	// --------危险动作: 强制上链接口 start---------
	// 强制配送计划上链
	BcForceUploadShipments(ctx context.Context, in *UploadChainShipments, opts ...grpc.CallOption) (*BcResponses, error)
	// 强制配送单上链
	BcForceUploadShipmentOrders(ctx context.Context, in *UploadChainShipmentOrders, opts ...grpc.CallOption) (*BcResponses, error)
	// 强制支付单上链
	BcForceUploadPayOrders(ctx context.Context, in *UploadChainPayOrders, opts ...grpc.CallOption) (*BcResponses, error)
	// 强制Factoring上链
	BcForceUploadFactoring(ctx context.Context, in *UploadChainFactoringOrders, opts ...grpc.CallOption) (*BcResponses, error)
	// 根据 txID 查询 链上交易, 返回 解密后的 json.Marshal 字符串
	BcQueryByTxID(ctx context.Context, in *QueryTxIDReq, opts ...grpc.CallOption) (*QueryTxIDRsp, error)
	// 组织单位上链
	BcUploadOrganizations(ctx context.Context, in *UploadChainOrganizations, opts ...grpc.CallOption) (*BcResponses, error)
	// 流程申请上链
	BcUploadProcessApply(ctx context.Context, in *UploadChainProcessApplies, opts ...grpc.CallOption) (*BcResponses, error)
	//流程审批上链
	BcUploadProcessApprove(ctx context.Context, in *UploadChainProcessApproves, opts ...grpc.CallOption) (*BcResponses, error)
}

type bcAndBankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBcAndBankServiceClient(cc grpc.ClientConnInterface) BcAndBankServiceClient {
	return &bcAndBankServiceClient{cc}
}

func (c *bcAndBankServiceClient) BcUploadConfigs(ctx context.Context, in *UploadChainConfigs, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadCompanies(ctx context.Context, in *UploadChainCompanies, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadCompanies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadMis(ctx context.Context, in *UploadChainMis, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadMis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadMedicine(ctx context.Context, in *UploadChainMedicines, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadContracts(ctx context.Context, in *UploadChainContracts, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadContractMis(ctx context.Context, in *UploadChainContractMis, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadContractMis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadShipments(ctx context.Context, in *UploadChainShipments, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadShipments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadShipmentOrders(ctx context.Context, in *UploadChainShipmentOrders, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadShipmentOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadPayOrders(ctx context.Context, in *UploadChainPayOrders, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadPayOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadFactoringOrders(ctx context.Context, in *UploadChainFactoringOrders, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadFactoringOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcAndBankPayOrderAction(ctx context.Context, in *BcAndBankPayOrderActionRequest, opts ...grpc.CallOption) (*BcAndBankActionResp, error) {
	out := new(BcAndBankActionResp)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcAndBankPayOrderAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcAndBankFactoringOrdersAction(ctx context.Context, in *BcAndBankFactoringActionRequest, opts ...grpc.CallOption) (*BcAndBankActionResp, error) {
	out := new(BcAndBankActionResp)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcAndBankFactoringOrdersAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcAndBankFactoringRepayAction(ctx context.Context, in *BcAndBankFactoringRepayActionRequest, opts ...grpc.CallOption) (*BcAndBankActionResp, error) {
	out := new(BcAndBankActionResp)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcAndBankFactoringRepayAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcForceUploadShipments(ctx context.Context, in *UploadChainShipments, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcForceUploadShipments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcForceUploadShipmentOrders(ctx context.Context, in *UploadChainShipmentOrders, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcForceUploadShipmentOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcForceUploadPayOrders(ctx context.Context, in *UploadChainPayOrders, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcForceUploadPayOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcForceUploadFactoring(ctx context.Context, in *UploadChainFactoringOrders, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcForceUploadFactoring", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcQueryByTxID(ctx context.Context, in *QueryTxIDReq, opts ...grpc.CallOption) (*QueryTxIDRsp, error) {
	out := new(QueryTxIDRsp)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcQueryByTxID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadOrganizations(ctx context.Context, in *UploadChainOrganizations, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadProcessApply(ctx context.Context, in *UploadChainProcessApplies, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadProcessApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadProcessApprove(ctx context.Context, in *UploadChainProcessApproves, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadProcessApprove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BcAndBankServiceServer is the server API for BcAndBankService service.
type BcAndBankServiceServer interface {
	// --------单纯上链接口 start---------
	// 上链 configs 信息
	BcUploadConfigs(context.Context, *UploadChainConfigs) (*BcResponses, error)
	// 上链 企业信息s
	BcUploadCompanies(context.Context, *UploadChainCompanies) (*BcResponses, error)
	// 医疗机构上链
	BcUploadMis(context.Context, *UploadChainMis) (*BcResponses, error)
	// 药品信息上链
	BcUploadMedicine(context.Context, *UploadChainMedicines) (*BcResponses, error)
	// 合同信息上链
	BcUploadContracts(context.Context, *UploadChainContracts) (*BcResponses, error)
	// 子合同信息上链
	BcUploadContractMis(context.Context, *UploadChainContractMis) (*BcResponses, error)
	// 配送计划上链
	BcUploadShipments(context.Context, *UploadChainShipments) (*BcResponses, error)
	// 配送单上链
	BcUploadShipmentOrders(context.Context, *UploadChainShipmentOrders) (*BcResponses, error)
	// 支付单上链, 确权
	BcUploadPayOrders(context.Context, *UploadChainPayOrders) (*BcResponses, error)
	// 保理单上链（更新）
	BcUploadFactoringOrders(context.Context, *UploadChainFactoringOrders) (*BcResponses, error)
	// --------上链 + 银行 组合接口 start---------
	// 发起付款 一笔付款单内可以包含多笔 支付单(接收参数: 多笔 payOrder + 一个 银行请求)
	// 查所有的支付单, 看是否符合要求
	// 返回:: 链上数据hash集合 加 银行返回
	BcAndBankPayOrderAction(context.Context, *BcAndBankPayOrderActionRequest) (*BcAndBankActionResp, error)
	// 发起保理(多笔支付单)
	// 保理单上链, 支付单上链后才上链, 查所有的支付单: 确认 支付单 处于 待支付/失败/(私有状态 未保理) 中; 调银行
	BcAndBankFactoringOrdersAction(context.Context, *BcAndBankFactoringActionRequest) (*BcAndBankActionResp, error)
	// 发起保理还款(以保理单为准)
	// 查保理单, 处于 已保理 状态 ->
	BcAndBankFactoringRepayAction(context.Context, *BcAndBankFactoringRepayActionRequest) (*BcAndBankActionResp, error)
	// --------危险动作: 强制上链接口 start---------
	// 强制配送计划上链
	BcForceUploadShipments(context.Context, *UploadChainShipments) (*BcResponses, error)
	// 强制配送单上链
	BcForceUploadShipmentOrders(context.Context, *UploadChainShipmentOrders) (*BcResponses, error)
	// 强制支付单上链
	BcForceUploadPayOrders(context.Context, *UploadChainPayOrders) (*BcResponses, error)
	// 强制Factoring上链
	BcForceUploadFactoring(context.Context, *UploadChainFactoringOrders) (*BcResponses, error)
	// 根据 txID 查询 链上交易, 返回 解密后的 json.Marshal 字符串
	BcQueryByTxID(context.Context, *QueryTxIDReq) (*QueryTxIDRsp, error)
	// 组织单位上链
	BcUploadOrganizations(context.Context, *UploadChainOrganizations) (*BcResponses, error)
	// 流程申请上链
	BcUploadProcessApply(context.Context, *UploadChainProcessApplies) (*BcResponses, error)
	//流程审批上链
	BcUploadProcessApprove(context.Context, *UploadChainProcessApproves) (*BcResponses, error)
}

// UnimplementedBcAndBankServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBcAndBankServiceServer struct {
}

func (*UnimplementedBcAndBankServiceServer) BcUploadConfigs(context.Context, *UploadChainConfigs) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadConfigs not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadCompanies(context.Context, *UploadChainCompanies) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadCompanies not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadMis(context.Context, *UploadChainMis) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadMis not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadMedicine(context.Context, *UploadChainMedicines) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadMedicine not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadContracts(context.Context, *UploadChainContracts) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadContracts not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadContractMis(context.Context, *UploadChainContractMis) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadContractMis not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadShipments(context.Context, *UploadChainShipments) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadShipments not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadShipmentOrders(context.Context, *UploadChainShipmentOrders) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadShipmentOrders not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadPayOrders(context.Context, *UploadChainPayOrders) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadPayOrders not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadFactoringOrders(context.Context, *UploadChainFactoringOrders) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadFactoringOrders not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcAndBankPayOrderAction(context.Context, *BcAndBankPayOrderActionRequest) (*BcAndBankActionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcAndBankPayOrderAction not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcAndBankFactoringOrdersAction(context.Context, *BcAndBankFactoringActionRequest) (*BcAndBankActionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcAndBankFactoringOrdersAction not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcAndBankFactoringRepayAction(context.Context, *BcAndBankFactoringRepayActionRequest) (*BcAndBankActionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcAndBankFactoringRepayAction not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcForceUploadShipments(context.Context, *UploadChainShipments) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcForceUploadShipments not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcForceUploadShipmentOrders(context.Context, *UploadChainShipmentOrders) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcForceUploadShipmentOrders not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcForceUploadPayOrders(context.Context, *UploadChainPayOrders) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcForceUploadPayOrders not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcForceUploadFactoring(context.Context, *UploadChainFactoringOrders) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcForceUploadFactoring not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcQueryByTxID(context.Context, *QueryTxIDReq) (*QueryTxIDRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcQueryByTxID not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadOrganizations(context.Context, *UploadChainOrganizations) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadOrganizations not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadProcessApply(context.Context, *UploadChainProcessApplies) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadProcessApply not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadProcessApprove(context.Context, *UploadChainProcessApproves) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadProcessApprove not implemented")
}

func RegisterBcAndBankServiceServer(s *grpc.Server, srv BcAndBankServiceServer) {
	s.RegisterService(&_BcAndBankService_serviceDesc, srv)
}

func _BcAndBankService_BcUploadConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainConfigs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadConfigs(ctx, req.(*UploadChainConfigs))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainCompanies)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadCompanies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadCompanies(ctx, req.(*UploadChainCompanies))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadMis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainMis)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadMis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadMis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadMis(ctx, req.(*UploadChainMis))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainMedicines)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadMedicine(ctx, req.(*UploadChainMedicines))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainContracts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadContracts(ctx, req.(*UploadChainContracts))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadContractMis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainContractMis)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadContractMis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadContractMis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadContractMis(ctx, req.(*UploadChainContractMis))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadShipments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainShipments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadShipments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadShipments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadShipments(ctx, req.(*UploadChainShipments))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadShipmentOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainShipmentOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadShipmentOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadShipmentOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadShipmentOrders(ctx, req.(*UploadChainShipmentOrders))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadPayOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainPayOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadPayOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadPayOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadPayOrders(ctx, req.(*UploadChainPayOrders))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadFactoringOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainFactoringOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadFactoringOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadFactoringOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadFactoringOrders(ctx, req.(*UploadChainFactoringOrders))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcAndBankPayOrderAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BcAndBankPayOrderActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcAndBankPayOrderAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcAndBankPayOrderAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcAndBankPayOrderAction(ctx, req.(*BcAndBankPayOrderActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcAndBankFactoringOrdersAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BcAndBankFactoringActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcAndBankFactoringOrdersAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcAndBankFactoringOrdersAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcAndBankFactoringOrdersAction(ctx, req.(*BcAndBankFactoringActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcAndBankFactoringRepayAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BcAndBankFactoringRepayActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcAndBankFactoringRepayAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcAndBankFactoringRepayAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcAndBankFactoringRepayAction(ctx, req.(*BcAndBankFactoringRepayActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcForceUploadShipments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainShipments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcForceUploadShipments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcForceUploadShipments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcForceUploadShipments(ctx, req.(*UploadChainShipments))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcForceUploadShipmentOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainShipmentOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcForceUploadShipmentOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcForceUploadShipmentOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcForceUploadShipmentOrders(ctx, req.(*UploadChainShipmentOrders))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcForceUploadPayOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainPayOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcForceUploadPayOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcForceUploadPayOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcForceUploadPayOrders(ctx, req.(*UploadChainPayOrders))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcForceUploadFactoring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainFactoringOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcForceUploadFactoring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcForceUploadFactoring",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcForceUploadFactoring(ctx, req.(*UploadChainFactoringOrders))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcQueryByTxID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTxIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcQueryByTxID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcQueryByTxID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcQueryByTxID(ctx, req.(*QueryTxIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainOrganizations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadOrganizations(ctx, req.(*UploadChainOrganizations))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadProcessApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainProcessApplies)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadProcessApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadProcessApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadProcessApply(ctx, req.(*UploadChainProcessApplies))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadProcessApprove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainProcessApproves)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadProcessApprove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadProcessApprove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadProcessApprove(ctx, req.(*UploadChainProcessApproves))
	}
	return interceptor(ctx, in, info, handler)
}

var _BcAndBankService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BcAndBankService.BcAndBankService",
	HandlerType: (*BcAndBankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BcUploadConfigs",
			Handler:    _BcAndBankService_BcUploadConfigs_Handler,
		},
		{
			MethodName: "BcUploadCompanies",
			Handler:    _BcAndBankService_BcUploadCompanies_Handler,
		},
		{
			MethodName: "BcUploadMis",
			Handler:    _BcAndBankService_BcUploadMis_Handler,
		},
		{
			MethodName: "BcUploadMedicine",
			Handler:    _BcAndBankService_BcUploadMedicine_Handler,
		},
		{
			MethodName: "BcUploadContracts",
			Handler:    _BcAndBankService_BcUploadContracts_Handler,
		},
		{
			MethodName: "BcUploadContractMis",
			Handler:    _BcAndBankService_BcUploadContractMis_Handler,
		},
		{
			MethodName: "BcUploadShipments",
			Handler:    _BcAndBankService_BcUploadShipments_Handler,
		},
		{
			MethodName: "BcUploadShipmentOrders",
			Handler:    _BcAndBankService_BcUploadShipmentOrders_Handler,
		},
		{
			MethodName: "BcUploadPayOrders",
			Handler:    _BcAndBankService_BcUploadPayOrders_Handler,
		},
		{
			MethodName: "BcUploadFactoringOrders",
			Handler:    _BcAndBankService_BcUploadFactoringOrders_Handler,
		},
		{
			MethodName: "BcAndBankPayOrderAction",
			Handler:    _BcAndBankService_BcAndBankPayOrderAction_Handler,
		},
		{
			MethodName: "BcAndBankFactoringOrdersAction",
			Handler:    _BcAndBankService_BcAndBankFactoringOrdersAction_Handler,
		},
		{
			MethodName: "BcAndBankFactoringRepayAction",
			Handler:    _BcAndBankService_BcAndBankFactoringRepayAction_Handler,
		},
		{
			MethodName: "BcForceUploadShipments",
			Handler:    _BcAndBankService_BcForceUploadShipments_Handler,
		},
		{
			MethodName: "BcForceUploadShipmentOrders",
			Handler:    _BcAndBankService_BcForceUploadShipmentOrders_Handler,
		},
		{
			MethodName: "BcForceUploadPayOrders",
			Handler:    _BcAndBankService_BcForceUploadPayOrders_Handler,
		},
		{
			MethodName: "BcForceUploadFactoring",
			Handler:    _BcAndBankService_BcForceUploadFactoring_Handler,
		},
		{
			MethodName: "BcQueryByTxID",
			Handler:    _BcAndBankService_BcQueryByTxID_Handler,
		},
		{
			MethodName: "BcUploadOrganizations",
			Handler:    _BcAndBankService_BcUploadOrganizations_Handler,
		},
		{
			MethodName: "BcUploadProcessApply",
			Handler:    _BcAndBankService_BcUploadProcessApply_Handler,
		},
		{
			MethodName: "BcUploadProcessApprove",
			Handler:    _BcAndBankService_BcUploadProcessApprove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "BcAndBankService.proto",
}
