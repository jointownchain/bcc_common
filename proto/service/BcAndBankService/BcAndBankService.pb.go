// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: BcAndBankService.proto

// 外挂用 - 综合 bankSDK 和 fabricSDK 调用
// blockchain and bank plugin

package BcAndBankService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Symbols defined in public import of google/protobuf/timestamp.proto.

type Timestamp = timestamppb.Timestamp

type QueryTxIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxID string `protobuf:"bytes,1,opt,name=TxID,proto3" json:"TxID"`
	Key  string `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key"`
}

func (x *QueryTxIDReq) Reset() {
	*x = QueryTxIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTxIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTxIDReq) ProtoMessage() {}

func (x *QueryTxIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTxIDReq.ProtoReflect.Descriptor instead.
func (*QueryTxIDReq) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{0}
}

func (x *QueryTxIDReq) GetTxID() string {
	if x != nil {
		return x.TxID
	}
	return ""
}

func (x *QueryTxIDReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type QueryTxIDRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rst      string                 `protobuf:"bytes,1,opt,name=Rst,proto3" json:"Rst"`
	CreateAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=CreateAt,proto3" json:"CreateAt"`
}

func (x *QueryTxIDRsp) Reset() {
	*x = QueryTxIDRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTxIDRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTxIDRsp) ProtoMessage() {}

func (x *QueryTxIDRsp) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTxIDRsp.ProtoReflect.Descriptor instead.
func (*QueryTxIDRsp) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{1}
}

func (x *QueryTxIDRsp) GetRst() string {
	if x != nil {
		return x.Rst
	}
	return ""
}

func (x *QueryTxIDRsp) GetCreateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

// 通用单个上链信息返回(hash)
type BcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash"`
}

func (x *BcResponse) Reset() {
	*x = BcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BcResponse) ProtoMessage() {}

func (x *BcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BcResponse.ProtoReflect.Descriptor instead.
func (*BcResponse) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{2}
}

func (x *BcResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

// 通用上链信息返回(hashs)
type BcResponses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []string `protobuf:"bytes,1,rep,name=hash,proto3" json:"hash"`
}

func (x *BcResponses) Reset() {
	*x = BcResponses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BcResponses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BcResponses) ProtoMessage() {}

func (x *BcResponses) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BcResponses.ProtoReflect.Descriptor instead.
func (*BcResponses) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{3}
}

func (x *BcResponses) GetHash() []string {
	if x != nil {
		return x.Hash
	}
	return nil
}

type UploadChainType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastHash         string `protobuf:"bytes,1,opt,name=lastHash,proto3" json:"lastHash"`
	UploadNode       string `protobuf:"bytes,2,opt,name=uploadNode,proto3" json:"uploadNode"`
	UploaderName     string `protobuf:"bytes,3,opt,name=uploaderName,proto3" json:"uploaderName"`
	UploaderRole     string `protobuf:"bytes,4,opt,name=uploaderRole,proto3" json:"uploaderRole"`
	UploaderRoleName string `protobuf:"bytes,5,opt,name=uploaderRoleName,proto3" json:"uploaderRoleName"`
	UploaderAccount  string `protobuf:"bytes,6,opt,name=uploaderAccount,proto3" json:"uploaderAccount"`
}

func (x *UploadChainType) Reset() {
	*x = UploadChainType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainType) ProtoMessage() {}

func (x *UploadChainType) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainType.ProtoReflect.Descriptor instead.
func (*UploadChainType) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{4}
}

func (x *UploadChainType) GetLastHash() string {
	if x != nil {
		return x.LastHash
	}
	return ""
}

func (x *UploadChainType) GetUploadNode() string {
	if x != nil {
		return x.UploadNode
	}
	return ""
}

func (x *UploadChainType) GetUploaderName() string {
	if x != nil {
		return x.UploaderName
	}
	return ""
}

func (x *UploadChainType) GetUploaderRole() string {
	if x != nil {
		return x.UploaderRole
	}
	return ""
}

func (x *UploadChainType) GetUploaderRoleName() string {
	if x != nil {
		return x.UploaderRoleName
	}
	return ""
}

func (x *UploadChainType) GetUploaderAccount() string {
	if x != nil {
		return x.UploaderAccount
	}
	return ""
}

type UploadChainOrganizations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainOrganization []*UploadChainOrganization `protobuf:"bytes,1,rep,name=uploadChainOrganization,proto3" json:"uploadChainOrganization"`
}

func (x *UploadChainOrganizations) Reset() {
	*x = UploadChainOrganizations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainOrganizations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainOrganizations) ProtoMessage() {}

func (x *UploadChainOrganizations) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainOrganizations.ProtoReflect.Descriptor instead.
func (*UploadChainOrganizations) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{5}
}

func (x *UploadChainOrganizations) GetUploadChainOrganization() []*UploadChainOrganization {
	if x != nil {
		return x.UploadChainOrganization
	}
	return nil
}

type UploadChainOrganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType *UploadChainType `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	Code            string           `protobuf:"bytes,2,opt,name=code,proto3" json:"code"`
	Name            string           `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	Type            string           `protobuf:"bytes,4,opt,name=type,proto3" json:"type"`
	ManagerName     string           `protobuf:"bytes,5,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone    string           `protobuf:"bytes,6,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province        string           `protobuf:"bytes,7,opt,name=province,proto3" json:"province"`
	City            string           `protobuf:"bytes,8,opt,name=city,proto3" json:"city"`
	Zone            string           `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone"`
	Memo            string           `protobuf:"bytes,10,opt,name=memo,proto3" json:"memo"`
}

func (x *UploadChainOrganization) Reset() {
	*x = UploadChainOrganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainOrganization) ProtoMessage() {}

func (x *UploadChainOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainOrganization.ProtoReflect.Descriptor instead.
func (*UploadChainOrganization) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{6}
}

func (x *UploadChainOrganization) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainOrganization) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UploadChainOrganization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploadChainOrganization) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UploadChainOrganization) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *UploadChainOrganization) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *UploadChainOrganization) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *UploadChainOrganization) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UploadChainOrganization) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *UploadChainOrganization) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type UploadDocumentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName  string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName"`
	UploadUrl string `protobuf:"bytes,2,opt,name=uploadUrl,proto3" json:"uploadUrl"`
}

func (x *UploadDocumentInfo) Reset() {
	*x = UploadDocumentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadDocumentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadDocumentInfo) ProtoMessage() {}

func (x *UploadDocumentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadDocumentInfo.ProtoReflect.Descriptor instead.
func (*UploadDocumentInfo) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{7}
}

func (x *UploadDocumentInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *UploadDocumentInfo) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

type UploadChainProjects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainProject []*UploadChainProject `protobuf:"bytes,1,rep,name=UploadChainProject,proto3" json:"UploadChainProject"`
}

func (x *UploadChainProjects) Reset() {
	*x = UploadChainProjects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainProjects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainProjects) ProtoMessage() {}

func (x *UploadChainProjects) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainProjects.ProtoReflect.Descriptor instead.
func (*UploadChainProjects) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{8}
}

func (x *UploadChainProjects) GetUploadChainProject() []*UploadChainProject {
	if x != nil {
		return x.UploadChainProject
	}
	return nil
}

type UploadChainProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType    *UploadChainType       `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	ProjectCode        string                 `protobuf:"bytes,2,opt,name=projectCode,proto3" json:"projectCode"`
	ProjectName        string                 `protobuf:"bytes,3,opt,name=projectName,proto3" json:"projectName"`
	StartAt            *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=startAt,proto3" json:"startAt"`
	EndAt              *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=endAt,proto3" json:"endAt"`
	BuildingArea       int64                  `protobuf:"varint,6,opt,name=buildingArea,proto3" json:"buildingArea"`
	EngineeringCost    int64                  `protobuf:"varint,7,opt,name=engineeringCost,proto3" json:"engineeringCost"`
	ProjectAddress     string                 `protobuf:"bytes,8,opt,name=projectAddress,proto3" json:"projectAddress"`
	FormType           string                 `protobuf:"bytes,9,opt,name=formType,proto3" json:"formType"`
	ProjectLeader      string                 `protobuf:"bytes,10,opt,name=projectLeader,proto3" json:"projectLeader"`
	ContactMobile      string                 `protobuf:"bytes,11,opt,name=contactMobile,proto3" json:"contactMobile"`
	ContactAddress     string                 `protobuf:"bytes,12,opt,name=contactAddress,proto3" json:"contactAddress"`
	ConstructionName   string                 `protobuf:"bytes,13,opt,name=constructionName,proto3" json:"constructionName"`
	DesignName         string                 `protobuf:"bytes,14,opt,name=designName,proto3" json:"designName"`
	BuildName          string                 `protobuf:"bytes,15,opt,name=buildName,proto3" json:"buildName"`
	SupervisorName     string                 `protobuf:"bytes,16,opt,name=supervisorName,proto3" json:"supervisorName"`
	ActiveStatus       string                 `protobuf:"bytes,17,opt,name=activeStatus,proto3" json:"activeStatus"`
	ProjectDescription string                 `protobuf:"bytes,18,opt,name=projectDescription,proto3" json:"projectDescription"`
	Memo               string                 `protobuf:"bytes,19,opt,name=memo,proto3" json:"memo"`
	UploadDocumnet     []*UploadDocumentInfo  `protobuf:"bytes,20,rep,name=uploadDocumnet,proto3" json:"uploadDocumnet"`
}

func (x *UploadChainProject) Reset() {
	*x = UploadChainProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainProject) ProtoMessage() {}

func (x *UploadChainProject) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainProject.ProtoReflect.Descriptor instead.
func (*UploadChainProject) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{9}
}

func (x *UploadChainProject) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainProject) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *UploadChainProject) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *UploadChainProject) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *UploadChainProject) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *UploadChainProject) GetBuildingArea() int64 {
	if x != nil {
		return x.BuildingArea
	}
	return 0
}

func (x *UploadChainProject) GetEngineeringCost() int64 {
	if x != nil {
		return x.EngineeringCost
	}
	return 0
}

func (x *UploadChainProject) GetProjectAddress() string {
	if x != nil {
		return x.ProjectAddress
	}
	return ""
}

func (x *UploadChainProject) GetFormType() string {
	if x != nil {
		return x.FormType
	}
	return ""
}

func (x *UploadChainProject) GetProjectLeader() string {
	if x != nil {
		return x.ProjectLeader
	}
	return ""
}

func (x *UploadChainProject) GetContactMobile() string {
	if x != nil {
		return x.ContactMobile
	}
	return ""
}

func (x *UploadChainProject) GetContactAddress() string {
	if x != nil {
		return x.ContactAddress
	}
	return ""
}

func (x *UploadChainProject) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *UploadChainProject) GetDesignName() string {
	if x != nil {
		return x.DesignName
	}
	return ""
}

func (x *UploadChainProject) GetBuildName() string {
	if x != nil {
		return x.BuildName
	}
	return ""
}

func (x *UploadChainProject) GetSupervisorName() string {
	if x != nil {
		return x.SupervisorName
	}
	return ""
}

func (x *UploadChainProject) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *UploadChainProject) GetProjectDescription() string {
	if x != nil {
		return x.ProjectDescription
	}
	return ""
}

func (x *UploadChainProject) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UploadChainProject) GetUploadDocumnet() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocumnet
	}
	return nil
}

type UploadChainProgressPlans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainProgressPlan []*UploadChainProgressPlan `protobuf:"bytes,1,rep,name=UploadChainProgressPlan,proto3" json:"UploadChainProgressPlan"`
}

func (x *UploadChainProgressPlans) Reset() {
	*x = UploadChainProgressPlans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainProgressPlans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainProgressPlans) ProtoMessage() {}

func (x *UploadChainProgressPlans) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainProgressPlans.ProtoReflect.Descriptor instead.
func (*UploadChainProgressPlans) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{10}
}

func (x *UploadChainProgressPlans) GetUploadChainProgressPlan() []*UploadChainProgressPlan {
	if x != nil {
		return x.UploadChainProgressPlan
	}
	return nil
}

type UploadChainProgressPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType  *UploadChainType       `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	ProgressPlanCode string                 `protobuf:"bytes,2,opt,name=progressPlanCode,proto3" json:"progressPlanCode"`
	ProjectId        int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	BuildId          int64                  `protobuf:"varint,4,opt,name=buildId,proto3" json:"buildId"`
	PlanName         string                 `protobuf:"bytes,5,opt,name=planName,proto3" json:"planName"`
	StartAt          *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=startAt,proto3" json:"startAt"`
	EndAt            *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=endAt,proto3" json:"endAt"`
	PlanPerson       string                 `protobuf:"bytes,8,opt,name=planPerson,proto3" json:"planPerson"`
	MilestoneStatus  string                 `protobuf:"bytes,9,opt,name=milestoneStatus,proto3" json:"milestoneStatus"`
	ActualDate       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=actualDate,proto3" json:"actualDate"`
	ActualPercent    int64                  `protobuf:"varint,11,opt,name=actualPercent,proto3" json:"actualPercent"`
	ActiveStatus     string                 `protobuf:"bytes,12,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo             string                 `protobuf:"bytes,13,opt,name=memo,proto3" json:"memo"`
	UploadDocumnet   []*UploadDocumentInfo  `protobuf:"bytes,14,rep,name=uploadDocumnet,proto3" json:"uploadDocumnet"`
}

func (x *UploadChainProgressPlan) Reset() {
	*x = UploadChainProgressPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainProgressPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainProgressPlan) ProtoMessage() {}

func (x *UploadChainProgressPlan) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainProgressPlan.ProtoReflect.Descriptor instead.
func (*UploadChainProgressPlan) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{11}
}

func (x *UploadChainProgressPlan) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainProgressPlan) GetProgressPlanCode() string {
	if x != nil {
		return x.ProgressPlanCode
	}
	return ""
}

func (x *UploadChainProgressPlan) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UploadChainProgressPlan) GetBuildId() int64 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

func (x *UploadChainProgressPlan) GetPlanName() string {
	if x != nil {
		return x.PlanName
	}
	return ""
}

func (x *UploadChainProgressPlan) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *UploadChainProgressPlan) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *UploadChainProgressPlan) GetPlanPerson() string {
	if x != nil {
		return x.PlanPerson
	}
	return ""
}

func (x *UploadChainProgressPlan) GetMilestoneStatus() string {
	if x != nil {
		return x.MilestoneStatus
	}
	return ""
}

func (x *UploadChainProgressPlan) GetActualDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ActualDate
	}
	return nil
}

func (x *UploadChainProgressPlan) GetActualPercent() int64 {
	if x != nil {
		return x.ActualPercent
	}
	return 0
}

func (x *UploadChainProgressPlan) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *UploadChainProgressPlan) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UploadChainProgressPlan) GetUploadDocumnet() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocumnet
	}
	return nil
}

type UploadChainProgressActuals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainProgressActual []*UploadChainProgressActual `protobuf:"bytes,1,rep,name=UploadChainProgressActual,proto3" json:"UploadChainProgressActual"`
}

func (x *UploadChainProgressActuals) Reset() {
	*x = UploadChainProgressActuals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainProgressActuals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainProgressActuals) ProtoMessage() {}

func (x *UploadChainProgressActuals) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainProgressActuals.ProtoReflect.Descriptor instead.
func (*UploadChainProgressActuals) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{12}
}

func (x *UploadChainProgressActuals) GetUploadChainProgressActual() []*UploadChainProgressActual {
	if x != nil {
		return x.UploadChainProgressActual
	}
	return nil
}

type UploadChainProgressActual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType    *UploadChainType       `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	ProgressActualCode string                 `protobuf:"bytes,2,opt,name=progressActualCode,proto3" json:"progressActualCode"`
	ProjectId          int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	ProgressPlanId     int64                  `protobuf:"varint,4,opt,name=progressPlanId,proto3" json:"progressPlanId"`
	BuildId            int64                  `protobuf:"varint,5,opt,name=buildId,proto3" json:"buildId"`
	AutualName         string                 `protobuf:"bytes,6,opt,name=autualName,proto3" json:"autualName"`
	ActualDate         *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=actualDate,proto3" json:"actualDate"`
	ActualPercent      int64                  `protobuf:"varint,8,opt,name=actualPercent,proto3" json:"actualPercent"`
	ActualPerson       string                 `protobuf:"bytes,9,opt,name=actualPerson,proto3" json:"actualPerson"`
	ActiveStatus       string                 `protobuf:"bytes,10,opt,name=activeStatus,proto3" json:"activeStatus"`
	Memo               string                 `protobuf:"bytes,11,opt,name=memo,proto3" json:"memo"`
	UploadDocumnet     []*UploadDocumentInfo  `protobuf:"bytes,12,rep,name=uploadDocumnet,proto3" json:"uploadDocumnet"`
}

func (x *UploadChainProgressActual) Reset() {
	*x = UploadChainProgressActual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainProgressActual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainProgressActual) ProtoMessage() {}

func (x *UploadChainProgressActual) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainProgressActual.ProtoReflect.Descriptor instead.
func (*UploadChainProgressActual) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{13}
}

func (x *UploadChainProgressActual) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainProgressActual) GetProgressActualCode() string {
	if x != nil {
		return x.ProgressActualCode
	}
	return ""
}

func (x *UploadChainProgressActual) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UploadChainProgressActual) GetProgressPlanId() int64 {
	if x != nil {
		return x.ProgressPlanId
	}
	return 0
}

func (x *UploadChainProgressActual) GetBuildId() int64 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

func (x *UploadChainProgressActual) GetAutualName() string {
	if x != nil {
		return x.AutualName
	}
	return ""
}

func (x *UploadChainProgressActual) GetActualDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ActualDate
	}
	return nil
}

func (x *UploadChainProgressActual) GetActualPercent() int64 {
	if x != nil {
		return x.ActualPercent
	}
	return 0
}

func (x *UploadChainProgressActual) GetActualPerson() string {
	if x != nil {
		return x.ActualPerson
	}
	return ""
}

func (x *UploadChainProgressActual) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *UploadChainProgressActual) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UploadChainProgressActual) GetUploadDocumnet() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocumnet
	}
	return nil
}

type UploadChainQualityInspections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainQualityInspection []*UploadChainQualityInspection `protobuf:"bytes,1,rep,name=UploadChainQualityInspection,proto3" json:"UploadChainQualityInspection"`
}

func (x *UploadChainQualityInspections) Reset() {
	*x = UploadChainQualityInspections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainQualityInspections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainQualityInspections) ProtoMessage() {}

func (x *UploadChainQualityInspections) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainQualityInspections.ProtoReflect.Descriptor instead.
func (*UploadChainQualityInspections) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{14}
}

func (x *UploadChainQualityInspections) GetUploadChainQualityInspection() []*UploadChainQualityInspection {
	if x != nil {
		return x.UploadChainQualityInspection
	}
	return nil
}

type UploadChainQualityInspection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType       *UploadChainType       `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	QualityInspectionCode string                 `protobuf:"bytes,2,opt,name=qualityInspectionCode,proto3" json:"qualityInspectionCode"`
	ProjectId             int64                  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId"`
	FromOrganizationId    int64                  `protobuf:"varint,4,opt,name=fromOrganizationId,proto3" json:"fromOrganizationId"`
	FromPlatFormType      string                 `protobuf:"bytes,5,opt,name=fromPlatFormType,proto3" json:"fromPlatFormType"`
	ToOrganizationId      int64                  `protobuf:"varint,6,opt,name=toOrganizationId,proto3" json:"toOrganizationId"`
	ToPlatFormType        string                 `protobuf:"bytes,7,opt,name=toPlatFormType,proto3" json:"toPlatFormType"`
	QualityInspector      string                 `protobuf:"bytes,8,opt,name=qualityInspector,proto3" json:"qualityInspector"`
	InspectionDate        *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=inspectionDate,proto3" json:"inspectionDate"`
	InspectionArea        string                 `protobuf:"bytes,10,opt,name=inspectionArea,proto3" json:"inspectionArea"`
	InspectionSituation   string                 `protobuf:"bytes,11,opt,name=inspectionSituation,proto3" json:"inspectionSituation"`
	InspectionResult      string                 `protobuf:"bytes,12,opt,name=inspectionResult,proto3" json:"inspectionResult"`
	InspectionBy          int64                  `protobuf:"varint,13,opt,name=inspectionBy,proto3" json:"inspectionBy"`
	InspectionAt          *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=inspectionAt,proto3" json:"inspectionAt"`
	QualityStatus         string                 `protobuf:"bytes,15,opt,name=qualityStatus,proto3" json:"qualityStatus"`
	AssignedPerson        string                 `protobuf:"bytes,16,opt,name=assignedPerson,proto3" json:"assignedPerson"`
	AssignedDate          *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=assignedDate,proto3" json:"assignedDate"`
	AssignedDesc          string                 `protobuf:"bytes,18,opt,name=assignedDesc,proto3" json:"assignedDesc"`
	Duration              int64                  `protobuf:"varint,19,opt,name=duration,proto3" json:"duration"`
	Memo                  string                 `protobuf:"bytes,20,opt,name=memo,proto3" json:"memo"`
	UploadDocumnet        []*UploadDocumentInfo  `protobuf:"bytes,21,rep,name=uploadDocumnet,proto3" json:"uploadDocumnet"`
}

func (x *UploadChainQualityInspection) Reset() {
	*x = UploadChainQualityInspection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainQualityInspection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainQualityInspection) ProtoMessage() {}

func (x *UploadChainQualityInspection) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainQualityInspection.ProtoReflect.Descriptor instead.
func (*UploadChainQualityInspection) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{15}
}

func (x *UploadChainQualityInspection) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainQualityInspection) GetQualityInspectionCode() string {
	if x != nil {
		return x.QualityInspectionCode
	}
	return ""
}

func (x *UploadChainQualityInspection) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UploadChainQualityInspection) GetFromOrganizationId() int64 {
	if x != nil {
		return x.FromOrganizationId
	}
	return 0
}

func (x *UploadChainQualityInspection) GetFromPlatFormType() string {
	if x != nil {
		return x.FromPlatFormType
	}
	return ""
}

func (x *UploadChainQualityInspection) GetToOrganizationId() int64 {
	if x != nil {
		return x.ToOrganizationId
	}
	return 0
}

func (x *UploadChainQualityInspection) GetToPlatFormType() string {
	if x != nil {
		return x.ToPlatFormType
	}
	return ""
}

func (x *UploadChainQualityInspection) GetQualityInspector() string {
	if x != nil {
		return x.QualityInspector
	}
	return ""
}

func (x *UploadChainQualityInspection) GetInspectionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InspectionDate
	}
	return nil
}

func (x *UploadChainQualityInspection) GetInspectionArea() string {
	if x != nil {
		return x.InspectionArea
	}
	return ""
}

func (x *UploadChainQualityInspection) GetInspectionSituation() string {
	if x != nil {
		return x.InspectionSituation
	}
	return ""
}

func (x *UploadChainQualityInspection) GetInspectionResult() string {
	if x != nil {
		return x.InspectionResult
	}
	return ""
}

func (x *UploadChainQualityInspection) GetInspectionBy() int64 {
	if x != nil {
		return x.InspectionBy
	}
	return 0
}

func (x *UploadChainQualityInspection) GetInspectionAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InspectionAt
	}
	return nil
}

func (x *UploadChainQualityInspection) GetQualityStatus() string {
	if x != nil {
		return x.QualityStatus
	}
	return ""
}

func (x *UploadChainQualityInspection) GetAssignedPerson() string {
	if x != nil {
		return x.AssignedPerson
	}
	return ""
}

func (x *UploadChainQualityInspection) GetAssignedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.AssignedDate
	}
	return nil
}

func (x *UploadChainQualityInspection) GetAssignedDesc() string {
	if x != nil {
		return x.AssignedDesc
	}
	return ""
}

func (x *UploadChainQualityInspection) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *UploadChainQualityInspection) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UploadChainQualityInspection) GetUploadDocumnet() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocumnet
	}
	return nil
}

type UploadChainQualityRectifies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainQualityRectify []*UploadChainQualityRectify `protobuf:"bytes,1,rep,name=UploadChainQualityRectify,proto3" json:"UploadChainQualityRectify"`
}

func (x *UploadChainQualityRectifies) Reset() {
	*x = UploadChainQualityRectifies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainQualityRectifies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainQualityRectifies) ProtoMessage() {}

func (x *UploadChainQualityRectifies) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainQualityRectifies.ProtoReflect.Descriptor instead.
func (*UploadChainQualityRectifies) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{16}
}

func (x *UploadChainQualityRectifies) GetUploadChainQualityRectify() []*UploadChainQualityRectify {
	if x != nil {
		return x.UploadChainQualityRectify
	}
	return nil
}

type UploadChainQualityRectify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType       *UploadChainType       `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	QualityInspectionCode string                 `protobuf:"bytes,2,opt,name=qualityInspectionCode,proto3" json:"qualityInspectionCode"`
	QualityStatus         string                 `protobuf:"bytes,3,opt,name=qualityStatus,proto3" json:"qualityStatus"`
	RectifyDeadline       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=rectifyDeadline,proto3" json:"rectifyDeadline"`
	RectifyDeadlineWarn   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=rectifyDeadlineWarn,proto3" json:"rectifyDeadlineWarn"`
	RectifyDate           *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=rectifyDate,proto3" json:"rectifyDate"`
	RectifyPerson         string                 `protobuf:"bytes,7,opt,name=rectifyPerson,proto3" json:"rectifyPerson"`
	RectifyDesc           string                 `protobuf:"bytes,8,opt,name=rectifyDesc,proto3" json:"rectifyDesc"`
	UploadDocumnet        []*UploadDocumentInfo  `protobuf:"bytes,9,rep,name=uploadDocumnet,proto3" json:"uploadDocumnet"`
}

func (x *UploadChainQualityRectify) Reset() {
	*x = UploadChainQualityRectify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainQualityRectify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainQualityRectify) ProtoMessage() {}

func (x *UploadChainQualityRectify) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainQualityRectify.ProtoReflect.Descriptor instead.
func (*UploadChainQualityRectify) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{17}
}

func (x *UploadChainQualityRectify) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainQualityRectify) GetQualityInspectionCode() string {
	if x != nil {
		return x.QualityInspectionCode
	}
	return ""
}

func (x *UploadChainQualityRectify) GetQualityStatus() string {
	if x != nil {
		return x.QualityStatus
	}
	return ""
}

func (x *UploadChainQualityRectify) GetRectifyDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDeadline
	}
	return nil
}

func (x *UploadChainQualityRectify) GetRectifyDeadlineWarn() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDeadlineWarn
	}
	return nil
}

func (x *UploadChainQualityRectify) GetRectifyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RectifyDate
	}
	return nil
}

func (x *UploadChainQualityRectify) GetRectifyPerson() string {
	if x != nil {
		return x.RectifyPerson
	}
	return ""
}

func (x *UploadChainQualityRectify) GetRectifyDesc() string {
	if x != nil {
		return x.RectifyDesc
	}
	return ""
}

func (x *UploadChainQualityRectify) GetUploadDocumnet() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocumnet
	}
	return nil
}

type UploadChainQualityReviews struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainQualityReview []*UploadChainQualityReview `protobuf:"bytes,1,rep,name=UploadChainQualityReview,proto3" json:"UploadChainQualityReview"`
}

func (x *UploadChainQualityReviews) Reset() {
	*x = UploadChainQualityReviews{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainQualityReviews) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainQualityReviews) ProtoMessage() {}

func (x *UploadChainQualityReviews) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainQualityReviews.ProtoReflect.Descriptor instead.
func (*UploadChainQualityReviews) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{18}
}

func (x *UploadChainQualityReviews) GetUploadChainQualityReview() []*UploadChainQualityReview {
	if x != nil {
		return x.UploadChainQualityReview
	}
	return nil
}

type UploadChainQualityReview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType       *UploadChainType       `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	QualityInspectionCode string                 `protobuf:"bytes,2,opt,name=qualityInspectionCode,proto3" json:"qualityInspectionCode"`
	QualityStatus         string                 `protobuf:"bytes,3,opt,name=qualityStatus,proto3" json:"qualityStatus"`
	ReviewDate            *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=reviewDate,proto3" json:"reviewDate"`
	ReviewPerson          string                 `protobuf:"bytes,5,opt,name=reviewPerson,proto3" json:"reviewPerson"`
	ReviewDesc            string                 `protobuf:"bytes,6,opt,name=reviewDesc,proto3" json:"reviewDesc"`
	ReviewBy              int64                  `protobuf:"varint,7,opt,name=reviewBy,proto3" json:"reviewBy"`
	UploadDocumnet        []*UploadDocumentInfo  `protobuf:"bytes,8,rep,name=uploadDocumnet,proto3" json:"uploadDocumnet"`
}

func (x *UploadChainQualityReview) Reset() {
	*x = UploadChainQualityReview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainQualityReview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainQualityReview) ProtoMessage() {}

func (x *UploadChainQualityReview) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainQualityReview.ProtoReflect.Descriptor instead.
func (*UploadChainQualityReview) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{19}
}

func (x *UploadChainQualityReview) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainQualityReview) GetQualityInspectionCode() string {
	if x != nil {
		return x.QualityInspectionCode
	}
	return ""
}

func (x *UploadChainQualityReview) GetQualityStatus() string {
	if x != nil {
		return x.QualityStatus
	}
	return ""
}

func (x *UploadChainQualityReview) GetReviewDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReviewDate
	}
	return nil
}

func (x *UploadChainQualityReview) GetReviewPerson() string {
	if x != nil {
		return x.ReviewPerson
	}
	return ""
}

func (x *UploadChainQualityReview) GetReviewDesc() string {
	if x != nil {
		return x.ReviewDesc
	}
	return ""
}

func (x *UploadChainQualityReview) GetReviewBy() int64 {
	if x != nil {
		return x.ReviewBy
	}
	return 0
}

func (x *UploadChainQualityReview) GetUploadDocumnet() []*UploadDocumentInfo {
	if x != nil {
		return x.UploadDocumnet
	}
	return nil
}

type UploadChainProcessApplies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainProcessApply []*UploadChainProcessApply `protobuf:"bytes,1,rep,name=uploadChainProcessApply,proto3" json:"uploadChainProcessApply"`
}

func (x *UploadChainProcessApplies) Reset() {
	*x = UploadChainProcessApplies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainProcessApplies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainProcessApplies) ProtoMessage() {}

func (x *UploadChainProcessApplies) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainProcessApplies.ProtoReflect.Descriptor instead.
func (*UploadChainProcessApplies) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{20}
}

func (x *UploadChainProcessApplies) GetUploadChainProcessApply() []*UploadChainProcessApply {
	if x != nil {
		return x.UploadChainProcessApply
	}
	return nil
}

type UploadChainProcessApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType       *UploadChainType       `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	ProjectName           string                 `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName"`
	ConstructionName      string                 `protobuf:"bytes,3,opt,name=constructionName,proto3" json:"constructionName"`
	GovermentName         string                 `protobuf:"bytes,4,opt,name=govermentName,proto3" json:"govermentName"`
	PhaseName             string                 `protobuf:"bytes,5,opt,name=phaseName,proto3" json:"phaseName"`
	ProcessName           string                 `protobuf:"bytes,6,opt,name=processName,proto3" json:"processName"`
	ApplyDate             *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=applyDate,proto3" json:"applyDate"`
	IsParallel            int64                  `protobuf:"varint,8,opt,name=isParallel,proto3" json:"isParallel"`
	EstimatedApprovalDays int64                  `protobuf:"varint,9,opt,name=estimatedApprovalDays,proto3" json:"estimatedApprovalDays"`
	UploadDocumnet        []*DocumentInfoApply   `protobuf:"bytes,10,rep,name=uploadDocumnet,proto3" json:"uploadDocumnet"`
}

func (x *UploadChainProcessApply) Reset() {
	*x = UploadChainProcessApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainProcessApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainProcessApply) ProtoMessage() {}

func (x *UploadChainProcessApply) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainProcessApply.ProtoReflect.Descriptor instead.
func (*UploadChainProcessApply) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{21}
}

func (x *UploadChainProcessApply) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainProcessApply) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *UploadChainProcessApply) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *UploadChainProcessApply) GetGovermentName() string {
	if x != nil {
		return x.GovermentName
	}
	return ""
}

func (x *UploadChainProcessApply) GetPhaseName() string {
	if x != nil {
		return x.PhaseName
	}
	return ""
}

func (x *UploadChainProcessApply) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *UploadChainProcessApply) GetApplyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyDate
	}
	return nil
}

func (x *UploadChainProcessApply) GetIsParallel() int64 {
	if x != nil {
		return x.IsParallel
	}
	return 0
}

func (x *UploadChainProcessApply) GetEstimatedApprovalDays() int64 {
	if x != nil {
		return x.EstimatedApprovalDays
	}
	return 0
}

func (x *UploadChainProcessApply) GetUploadDocumnet() []*DocumentInfoApply {
	if x != nil {
		return x.UploadDocumnet
	}
	return nil
}

type DocumentInfoApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName  string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName"`
	UploadUrl string `protobuf:"bytes,2,opt,name=uploadUrl,proto3" json:"uploadUrl"`
}

func (x *DocumentInfoApply) Reset() {
	*x = DocumentInfoApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentInfoApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentInfoApply) ProtoMessage() {}

func (x *DocumentInfoApply) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentInfoApply.ProtoReflect.Descriptor instead.
func (*DocumentInfoApply) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{22}
}

func (x *DocumentInfoApply) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *DocumentInfoApply) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

type UploadChainProcessApproves struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainProcessApprove []*UploadChainProcessApprove `protobuf:"bytes,1,rep,name=uploadChainProcessApprove,proto3" json:"uploadChainProcessApprove"`
}

func (x *UploadChainProcessApproves) Reset() {
	*x = UploadChainProcessApproves{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainProcessApproves) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainProcessApproves) ProtoMessage() {}

func (x *UploadChainProcessApproves) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainProcessApproves.ProtoReflect.Descriptor instead.
func (*UploadChainProcessApproves) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{23}
}

func (x *UploadChainProcessApproves) GetUploadChainProcessApprove() []*UploadChainProcessApprove {
	if x != nil {
		return x.UploadChainProcessApprove
	}
	return nil
}

type UploadChainProcessApprove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType       *UploadChainType       `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	ProjectName           string                 `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName"`
	ConstructionName      string                 `protobuf:"bytes,3,opt,name=constructionName,proto3" json:"constructionName"`
	GovermentName         string                 `protobuf:"bytes,4,opt,name=govermentName,proto3" json:"govermentName"`
	PhaseName             string                 `protobuf:"bytes,5,opt,name=phaseName,proto3" json:"phaseName"`
	ProcessName           string                 `protobuf:"bytes,6,opt,name=processName,proto3" json:"processName"`
	IsParallel            int64                  `protobuf:"varint,7,opt,name=isParallel,proto3" json:"isParallel"`
	EstimatedApprovalDays int64                  `protobuf:"varint,8,opt,name=estimatedApprovalDays,proto3" json:"estimatedApprovalDays"`
	ApplyDate             *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=applyDate,proto3" json:"applyDate"`
	ApproveAt             *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=approveAt,proto3" json:"approveAt"`
	ApproveDesc           string                 `protobuf:"bytes,11,opt,name=approveDesc,proto3" json:"approveDesc"`
	UploadDocumnetApply   []*DocumentInfoApply   `protobuf:"bytes,12,rep,name=uploadDocumnetApply,proto3" json:"uploadDocumnetApply"`
	UploadDocumnetApprove []*DocumentInfoApprove `protobuf:"bytes,13,rep,name=uploadDocumnetApprove,proto3" json:"uploadDocumnetApprove"`
}

func (x *UploadChainProcessApprove) Reset() {
	*x = UploadChainProcessApprove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainProcessApprove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainProcessApprove) ProtoMessage() {}

func (x *UploadChainProcessApprove) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainProcessApprove.ProtoReflect.Descriptor instead.
func (*UploadChainProcessApprove) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{24}
}

func (x *UploadChainProcessApprove) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainProcessApprove) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *UploadChainProcessApprove) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *UploadChainProcessApprove) GetGovermentName() string {
	if x != nil {
		return x.GovermentName
	}
	return ""
}

func (x *UploadChainProcessApprove) GetPhaseName() string {
	if x != nil {
		return x.PhaseName
	}
	return ""
}

func (x *UploadChainProcessApprove) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *UploadChainProcessApprove) GetIsParallel() int64 {
	if x != nil {
		return x.IsParallel
	}
	return 0
}

func (x *UploadChainProcessApprove) GetEstimatedApprovalDays() int64 {
	if x != nil {
		return x.EstimatedApprovalDays
	}
	return 0
}

func (x *UploadChainProcessApprove) GetApplyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyDate
	}
	return nil
}

func (x *UploadChainProcessApprove) GetApproveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveAt
	}
	return nil
}

func (x *UploadChainProcessApprove) GetApproveDesc() string {
	if x != nil {
		return x.ApproveDesc
	}
	return ""
}

func (x *UploadChainProcessApprove) GetUploadDocumnetApply() []*DocumentInfoApply {
	if x != nil {
		return x.UploadDocumnetApply
	}
	return nil
}

func (x *UploadChainProcessApprove) GetUploadDocumnetApprove() []*DocumentInfoApprove {
	if x != nil {
		return x.UploadDocumnetApprove
	}
	return nil
}

type DocumentInfoApprove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName  string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName"`
	UploadUrl string `protobuf:"bytes,2,opt,name=uploadUrl,proto3" json:"uploadUrl"`
}

func (x *DocumentInfoApprove) Reset() {
	*x = DocumentInfoApprove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentInfoApprove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentInfoApprove) ProtoMessage() {}

func (x *DocumentInfoApprove) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentInfoApprove.ProtoReflect.Descriptor instead.
func (*DocumentInfoApprove) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{25}
}

func (x *DocumentInfoApprove) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *DocumentInfoApprove) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

type UploadChainContracts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChaincontract []*UploadChaincontract `protobuf:"bytes,1,rep,name=uploadChaincontract,proto3" json:"uploadChaincontract"`
}

func (x *UploadChainContracts) Reset() {
	*x = UploadChainContracts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainContracts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainContracts) ProtoMessage() {}

func (x *UploadChainContracts) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainContracts.ProtoReflect.Descriptor instead.
func (*UploadChainContracts) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{26}
}

func (x *UploadChainContracts) GetUploadChaincontract() []*UploadChaincontract {
	if x != nil {
		return x.UploadChaincontract
	}
	return nil
}

type UploadChaincontract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType    *UploadChainType       `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	ContractCode       string                 `protobuf:"bytes,2,opt,name=contractCode,proto3" json:"contractCode"`
	ContractName       string                 `protobuf:"bytes,3,opt,name=contractName,proto3" json:"contractName"`
	ContractType       string                 `protobuf:"bytes,4,opt,name=contractType,proto3" json:"contractType"`
	ProjectName        string                 `protobuf:"bytes,5,opt,name=projectName,proto3" json:"projectName"`
	ConstructionName   string                 `protobuf:"bytes,6,opt,name=constructionName,proto3" json:"constructionName"`
	ToOrganizationName string                 `protobuf:"bytes,7,opt,name=toOrganizationName,proto3" json:"toOrganizationName"`
	ContractAmount     int64                  `protobuf:"varint,8,opt,name=contractAmount,proto3" json:"contractAmount"`
	StartAt            *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=start_at,json=startAt,proto3" json:"start_at"`
	EndAt              *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=end_at,json=endAt,proto3" json:"end_at"`
	Memo               string                 `protobuf:"bytes,11,opt,name=memo,proto3" json:"memo"`
	UploadDocumnet     []*DocumentInfo        `protobuf:"bytes,12,rep,name=uploadDocumnet,proto3" json:"uploadDocumnet"`
}

func (x *UploadChaincontract) Reset() {
	*x = UploadChaincontract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChaincontract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChaincontract) ProtoMessage() {}

func (x *UploadChaincontract) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChaincontract.ProtoReflect.Descriptor instead.
func (*UploadChaincontract) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{27}
}

func (x *UploadChaincontract) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChaincontract) GetContractCode() string {
	if x != nil {
		return x.ContractCode
	}
	return ""
}

func (x *UploadChaincontract) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *UploadChaincontract) GetContractType() string {
	if x != nil {
		return x.ContractType
	}
	return ""
}

func (x *UploadChaincontract) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *UploadChaincontract) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *UploadChaincontract) GetToOrganizationName() string {
	if x != nil {
		return x.ToOrganizationName
	}
	return ""
}

func (x *UploadChaincontract) GetContractAmount() int64 {
	if x != nil {
		return x.ContractAmount
	}
	return 0
}

func (x *UploadChaincontract) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *UploadChaincontract) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *UploadChaincontract) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UploadChaincontract) GetUploadDocumnet() []*DocumentInfo {
	if x != nil {
		return x.UploadDocumnet
	}
	return nil
}

type DocumentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName  string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName"`
	UploadUrl string `protobuf:"bytes,2,opt,name=uploadUrl,proto3" json:"uploadUrl"`
}

func (x *DocumentInfo) Reset() {
	*x = DocumentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentInfo) ProtoMessage() {}

func (x *DocumentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentInfo.ProtoReflect.Descriptor instead.
func (*DocumentInfo) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{28}
}

func (x *DocumentInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *DocumentInfo) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

type UploadChainInvoices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainInvoice []*UploadChainInvoice `protobuf:"bytes,1,rep,name=uploadChainInvoice,proto3" json:"uploadChainInvoice"`
}

func (x *UploadChainInvoices) Reset() {
	*x = UploadChainInvoices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainInvoices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainInvoices) ProtoMessage() {}

func (x *UploadChainInvoices) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainInvoices.ProtoReflect.Descriptor instead.
func (*UploadChainInvoices) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{29}
}

func (x *UploadChainInvoices) GetUploadChainInvoice() []*UploadChainInvoice {
	if x != nil {
		return x.UploadChainInvoice
	}
	return nil
}

type UploadChainInvoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType      *UploadChainType       `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	ProjectName          string                 `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName"`
	ContractId           int64                  `protobuf:"varint,3,opt,name=contractId,proto3" json:"contractId"`
	FromOrganizationName string                 `protobuf:"bytes,4,opt,name=fromOrganizationName,proto3" json:"fromOrganizationName"`
	ConstructionName     string                 `protobuf:"bytes,5,opt,name=constructionName,proto3" json:"constructionName"`
	InvoiceTypeDesc      string                 `protobuf:"bytes,6,opt,name=invoiceTypeDesc,proto3" json:"invoiceTypeDesc"`
	InvoiceNo            string                 `protobuf:"bytes,7,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode          string                 `protobuf:"bytes,8,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	InvoiceMd5           string                 `protobuf:"bytes,9,opt,name=invoiceMd5,proto3" json:"invoiceMd5"`
	InvoiceFilename      string                 `protobuf:"bytes,10,opt,name=invoiceFilename,proto3" json:"invoiceFilename"`
	InvoiceUrl           string                 `protobuf:"bytes,11,opt,name=invoiceUrl,proto3" json:"invoiceUrl"`
	InvoiceAmoumt        int64                  `protobuf:"varint,12,opt,name=invoiceAmoumt,proto3" json:"invoiceAmoumt"`
	InvoiceTax           int64                  `protobuf:"varint,13,opt,name=invoiceTax,proto3" json:"invoiceTax"`
	InvoiceCheckCode     string                 `protobuf:"bytes,14,opt,name=invoiceCheckCode,proto3" json:"invoiceCheckCode"`
	InvoicedDate         *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=invoicedDate,proto3" json:"invoicedDate"`
	InvoiceDesc          string                 `protobuf:"bytes,16,opt,name=invoiceDesc,proto3" json:"invoiceDesc"`
	Memo                 string                 `protobuf:"bytes,17,opt,name=memo,proto3" json:"memo"`
}

func (x *UploadChainInvoice) Reset() {
	*x = UploadChainInvoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainInvoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainInvoice) ProtoMessage() {}

func (x *UploadChainInvoice) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainInvoice.ProtoReflect.Descriptor instead.
func (*UploadChainInvoice) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{30}
}

func (x *UploadChainInvoice) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainInvoice) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *UploadChainInvoice) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *UploadChainInvoice) GetFromOrganizationName() string {
	if x != nil {
		return x.FromOrganizationName
	}
	return ""
}

func (x *UploadChainInvoice) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *UploadChainInvoice) GetInvoiceTypeDesc() string {
	if x != nil {
		return x.InvoiceTypeDesc
	}
	return ""
}

func (x *UploadChainInvoice) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *UploadChainInvoice) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *UploadChainInvoice) GetInvoiceMd5() string {
	if x != nil {
		return x.InvoiceMd5
	}
	return ""
}

func (x *UploadChainInvoice) GetInvoiceFilename() string {
	if x != nil {
		return x.InvoiceFilename
	}
	return ""
}

func (x *UploadChainInvoice) GetInvoiceUrl() string {
	if x != nil {
		return x.InvoiceUrl
	}
	return ""
}

func (x *UploadChainInvoice) GetInvoiceAmoumt() int64 {
	if x != nil {
		return x.InvoiceAmoumt
	}
	return 0
}

func (x *UploadChainInvoice) GetInvoiceTax() int64 {
	if x != nil {
		return x.InvoiceTax
	}
	return 0
}

func (x *UploadChainInvoice) GetInvoiceCheckCode() string {
	if x != nil {
		return x.InvoiceCheckCode
	}
	return ""
}

func (x *UploadChainInvoice) GetInvoicedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoicedDate
	}
	return nil
}

func (x *UploadChainInvoice) GetInvoiceDesc() string {
	if x != nil {
		return x.InvoiceDesc
	}
	return ""
}

func (x *UploadChainInvoice) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type UploadChainInvoiceReceiveds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainInvoiceReceived []*UploadChainInvoiceReceived `protobuf:"bytes,1,rep,name=uploadChainInvoiceReceived,proto3" json:"uploadChainInvoiceReceived"`
}

func (x *UploadChainInvoiceReceiveds) Reset() {
	*x = UploadChainInvoiceReceiveds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainInvoiceReceiveds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainInvoiceReceiveds) ProtoMessage() {}

func (x *UploadChainInvoiceReceiveds) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainInvoiceReceiveds.ProtoReflect.Descriptor instead.
func (*UploadChainInvoiceReceiveds) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{31}
}

func (x *UploadChainInvoiceReceiveds) GetUploadChainInvoiceReceived() []*UploadChainInvoiceReceived {
	if x != nil {
		return x.UploadChainInvoiceReceived
	}
	return nil
}

type UploadChainInvoiceReceived struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType      *UploadChainType       `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	ProjectName          string                 `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName"`
	ContractId           int64                  `protobuf:"varint,3,opt,name=contractId,proto3" json:"contractId"`
	FromOrganizationName string                 `protobuf:"bytes,4,opt,name=fromOrganizationName,proto3" json:"fromOrganizationName"`
	ConstructionName     string                 `protobuf:"bytes,5,opt,name=constructionName,proto3" json:"constructionName"`
	InvoiceTypeDesc      string                 `protobuf:"bytes,6,opt,name=invoiceTypeDesc,proto3" json:"invoiceTypeDesc"`
	InvoiceNo            string                 `protobuf:"bytes,7,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode          string                 `protobuf:"bytes,8,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	InvoiceMd5           string                 `protobuf:"bytes,9,opt,name=invoiceMd5,proto3" json:"invoiceMd5"`
	InvoiceFilename      string                 `protobuf:"bytes,10,opt,name=invoiceFilename,proto3" json:"invoiceFilename"`
	InvoiceUrl           string                 `protobuf:"bytes,11,opt,name=invoiceUrl,proto3" json:"invoiceUrl"`
	InvoiceAmoumt        int64                  `protobuf:"varint,12,opt,name=invoiceAmoumt,proto3" json:"invoiceAmoumt"`
	InvoiceTax           int64                  `protobuf:"varint,13,opt,name=invoiceTax,proto3" json:"invoiceTax"`
	InvoiceCheckCode     string                 `protobuf:"bytes,14,opt,name=invoiceCheckCode,proto3" json:"invoiceCheckCode"`
	InvoicedDate         *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=invoicedDate,proto3" json:"invoicedDate"`
	InvoiceDesc          string                 `protobuf:"bytes,16,opt,name=invoiceDesc,proto3" json:"invoiceDesc"`
	Memo                 string                 `protobuf:"bytes,17,opt,name=memo,proto3" json:"memo"`
	ReceiveDesc          string                 `protobuf:"bytes,18,opt,name=receiveDesc,proto3" json:"receiveDesc"`
	ReceiveName          int64                  `protobuf:"varint,19,opt,name=receiveName,proto3" json:"receiveName"`
	ReceiveAt            *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=receiveAt,proto3" json:"receiveAt"`
}

func (x *UploadChainInvoiceReceived) Reset() {
	*x = UploadChainInvoiceReceived{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainInvoiceReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainInvoiceReceived) ProtoMessage() {}

func (x *UploadChainInvoiceReceived) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainInvoiceReceived.ProtoReflect.Descriptor instead.
func (*UploadChainInvoiceReceived) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{32}
}

func (x *UploadChainInvoiceReceived) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainInvoiceReceived) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *UploadChainInvoiceReceived) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *UploadChainInvoiceReceived) GetFromOrganizationName() string {
	if x != nil {
		return x.FromOrganizationName
	}
	return ""
}

func (x *UploadChainInvoiceReceived) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *UploadChainInvoiceReceived) GetInvoiceTypeDesc() string {
	if x != nil {
		return x.InvoiceTypeDesc
	}
	return ""
}

func (x *UploadChainInvoiceReceived) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *UploadChainInvoiceReceived) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *UploadChainInvoiceReceived) GetInvoiceMd5() string {
	if x != nil {
		return x.InvoiceMd5
	}
	return ""
}

func (x *UploadChainInvoiceReceived) GetInvoiceFilename() string {
	if x != nil {
		return x.InvoiceFilename
	}
	return ""
}

func (x *UploadChainInvoiceReceived) GetInvoiceUrl() string {
	if x != nil {
		return x.InvoiceUrl
	}
	return ""
}

func (x *UploadChainInvoiceReceived) GetInvoiceAmoumt() int64 {
	if x != nil {
		return x.InvoiceAmoumt
	}
	return 0
}

func (x *UploadChainInvoiceReceived) GetInvoiceTax() int64 {
	if x != nil {
		return x.InvoiceTax
	}
	return 0
}

func (x *UploadChainInvoiceReceived) GetInvoiceCheckCode() string {
	if x != nil {
		return x.InvoiceCheckCode
	}
	return ""
}

func (x *UploadChainInvoiceReceived) GetInvoicedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoicedDate
	}
	return nil
}

func (x *UploadChainInvoiceReceived) GetInvoiceDesc() string {
	if x != nil {
		return x.InvoiceDesc
	}
	return ""
}

func (x *UploadChainInvoiceReceived) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UploadChainInvoiceReceived) GetReceiveDesc() string {
	if x != nil {
		return x.ReceiveDesc
	}
	return ""
}

func (x *UploadChainInvoiceReceived) GetReceiveName() int64 {
	if x != nil {
		return x.ReceiveName
	}
	return 0
}

func (x *UploadChainInvoiceReceived) GetReceiveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveAt
	}
	return nil
}

type UploadChainInvoicePaids struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainInvoicePaid []*UploadChainInvoicePaid `protobuf:"bytes,1,rep,name=uploadChainInvoicePaid,proto3" json:"uploadChainInvoicePaid"`
}

func (x *UploadChainInvoicePaids) Reset() {
	*x = UploadChainInvoicePaids{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainInvoicePaids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainInvoicePaids) ProtoMessage() {}

func (x *UploadChainInvoicePaids) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainInvoicePaids.ProtoReflect.Descriptor instead.
func (*UploadChainInvoicePaids) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{33}
}

func (x *UploadChainInvoicePaids) GetUploadChainInvoicePaid() []*UploadChainInvoicePaid {
	if x != nil {
		return x.UploadChainInvoicePaid
	}
	return nil
}

type UploadChainInvoicePaid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType        *UploadChainType       `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	ProjectName            string                 `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName"`
	ContractId             int64                  `protobuf:"varint,3,opt,name=contractId,proto3" json:"contractId"`
	FromOrganizationName   string                 `protobuf:"bytes,4,opt,name=fromOrganizationName,proto3" json:"fromOrganizationName"`
	ConstructionName       string                 `protobuf:"bytes,5,opt,name=constructionName,proto3" json:"constructionName"`
	InvoiceTypeDesc        string                 `protobuf:"bytes,6,opt,name=invoiceTypeDesc,proto3" json:"invoiceTypeDesc"`
	InvoiceNo              string                 `protobuf:"bytes,7,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode            string                 `protobuf:"bytes,8,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	InvoiceMd5             string                 `protobuf:"bytes,9,opt,name=invoiceMd5,proto3" json:"invoiceMd5"`
	InvoiceFilename        string                 `protobuf:"bytes,10,opt,name=invoiceFilename,proto3" json:"invoiceFilename"`
	InvoiceUrl             string                 `protobuf:"bytes,11,opt,name=invoiceUrl,proto3" json:"invoiceUrl"`
	InvoiceAmoumt          int64                  `protobuf:"varint,12,opt,name=invoiceAmoumt,proto3" json:"invoiceAmoumt"`
	InvoiceTax             int64                  `protobuf:"varint,13,opt,name=invoiceTax,proto3" json:"invoiceTax"`
	InvoiceCheckCode       string                 `protobuf:"bytes,14,opt,name=invoiceCheckCode,proto3" json:"invoiceCheckCode"`
	InvoicedDate           *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=invoicedDate,proto3" json:"invoicedDate"`
	InvoiceDesc            string                 `protobuf:"bytes,16,opt,name=invoiceDesc,proto3" json:"invoiceDesc"`
	Memo                   string                 `protobuf:"bytes,17,opt,name=memo,proto3" json:"memo"`
	PayDesc                string                 `protobuf:"bytes,18,opt,name=payDesc,proto3" json:"payDesc"`
	PayBy                  int64                  `protobuf:"varint,19,opt,name=payBy,proto3" json:"payBy"`
	PayAt                  *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=payAt,proto3" json:"payAt"`
	PaymentVoucherFilename string                 `protobuf:"bytes,21,opt,name=paymentVoucherFilename,proto3" json:"paymentVoucherFilename"`
	PaymentVoucherUrl      string                 `protobuf:"bytes,22,opt,name=paymentVoucherUrl,proto3" json:"paymentVoucherUrl"`
}

func (x *UploadChainInvoicePaid) Reset() {
	*x = UploadChainInvoicePaid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainInvoicePaid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainInvoicePaid) ProtoMessage() {}

func (x *UploadChainInvoicePaid) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainInvoicePaid.ProtoReflect.Descriptor instead.
func (*UploadChainInvoicePaid) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{34}
}

func (x *UploadChainInvoicePaid) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainInvoicePaid) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *UploadChainInvoicePaid) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *UploadChainInvoicePaid) GetFromOrganizationName() string {
	if x != nil {
		return x.FromOrganizationName
	}
	return ""
}

func (x *UploadChainInvoicePaid) GetConstructionName() string {
	if x != nil {
		return x.ConstructionName
	}
	return ""
}

func (x *UploadChainInvoicePaid) GetInvoiceTypeDesc() string {
	if x != nil {
		return x.InvoiceTypeDesc
	}
	return ""
}

func (x *UploadChainInvoicePaid) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *UploadChainInvoicePaid) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *UploadChainInvoicePaid) GetInvoiceMd5() string {
	if x != nil {
		return x.InvoiceMd5
	}
	return ""
}

func (x *UploadChainInvoicePaid) GetInvoiceFilename() string {
	if x != nil {
		return x.InvoiceFilename
	}
	return ""
}

func (x *UploadChainInvoicePaid) GetInvoiceUrl() string {
	if x != nil {
		return x.InvoiceUrl
	}
	return ""
}

func (x *UploadChainInvoicePaid) GetInvoiceAmoumt() int64 {
	if x != nil {
		return x.InvoiceAmoumt
	}
	return 0
}

func (x *UploadChainInvoicePaid) GetInvoiceTax() int64 {
	if x != nil {
		return x.InvoiceTax
	}
	return 0
}

func (x *UploadChainInvoicePaid) GetInvoiceCheckCode() string {
	if x != nil {
		return x.InvoiceCheckCode
	}
	return ""
}

func (x *UploadChainInvoicePaid) GetInvoicedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoicedDate
	}
	return nil
}

func (x *UploadChainInvoicePaid) GetInvoiceDesc() string {
	if x != nil {
		return x.InvoiceDesc
	}
	return ""
}

func (x *UploadChainInvoicePaid) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UploadChainInvoicePaid) GetPayDesc() string {
	if x != nil {
		return x.PayDesc
	}
	return ""
}

func (x *UploadChainInvoicePaid) GetPayBy() int64 {
	if x != nil {
		return x.PayBy
	}
	return 0
}

func (x *UploadChainInvoicePaid) GetPayAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PayAt
	}
	return nil
}

func (x *UploadChainInvoicePaid) GetPaymentVoucherFilename() string {
	if x != nil {
		return x.PaymentVoucherFilename
	}
	return ""
}

func (x *UploadChainInvoicePaid) GetPaymentVoucherUrl() string {
	if x != nil {
		return x.PaymentVoucherUrl
	}
	return ""
}

var File_BcAndBankService_proto protoreflect.FileDescriptor

var file_BcAndBankService_proto_rawDesc = []byte{
	0x0a, 0x16, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34, 0x0a, 0x0c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x78, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x78, 0x49, 0x44, 0x12,
	0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65,
	0x79, 0x22, 0x58, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x78, 0x49, 0x44, 0x52, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x52, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0x20, 0x0a, 0x0a, 0x42,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x21, 0x0a,
	0x0b, 0x42, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x22, 0xeb, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7f,
	0x0a, 0x18, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x63, 0x0a, 0x17, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x42, 0x63,
	0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xc0, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x22, 0x4e, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55,
	0x72, 0x6c, 0x22, 0x6b, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x12, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x12, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0xdb, 0x06, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4b, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a,
	0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x65, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x41,
	0x72, 0x65, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12,
	0x4c, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x6e, 0x65,
	0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x6e, 0x65, 0x74, 0x22, 0x7f, 0x0a,
	0x18, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x63, 0x0a, 0x17, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x42, 0x63, 0x41,
	0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x17, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0x80,
	0x05, 0x0a, 0x17, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x4b, 0x0a, 0x0f, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a,
	0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x0f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x12, 0x4c, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x6e, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x42, 0x63,
	0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x6e, 0x65,
	0x74, 0x22, 0x87, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x73,
	0x12, 0x69, 0x0a, 0x19, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x52, 0x19, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x22, 0xa4, 0x04, 0x0a, 0x19,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x0f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x75, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x75,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x4c, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x6e, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x42,
	0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x6e,
	0x65, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x72, 0x0a, 0x1c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x42, 0x63, 0x41,
	0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf9, 0x07, 0x0a, 0x1c, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x72,
	0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x72,
	0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x50, 0x6c,
	0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72,
	0x65, 0x61, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x74, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x65,
	0x73, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x4c, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x6e, 0x65, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x6e, 0x65, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x19, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63,
	0x74, 0x69, 0x66, 0x79, 0x52, 0x19, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x22,
	0xac, 0x04, 0x0a, 0x19, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x12, 0x4b, 0x0a,
	0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61,
	0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66,
	0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4c, 0x0a, 0x13,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57,
	0x61, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x66, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x4c, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x6e,
	0x65, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x6e, 0x65, 0x74, 0x22, 0x83,
	0x01, 0x0a, 0x19, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x66, 0x0a, 0x18,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x18, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x22, 0xad, 0x03, 0x0a, 0x18, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x4b, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x42, 0x63, 0x41,
	0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34,
	0x0a, 0x15, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x42, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x42, 0x79, 0x12, 0x4c, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x6e, 0x65, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x6e, 0x65, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x12, 0x63, 0x0a, 0x17, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x17,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x22, 0xf7, 0x03, 0x0a, 0x17, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x4b, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x42,
	0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x12, 0x34,
	0x0a, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x44, 0x61, 0x79, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x6e, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x42,
	0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x6e, 0x65,
	0x74, 0x22, 0x4d, 0x0a, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c,
	0x22, 0x87, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x73, 0x12,
	0x69, 0x0a, 0x19, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52,
	0x19, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x22, 0xbc, 0x05, 0x0a, 0x19, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f, 0x76, 0x65,
	0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61,
	0x79, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x12,
	0x38, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x55, 0x0a, 0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x6e, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x6e, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x5b, 0x0a, 0x15,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x6e, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x42, 0x63,
	0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x52, 0x15, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x6e,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x22, 0x4f, 0x0a, 0x13, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22, 0x6f, 0x0a, 0x14, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x12, 0x57, 0x0a, 0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0xba, 0x04, 0x0a, 0x13,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x4b, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x42,
	0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x6e, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x12, 0x46, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x6e,
	0x65, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x6e, 0x65, 0x74, 0x22, 0x48, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55,
	0x72, 0x6c, 0x22, 0x6b, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x12, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x12, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x22,
	0xbf, 0x05, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x64, 0x35, 0x12,
	0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6d, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6d, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x61, 0x78, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x61, 0x78, 0x12,
	0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d,
	0x6f, 0x22, 0x8b, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x73, 0x12, 0x6c, 0x0a, 0x1a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x52, 0x1a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x22,
	0xc5, 0x06, 0x0a, 0x1a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x4b,
	0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x14, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x72, 0x6f,
	0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6d, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6d, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x54, 0x61, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x54, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x22, 0x7b, 0x0a, 0x17, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x61, 0x69,
	0x64, 0x73, 0x12, 0x60, 0x0a, 0x16, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x61, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x61, 0x69, 0x64, 0x52, 0x16, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x50, 0x61, 0x69, 0x64, 0x22, 0x8b, 0x07, 0x0a, 0x16, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x61, 0x69, 0x64, 0x12,
	0x4b, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x14, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x72,
	0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6d, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6d, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x54, 0x61, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x44, 0x65, 0x73, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x42, 0x79, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x79, 0x42, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61,
	0x79, 0x41, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x70, 0x61, 0x79, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x16,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x46, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x55,
	0x72, 0x6c, 0x32, 0xf4, 0x0a, 0x0a, 0x10, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x42, 0x63, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x42, 0x79, 0x54, 0x78, 0x49, 0x44, 0x12, 0x1e, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x78, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x78, 0x49, 0x44, 0x52, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x15, 0x42, 0x63, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2a, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1d, 0x2e,
	0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x42, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x10,
	0x42, 0x63, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x25, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x1a, 0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x15, 0x42, 0x63, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12,
	0x2a, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x1a, 0x1d, 0x2e, 0x42, 0x63,
	0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x17, 0x42, 0x63,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x2c, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x73, 0x1a, 0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x12, 0x6c, 0x0a, 0x1a, 0x42, 0x63, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2f, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x12, 0x68, 0x0a, 0x18, 0x42, 0x63, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x42,
	0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x1a, 0x1d, 0x2e, 0x42, 0x63,
	0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x16, 0x42, 0x63,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x12, 0x2b, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x1a, 0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x12, 0x62, 0x0a, 0x14, 0x42, 0x63, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x1a, 0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x16, 0x42, 0x63, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x2c,
	0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x73, 0x1a, 0x1d, 0x2e, 0x42,
	0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x42, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x10, 0x42,
	0x63, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x26, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x1a, 0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x0f, 0x42, 0x63, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x42, 0x63, 0x41, 0x6e,
	0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73,
	0x1a, 0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x42, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12,
	0x67, 0x0a, 0x17, 0x42, 0x63, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2d, 0x2e, 0x42, 0x63, 0x41,
	0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x73, 0x1a, 0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e,
	0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x13, 0x42, 0x63, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x61, 0x69, 0x64, 0x12,
	0x29, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x61, 0x69, 0x64, 0x73, 0x1a, 0x1d, 0x2e, 0x42, 0x63, 0x41,
	0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x42, 0x2b, 0x5a, 0x29, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x3b, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_BcAndBankService_proto_rawDescOnce sync.Once
	file_BcAndBankService_proto_rawDescData = file_BcAndBankService_proto_rawDesc
)

func file_BcAndBankService_proto_rawDescGZIP() []byte {
	file_BcAndBankService_proto_rawDescOnce.Do(func() {
		file_BcAndBankService_proto_rawDescData = protoimpl.X.CompressGZIP(file_BcAndBankService_proto_rawDescData)
	})
	return file_BcAndBankService_proto_rawDescData
}

var file_BcAndBankService_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_BcAndBankService_proto_goTypes = []interface{}{
	(*QueryTxIDReq)(nil),                  // 0: BcAndBankService.QueryTxIDReq
	(*QueryTxIDRsp)(nil),                  // 1: BcAndBankService.QueryTxIDRsp
	(*BcResponse)(nil),                    // 2: BcAndBankService.BcResponse
	(*BcResponses)(nil),                   // 3: BcAndBankService.BcResponses
	(*UploadChainType)(nil),               // 4: BcAndBankService.UploadChainType
	(*UploadChainOrganizations)(nil),      // 5: BcAndBankService.UploadChainOrganizations
	(*UploadChainOrganization)(nil),       // 6: BcAndBankService.UploadChainOrganization
	(*UploadDocumentInfo)(nil),            // 7: BcAndBankService.UploadDocumentInfo
	(*UploadChainProjects)(nil),           // 8: BcAndBankService.UploadChainProjects
	(*UploadChainProject)(nil),            // 9: BcAndBankService.UploadChainProject
	(*UploadChainProgressPlans)(nil),      // 10: BcAndBankService.UploadChainProgressPlans
	(*UploadChainProgressPlan)(nil),       // 11: BcAndBankService.UploadChainProgressPlan
	(*UploadChainProgressActuals)(nil),    // 12: BcAndBankService.UploadChainProgressActuals
	(*UploadChainProgressActual)(nil),     // 13: BcAndBankService.UploadChainProgressActual
	(*UploadChainQualityInspections)(nil), // 14: BcAndBankService.UploadChainQualityInspections
	(*UploadChainQualityInspection)(nil),  // 15: BcAndBankService.UploadChainQualityInspection
	(*UploadChainQualityRectifies)(nil),   // 16: BcAndBankService.UploadChainQualityRectifies
	(*UploadChainQualityRectify)(nil),     // 17: BcAndBankService.UploadChainQualityRectify
	(*UploadChainQualityReviews)(nil),     // 18: BcAndBankService.UploadChainQualityReviews
	(*UploadChainQualityReview)(nil),      // 19: BcAndBankService.UploadChainQualityReview
	(*UploadChainProcessApplies)(nil),     // 20: BcAndBankService.UploadChainProcessApplies
	(*UploadChainProcessApply)(nil),       // 21: BcAndBankService.UploadChainProcessApply
	(*DocumentInfoApply)(nil),             // 22: BcAndBankService.DocumentInfoApply
	(*UploadChainProcessApproves)(nil),    // 23: BcAndBankService.UploadChainProcessApproves
	(*UploadChainProcessApprove)(nil),     // 24: BcAndBankService.UploadChainProcessApprove
	(*DocumentInfoApprove)(nil),           // 25: BcAndBankService.DocumentInfoApprove
	(*UploadChainContracts)(nil),          // 26: BcAndBankService.UploadChainContracts
	(*UploadChaincontract)(nil),           // 27: BcAndBankService.UploadChaincontract
	(*DocumentInfo)(nil),                  // 28: BcAndBankService.DocumentInfo
	(*UploadChainInvoices)(nil),           // 29: BcAndBankService.UploadChainInvoices
	(*UploadChainInvoice)(nil),            // 30: BcAndBankService.UploadChainInvoice
	(*UploadChainInvoiceReceiveds)(nil),   // 31: BcAndBankService.UploadChainInvoiceReceiveds
	(*UploadChainInvoiceReceived)(nil),    // 32: BcAndBankService.UploadChainInvoiceReceived
	(*UploadChainInvoicePaids)(nil),       // 33: BcAndBankService.UploadChainInvoicePaids
	(*UploadChainInvoicePaid)(nil),        // 34: BcAndBankService.UploadChainInvoicePaid
	(*timestamppb.Timestamp)(nil),         // 35: google.protobuf.Timestamp
}
var file_BcAndBankService_proto_depIdxs = []int32{
	35, // 0: BcAndBankService.QueryTxIDRsp.CreateAt:type_name -> google.protobuf.Timestamp
	6,  // 1: BcAndBankService.UploadChainOrganizations.uploadChainOrganization:type_name -> BcAndBankService.UploadChainOrganization
	4,  // 2: BcAndBankService.UploadChainOrganization.uploadChainType:type_name -> BcAndBankService.UploadChainType
	9,  // 3: BcAndBankService.UploadChainProjects.UploadChainProject:type_name -> BcAndBankService.UploadChainProject
	4,  // 4: BcAndBankService.UploadChainProject.uploadChainType:type_name -> BcAndBankService.UploadChainType
	35, // 5: BcAndBankService.UploadChainProject.startAt:type_name -> google.protobuf.Timestamp
	35, // 6: BcAndBankService.UploadChainProject.endAt:type_name -> google.protobuf.Timestamp
	7,  // 7: BcAndBankService.UploadChainProject.uploadDocumnet:type_name -> BcAndBankService.UploadDocumentInfo
	11, // 8: BcAndBankService.UploadChainProgressPlans.UploadChainProgressPlan:type_name -> BcAndBankService.UploadChainProgressPlan
	4,  // 9: BcAndBankService.UploadChainProgressPlan.uploadChainType:type_name -> BcAndBankService.UploadChainType
	35, // 10: BcAndBankService.UploadChainProgressPlan.startAt:type_name -> google.protobuf.Timestamp
	35, // 11: BcAndBankService.UploadChainProgressPlan.endAt:type_name -> google.protobuf.Timestamp
	35, // 12: BcAndBankService.UploadChainProgressPlan.actualDate:type_name -> google.protobuf.Timestamp
	7,  // 13: BcAndBankService.UploadChainProgressPlan.uploadDocumnet:type_name -> BcAndBankService.UploadDocumentInfo
	13, // 14: BcAndBankService.UploadChainProgressActuals.UploadChainProgressActual:type_name -> BcAndBankService.UploadChainProgressActual
	4,  // 15: BcAndBankService.UploadChainProgressActual.uploadChainType:type_name -> BcAndBankService.UploadChainType
	35, // 16: BcAndBankService.UploadChainProgressActual.actualDate:type_name -> google.protobuf.Timestamp
	7,  // 17: BcAndBankService.UploadChainProgressActual.uploadDocumnet:type_name -> BcAndBankService.UploadDocumentInfo
	15, // 18: BcAndBankService.UploadChainQualityInspections.UploadChainQualityInspection:type_name -> BcAndBankService.UploadChainQualityInspection
	4,  // 19: BcAndBankService.UploadChainQualityInspection.uploadChainType:type_name -> BcAndBankService.UploadChainType
	35, // 20: BcAndBankService.UploadChainQualityInspection.inspectionDate:type_name -> google.protobuf.Timestamp
	35, // 21: BcAndBankService.UploadChainQualityInspection.inspectionAt:type_name -> google.protobuf.Timestamp
	35, // 22: BcAndBankService.UploadChainQualityInspection.assignedDate:type_name -> google.protobuf.Timestamp
	7,  // 23: BcAndBankService.UploadChainQualityInspection.uploadDocumnet:type_name -> BcAndBankService.UploadDocumentInfo
	17, // 24: BcAndBankService.UploadChainQualityRectifies.UploadChainQualityRectify:type_name -> BcAndBankService.UploadChainQualityRectify
	4,  // 25: BcAndBankService.UploadChainQualityRectify.uploadChainType:type_name -> BcAndBankService.UploadChainType
	35, // 26: BcAndBankService.UploadChainQualityRectify.rectifyDeadline:type_name -> google.protobuf.Timestamp
	35, // 27: BcAndBankService.UploadChainQualityRectify.rectifyDeadlineWarn:type_name -> google.protobuf.Timestamp
	35, // 28: BcAndBankService.UploadChainQualityRectify.rectifyDate:type_name -> google.protobuf.Timestamp
	7,  // 29: BcAndBankService.UploadChainQualityRectify.uploadDocumnet:type_name -> BcAndBankService.UploadDocumentInfo
	19, // 30: BcAndBankService.UploadChainQualityReviews.UploadChainQualityReview:type_name -> BcAndBankService.UploadChainQualityReview
	4,  // 31: BcAndBankService.UploadChainQualityReview.uploadChainType:type_name -> BcAndBankService.UploadChainType
	35, // 32: BcAndBankService.UploadChainQualityReview.reviewDate:type_name -> google.protobuf.Timestamp
	7,  // 33: BcAndBankService.UploadChainQualityReview.uploadDocumnet:type_name -> BcAndBankService.UploadDocumentInfo
	21, // 34: BcAndBankService.UploadChainProcessApplies.uploadChainProcessApply:type_name -> BcAndBankService.UploadChainProcessApply
	4,  // 35: BcAndBankService.UploadChainProcessApply.uploadChainType:type_name -> BcAndBankService.UploadChainType
	35, // 36: BcAndBankService.UploadChainProcessApply.applyDate:type_name -> google.protobuf.Timestamp
	22, // 37: BcAndBankService.UploadChainProcessApply.uploadDocumnet:type_name -> BcAndBankService.DocumentInfoApply
	24, // 38: BcAndBankService.UploadChainProcessApproves.uploadChainProcessApprove:type_name -> BcAndBankService.UploadChainProcessApprove
	4,  // 39: BcAndBankService.UploadChainProcessApprove.uploadChainType:type_name -> BcAndBankService.UploadChainType
	35, // 40: BcAndBankService.UploadChainProcessApprove.applyDate:type_name -> google.protobuf.Timestamp
	35, // 41: BcAndBankService.UploadChainProcessApprove.approveAt:type_name -> google.protobuf.Timestamp
	22, // 42: BcAndBankService.UploadChainProcessApprove.uploadDocumnetApply:type_name -> BcAndBankService.DocumentInfoApply
	25, // 43: BcAndBankService.UploadChainProcessApprove.uploadDocumnetApprove:type_name -> BcAndBankService.DocumentInfoApprove
	27, // 44: BcAndBankService.UploadChainContracts.uploadChaincontract:type_name -> BcAndBankService.UploadChaincontract
	4,  // 45: BcAndBankService.UploadChaincontract.uploadChainType:type_name -> BcAndBankService.UploadChainType
	35, // 46: BcAndBankService.UploadChaincontract.start_at:type_name -> google.protobuf.Timestamp
	35, // 47: BcAndBankService.UploadChaincontract.end_at:type_name -> google.protobuf.Timestamp
	28, // 48: BcAndBankService.UploadChaincontract.uploadDocumnet:type_name -> BcAndBankService.DocumentInfo
	30, // 49: BcAndBankService.UploadChainInvoices.uploadChainInvoice:type_name -> BcAndBankService.UploadChainInvoice
	4,  // 50: BcAndBankService.UploadChainInvoice.uploadChainType:type_name -> BcAndBankService.UploadChainType
	35, // 51: BcAndBankService.UploadChainInvoice.invoicedDate:type_name -> google.protobuf.Timestamp
	32, // 52: BcAndBankService.UploadChainInvoiceReceiveds.uploadChainInvoiceReceived:type_name -> BcAndBankService.UploadChainInvoiceReceived
	4,  // 53: BcAndBankService.UploadChainInvoiceReceived.uploadChainType:type_name -> BcAndBankService.UploadChainType
	35, // 54: BcAndBankService.UploadChainInvoiceReceived.invoicedDate:type_name -> google.protobuf.Timestamp
	35, // 55: BcAndBankService.UploadChainInvoiceReceived.receiveAt:type_name -> google.protobuf.Timestamp
	34, // 56: BcAndBankService.UploadChainInvoicePaids.uploadChainInvoicePaid:type_name -> BcAndBankService.UploadChainInvoicePaid
	4,  // 57: BcAndBankService.UploadChainInvoicePaid.uploadChainType:type_name -> BcAndBankService.UploadChainType
	35, // 58: BcAndBankService.UploadChainInvoicePaid.invoicedDate:type_name -> google.protobuf.Timestamp
	35, // 59: BcAndBankService.UploadChainInvoicePaid.payAt:type_name -> google.protobuf.Timestamp
	0,  // 60: BcAndBankService.BcAndBankService.BcQueryByTxID:input_type -> BcAndBankService.QueryTxIDReq
	5,  // 61: BcAndBankService.BcAndBankService.BcUploadOrganizations:input_type -> BcAndBankService.UploadChainOrganizations
	8,  // 62: BcAndBankService.BcAndBankService.BcUploadProjects:input_type -> BcAndBankService.UploadChainProjects
	10, // 63: BcAndBankService.BcAndBankService.BcUploadProgressPlans:input_type -> BcAndBankService.UploadChainProgressPlans
	12, // 64: BcAndBankService.BcAndBankService.BcUploadProgressActuals:input_type -> BcAndBankService.UploadChainProgressActuals
	14, // 65: BcAndBankService.BcAndBankService.BcUploadQualityInspections:input_type -> BcAndBankService.UploadChainQualityInspections
	16, // 66: BcAndBankService.BcAndBankService.BcUploadQualityRectifies:input_type -> BcAndBankService.UploadChainQualityRectifies
	18, // 67: BcAndBankService.BcAndBankService.BcUploadQualityReviews:input_type -> BcAndBankService.UploadChainQualityReviews
	20, // 68: BcAndBankService.BcAndBankService.BcUploadProcessApply:input_type -> BcAndBankService.UploadChainProcessApplies
	23, // 69: BcAndBankService.BcAndBankService.BcUploadProcessApprove:input_type -> BcAndBankService.UploadChainProcessApproves
	26, // 70: BcAndBankService.BcAndBankService.BcUploadContract:input_type -> BcAndBankService.UploadChainContracts
	29, // 71: BcAndBankService.BcAndBankService.BcUploadInvoice:input_type -> BcAndBankService.UploadChainInvoices
	31, // 72: BcAndBankService.BcAndBankService.BcUploadInvoiceReceived:input_type -> BcAndBankService.UploadChainInvoiceReceiveds
	33, // 73: BcAndBankService.BcAndBankService.BcUploadInvoicePaid:input_type -> BcAndBankService.UploadChainInvoicePaids
	1,  // 74: BcAndBankService.BcAndBankService.BcQueryByTxID:output_type -> BcAndBankService.QueryTxIDRsp
	3,  // 75: BcAndBankService.BcAndBankService.BcUploadOrganizations:output_type -> BcAndBankService.BcResponses
	3,  // 76: BcAndBankService.BcAndBankService.BcUploadProjects:output_type -> BcAndBankService.BcResponses
	3,  // 77: BcAndBankService.BcAndBankService.BcUploadProgressPlans:output_type -> BcAndBankService.BcResponses
	3,  // 78: BcAndBankService.BcAndBankService.BcUploadProgressActuals:output_type -> BcAndBankService.BcResponses
	3,  // 79: BcAndBankService.BcAndBankService.BcUploadQualityInspections:output_type -> BcAndBankService.BcResponses
	3,  // 80: BcAndBankService.BcAndBankService.BcUploadQualityRectifies:output_type -> BcAndBankService.BcResponses
	3,  // 81: BcAndBankService.BcAndBankService.BcUploadQualityReviews:output_type -> BcAndBankService.BcResponses
	3,  // 82: BcAndBankService.BcAndBankService.BcUploadProcessApply:output_type -> BcAndBankService.BcResponses
	3,  // 83: BcAndBankService.BcAndBankService.BcUploadProcessApprove:output_type -> BcAndBankService.BcResponses
	3,  // 84: BcAndBankService.BcAndBankService.BcUploadContract:output_type -> BcAndBankService.BcResponses
	3,  // 85: BcAndBankService.BcAndBankService.BcUploadInvoice:output_type -> BcAndBankService.BcResponses
	3,  // 86: BcAndBankService.BcAndBankService.BcUploadInvoiceReceived:output_type -> BcAndBankService.BcResponses
	3,  // 87: BcAndBankService.BcAndBankService.BcUploadInvoicePaid:output_type -> BcAndBankService.BcResponses
	74, // [74:88] is the sub-list for method output_type
	60, // [60:74] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_BcAndBankService_proto_init() }
func file_BcAndBankService_proto_init() {
	if File_BcAndBankService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_BcAndBankService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTxIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTxIDRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BcResponses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainOrganizations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainOrganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadDocumentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainProjects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainProgressPlans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainProgressPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainProgressActuals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainProgressActual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainQualityInspections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainQualityInspection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainQualityRectifies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainQualityRectify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainQualityReviews); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainQualityReview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainProcessApplies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainProcessApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentInfoApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainProcessApproves); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainProcessApprove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentInfoApprove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainContracts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChaincontract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainInvoices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainInvoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainInvoiceReceiveds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainInvoiceReceived); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainInvoicePaids); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainInvoicePaid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_BcAndBankService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_BcAndBankService_proto_goTypes,
		DependencyIndexes: file_BcAndBankService_proto_depIdxs,
		MessageInfos:      file_BcAndBankService_proto_msgTypes,
	}.Build()
	File_BcAndBankService_proto = out.File
	file_BcAndBankService_proto_rawDesc = nil
	file_BcAndBankService_proto_goTypes = nil
	file_BcAndBankService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BcAndBankServiceClient is the client API for BcAndBankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BcAndBankServiceClient interface {
	// 根据 txID 查询 链上交易, 返回 解密后的 json.Marshal 字符串
	BcQueryByTxID(ctx context.Context, in *QueryTxIDReq, opts ...grpc.CallOption) (*QueryTxIDRsp, error)
	// 组织单位上链
	BcUploadOrganizations(ctx context.Context, in *UploadChainOrganizations, opts ...grpc.CallOption) (*BcResponses, error)
	// 项目信息上链
	BcUploadProjects(ctx context.Context, in *UploadChainProjects, opts ...grpc.CallOption) (*BcResponses, error)
	// 进度计划上链
	BcUploadProgressPlans(ctx context.Context, in *UploadChainProgressPlans, opts ...grpc.CallOption) (*BcResponses, error)
	// 实际进度上链
	BcUploadProgressActuals(ctx context.Context, in *UploadChainProgressActuals, opts ...grpc.CallOption) (*BcResponses, error)
	// 质量巡检信息上链
	BcUploadQualityInspections(ctx context.Context, in *UploadChainQualityInspections, opts ...grpc.CallOption) (*BcResponses, error)
	// 质量巡检整改信息上链
	BcUploadQualityRectifies(ctx context.Context, in *UploadChainQualityRectifies, opts ...grpc.CallOption) (*BcResponses, error)
	// 质量巡检复检信息上链
	BcUploadQualityReviews(ctx context.Context, in *UploadChainQualityReviews, opts ...grpc.CallOption) (*BcResponses, error)
	// 流程申请上链
	BcUploadProcessApply(ctx context.Context, in *UploadChainProcessApplies, opts ...grpc.CallOption) (*BcResponses, error)
	//流程审批上链
	BcUploadProcessApprove(ctx context.Context, in *UploadChainProcessApproves, opts ...grpc.CallOption) (*BcResponses, error)
	//合同上链
	BcUploadContract(ctx context.Context, in *UploadChainContracts, opts ...grpc.CallOption) (*BcResponses, error)
	//发票上链操作
	BcUploadInvoice(ctx context.Context, in *UploadChainInvoices, opts ...grpc.CallOption) (*BcResponses, error)
	BcUploadInvoiceReceived(ctx context.Context, in *UploadChainInvoiceReceiveds, opts ...grpc.CallOption) (*BcResponses, error)
	BcUploadInvoicePaid(ctx context.Context, in *UploadChainInvoicePaids, opts ...grpc.CallOption) (*BcResponses, error)
}

type bcAndBankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBcAndBankServiceClient(cc grpc.ClientConnInterface) BcAndBankServiceClient {
	return &bcAndBankServiceClient{cc}
}

func (c *bcAndBankServiceClient) BcQueryByTxID(ctx context.Context, in *QueryTxIDReq, opts ...grpc.CallOption) (*QueryTxIDRsp, error) {
	out := new(QueryTxIDRsp)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcQueryByTxID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadOrganizations(ctx context.Context, in *UploadChainOrganizations, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadProjects(ctx context.Context, in *UploadChainProjects, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadProgressPlans(ctx context.Context, in *UploadChainProgressPlans, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadProgressPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadProgressActuals(ctx context.Context, in *UploadChainProgressActuals, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadProgressActuals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadQualityInspections(ctx context.Context, in *UploadChainQualityInspections, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadQualityInspections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadQualityRectifies(ctx context.Context, in *UploadChainQualityRectifies, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadQualityRectifies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadQualityReviews(ctx context.Context, in *UploadChainQualityReviews, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadQualityReviews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadProcessApply(ctx context.Context, in *UploadChainProcessApplies, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadProcessApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadProcessApprove(ctx context.Context, in *UploadChainProcessApproves, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadProcessApprove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadContract(ctx context.Context, in *UploadChainContracts, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadInvoice(ctx context.Context, in *UploadChainInvoices, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadInvoiceReceived(ctx context.Context, in *UploadChainInvoiceReceiveds, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadInvoiceReceived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadInvoicePaid(ctx context.Context, in *UploadChainInvoicePaids, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadInvoicePaid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BcAndBankServiceServer is the server API for BcAndBankService service.
type BcAndBankServiceServer interface {
	// 根据 txID 查询 链上交易, 返回 解密后的 json.Marshal 字符串
	BcQueryByTxID(context.Context, *QueryTxIDReq) (*QueryTxIDRsp, error)
	// 组织单位上链
	BcUploadOrganizations(context.Context, *UploadChainOrganizations) (*BcResponses, error)
	// 项目信息上链
	BcUploadProjects(context.Context, *UploadChainProjects) (*BcResponses, error)
	// 进度计划上链
	BcUploadProgressPlans(context.Context, *UploadChainProgressPlans) (*BcResponses, error)
	// 实际进度上链
	BcUploadProgressActuals(context.Context, *UploadChainProgressActuals) (*BcResponses, error)
	// 质量巡检信息上链
	BcUploadQualityInspections(context.Context, *UploadChainQualityInspections) (*BcResponses, error)
	// 质量巡检整改信息上链
	BcUploadQualityRectifies(context.Context, *UploadChainQualityRectifies) (*BcResponses, error)
	// 质量巡检复检信息上链
	BcUploadQualityReviews(context.Context, *UploadChainQualityReviews) (*BcResponses, error)
	// 流程申请上链
	BcUploadProcessApply(context.Context, *UploadChainProcessApplies) (*BcResponses, error)
	//流程审批上链
	BcUploadProcessApprove(context.Context, *UploadChainProcessApproves) (*BcResponses, error)
	//合同上链
	BcUploadContract(context.Context, *UploadChainContracts) (*BcResponses, error)
	//发票上链操作
	BcUploadInvoice(context.Context, *UploadChainInvoices) (*BcResponses, error)
	BcUploadInvoiceReceived(context.Context, *UploadChainInvoiceReceiveds) (*BcResponses, error)
	BcUploadInvoicePaid(context.Context, *UploadChainInvoicePaids) (*BcResponses, error)
}

// UnimplementedBcAndBankServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBcAndBankServiceServer struct {
}

func (*UnimplementedBcAndBankServiceServer) BcQueryByTxID(context.Context, *QueryTxIDReq) (*QueryTxIDRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcQueryByTxID not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadOrganizations(context.Context, *UploadChainOrganizations) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadOrganizations not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadProjects(context.Context, *UploadChainProjects) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadProjects not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadProgressPlans(context.Context, *UploadChainProgressPlans) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadProgressPlans not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadProgressActuals(context.Context, *UploadChainProgressActuals) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadProgressActuals not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadQualityInspections(context.Context, *UploadChainQualityInspections) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadQualityInspections not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadQualityRectifies(context.Context, *UploadChainQualityRectifies) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadQualityRectifies not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadQualityReviews(context.Context, *UploadChainQualityReviews) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadQualityReviews not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadProcessApply(context.Context, *UploadChainProcessApplies) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadProcessApply not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadProcessApprove(context.Context, *UploadChainProcessApproves) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadProcessApprove not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadContract(context.Context, *UploadChainContracts) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadContract not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadInvoice(context.Context, *UploadChainInvoices) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadInvoice not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadInvoiceReceived(context.Context, *UploadChainInvoiceReceiveds) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadInvoiceReceived not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadInvoicePaid(context.Context, *UploadChainInvoicePaids) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadInvoicePaid not implemented")
}

func RegisterBcAndBankServiceServer(s *grpc.Server, srv BcAndBankServiceServer) {
	s.RegisterService(&_BcAndBankService_serviceDesc, srv)
}

func _BcAndBankService_BcQueryByTxID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTxIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcQueryByTxID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcQueryByTxID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcQueryByTxID(ctx, req.(*QueryTxIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainOrganizations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadOrganizations(ctx, req.(*UploadChainOrganizations))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainProjects)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadProjects(ctx, req.(*UploadChainProjects))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadProgressPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainProgressPlans)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadProgressPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadProgressPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadProgressPlans(ctx, req.(*UploadChainProgressPlans))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadProgressActuals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainProgressActuals)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadProgressActuals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadProgressActuals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadProgressActuals(ctx, req.(*UploadChainProgressActuals))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadQualityInspections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainQualityInspections)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadQualityInspections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadQualityInspections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadQualityInspections(ctx, req.(*UploadChainQualityInspections))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadQualityRectifies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainQualityRectifies)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadQualityRectifies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadQualityRectifies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadQualityRectifies(ctx, req.(*UploadChainQualityRectifies))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadQualityReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainQualityReviews)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadQualityReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadQualityReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadQualityReviews(ctx, req.(*UploadChainQualityReviews))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadProcessApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainProcessApplies)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadProcessApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadProcessApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadProcessApply(ctx, req.(*UploadChainProcessApplies))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadProcessApprove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainProcessApproves)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadProcessApprove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadProcessApprove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadProcessApprove(ctx, req.(*UploadChainProcessApproves))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainContracts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadContract(ctx, req.(*UploadChainContracts))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainInvoices)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadInvoice(ctx, req.(*UploadChainInvoices))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadInvoiceReceived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainInvoiceReceiveds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadInvoiceReceived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadInvoiceReceived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadInvoiceReceived(ctx, req.(*UploadChainInvoiceReceiveds))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadInvoicePaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainInvoicePaids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadInvoicePaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadInvoicePaid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadInvoicePaid(ctx, req.(*UploadChainInvoicePaids))
	}
	return interceptor(ctx, in, info, handler)
}

var _BcAndBankService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BcAndBankService.BcAndBankService",
	HandlerType: (*BcAndBankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BcQueryByTxID",
			Handler:    _BcAndBankService_BcQueryByTxID_Handler,
		},
		{
			MethodName: "BcUploadOrganizations",
			Handler:    _BcAndBankService_BcUploadOrganizations_Handler,
		},
		{
			MethodName: "BcUploadProjects",
			Handler:    _BcAndBankService_BcUploadProjects_Handler,
		},
		{
			MethodName: "BcUploadProgressPlans",
			Handler:    _BcAndBankService_BcUploadProgressPlans_Handler,
		},
		{
			MethodName: "BcUploadProgressActuals",
			Handler:    _BcAndBankService_BcUploadProgressActuals_Handler,
		},
		{
			MethodName: "BcUploadQualityInspections",
			Handler:    _BcAndBankService_BcUploadQualityInspections_Handler,
		},
		{
			MethodName: "BcUploadQualityRectifies",
			Handler:    _BcAndBankService_BcUploadQualityRectifies_Handler,
		},
		{
			MethodName: "BcUploadQualityReviews",
			Handler:    _BcAndBankService_BcUploadQualityReviews_Handler,
		},
		{
			MethodName: "BcUploadProcessApply",
			Handler:    _BcAndBankService_BcUploadProcessApply_Handler,
		},
		{
			MethodName: "BcUploadProcessApprove",
			Handler:    _BcAndBankService_BcUploadProcessApprove_Handler,
		},
		{
			MethodName: "BcUploadContract",
			Handler:    _BcAndBankService_BcUploadContract_Handler,
		},
		{
			MethodName: "BcUploadInvoice",
			Handler:    _BcAndBankService_BcUploadInvoice_Handler,
		},
		{
			MethodName: "BcUploadInvoiceReceived",
			Handler:    _BcAndBankService_BcUploadInvoiceReceived_Handler,
		},
		{
			MethodName: "BcUploadInvoicePaid",
			Handler:    _BcAndBankService_BcUploadInvoicePaid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "BcAndBankService.proto",
}
