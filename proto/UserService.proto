syntax = "proto3";

package UserService;
option go_package = "service/UserService;UserService";

import public "google/protobuf/timestamp.proto";

message Page {
  int64 pageNumber = 1;
  int64 pageSize = 2;
}

message UserPassLoginReq {
  string password = 1;
  string username = 2;
  string platFormType = 3;
}

message OauthTokenReq {
  string clientId = 1;
  string clientSecret = 2;
  string grantType = 3;
  string refreshToken = 4;
  string organizationType = 5;
}
message OauthTokenResp {
  string accessToken = 1;
  string tokenType = 2;
  int64 expiresIn = 3;
  string refreshToken = 4;
  string organizationCode = 5;
  int64 organizationId = 6;
  string organizationType = 7;
  repeated PermissionInfo permissions = 8;
}
message UserPassLoginResp {
  int64 userId = 1;
  string username = 2;
  string nickname = 3;
  string email = 4;
  string role = 5;
  int64 organizationId = 6;
  repeated PermissionInfo permissions = 7;
  string activeStatus = 8;
  string roleName = 9;
}

message PermissionInfo {
  string permission = 1;
  string permissionUrl = 2;
}

message CreateUserReq {
  string username = 1;
  string userPhone = 2;
  string password = 3;
  string role = 4;
  string nickname = 5;
  int64 organizationId = 6;
  string accountStatus = 7;
  int64 managerId = 8;
  string email = 9;
}

message CreateUserResp {
  int64 userId = 1;
}

message UpdateUserReq {
  int64 userId = 1;
  string userPhone = 2;
  string password = 3;
  string role = 4;
  string nickname = 5;
  string accountStatus = 6;
  int64 managerId = 7;
  string email = 8;
  string activeStatus = 9;
}

message UpdateUserResp {
  string platFormType = 1;
}

message ListUserReq {
  int64 roleId = 1;
  string nickname = 2;
  string hospitalName = 3;
  string companyName = 4;
  int64 organizationId = 5;
  string platFormType = 6;
  int64 managerId = 7;
  Page page = 8;
  string email = 9;
  string username = 10;
  string accountStatus = 11;
  string activeStatus = 12;
  string userPhone = 13;
}

message ListUserResp {
  repeated UserDetail list = 1;
  int64 total = 2;
  int64 pageSize = 3;
  int64 pageNumber = 4;
}

message UserDetail {
  int64 userId = 1;
  string username = 2;
  string role = 3;
  string platFormType = 4;
  string userPhone = 5;
  string nickname = 6;
  int64 organizationId = 7;
  string organizationName = 8;
  google.protobuf.Timestamp createdAt = 9;
  string email = 10;
  string roleName = 11;
  string activeStatus = 12;
  string accountStatus = 13;
}

message ListRoleReq {
  Page page = 1;
  string platFormType = 2;
}

message ListRoleResp {
  repeated RoleDetail list = 1;
  int64 total = 2;
  int64 pageSize = 3;
  int64 pageNumber = 4;
}

message RoleDetail {
  int64 roleId = 1;
  string role = 2;
  string roleName = 3;
  string platFormType = 4;
  string roleStatus = 5;
  google.protobuf.Timestamp createdAt = 6;
}

message DeleteUserReq {
  int64 userId = 1;
  int64 managerId = 2;
}

message DeleteUserResp {
  int64 userId = 1;
}

message UserInfoReq {
  int64 userId = 1;
  int64 managerId = 2;
}

message CreateOauthAccountReq {
  int64 organizationId = 1;
  string organizationType = 2;
  int64 mibId = 3;
  int64 managerId = 4;
}
message CreateOauthAccountResp {
  string clientId = 1;
  string clientSecret = 2;
}
message ResetOauthAccountReq {
  string clientId = 1;
  int64 organizationId = 2;
  int64 mibId = 3;
  int64 managerId = 4;
  string organizationType = 5;
}
message GetOauthAccountReq {
  int64 organizationId = 1;
  string organizationType = 2;
  int64 mibId = 3;
  int64 managerId = 4;
  //也可以直接指定clientId
  string clientId = 5;
}

message GetOauthAccountResp {
  string accessToken = 1;
  string tokenType = 2;
  int64 expiresIn = 3;
  string refreshToken = 4;
  string organizationCode = 5;
  int64 organizationId = 6;
  repeated PermissionInfo permissions = 7;
  string organizationType = 8;
  int64 mibId = 9;
  string clientId = 10;
  google.protobuf.Timestamp tokenExpire = 11;
  google.protobuf.Timestamp refreshTokenExpire = 12;
}
message GetOauthTokenReq {
  string clientId = 1;
  string accessToken = 2;
  string organizationType = 3;
}

message BindOauthPermissionReq {
  int64 organizationId = 1;
  string organizationType = 2;
  int64 mibId = 3;
  int64 managerId = 4;
  repeated string permissions = 5;
}
service UserService {
  rpc PassLogin(UserPassLoginReq) returns (UserPassLoginResp);
  rpc OauthToken(OauthTokenReq) returns (OauthTokenResp);
  rpc GetOauthToken(GetOauthTokenReq) returns (OauthTokenResp);
  rpc CreateOauthAccount(CreateOauthAccountReq) returns (CreateOauthAccountResp);
  //重置oauth 的secret
  rpc ResetOauthAccountSecret(ResetOauthAccountReq) returns (CreateOauthAccountResp);
  //获取某个指定平台组织的oauth账号信息
  rpc GetOauthAccount(GetOauthAccountReq) returns (GetOauthAccountResp);
  rpc BindOauthPermission(BindOauthPermissionReq) returns (OauthTokenResp);

  rpc CreateUser(CreateUserReq) returns (CreateUserResp);
  rpc UpdateUser(UpdateUserReq) returns (UpdateUserResp);
  rpc ListUser(ListUserReq) returns (ListUserResp);
  rpc ListRole(ListRoleReq) returns (ListRoleResp);
  rpc DeleteUser(DeleteUserReq) returns (DeleteUserResp);
  rpc UserInfo(UserInfoReq) returns (UserDetail);
}